{ "name": "AvatarGroup",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin",
      "$w.Element" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "AvatarGroup.js" },
  "docs":
    { "summary": "An avatar group for the Blocks widget.",
      "description":
        [ "> **Important**:  ",
          "> This element is available only in Wix Blocks. [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is an editor for building Wix apps.",
          "",
          "An avatar group holds several avatars. It can be used, for example, to present: ",
          "- A list of guests arriving to an event",
          "- A list of forum members",
          "- A list of blog authors",
          "- A list of attendees in a class or course",
          "",
          "![AvatarGroup](../assets/images/avatar-group-example.png)" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "avatarSize",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 27,
              "filename": "AvatarGroup.js" },
            { "lineno": 43,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the size of the avatars in the avatar group.",
            "description":
              [ "Setting the `avatarSize` property defines the size of each of the avatars in the avatar group.",
                "",
                "Minimum length: 10px ",
                "Maximum length: 200px" ],
            "links": [],
            "examples":
              [ { "title": "Get the size of avatars in the avatar group",
                  "body":
                    [ "let size = $w(\"#myAvatarGroup\").avatarSize;  // 48" ],
                  "extra":
                    {  } },
                { "title": "Set the size of avatars in the avatar group",
                  "body":
                    [ "$w(\"#myAvatarGroup\").avatarSize = 48;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "avatars",
        "labels":
          [ "new" ],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Avatar" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 93,
              "filename": "AvatarGroup.js" },
            { "lineno": 123,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets a list of avatars to contain in the avatar group.",
            "description":
              [ "Setting the `avatars` property sets all the avatars available in the avatar group.",
                "",
                " Getting the `avatars` property returns the current list of avatars available in the avatar group.",
                "",
                "Each avatar contains a either an image or initials, which is what the site visitor sees.",
                "",
                "You can't modify the `avatars` data array in-place. To add, change, or remove",
                "individual avatars:",
                "",
                "   1. Store the value of the `avatars` property in a variable.",
                "   1. Make changes to the array.",
                "   1. Reset the `avatars` property with the modified array.",
                "",
                "",
                " > **Note:** Setting the `avatars` property clears the [`values`](#value) that don't match the new `avatars`." ],
            "links": [],
            "examples":
              [ { "title": "Get the avatars of an avatar group",
                  "body":
                    [ "let avatarsInGroup = $w(\"#myAvatarGroup\").avatars;",
                      "",
                      "let firstAvatarFirstName = avatarsInGroup[0].firstName;  ",
                      "let firstAvatarLastName = avatarsInGroup[0].lastName;" ],
                  "extra":
                    {  } },
                { "title": "Set the avatars of an avatar group",
                  "body":
                    [ "$w(\"#myAvatarGroup\").avatars = [",
                      "  { firstName: 'Lindsey', lastName: 'Kahn', src: 'https://img.com' },",
                      "  { firstName: 'Maurice', src:'https://img.com' },",
                      "  { firstName: 'Marta', lastName: 'Santora' }",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an avatar to the existing avatar group",
                  "body":
                    [ "let avatarGroupAvatars = $w(\"#myAvatarGroup\").avatars;",
                      "avatarGroupAvatars.push({\"firstName\": \"Olive\", \"lastName\": \"Brown\"});",
                      "$w(\"#myAvatarGroup\").avatars = avatarGroupAvatars;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the avatars of an avatar group, adds a new avatar, and then overwrites the old avatars." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "divider",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 251,
              "filename": "AvatarGroup.js" },
            { "lineno": 267,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"LONG\"`",
                "* `\"SHORT\"`",
                "* `\"NONE\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's divider type",
                  "body":
                    [ "let divider = $w(\"#myElement\").divider;  // \"NONE\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's divider type",
                  "body":
                    [ "$w(\"#myElement\").divider = \"NONE\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lastName",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 94,
              "filename": "AvatarGroup.js" },
            { "lineno": 106,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the last name for the avatarGroup.",
            "description":
              [ "The last name for the avatarGroup." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxAvatars",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 50,
              "filename": "AvatarGroup.js" },
            { "lineno": 63,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum number of avatars to display in the `avatarGroup` element.",
            "links": [],
            "examples":
              [ { "title": "Get the maximum number of avatars for the group",
                  "body":
                    [ "let max = $w(\"#myAvatarGroup\").maxAvatars;  // 5" ],
                  "extra":
                    {  } },
                { "title": "Set the maximum number of avatars for the group",
                  "body":
                    [ "$w(\"#myAvatarGroup\").maxAvatars = 10;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "rel",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 138,
              "filename": "AvatarGroup.js" },
            { "lineno": 174,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the relationship between the page containing the panel button \nlink and the target page.",
            "description":
              [ "The panel button's `rel` property provides additional context to search engines ",
                "and browsers about how they should treat the link, influencing SEO, security, and ",
                "other link behavior. ",
                "",
                " Supported values:",
                " ",
                " + `'noopener'`: Prevents the target page from accessing the source page with the",
                "[`window.opener`](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener) property, ",
                "reducing the risk of malicious code. ",
                " + `'noreferrer'`: Prevents the browser from sending referrer information, such as the URL of ",
                "the source page, to the target page. This enhances user privacy by ensuring the target page can't ",
                "track the origin of the visit.",
                " + `'nofollow'`: Tells search engines not to pass SEO link equity to the target page. This helps ",
                "prevent the manipulation of search rankings and maintains the integrity of your site's SEO.",
                " + `'sponsored'`: Indicates that the link is part of a paid or promotional arrangement, ",
                "ensuring transparency and compliance with search engine guidelines.",
                "",
                " Panel buttons can have multiple `rel` values as a single string with each value separated by a space. ",
                "For example, `'nofollow sponsored'`. ",
                "",
                " The default value for external web links (starting with `http://` and `https://`) is `'noopener'`." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showHiddenAvatarCount",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "true",
        "locations":
          [ { "lineno": 69,
              "filename": "AvatarGroup.js" },
            { "lineno": 86,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Whether to display the count of hidden avatars in the group.",
            "description":
              [ "If `showHiddenAvatarCount` is `true`, the count of hidden avatars in the group is displayed.",
                "",
                " If `showHiddenAvatarCount` is `false`, the count of hidden avatars in the group isn't displayed." ],
            "links": [],
            "examples":
              [ { "title": "Get whether hidden avatars are displayed",
                  "body":
                    [ "let hiddenCount = $w(\"#myAvatarGroup\").showHiddenAvatarCount;  // 5" ],
                  "extra":
                    {  } },
                { "title": "Set hidden avatars to be displayed",
                  "body":
                    [ "$w(\"#myAvatarGroup\").showHiddenAvatarCount = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "size",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 210,
              "filename": "AvatarGroup.js" },
            { "lineno": 226,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the button's size.",
            "description":
              [ "The size can be:",
                "* `\"SMALL\"`",
                "* `\"MEDIUM\"`",
                "* `\"LARGE\"`" ],
            "links": [],
            "examples":
              [ { "title": "Set a button's size",
                  "body":
                    [ "$w(\"#myAvatarGroup\").avatarSize = 48;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skin",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 180,
              "filename": "AvatarGroup.js" },
            { "lineno": 204,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the button's skin.",
            "description":
              [ "The skin can be:",
                "* `\"STANDARD\"`",
                "* `\"STANDARD_SECONDARY\"`",
                "* `\"PREMIUM\"`",
                "* `\"PREMIUM_SECONDARY\"`",
                "* `\"ALERT\"`",
                "* `\"ALERT_SECONDARY\"`",
                "* `\"INVERTED\"`",
                "Primary (as opposed to secondary) buttons are for main actions.  ",
                "Red alert buttons are for destructive actions like \"Delete\".  ",
                "Purple premium buttons are for upgrade actions.  ",
                "To view the different skin options, change the type of your panel button in the Blocks panel builder." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "src",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "An empty string",
        "locations":
          [ { "lineno": 113,
              "filename": "AvatarGroup.js" },
            { "lineno": 132,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the URL of the avatarGroup's image.",
            "description":
              [ "If the image fails to load, the avatarGroup defaults to the initials of the ",
                " person represented by the avatarGroup. ",
                "",
                " Sample `src` property: `https://img.freepik.com/free-vector/businessman-character-avatarGroup-isolated_24877-60111.jpg`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stretched",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 234,
              "filename": "AvatarGroup.js" },
            { "lineno": 245,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Sets or gets whether the button is stretched to the full width of the panel.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onClick",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is clicked." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 273,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element is clicked.",
            "description":
              [ "An element receives a `click` event when a user clicks on the element",
                " and releases." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "icon",
        "locations":
          [ { "lineno": 291,
              "filename": "AvatarGroup.js" } ],
        "docs":
          { "summary": "An object representing an SVG icon.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "svgId",
              "type": "string",
              "doc": "An SVG element" } ],
        "extra":
          {  },
        "labels":
          [ "removed" ] } ],
  "extra":
    { "queryable": true } }