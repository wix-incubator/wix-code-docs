{ "name": "Checkout",
  "memberOf": "wix-pricing-plans-backend",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "checkout.js" },
  "docs":
    { "summary": "The Pricing Plans Checkout API contains functionality for ordering and checking out\n your site's pricing plan [orders](https://support.wix.com/en/article/pricing-plans-an-overview).",
      "description":
        [ "Use the Pricing Plans Checkout API to create online and offline orders for your pricing plans. The Pricing Plans",
          " Checkout API provides functionality for creating orders created in the Wix Pricing Plans app ",
          " or using this Wix Pricing Plans API.",
          "",
          " > **Note:**",
          " > As part of our Velo rebranding efforts, we have improved plan ordering and purchasing functionality",
          "   in our Pricing Plans APIs. The Pricing Plans APIs replace the deprecated Paid Plans APIs.",
          " > The deprecated APIs will continue to work, but they will not receive updates.",
          " > To keep any existing code compatible with future changes, see the",
          " > migration instructions for each function.",
          "",
          " ### Setting Up Pricing Plans",
          "",
          " To use APIs for checking out orders, first set up your site to:",
          "",
          " + Accept payments as described in [About Accepting Payments](https://support.wix.com/en/article/about-accepting-payments).",
          "",
          " + Offer membership plans as described in [About Pricing Plans](https://support.wix.com/en/article/about-pricing-plans). When setting up your site to accept pricing plans, ",
          "   define the plans you want to offer [using the Dashboard](https://support.wix.com/en/article/creating-a-plan-in-pricing-plans) or",
          "   [using the Pricing Plan APIs](wix-pricing-plans/introduction).",
          "",
          "",
          " ### Checking Out Pricing Plans",
          "",
          " Use the Checkout APIs to start creating  ",
          " orders and facilitating payment. ",
          "",
          " With the Checkout API, you can: ",
          " + Start creating both offline and online orders, and facilitate their payment.",
          " + Preview orders and their pricing. ",
          " + Change the start date for the order (until the order is paid for). ",
          " ",
          " Updating the properties of a pricing plan does not affect any current purchases of the plan by members. The purchases retain",
          " their existing terms and pricing.",
          "",
          " Members can order pricing plans in 2 ways:",
          " + **Online**. Members order and pay for their plans",
          "   on your site without manual intervention. ",
          " + **Offline**. Members place their order by phone, text, or email. You ",
          "   manually record each stage of the transaction.",
          "",
          " ### Drafts",
          "",
          " Online orders are considered drafts until they are paid for. Drafts are not listed",
          " in the Subscriptions dashboard page and are not saved in the `Orders` collection. Drafts",
          " are displayed when listing orders with the [`listOrders()`](#listOrders) function. ",
          "",
          " Offline orders are never considered drafts even if they are not yet paid for. Unlike ",
          " online orders, offline orders are immediately listed",
          " in the Subscriptions dashboard page and saved in the `Orders` collection.  ",
          "",
          " ### Plans and Subscriptions",
          " ",
          " Actions related to basic pricing plan management are available from the [Pricing Plans](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmembership%3FreferralInfo%3Dvelo-docs)",
          " page in the Dashboard. These actions correspond to the functions available in the [Pricing Plans APIs](wix-pricing-plans-backend/introduction).",
          "",
          " Every pricing plan order corresponds to a Wix subscription, including orders for single payment plans. You can see all orders from your site's",
          " [Subscriptions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fsubscriptions%3FreferralInfo%3Dvelo-docs)",
          " page in the Dashboard. Actions available on this page correspond to the functions available in the [Orders APIs](wix-pricing-plans-backend/orders/introduction) and the [Checkout APIs](wix-pricing-plans-backend/checkout/introduction).",
          "",
          " > **Notes**: ",
          " >",
          " > + Wix pricing plans are 1 type of Wix subscriptions available from the Subscriptions page. For example, the Subscriptions page also includes Wix Stores subscriptions and Wix invoice subscriptions.",
          " >",
          " > + Pricing plans can be 1 of 3 different pricing models: `singlePaymentForDuration`, `singlePaymentUnlimited`, and `subscription.` Orders for all pricing plan models are displayed ",
          "     on the Subscriptions page (not just `subscription`).  ",
          "",
          "",
          " ### Roles and Permissions",
          "",
          " You need \"Manage Pricing Plans\" and \"Manage Subscriptions\" [permissions](https://support.wix.com/en/article/roles-permissions-accessing-roles-permissions) to perform ",
          " plan checkout functions. ",
          " Other functions do not require permissions but login is required. ",
          "",
          "",
          " ### Importing the APIs",
          "",
          " To use the Checkout API, import `checkout` from the `wix-pricing-plans-backend` module.",
          "",
          "   ```javascript",
          "   import {checkout} from 'wix-pricing-plans-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "changeStartDate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "Draft order ID." },
            { "name": "startDate",
              "type": "Date",
              "doc": "Date at which the order will become active. The `startDate` is in timestamp format, \n which is the UTC date-time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)) format. \n If a timezone offset is specified, the time is converted to UTC. For example, if you \n specify `new Date('2021-01-06T16:00:00.000-07:00')`, the stored value will be `\"2021-01-06T23:00:00.000Z\"`." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Orders.Order" ] },
            "doc": "Fulfilled - The order of the plan." },
        "locations":
          [ { "lineno": 101,
              "filename": "checkout.js" } ],
        "docs":
          { "summary": "Change the start date of a draft order.",
            "description":
              [ "The `changeStartDate()` function returns a promise that resolves to a draft of the `Order` ",
                " object with an updated `startDate`.",
                "",
                " This function cannot be called on paid orders. When an order is paid for, it is no longer",
                " considered a draft and its start date cannot be changed.",
                "",
                " The [`onOrderStartDateChanged()`](wix-pricing-plans-backend/events/onOrderStartDateChanged) and [`onOrderUpdated()`](wix-pricing-plans-backend/events/onOrderUpdated) event handlers run when the start date of an order is changed.",
                "",
                " The member must be logged in to change the start date of their order. Members cannot change the start date of other members' orders." ],
            "links":
              [ "[onOrderStartDateChanged( )](wix-pricing-plans-backend/events/onOrderStartDateChanged)",
                "[onOrderUpdated( )](wix-pricing-plans-backend/events/onOrderUpdated)" ],
            "examples":
              [ { "title": "Change the start date of a draft order",
                  "body":
                    [ "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myChangeStartDateFunction() {",
                      "",
                      "  const orderId = '4d771642-2e36-4078-a294-105649e1ed05';",
                      "  const startDate = new Date('September 19, 2021 10:00:00');",
                      "",
                      "  return checkout.changeStartDate(orderId, startDate)",
                      "    .then((draft) => {",
                      "      const orderPlan = draft.planName;",
                      "      const orderStatus = draft.status;",
                      "      const orderStart = draft.startDate;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * {",
                      " *   \"_id\": \"4d771642-2e36-4078-a294-105649e1ed05\",",
                      " *   \"planId\": \"5cfdba28-283f-4859-98f8-ebb7af542d41\",",
                      " *   \"subscriptionId\": \"0a0304bc-7aae-474c-a2b5-81e3e7925c24\",",
                      " *   \"wixPayOrderId\": \"cd5e42ba-5de4-4ba1-b2e3-410cd46dde60\",",
                      " *   \"buyer\": {",
                      " *     \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *     \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *   },",
                      " *   \"priceDetails\": {",
                      " *     \"subtotal\": \"25\",",
                      " *     \"total\": \"25\",",
                      " *     \"planPrice\": \"25\",",
                      " *     \"currency\": \"USD\",",
                      " *     \"singlePaymentForDuration\": {",
                      " *       \"count\": 6,",
                      " *       \"unit\": \"MONTH\"",
                      " *     }",
                      " *   },",
                      " *   \"type\": \"ONLINE\",",
                      " *   \"status\": \"DRAFT\",",
                      " *   \"lastPaymentStatus\": \"UNPAID\",",
                      " *   \"startDate\": \"2021-09-19T10:00:00.000Z\",",
                      " *   \"endDate\": \"2022-03-19T10:00:00.000Z\",",
                      " *   \"pausePeriods\": [],",
                      " *   \"planName\": \"Vegetarian Cooking\",",
                      " *   \"planDescription\": \"Weekly delivery of vegetarian recipes and vegan recipes\",",
                      " *   \"_createdDate\": \"2021-08-26T16:32:20.808Z\",",
                      " *   \"_updatedDate\": \"2021-08-27T14:53:10.084Z\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "createOfflineOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "planId",
              "type": "string",
              "doc": "ID of the plan being ordered." },
            { "name": "buyerId",
              "type": "string",
              "doc": "Member ID for the buyer." },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Checkout.CreateOfflineOrderInfo",
              "doc": "Additional options for creating the offline order.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Orders.Order" ] },
            "doc": "Fulfilled - The order of the plan." },
        "locations":
          [ { "lineno": 134,
              "filename": "checkout.js" } ],
        "docs":
          { "summary": "Orders a plan for a buyer who bought the plan with an offline transaction.",
            "description":
              [ "The `createOfflineOrder()` function returns a Promise that resolves to an `Order` object when the ",
                " order has been created. ",
                " ",
                " > **Note:**",
                " > The pricing plan `createOnlineOrder()` and the `createOfflineOrder()` APIs ",
                " > replace the deprecated paid plans `orderPlan()` API.",
                " > The deprecated API will continue to work, but will not receive updates.",
                " > To keep any existing code compatible with future changes, see the",
                " > [migration instructions](wix-paid-plans/orderplan#migration-instructions).",
                "",
                "",
                " Payment of an offline order is handled in 1 of 2 ways: ",
                " + Specifying `options` while creating the offline order. You can specify a `\"PAID\"` option. ",
                " + With the [`markAsPaid()`](wix-pricing-plans-backend/orders/markAsPaid) function.",
                "",
                " Creating a *non-free* offline order causes: ",
                " + The order's status is set to `\"PENDING\"` if the start date is in the future. Otherwise, the status is set to `\"ACTIVE\"`.",
                " + The order's last payment status is set to `\"UNPAID\"` or `\"PAID\"`.",
                "",
                " Creating a *free* offline order causes: ",
                " + The order's status is set to `\"PENDING\"` if the start date is in the future. Otherwise, the status is set to `\"ACTIVE\"`.",
                " + The order's last payment status is set to `\"NOT_APPLICABLE\"`.",
                "",
                " The [`onOrderCreated()`](wix-pricing-plans-backend/events/onOrderCreated) event handler runs when an offline order is created.",
                "",
                " > **Note**: Only those with \"Manage Pricing Plans\" and \"Manage Subscriptions\" permissions can create offline orders." ],
            "links":
              [ "[createOnlineOrder( )](#createOnlineOrder)",
                "[previewOfflineOrder( )](#previewOfflineOrder)",
                "[onOrderCreated( )](wix-pricing-plans-backend/events/onOrderCreated)" ],
            "examples":
              [ { "title": "Create an offline order",
                  "body":
                    [ "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myrCeateOfflineOrderFunction() {",
                      "",
                      "  const planId '7251b9e9-3852-4e9f-958e-af630f039802';",
                      "  const buyerId = '4c47c608-cfa8-4037-93ac-738f09560ed3';",
                      "",
                      "  return checkout.createOfflineOrder(planId, buyerId)",
                      "    .then((order) => {",
                      "      const plan = order.planName;",
                      "      const orderType = order.type;",
                      "      return(order);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * [",
                      " *   {",
                      " *     \"_id\": \"66e61fa1-3cfd-4329-aace-0d78570a711e\",",
                      " *     \"planId\": \"7251b9e9-3852-4e9f-958e-af630f039802\",",
                      " *     \"subscriptionId\": \"3aecbd73-b65a-4418-85b1-d9e10ce52e13\",",
                      " *     \"buyer\": {",
                      " *       \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *       \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *     },",
                      " *     \"priceDetails\": {",
                      " *       \"subtotal\": \"0\",",
                      " *       \"total\": \"0\",",
                      " *       \"planPrice\": \"0\",",
                      " *       \"currency\": \"USD\",",
                      " *       \"singlePaymentUnlimited\": true",
                      " *     },",
                      " *     \"type\": \"OFFLINE\",",
                      " *     \"status\": \"ACTIVE\",",
                      " *     \"lastPaymentStatus\": \"NOT_APPLICABLE\",",
                      " *     \"startDate\": \"Sun Aug 22 2021 17:50:26 GMT+0300 (Israel Daylight Time)\",",
                      " *     \"pausePeriods\": [],",
                      " *     \"planName\": \"Family Cooking\",",
                      " *     \"planDescription\": \"Weekly delivery of home cooking recipes and time-saving tips\",",
                      " *     \"_createdDate\": \"Sun Aug 22 2021 17:50:26 GMT+0300 (Israel Daylight Time)\",",
                      " *     \"_updatedDate\": \"Sun Aug 22 2021 17:50:27 GMT+0300 (Israel Daylight Time)\"",
                      " *   }",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an offline order with additional options",
                  "body":
                    [ "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myCreateOfflineOrderFunction() {",
                      "  ",
                      "  const planId = '7251b9e9-3852-4e9f-958e-af630f039802';",
                      "  const buyerId = '4c47c608-cfa8-4037-93ac-738f09560ed3';",
                      "  const options = {",
                      "    startDate: new Date(\"Mon Aug 23 2021 17:50:26\"),",
                      "    paid: true",
                      "  };",
                      "",
                      "  return checkout.createOfflineOrder(planId, buyerId, options)",
                      "    .then((order) => {",
                      "      const plan = order.planName;",
                      "      const orderType = order.type;",
                      "      console.log(\"Success! Your offline order is: \", order); ",
                      "      return order;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * [",
                      " *   {",
                      " *     \"_id\": \"7251b9e9-3852-4e9f-958e-af630f039802\",",
                      " *     \"planId\": \"6351b9e9-3852-4e9f-848e-af630f039812\",",
                      " *     \"subscriptionId\": \"3aecbd73-a76b-4418-85b1-d9e10ce46e13\",",
                      " *     \"buyer\": {",
                      " *       \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *       \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *     },",
                      " *     \"priceDetails\": {",
                      " *       \"subtotal\": \"5\",",
                      " *       \"total\": \"5\",",
                      " *       \"planPrice\": \"5\",",
                      " *       \"currency\": \"USD\",",
                      " *       \"singlePaymentUnlimited\": true",
                      " *     },",
                      " *     \"type\": \"OFFLINE\",",
                      " *     \"status\": \"PENDING\",",
                      " *     \"lastPaymentStatus\": \"PAID\",",
                      " *     \"startDate\": \"Mon Aug 23 2021 17:50:26 GMT+0300 (Israel Daylight Time)\",",
                      " *     \"pausePeriods\": [],",
                      " *     \"planName\": \"Family Cooking\",",
                      " *     \"planDescription\": \"Weekly delivery of home cooking recipes and time-saving tips\",",
                      " *     \"_createdDate\": \"Sun Aug 22 2021 17:50:26 GMT+0300 (Israel Daylight Time)\",",
                      " *     \"_updatedDate\": \"Sun Aug 22 2021 17:50:27 GMT+0300 (Israel Daylight Time)\"",
                      " *   }",
                      " * ]",
                      " */" ],
                  "extra":
                    { "description": "This example demonstrates how to create an offline order that is already marked as paid and starts at a later date." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "createOnlineOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "planId",
              "type": "string",
              "doc": "ID of the plan being ordered." },
            { "name": "startDate",
              "type": "Date",
              "doc": "Date from which the plan is active. Defaults to the current date.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Orders.Order" ] },
            "doc": "Fulfilled - The order of the plan." },
        "locations":
          [ { "lineno": 179,
              "filename": "checkout.js" } ],
        "docs":
          { "summary": "Orders a plan for the currently logged-in member.",
            "description":
              [ "The `createOnlineOrder()` function returns a Promise that resolves to an `Order` object when the ",
                " order has been created. The order is for the currently logged-in member. The buyer must be logged in for you to be able to create an order.",
                "",
                " > **Note:**",
                " > The pricing plan `createOnlineOrder()` and `createOfflineOrder()` functions ",
                " > replace the deprecated paid plans `orderPlan()` function.",
                " > The deprecated function will continue to work, but will not receive updates.",
                " > To keep any existing code compatible with future changes, see the",
                " > [migration instructions](wix-paid-plans/orderplan#migration-instructions).",
                "",
                " Purchasing a plan:",
                " 1. Starts with creating an order. ",
                " 1. For non-free plans, calling the Wix Pay [`startPayment()`](wix-pay/startPayment) ",
                "    function with the `wixPayOrderId` value as the `paymentId` parameter to enable your buyer to pay for the order. ",
                "    (Do not  call the Wix Pay `createPayment()` function to create the payment ID because this",
                "    `createOnlineOrder()` function does that for you.)",
                " 1.  If the order is free, do not call the Wix Pay [`startPayment()`](wix-pay/startPayment) ",
                "     function after `createOnlineOrder()`. The order is created and considered paid for.",
                "",
                " Once an online order is paid for, the `status` of the order is no longer `\"DRAFT\"` and at this point, its `startDate` cannot be changed.",
                "",
                " Creating an online order causes: ",
                " + The order status to be set to `\"PENDING\"` if the start date is in the future or `\"ACTIVE\"` otherwise.",
                "",
                " The [`onOrderCreated()`](wix-pricing-plans-backend/events/onOrderCreated) event handler runs when an online order is created." ],
            "links":
              [ "[createOfflineOrder( )](#createOfflineOrder)",
                "[previewOnlineOrder( )](#previewOnlineOrder)",
                "[onOrderCreated( )](wix-pricing-plans-backend/events/onOrderCreated)" ],
            "examples":
              [ { "title": "Create an online order for a plan",
                  "body":
                    [ "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myCreateOnlineOrderFunction() {",
                      "",
                      "  const planId 'aef93bb6-aaaa-4965-966e-bd68dd2a1cc2';",
                      "  const startDate = new Date('October 21, 2021 11:00:00');",
                      "",
                      "  return checkout.createOnlineOrder(planId, startDate)",
                      "    .then((order) => {",
                      "      console.log(\"Success! Your order is: \", order);",
                      "      const orderId = order._id;",
                      "      const subscriptionId = order.subscriptionId; ",
                      "      const paymentId = order.wixPayOrderId;",
                      "      return order;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * {",
                      " *   \"_id\": \"348927fd-1c48-48a1-8176-4e40be1b951d\",",
                      " *   \"planId\": \"aef93bb6-aaaa-4965-966e-bd68dd2a1cc2\",",
                      " *   \"subscriptionId\": \"0e315608-ce99-4dcd-bf47-d2c7c3b09eb4\",",
                      " *   \"wixPayOrderId\": \"445b8471-7c2e-47c3-838d-1715af09338a\",",
                      " *   \"buyer\": {",
                      " *     \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *     \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *   },",
                      " *   \"priceDetails\": {",
                      " *     \"subtotal\": \"2\",",
                      " *     \"total\": \"2\",",
                      " *     \"planPrice\": \"2\",",
                      " *     \"currency\": \"USD\",",
                      " *     \"subscription\": {",
                      " *       \"cycleDuration\": {",
                      " *         \"count\": 1,",
                      " *         \"unit\": \"WEEK\"",
                      " *       },",
                      " *       \"cycleCount\": 26",
                      " *     }",
                      " *   },",
                      " *   \"type\": \"ONLINE\",",
                      " *   \"status\": \"DRAFT\",",
                      " *   \"autoRenewCanceled\": false,",
                      " *   \"lastPaymentStatus\": \"UNPAID\",",
                      " *   \"startDate\": \"2021-10-21T11:00:00.000Z\",",
                      " *   \"endDate\": \"2022-04-21T11:00:00.000Z\",",
                      " *   \"pausePeriods\": [],",
                      " *   \"planName\": \"Cooking for Kids\",",
                      " *   \"planDescription\": \"Get easy-to-make recipes that kids can prepare on their own!\",",
                      " *   \"_createdDate\": \"2021-08-27T15:19:09.271Z\",",
                      " *   \"_updatedDate\": \"2021-08-27T15:19:09.271Z\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an online order and purchase it with Wix Pay",
                  "body":
                    [ "/*******************************",
                      " * Backend code - checkout.jsw *",
                      " *******************************/",
                      "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export async function myCreateOnlineOrderFunction(planId, startDate) {",
                      "  try {",
                      "    const order = checkout.createOnlineOrder(planId, startDate)",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "    // Handle the error",
                      "  }",
                      "}",
                      "",
                      "/* Returns a Promise that resolves to an ",
                      " * `order` object with a `\"DRAFT\"`",
                      " * status. In the object, there is a ",
                      " * `wixPayOrderId` property you can use to ",
                      " * complete the purchase.",
                      " */ ",
                      "",
                      "/*************",
                      " * Page code *",
                      " *************/",
                      "",
                      "import {myCreateOnlineOrderFunction} from 'backend/checkout';",
                      "import wixPay from 'wix-pay';",
                      "",
                      "// ... ",
                      "",
                      "const planId = $w('#planId').value;",
                      "const startDate = new Date('October 21, 2022 11:00:00');",
                      "",
                      "$w('#submitButton').onClick(async () => {",
                      "  try {",
                      "    const order = await myCreateOnlineOrderFunction(planId, startDate);",
                      "    const result = await wixPay.startPayment(order.wixPayOrderId);",
                      "    if (result.status === 'Successful') {",
                      "      console.log('Successfully Ordered');",
                      "      // Handle payment success",
                      "    } else if (result.status === 'Failed to Order') {",
                      "      console.log('Failed');",
                      "      // Handle payment failure",
                      "    } else if (result.status === 'Order Pending') {",
                      "      console.log('Pending');",
                      "      // Handle payment pending",
                      "    } else if (result.status === 'Order Cancelled') {",
                      "      console.log('Cancelled');",
                      "      // Handle user closing the payment panel",
                      "      // without paying",
                      "    } else {",
                      "      console.log('Failed to Create Order');",
                      "      // Handle any remaining possibilities",
                      "    }",
                      "  } catch(error) {",
                      "    // Handle the error ",
                      "  }",
                      "}); ",
                      "",
                      "/* Returns a Promise that resolves to  ",
                      " * the created payment. ",
                      " */" ],
                  "extra":
                    { "description": "This example demonstrates how you can start an online order with the wix-pricing-plans-backend `createOnlineOrder()`\n function and then send the payment ID (`wixPayOrderId`) to the frontend Wix Pay `startPayment()` function to facilitate payment." } },
                { "title": "A full order plan scenario including a collection",
                  "body":
                    [ "/***********************************************",
                      " * For demonstration purposes, the             * ",
                      " * following myCreateOnlineOrderFunction()     * ",
                      " * fires the OrderCreated event. You can put   *",
                      " * this code in a backend jsw file or          *",
                      " * use a different method for firing the event *",
                      " * such as with http functions.                *",
                      " ***********************************************/",
                      "",
                      "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myCreateOnlineOrderFunction(planId) {",
                      "  return checkout.createOnlineOrder(planId);",
                      "}",
                      "",
                      "/*******************************",
                      " * Backend code - events.js    *",
                      " *******************************/",
                      "",
                      " import { myInsertNewOrderFunction } from 'backend/process-orders'",
                      "",
                      " export function wixPricingPlans_onOrderCreated(event) {",
                      "  myInsertNewOrderFunction(event.entity);",
                      "}",
                      "",
                      "/*************************************",
                      " * Backend code - process-orders.jsw *",
                      " *************************************/",
                      " import wixData from 'wix-data';",
                      " ",
                      " export async function myInsertOrderFunction(order) {",
                      "",
                      "     const member = await getMember(order.buyer.memberId);",
                      "     const data = ({",
                      "         _id: order.id,",
                      "         planId: order.planId,",
                      "         planName: order.planName,",
                      "         status: order.status,",
                      "         nickname: member.nickname",
                      "     });",
                      "",
                      "     wixData.insert('Orders', data)",
                      "       .then(() => {",
                      "          console.log('Inserted successfully', data);",
                      "       })",
                      "       .catch(() => {",
                      "          console.error('Failed to insert', data);",
                      "       });",
                      " }",
                      "",
                      " // Gets member details to associate with the order ",
                      " async function getMember(memberId) {",
                      "  try {",
                      "    return wixData.get('Members/PublicData', memberId)",
                      "  } catch (err) {",
                      "    console.error('Failed to fetch member by ID', memberId, err);",
                      "    // Handle the error ",
                      "  };",
                      " }" ],
                  "extra":
                    { "description": "This example demonstrates how to create an order and save its details in a collection after an event fires. \n\n The code assumes: \n\n + An `Orders` collection with the following fields: `_id`, `planId`, `planName`, `nickname`, and `status`\n + The `Members` app is installed on the site, including the `Members/PublicData` collection\n + The `Pricing Plans` app is installed on the site, including the `PaidPlans/Plans` collection\n + A backend code file exists called `process-orders.jsw`\n + A backend events file exists called `events.js`\n\n The `OrderCreated` event is fired in response to an order being created. The initial order creation might be\n initiated in several ways, such as by a button click on the page or by an external event request sent by \n an HTTP function call. The order creation is routed to backend code.  \n\n In this example, when the `OrderCreated` event is fired:  \n\n + The `myInsertOrderFunction()` function is called, with the `order` object extracted from the event object\n + The `myInsertOrderFunction()` function calls a `getMember()` function to gets details about the member \n   ordering the plan\n + The `myInsertOrderFunction()` function calls the Wix Data `insert()` function to add order and member details\n   into the `Orders` collection" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previewOfflineOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "planId",
              "type": "string",
              "doc": "ID of the plan being previewed." },
            { "name": "buyerId",
              "type": "string",
              "doc": "Member ID for the buyer who might order the plan offline. The `buyerId` must be entered because the buyer might not be logged in." },
            { "name": "startDate",
              "type": "Date",
              "doc": "Date from which the plan would be active if ordered. Defaults to the current date.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Checkout.OrderPreview" ] },
            "doc": "Fulfilled - A preview of the order." },
        "locations":
          [ { "lineno": 252,
              "filename": "checkout.js" } ],
        "docs":
          { "summary": "Provides a preview of an offline order as if it was purchased.",
            "description":
              [ "The `previewOfflineOrder()` function returns a Promise that resolves to a temporary preview of the offline order.",
                "",
                " The preview uses the same logic as purchasing a plan, except that the preview is not saved. Because an order",
                " is not actually created, the preview's `_id` and `subscriptionId` properties are displayed as a string of ",
                " multiple zero characters (like \"000000\").",
                " ",
                " You can preview the order to check purchase limitations. ",
                " If [taxes are configured for the site](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection), ",
                " taxes are applied to the preview. If not, the `tax` previews as `null`.",
                "",
                " This function is not available to the buyer. You specify the member ID for the buyer whose order ",
                " should be previewed.",
                "",
                " > **Note**: Only those with \"Manage Pricing Plans\" and \"Manage Subscriptions\" [permissions](https://support.wix.com/en/article/roles-permissions-accessing-roles-permissions) can preview offline orders." ],
            "links":
              [ "[previewOnlineOrder( )](#previewOnlineOrder)",
                "[previewPricing( )](#previewPricing)" ],
            "examples":
              [ { "title": "Preview an offline order as if it was purchased",
                  "body":
                    [ "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myPreviewOfflineOrderFunction() {",
                      "  const planId = '7251b9e9-3852-4e9f-958e-af630f039802';",
                      "  const buyerId = '4c47c608-cfa8-4037-93ac-738f09560ed3';",
                      "  const startDate = new Date();",
                      "  return checkout.previewOfflineOrder(planId, buyerId, startDate)",
                      "    .then((preview) => {",
                      "      console.log(preview);",
                      "      const maxReached = preview.purchaseLimitExceeded;",
                      "      const orderType = preview.order.type;",
                      "      const orderPricing = preview.order.priceDetails;",
                      "      return preview;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * {",
                      " *   \"order\": {",
                      " *     \"_id\": \"00000000-0000-0000-0000-000000000000\",",
                      " *     \"planId\": \"7251b9e9-3852-4e9f-958e-af630f039802\",",
                      " *     \"subscriptionId\": \"00000000-0000-0000-0000-000000000000\",",
                      " *     \"buyer\": {",
                      " *       \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *       \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *     },",
                      " *     \"priceDetails\": {",
                      " *       \"subtotal\": \"0\",",
                      " *       \"total\": \"0\",",
                      " *       \"planPrice\": \"0\",",
                      " *       \"currency\": \"USD\",",
                      " *       \"singlePaymentUnlimited\": true",
                      " *     },",
                      " *     \"type\": \"OFFLINE\",",
                      " *     \"status\": \"ACTIVE\",",
                      " *     \"lastPaymentStatus\": \"PAID\",",
                      " *     \"startDate\": \"2021-08-26T15:03:04.675Z\",",
                      " *     \"pausePeriods\": [],",
                      " *     \"planName\": \"Family Cooking\",",
                      " *     \"planDescription\": \"Weekly delivery of home cooking recipes and time-saving tips\",",
                      " *     \"_createdDate\": \"2021-08-26T15:03:04.844Z\",",
                      " *     \"_updatedDate\": \"2021-08-26T15:03:04.844Z\"",
                      " *   },",
                      " *   \"purchaseLimitExceeded\": true",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previewOnlineOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "planId",
              "type": "string",
              "doc": "ID of the plan to be previewed." },
            { "name": "startDate",
              "type": "Date",
              "doc": "Date from which the plan would be active if ordered. Defaults to current date.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Checkout.OrderPreview" ] },
            "doc": "Fulfilled - A preview of the order." },
        "locations":
          [ { "lineno": 282,
              "filename": "checkout.js" } ],
        "docs":
          { "summary": "Provides a preview of an online order as if it was purchased.",
            "description":
              [ "The `previewOnlineOrder()` function returns a Promise that resolves to a temporary preview of the online order. ",
                "",
                " The buyer must be logged in to preview an online order. ",
                "",
                " The preview uses the same logic as purchasing a plan, except that the preview is not saved. Because an order",
                " is not actually created, the preview's `_id` and `subscriptionId` properties are displayed as a string of ",
                " multiple zero characters (like \"000000\").",
                " ",
                " You can preview the order to check purchase limitations, but the limitations are not enforced for the preview. If [taxes are configured for the site](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection), taxes are applied to the preview.  If not, the `tax` previews as`null`.",
                "",
                " This function is available to the site owner and the buyer. Because the buyer is logged in, ",
                " you do not need to specify the `buyerId` when previewing an online order." ],
            "links":
              [ "[previewOfflineOrder( )](#previewOfflineOrder)",
                "[previewPrice( )](#previewPrice)" ],
            "examples":
              [ { "title": "Preview an online order as if it was purchased",
                  "body":
                    [ "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myPreviewOnlineOrderFunction() {",
                      "  const planId = '38b3021a-8b43-4a31-98cc-4a05b522b7d3';",
                      "  const startDate = new Date();",
                      "  return checkout.previewOnlineOrder(planId, startDate)",
                      "    .then((preview) => {",
                      "      console.log(preview);",
                      "      const maxReached = preview.purchaseLimitExceeded;",
                      "      const orderType = preview.order.type;",
                      "      const orderPricing = preview.order.priceDetails;",
                      "      return preview;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * {",
                      " *   \"order\": {",
                      " *     \"_id\": \"00000000-0000-0000-0000-000000000000\",",
                      " *     \"planId\": \"38b3021a-8b43-4a31-98cc-4a05b522b7d3\",",
                      " *     \"subscriptionId\": \"00000000-0000-0000-0000-000000000000\",",
                      " *     \"buyer\": {",
                      " *       \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *       \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *     },",
                      " *     \"priceDetails\": {",
                      " *       \"subtotal\": \"10\",",
                      " *       \"total\": \"10\",",
                      " *       \"planPrice\": \"10\",",
                      " *       \"currency\": \"USD\",",
                      " *       \"subscription\": {",
                      " *         \"cycleDuration\": {",
                      " *           \"count\": 1,",
                      " *           \"unit\": \"MONTH\"",
                      " *         },",
                      " *         \"cycleCount\": 12",
                      " *       }",
                      " *     },",
                      " *     \"type\": \"ONLINE\",",
                      " *     \"status\": \"ACTIVE\",",
                      " *     \"autoRenewCanceled\": false,",
                      " *     \"lastPaymentStatus\": \"PAID\",",
                      " *     \"startDate\": \"2021-08-26T15:35:58.381Z\",",
                      " *     \"endDate\": \"2022-08-26T15:35:58.381Z\",",
                      " *     \"pausePeriods\": [],",
                      " *     \"planName\": \"Diabetic Cooking\",",
                      " *     \"planDescription\": \"Special recipes for those with diabetes.\",",
                      " *     \"_createdDate\": \"2021-08-26T15:35:58.645Z\",",
                      " *     \"_updatedDate\": \"2021-08-26T15:35:58.645Z\"",
                      " *   },",
                      " *   \"purchaseLimitExceeded\": false",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previewPrice",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "planId",
              "type": "string",
              "doc": "ID of the plan whose pricing should be previewed." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Checkout.PricePreview" ] },
            "doc": "Fulfilled - A preview of the pricing for the order." },
        "locations":
          [ { "lineno": 316,
              "filename": "checkout.js" } ],
        "docs":
          { "summary": "Provides a preview of an order's pricing as if was purchased.",
            "description":
              [ "The `previewPrice()` function returns a Promise that resolves to a temporary preview of the order's price. ",
                "",
                " The price preview uses the same logic for calculating prices as used when purchasing a plan, except that the preview is not saved. ",
                " ",
                " If [taxes are configured for the site](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection), taxes are applied to the preview.  If not, the `tax` previews as `null`.",
                "",
                " Buyers do not have to be logged in to preview the price. The details provided by this function are not buyer-specific." ],
            "links":
              [ "[previewOfflineOrder( )](#previewOfflineOrder)",
                "[previewOnlineOrder( )](#previewOnlineOrder)" ],
            "examples":
              [ { "title": "Preview the pricing details for a plan",
                  "body":
                    [ "import { checkout } from 'wix-pricing-plans-backend';",
                      "",
                      "export function myPreviewPriceFunction() {",
                      "  const planId = '38b3021a-8b43-4a31-98cc-4a05b522b7d3';",
                      "  return checkout.previewPrice(planId)",
                      "    .then((preview) => {",
                      "      console.log(preview);",
                      "      const currency = price.currency;",
                      "      const orderPricing = price.planPrice;",
                      "      return preview;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * {",
                      " *   \"price\": {",
                      " *     \"subtotal\": \"10\",",
                      " *     \"total\": \"10\",",
                      " *     \"planPrice\": \"10\",",
                      " *     \"currency\": \"USD\",",
                      " *     \"subscription\": {",
                      " *       \"cycleDuration\": {",
                      " *         \"count\": 1,",
                      " *         \"unit\": \"MONTH\"",
                      " *       },",
                      " *       \"cycleCount\": 12",
                      " *     },",
                      " *     \"freeTrialDays\": 30",
                      " *   }",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "CreateOfflineOrderInfo",
        "locations":
          [ { "lineno": 127,
              "filename": "checkout.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "startDate",
              "type": "Date",
              "doc": "Date from which the plan is active. Defaults to the current date.",
              "optional": true },
            { "name": "paid",
              "type": "boolean",
              "doc": "Whether the order is paid. Defaults to `false`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "OrderPreview",
        "locations":
          [ { "lineno": 245,
              "filename": "checkout.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "order",
              "type": "wix-pricing-plans-backend.Orders.Order",
              "doc": "The preview, as if the plan had been ordered. Omitted if the purchase limit for the plan has been exceeded for the buyer.",
              "optional": true },
            { "name": "purchaseLimitExceeded",
              "type": "boolean",
              "doc": "Whether the purchase limit for the plan has already been reached by the buyer. `false` for plans that do not have purchase limits." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PricePreview",
        "locations":
          [ { "lineno": 310,
              "filename": "checkout.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "price",
              "type": "wix-pricing-plans-backend.Orders.PriceDetails",
              "doc": "Detailed price of one payment cycle." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }