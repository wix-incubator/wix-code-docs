{ "name": "Orders",
  "memberOf": "wix-pricing-plans-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "orders.js" },
  "docs":
    { "summary": "The Pricing Plans Orders API contains functionality for managing\n your site's pricing plan [orders](https://support.wix.com/en/article/pricing-plans-an-overview).",
      "description":
        [ "Use the Pricing Plans Orders API to manage orders for your pricing plans. The Pricing Plans ",
          " Orders API provides functionality for managing pricing plan orders created ",
          " in the Wix Pricing Plans app or using this Wix Pricing Plans API.",
          "",
          " ### Setting up orders",
          "",
          " To use APIs to manage your plan orders, first set up your site to:",
          "",
          " + Accept payments as described in [About Accepting Payments](https://support.wix.com/en/article/about-accepting-payments).",
          "",
          " + Offer membership plans as described in [About Pricing Plans](https://support.wix.com/en/article/about-pricing-plans). When setting up your site to accept pricing plans, ",
          "   define the plans you want to offer [using the Dashboard](https://support.wix.com/en/article/creating-a-plan-in-pricing-plans) or",
          "   [using the Pricing Plan APIs](wix-pricing-plans-backend/createplan).",
          "",
          "",
          " ### Managing orders",
          "",
          " Members can order pricing plans in 2 ways:",
          " + **Online**. Members order and pay for their plans",
          "   on your site without manual intervention. ",
          " + **Offline**. Members place their order by phone, text, or email. You ",
          "   manually record each stage of the transaction.",
          "",
          " Use the Orders API to manage both online and ",
          " offline pricing plan orders. You can: ",
          "",
          " + Get a single order or a list of multiple orders.",
          " + Let members get and list their own order(s).",
          " + Cancel members' orders.",
          " + Allow members to cancel their own orders. ",
          " + Mark offline orders as paid. ",
          " + Manage orders, including pausing, postponing, and resuming them.",
          " ",
          " Updating the properties of a pricing plan does not affect any current orders of the plan by members. The existing orders retain",
          " their existing terms and pricing.",
          "",
          " > **Note:**",
          " > Deprecated [Paid Plans](wix-paid-plans/introduction/) APIs are still available for the following, ",
          " > but we encourage you to migrate to the [Pricing Plans](wix-pricing-plans/introduction/) APIs instead.",
          "",
          "",
          " ### Orders and subscriptions",
          " ",
          " Actions related to basic pricing plan management are available from the [Pricing Plans](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmembership%3FreferralInfo%3Dvelo-docs)",
          " page in the Dashboard. These actions correspond to the functions available in the [Pricing Plans APIs](wix-pricing-plans-backend/introduction).",
          "",
          " Every pricing plan order corresponds to a Wix subscription, including orders for single payment plans. You can see all orders from your site's",
          " [Subscriptions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fsubscriptions%3FreferralInfo%3Dvelo-docs)",
          " page in the Dashboard. Actions available on this page correspond to the functions available in the [Orders APIs](wix-pricing-plans-backend/orders/introduction) and the [Checkout APIs](wix-pricing-plans-backend/checkout/introduction).",
          "",
          " > **Notes**: ",
          " >",
          " > + Wix pricing plans are 1 type of Wix subscriptions available from the Subscriptions page. For example, the Subscriptions page also includes Wix Stores subscriptions and Wix invoice subscriptions.",
          " >",
          " > + Pricing plans can be 1 of 3 different pricing models: `singlePaymentForDuration`, `singlePaymentUnlimited`, or `subscription`. Orders for all pricing plan models are displayed ",
          "     on the Subscriptions page, not just `subscription` type models. See [Pricing Models](wix-pricing-plans-backend/introduction#pricing-models) to learn more.  ",
          "  ",
          "",
          " ### Roles and permissions",
          "",
          " Some functions require that only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Selec[â€¦]ashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) can perform",
          " pricing plan order functions. You can override the permissions by setting the function's `suppressAuth` ",
          " option to `true`.",
          " ",
          " Other functions might require that the site visitor just be logged in. ",
          "",
          " ### Importing the APIs",
          "",
          " To use the Orders API, import `orders` from the `wix-pricing-plans-backend` module.",
          "",
          "   ```javascript",
          "   import {orders} from 'wix-pricing-plans-backend';",
          "   ```" ],
      "links": [],
      "examples":
        [ { "title": "Create an online order and purchase it with Wix Pay",
            "body":
              [ "/*******************************",
                " * Backend code - checkout.jsw *",
                " *******************************/",
                "import { checkout } from 'wix-pricing-plans-backend';",
                "",
                "export async function myCreateOnlineOrderFunction(planId, startDate) {",
                "  try {",
                "    const order = await checkout.createOnlineOrder(planId, startDate)",
                "    return order;",
                "  } catch (error) {",
                "    console.error(error);",
                "    // Handle the error",
                "  }",
                "}",
                "",
                "/* Returns a Promise that resolves to an ",
                " * `order` object with a `\"DRAFT\"`",
                " * status. In the object, there is a ",
                " * `wixPayOrderId` property you can use to ",
                " * complete the purchase.",
                " */ ",
                "",
                "/*************",
                " * Page code *",
                " *************/",
                "",
                "import {myCreateOnlineOrderFunction} from 'backend/checkout';",
                "import wixPay from 'wix-pay';",
                "",
                "// ... ",
                "",
                "const planId = $w('#planId').value;",
                "const startDate = new Date('July 22, 2022 11:00:00');",
                "",
                "$w('#submitButton').onClick(async () => {",
                "  try {",
                "    const order = await myCreateOnlineOrderFunction(planId, startDate);",
                "    const result = await wixPay.startPayment(order.wixPayOrderId);",
                "    if (result.status === 'Successful') {",
                "      console.log('Successfully Ordered');",
                "      // Handle payment success",
                "    } else if (result.status === 'Failed to Order') {",
                "      console.log('Failed');",
                "      // Handle payment failure",
                "    } else if (result.status === 'Order Pending') {",
                "      console.log('Pending');",
                "      // Handle payment pending",
                "    } else if (result.status === 'Order Cancelled') {",
                "      console.log('Cancelled');",
                "      // Handle user closing the payment panel",
                "      // without paying",
                "    } else {",
                "      console.log('Failed to Create Order');",
                "      // Handle any remaining possibilities",
                "    }",
                "  } catch(error) {",
                "    // Handle the error ",
                "  }",
                "}); ",
                "",
                "/* Returns a Promise that resolves to  ",
                " * the created payment. ",
                " */" ],
            "extra":
              { "description": "This example demonstrates how you can start an online order with the wix-pricing-plans-backend `createOnlineOrder()`\n function and then send the payment ID (`wixPayOrderId`) to the frontend Wix Pay `startPayment() function to facilitate payment." } },
          { "title": "A full order plan scenario including a collection",
            "body":
              [ "/***********************************************",
                " * For demonstration purposes, the             * ",
                " * following myCreateOnlineOrderFunction()     * ",
                " * triggers the onOrderCreated event. You      *",
                " * can put this code in a backend jsw file     *",
                " * or use a different method for triggering    *",
                " * the event such as with http functions.      *",
                " ***********************************************/",
                "",
                "import { checkout } from 'wix-pricing-plans-backend';",
                "",
                "export function myCreateOnlineOrderFunction(planId) {",
                "  return checkout.createOnlineOrder(planId);",
                "}",
                "",
                "/*******************************",
                " * Backend code - events.js    *",
                " *******************************/",
                "",
                " import { myInsertNewOrderFunction } from 'backend/process-orders'",
                "",
                " export function wixPricingPlans_onOrderCreated(event) {",
                "  myInsertNewOrderFunction(event.entity);",
                "}",
                "",
                "/*************************************",
                " * Backend code - process-orders.jsw *",
                " *************************************/",
                " import wixData from 'wix-data';",
                " ",
                " export async function myInsertOrderFunction(order) {",
                "",
                "     const member = await getMember(order.buyer.memberId);",
                "     const data = ({",
                "         _id: order.id,",
                "         planId: order.planId,",
                "         planName: order.planName,",
                "         status: order.status,",
                "         nickname: member.nickname",
                "     });",
                "",
                "     wixData.insert('Orders', data)",
                "       .then(() => {",
                "          console.log('Inserted successfully', data);",
                "       })",
                "       .catch(() => {",
                "          console.error('Failed to insert', data);",
                "       });",
                " }",
                "",
                " // Gets member details to associate with the order ",
                " async function getMember(memberId) {",
                "  try {",
                "    return wixData.get('Members/PublicData', memberId)",
                "  } catch (error) {",
                "    console.error('Failed to fetch member by ID', memberId, error);",
                "  };",
                " }" ],
            "extra":
              { "description": "This example demonstrates how to create an order and save its details in a collection after an event fires. \n\n The code assumes: \n\n + An `Orders` collection with the following fields: `_id`, `planId`, `planName`, `nickname`, and `status`\n + The `Members` app is installed on the site, including the `Members/PublicData` collection\n + The `Pricing Plans` app is installed on the site, including the `PaidPlans/Plans` collection\n + A backend code file exists called `process-orders.jsw`\n + A backend events file exists called `events.js`\n\n The `OrderCreated` event is fired in response to an order being created. The initial order creation might be\n initiated in several ways, such as by a button click on the page or by an external event request sent by \n an HTTP function call. The order creation is routed to backend code.  \n\n In this example, when the `OrderCreated` event is fired:  \n\n + The `myInsertOrderFunction()` function is called, with the `order` object extracted from the event object\n + The `myInsertOrderFunction()` function calls a `getMember()` function to gets details about the member \n   ordering the plan\n + The `myInsertOrderFunction()` function calls the Wix Data `insert()` function to add order and member details\n   into the `Orders` collection" } } ],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "cancelOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order to cancel." },
            { "name": "effectiveAt",
              "type": "string",
              "doc": "When the order is canceled. One-time orders can only be canceled immediately.\nSupported values:\n + `\"IMMEDIATELY\"`. The order is canceled immediately.\n + `\"NEXT_PAYMENT_DATE\"`. The order is canceled at the next payment date." },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Options",
              "doc": "Options to use when canceling an order.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the order is canceled." },
        "locations":
          [ { "lineno": 117,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Cancels an existing order.",
            "description":
              [ "The `cancelOrder()` function returns a Promise that resolves when the order is successfully canceled. ",
                "",
                " For orders with recurring payments, a cancellation can be set to occur either `IMMEDIATELY` or at the `NEXT_PAYMENT_DATE`.",
                " For orders with one-time payments, a cancellation occurs `IMMEDIATELY`.",
                "",
                " Canceling an order causes the following changes: ",
                " + The order status changes to `\"CANCELED\"`.",
                "",
                " The [`onOrderCanceled()`](wix-pricing-plans-backend/events/onOrderCanceled) event handler runs when an order is canceled.",
                " ",
                " #### Canceling during the free trial period",
                "",
                " When a buyer cancels their order during the free trial period, the buyer's subscription expires at the end ",
                " of the free trial period and they will not be billed. The buyer may continue using the benefits until the end ",
                " of the free trial period.",
                "  ",
                " When a site owner cancels an ordered plan during the free trial period, they choose to apply the cancellation ",
                " `IMMEDIATELY` or at the `NEXT_PAYMENT_DATE`. Canceling `IMMEDIATELY` ends the subscription for the buyer ",
                " immediately, even during the free trial period and the buyer won't be billed. Canceling at the ",
                " `NEXT_PAYMENT_DATE` allows the buyer to continue using the benefits of the subscription until the end of the free trial period. ",
                " Then, the subscription ends and the buyer is not billed.",
                "",
                " > **Note**: Only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) ",
                " > can cancel orders. You can override the permissions by setting the function's `suppressAuth` ",
                " > option to `true`." ],
            "links":
              [ "[requestCurrentMemberOrderCancellation( )](#requestCurrentMemberOrderCancellation)",
                "[onOrderAutoRenewCanceled( )](wix-pricing-plans-backend/events/onOrderAutoRenewCanceled)",
                "[onOrderCanceled( )](wix-pricing-plans-backend/events/onOrderCanceled)",
                "[onOrderEnded( )](wix-pricing-plans-backend/events/onOrderEnded)",
                "[onOrderUpdated( )](wix-pricing-plans-backend/events/onOrderUpdated)" ],
            "examples":
              [ { "title": "Cancel an order at a later date",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId value: 'a8c4a1b2-b5e8-4b33-9693-057ec93e9a27'",
                      "// ",
                      "// Sample effectiveAt value: 'NEXT_PAYMENT_DATE'",
                      "",
                      "export async function myCancelOrderFunction(orderId, effectiveAt) {",
                      "  try {",
                      "    const order = await orders.cancelOrder(orderId, effectiveAt);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } },
                { "title": "Cancel an order immediately, bypassing permission checks",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample orderId value: 'a8c4a1b2-b5e8-4b33-9693-057ec93e9a27'",
                      " * ",
                      " * Sample effectiveAt value: 'IMMEDIATELY'",
                      " * ",
                      " * Sample options value:",
                      " * {",
                      " *   suppressAuth: true",
                      " * }",
                      " */",
                      "",
                      "export async function myCancelOrderWithOptionsFunction(orderId, effectiveAt, options) {",
                      "  try {",
                      "    const order = await orders.cancelOrder(orderId, effectiveAt, options);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getCurrentMemberOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order to get." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Orders.Order" ] },
            "doc": "Fulfilled - The requested pricing plan order." },
        "locations":
          [ { "lineno": 407,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Gets an order for the currently logged-in member.",
            "description":
              [ "The `getCurrentMemberOrder()` function returns a Promise that resolves to information about a specified order for the currently-logged in member." ],
            "links": [],
            "examples":
              [ { "title": "Get the current member's order by ID",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId value: 'a5accf44-6eba-4d1e-a1b6-49d5ddc2de9d'",
                      "",
                      "export async function myGetCurrentMemberOrderFunction(orderId) {",
                      "  try {",
                      "    const order = await orders.getCurrentMemberOrder(orderId);",
                      "    const id = order._id;",
                      "    const status = order.status;",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * ",
                      " * {",
                      " *   \"_id\": \"a5accf44-6eba-4d1e-a1b6-49d5ddc2de9d\",",
                      " *   \"planId\": \"6d7537c5-beac-44a3-bea3-b947ddc56b31\",",
                      " *   \"subscriptionId\": \"5288d8eb-916a-438e-8819-69a00ac72acb\",",
                      " *   \"wixPayOrderId\": \"bee58368-5bc4-4868-85af-a490d1dc0dbf\",",
                      " *   \"buyer\": {",
                      " *     \"memberId\": \"ea3d74df-b7dc-4ca1-a7c9-c416b9017a86\",",
                      " *     \"contactId\": \"ea3d74df-b7dc-4ca1-a7c9-c416b9017a86\"",
                      " *   },",
                      " *   \"priceDetails\": {",
                      " *     \"subtotal\": \"14.99\",",
                      " *     \"discount\": \"0\",",
                      " *     \"total\": \"14.99\",",
                      " *     \"planPrice\": \"14.99\",",
                      " *     \"currency\": \"EUR\",",
                      " *     \"subscription\": {",
                      " *       \"cycleDuration\": {",
                      " *         \"count\": 1,",
                      " *         \"unit\": \"MONTH\"",
                      " *       },",
                      " *       \"cycleCount\": 0",
                      " *     }",
                      " *   },",
                      " *   \"pricing\": {",
                      " *     \"subscription\": {",
                      " *       \"cycleDuration\": {",
                      " *         \"count\": 1,",
                      " *         \"unit\": \"MONTH\"",
                      " *       },",
                      " *       \"cycleCount\": 0",
                      " *     },",
                      " *     \"prices\": [",
                      " *       {",
                      " *         \"duration\": {",
                      " *           \"cycleFrom\": 1",
                      " *         },",
                      " *         \"price\": {",
                      " *           \"subtotal\": \"14.99\",",
                      " *           \"discount\": \"0\",",
                      " *           \"total\": \"14.99\",",
                      " *           \"currency\": \"EUR\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   },",
                      " *   \"type\": \"OFFLINE\",",
                      " *   \"orderMethod\": \"UNKNOWN\",",
                      " *   \"status\": \"ACTIVE\",",
                      " *   \"autoRenewCanceled\": false,",
                      " *   \"lastPaymentStatus\": \"PAID\",",
                      " *   \"startDate\": \"2022-07-11T13:45:53.129Z\",",
                      " *   \"pausePeriods\": [],",
                      " *   \"currentCycle\": {",
                      " *     \"index\": 1,",
                      " *     \"startedDate\": \"2022-07-11T13:45:53.129Z\",",
                      " *     \"endedDate\": \"2022-08-11T13:45:53.129Z\"",
                      " *   },",
                      " *   \"planName\": \"2x Week\",",
                      " *   \"planDescription\": \"\",",
                      " *   \"planPrice\": \"14.99\",",
                      " *   \"_createdDate\": \"2022-07-08T08:35:25.288Z\",",
                      " *   \"_updatedDate\": \"2022-07-08T08:35:27.476Z\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order to get." },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Options",
              "doc": "Options to use when getting an order.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Orders.Order" ] },
            "doc": "Fulfilled - The requested pricing plan order." },
        "locations":
          [ { "lineno": 166,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Gets an existing pricing plan order by ID.",
            "description":
              [ "The `getOrder()` function returns a Promise that resolves to information about the specified order. ",
                " ",
                " > **Note**: Only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) ",
                " > can get orders. You can override the permissions by setting the function's `suppressAuth` ",
                " > option to `true`." ],
            "links": [],
            "examples":
              [ { "title": "Get an order by ID",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId: '02b7de48-b433-4d4b-b847-08c41c2b2b78'",
                      "",
                      "export async function myGetOrderFunction(orderId) {",
                      "  try {",
                      "    const order = await orders.getOrder(orderId);",
                      "    const id = order._id;",
                      "    const status = order.status;",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "/* Promise resolves to:  ",
                      " * {",
                      " *   \"_id\": \"02b7de48-b433-4d4b-b847-08c41c2b2b78\",",
                      " *   \"planId\": \"7251b9e9-3852-4e9f-958e-af630f039802\",",
                      " *   \"subscriptionId\": \"45f4ab2c-bc09-4736-be68-674cc2169ad1\",",
                      " *   \"buyer\": {",
                      " *     \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *     \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *   },",
                      " *   \"priceDetails\": {",
                      " *     \"subtotal\": \"0\",",
                      " *     \"discount\": \"0\",",
                      " *     \"total\": \"0\",",
                      " *     \"planPrice\": \"0\",",
                      " *     \"currency\": \"USD\",",
                      " *     \"singlePaymentUnlimited\": true",
                      " *   },",
                      " *   \"pricing\": {",
                      " *     \"singlePaymentUnlimited\": true,",
                      " *     \"prices\": [",
                      " *       {",
                      " *         \"duration\": {",
                      " *           \"cycleFrom\": 1",
                      " *         },",
                      " *         \"price\": {",
                      " *           \"subtotal\": \"0\",",
                      " *           \"discount\": \"0\",",
                      " *           \"total\": \"0\",",
                      " *           \"currency\": \"USD\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   },",
                      " *   \"type\": \"ONLINE\",",
                      " *   \"orderMethod\": \"UNKNOWN\",",
                      " *   \"status\": \"ACTIVE\",",
                      " *   \"lastPaymentStatus\": \"NOT_APPLICABLE\",",
                      " *   \"startDate\": \"2021-10-31T11:00:00.000Z\",",
                      " *   \"pausePeriods\": [],",
                      " *   \"currentCycle\": {",
                      " *     \"index\": 1,",
                      " *     \"startedDate\": \"2021-10-31T11:00:00.000Z\"",
                      " *   },",
                      " *   \"planName\": \"Family Cooking\",",
                      " *   \"planDescription\": \"Weekly delivery of home cooking recipes and time-saving tips\",",
                      " *   \"planPrice\": \"0\",",
                      " *   \"_createdDate\": \"2021-09-02T06:13:28.595Z\",",
                      " *   \"_updatedDate\": \"2021-09-02T06:13:28.738Z\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Bypass permission checks to get an order",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample orderId: '02b7de48-b433-4d4b-b847-08c41c2b2b78'",
                      "",
                      " * Sample options object: ",
                      " * { ",
                      " *   \"suppressAuth\" : true ",
                      " * }",
                      " */",
                      "",
                      "export async function myGetOrderWithOptionsFunction(orderId, options) {",
                      "  try {",
                      "    const order = await orders.getOrder(orderId, options);",
                      "    const id = order._id;",
                      "    const status = order.status;",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * {",
                      " *   \"_id\": \"02b7de48-b433-4d4b-b847-08c41c2b2b78\",",
                      " *   \"planId\": \"7251b9e9-3852-4e9f-958e-af630f039802\",",
                      " *   \"subscriptionId\": \"45f4ab2c-bc09-4736-be68-674cc2169ad1\",",
                      " *   \"buyer\": {",
                      " *     \"memberId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\",",
                      " *     \"contactId\": \"4c47c608-cfa8-4037-93ac-738f09560ed3\"",
                      " *   },",
                      " *   \"priceDetails\": {",
                      " *     \"subtotal\": \"0\",",
                      " *     \"discount\": \"0\",",
                      " *     \"total\": \"0\",",
                      " *     \"planPrice\": \"0\",",
                      " *     \"currency\": \"USD\",",
                      " *     \"singlePaymentUnlimited\": true",
                      " *   },",
                      " *   \"pricing\": {",
                      " *     \"singlePaymentUnlimited\": true,",
                      " *     \"prices\": [",
                      " *       {",
                      " *         \"duration\": {",
                      " *           \"cycleFrom\": 1",
                      " *         },",
                      " *         \"price\": {",
                      " *           \"subtotal\": \"0\",",
                      " *           \"discount\": \"0\",",
                      " *           \"total\": \"0\",",
                      " *           \"currency\": \"USD\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   },",
                      " *   \"type\": \"ONLINE\",",
                      " *   \"orderMethod\": \"UNKNOWN\",",
                      " *   \"status\": \"ACTIVE\",",
                      " *   \"lastPaymentStatus\": \"NOT_APPLICABLE\",",
                      " *   \"startDate\": \"2021-10-31T11:00:00.000Z\",",
                      " *   \"pausePeriods\": [],",
                      " *   \"currentCycle\": {",
                      " *     \"index\": 1,",
                      " *     \"startedDate\": \"2021-10-31T11:00:00.000Z\"",
                      " *   },",
                      " *   \"planName\": \"Family Cooking\",",
                      " *   \"planDescription\": \"Weekly delivery of home cooking recipes and time-saving tips\",",
                      " *   \"planPrice\": \"0\",",
                      " *   \"_createdDate\": \"2021-09-02T06:13:28.595Z\",",
                      " *   \"_updatedDate\": \"2021-09-02T06:13:28.738Z\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listCurrentMemberOrders",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "filters",
              "type": "wix-pricing-plans-backend.Orders.CurrentMemberFilterOptions",
              "doc": "Filter options for limiting which orders are listed.",
              "optional": true },
            { "name": "sorting",
              "type": "wix-pricing-plans-backend.Orders.SortingOptions",
              "doc": "Sorting options, such as by which property and in which direction.",
              "optional": true },
            { "name": "paging",
              "type": "wix-pricing-plans-backend.Orders.PaginationOptions",
              "doc": "Pagination options, such as how many results are listed at a time.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-pricing-plans-backend.Orders.Order" ] } ] },
            "doc": "Fulfilled - Pricing plan orders for the current member that match the specified filtering, sorting, and pagination options." },
        "locations":
          [ { "lineno": 442,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Lists orders for the currently logged-in member.",
            "description":
              [ "The `listCurrentMemberOrders()` function returns a Promise that resolves to a list of up to 100 pricing plan orders. ",
                " You can specify options for filtering, sorting, and paginating the results." ],
            "links": [],
            "examples":
              [ { "title": "List orders for the currently logged-in member",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample filters object: ",
                      " * {",
                      " *   orderStatuses: ['PAUSED', 'CANCELED']",
                      " * }",
                      " */",
                      "",
                      "/* Sample sorting object: ",
                      " * {",
                      " *   fieldName: ['createdDate'], ",
                      " *   order: ['ASC']",
                      " * }",
                      " */",
                      "",
                      "/* Sample paging object: ",
                      " * {",
                      " *   limit: 3,",
                      " *   skip: 1",
                      " * }",
                      " */",
                      "",
                      "export async function myListCurrentMemberOrdersFunction(filters, sorting, paging) {",
                      "  try {",
                      "    const listedOrders = await orders.listCurrentMemberOrders(filters, sorting, paging);",
                      "    const firstOrderId = listedOrders.orders[0]._id;",
                      "    const firstOrderStatus = listedOrders.orders[0].status;",
                      "",
                      "    return listedOrders;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listOrders",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "filters",
              "type": "wix-pricing-plans-backend.Orders.FilterOptions",
              "doc": "Filter options for limiting which orders are listed.",
              "optional": true },
            { "name": "sorting",
              "type": "wix-pricing-plans-backend.Orders.SortingOptions",
              "doc": "Sorting options, such as by which property and in which direction.",
              "optional": true },
            { "name": "paging",
              "type": "wix-pricing-plans-backend.Orders.PaginationOptions",
              "doc": "Pagination options, such as how many results are listed at a time.",
              "optional": true },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Options",
              "doc": "Options to use when listing orders.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-pricing-plans-backend.Orders.Order" ] } ] },
            "doc": "Fulfilled - Pricing plan orders that match the specified filtering, sorting, and pagination options." },
        "locations":
          [ { "lineno": 234,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Lists pricing plan orders.",
            "description":
              [ "The `listOrders()` function returns a Promise that resolves to a list of up to 50 pricing plan orders. ",
                " You can specify options for filtering, sorting, and paginating the results.",
                "",
                " This function returns the orders on the site. To list orders for the current member only, see the ",
                " frontend [`listCurrentMemberOrders`](wix-pricing-plans/listCurrentMemberOrders) function.",
                "",
                "",
                " > **Note**: Only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) ",
                " > can list orders. You can override the permissions by setting the function's `suppressAuth` ",
                " > option to `true`." ],
            "links":
              [ "[listCurrentMemberOrders(Â )](wix-pricing-plans/listCurrentMemberOrders)" ],
            "examples":
              [ { "title": "List all orders",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "export async function myListOrdersFunction() {",
                      "",
                      "  try {",
                      "    const listedOrders = await orders.listOrders();",
                      "",
                      "    return listedOrders;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Promise resolves to an array of order objects." ],
                  "extra":
                    {  } },
                { "title": "Bypass permission checks to list all orders",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample options object: { suppressAuth : true }",
                      "  ",
                      "export async function myListOrdersWithOptionsFunction(options) {",
                      "  try {",
                      "    const listedOrders = await orders.listOrders(null, null, null, options);",
                      "    const firstOrderId = listedOrders.orders[0]._id;",
                      "    const firstOrderStatus = listedOrders.orders[0].status;",
                      "",
                      "    return listedOrders;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "/* Promise resolves to an array of order objects--even if you do not have a role with ",
                      " * permissions for listing orders.",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Paginate and sort orders that match the specified filters",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample filters object: ",
                      " * {",
                      " *   orderStatuses: ['PAUSED', 'CANCELED']",
                      " * }",
                      " */",
                      "",
                      "/* Sample sorting object: ",
                      " * {",
                      " *   fieldName: ['createdDate'], ",
                      " *   order: ['ASC']",
                      " * }",
                      " */",
                      "",
                      "/* Sample paging object: ",
                      " * {",
                      " *   limit: 3,",
                      " *   skip: 1",
                      " * }",
                      " */",
                      "",
                      "export async function myListOrdersWithFiltersFunction(filters, sorting, paging) {",
                      "  try {",
                      "    const listedOrders = await orders.listOrders(filters, sorting, paging);",
                      "    const firstOrderId = listedOrders.orders[0]._id;",
                      "    const firstOrderStatus = listedOrders.orders[0].status;",
                      "",
                      "    return listedOrders;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "/* Promise resolves to: ",
                      " * [",
                      " *   {",
                      " *     \"_id\": \"0d9c781c-d2d8-4e42-a9e6-60122ed47771\",",
                      " *     \"planId\": \"a4d57b6c-42eb-4416-b8dd-196f1c321b78\",",
                      " *     \"subscriptionId\": \"7b7f1800-da9a-4bf3-9e80-2eaef7e25f0c\",",
                      " *     \"wixPayOrderId\": \"0010ea6a-a8cb-4b5d-a9fc-4ed1f337c623\",",
                      " *     \"buyer\": {",
                      " *       \"memberId\": \"fac761ea-e6f1-4e3d-8b30-a4852f091415\",",
                      " *       \"contactId\": \"fac761ea-e6f1-4e3d-8b30-a4852f091415\"",
                      " *     },",
                      " *     \"priceDetails\": {",
                      " *       \"subtotal\": \"33\",",
                      " *       \"discount\": \"0\",",
                      " *       \"total\": \"33\",",
                      " *       \"planPrice\": \"33\",",
                      " *       \"currency\": \"EUR\",",
                      " *       \"singlePaymentForDuration\": {",
                      " *         \"count\": 6,",
                      " *         \"unit\": \"MONTH\"",
                      " *       }",
                      " *     },",
                      " *     \"pricing\": {",
                      " *       \"singlePaymentForDuration\": {",
                      " *         \"count\": 6,",
                      " *         \"unit\": \"MONTH\"",
                      " *       },",
                      " *       \"prices\": [",
                      " *         {",
                      " *           \"duration\": {",
                      " *             \"cycleFrom\": 1,",
                      " *             \"numberOfCycles\": 1",
                      " *           },",
                      " *           \"price\": {",
                      " *             \"subtotal\": \"33\",",
                      " *             \"discount\": \"0\",",
                      " *             \"total\": \"33\",",
                      " *             \"currency\": \"EUR\"",
                      " *           }",
                      " *         }",
                      " *       ]",
                      " *     },",
                      " *     \"type\": \"OFFLINE\",",
                      " *     \"orderMethod\": \"UNKNOWN\",",
                      " *     \"status\": \"PAUSED\",",
                      " *     \"lastPaymentStatus\": \"PAID\",",
                      " *     \"startDate\": \"2022-06-27T13:35:22.979Z\",",
                      " *     \"endDate\": \"2022-12-31T13:46:10.979Z\",",
                      " *     \"pausePeriods\": [",
                      " *       {",
                      " *         \"status\": \"ENDED\",",
                      " *         \"pauseDate\": \"2022-07-04T12:39:33.140Z\",",
                      " *         \"resumeDate\": \"2022-07-04T12:50:21.637Z\"",
                      " *       },",
                      " *       {",
                      " *         \"status\": \"ACTIVE\",",
                      " *         \"pauseDate\": \"2022-07-04T14:22:45.006Z\"",
                      " *       }",
                      " *     ],",
                      " *     \"earliestEndDate\": \"2022-12-27T13:46:11.475Z\",",
                      " *     \"currentCycle\": {",
                      " *       \"index\": 1,",
                      " *       \"startedDate\": \"2022-06-27T13:35:22.979Z\",",
                      " *       \"endedDate\": \"2022-12-31T13:46:10.979Z\"",
                      " *     },",
                      " *     \"planName\": \"One and Done\",",
                      " *     \"planDescription\": \"\",",
                      " *     \"planPrice\": \"33\",",
                      " *     \"_createdDate\": \"2022-06-27T13:35:31.538Z\",",
                      " *     \"_updatedDate\": \"2022-07-04T14:22:45.006Z\"",
                      " *   },",
                      " *   {",
                      " *     \"_id\": \"a06b6a51-c815-44a1-a0f7-0af6cb4bbfda\",",
                      " *     \"planId\": \"9f4ad2f3-d948-4daf-b517-eb2206b01ea1\",",
                      " *     \"subscriptionId\": \"e2cbe3c4-322c-4530-b638-6076102e88ae\",",
                      " *     \"wixPayOrderId\": \"b6c4a8b0-f7c1-480d-a2a9-68c5db566e16\",",
                      " *     \"buyer\": {",
                      " *       \"memberId\": \"f1654c62-53b4-43d5-b01b-acbf782dee6f\",",
                      " *       \"contactId\": \"f1654c62-53b4-43d5-b01b-acbf782dee6f\"",
                      " *     },",
                      " *     \"priceDetails\": {",
                      " *       \"subtotal\": \"9.99\",",
                      " *       \"discount\": \"0\",",
                      " *       \"total\": \"9.99\",",
                      " *       \"planPrice\": \"9.99\",",
                      " *       \"currency\": \"EUR\",",
                      " *       \"singlePaymentUnlimited\": true",
                      " *     },",
                      " *     \"pricing\": {",
                      " *       \"singlePaymentUnlimited\": true,",
                      " *       \"prices\": [",
                      " *         {",
                      " *           \"duration\": {",
                      " *             \"cycleFrom\": 1,",
                      " *             \"numberOfCycles\": 1",
                      " *           },",
                      " *           \"price\": {",
                      " *             \"subtotal\": \"9.99\",",
                      " *             \"discount\": \"0\",",
                      " *             \"total\": \"9.99\",",
                      " *             \"currency\": \"EUR\"",
                      " *           }",
                      " *         }",
                      " *       ]",
                      " *     },",
                      " *     \"type\": \"OFFLINE\",",
                      " *     \"orderMethod\": \"UNKNOWN\",",
                      " *     \"status\": \"PAUSED\",",
                      " *     \"lastPaymentStatus\": \"PAID\",",
                      " *     \"startDate\": \"2022-07-01T13:45:53.129Z\",",
                      " *     \"pausePeriods\": [",
                      " *       {",
                      " *         \"status\": \"ENDED\",",
                      " *         \"pauseDate\": \"2022-07-04T12:11:53.644Z\",",
                      " *         \"resumeDate\": \"2022-07-04T12:37:33.089Z\"",
                      " *       },",
                      " *       {",
                      " *         \"status\": \"ACTIVE\",",
                      " *         \"pauseDate\": \"2022-07-10T09:57:23.919Z\"",
                      " *       }",
                      " *     ],",
                      " *     \"currentCycle\": {",
                      " *       \"index\": 1,",
                      " *       \"startedDate\": \"2022-07-01T13:45:53.129Z\"",
                      " *     },",
                      " *     \"planName\": \"Gold\",",
                      " *     \"planDescription\": \"Gold membership to the MyGame World of Online Gaming\",",
                      " *     \"planPrice\": \"9.99\",",
                      " *     \"_createdDate\": \"2022-07-04T11:21:14.790Z\",",
                      " *     \"_updatedDate\": \"2022-07-10T09:57:23.919Z\"",
                      " *   },",
                      " *   {",
                      " *     \"_id\": \"00739d76-edc0-4ce4-ab20-172bf09dd2f0\",",
                      " *     \"planId\": \"9f4ad2f3-d948-4daf-b517-eb2206b01ea1\",",
                      " *     \"subscriptionId\": \"2de691a9-7833-48e8-a3e0-3912d9896069\",",
                      " *     \"wixPayOrderId\": \"b1204e93-ac5a-4116-9ad8-52e44017125a\",",
                      " *     \"buyer\": {",
                      " *       \"memberId\": \"f1654c62-53b4-43d5-b01b-acbf782dee6f\",",
                      " *       \"contactId\": \"f1654c62-53b4-43d5-b01b-acbf782dee6f\"",
                      " *     },",
                      " *     \"priceDetails\": {",
                      " *       \"subtotal\": \"9.99\",",
                      " *       \"discount\": \"0\",",
                      " *       \"total\": \"9.99\",",
                      " *       \"planPrice\": \"9.99\",",
                      " *       \"currency\": \"EUR\",",
                      " *       \"singlePaymentUnlimited\": true",
                      " *     },",
                      " *     \"pricing\": {",
                      " *       \"singlePaymentUnlimited\": true,",
                      " *       \"prices\": [",
                      " *         {",
                      " *           \"duration\": {",
                      " *             \"cycleFrom\": 1,",
                      " *             \"numberOfCycles\": 1",
                      " *           },",
                      " *           \"price\": {",
                      " *             \"subtotal\": \"9.99\",",
                      " *             \"discount\": \"0\",",
                      " *             \"total\": \"9.99\",",
                      " *             \"currency\": \"EUR\"",
                      " *           }",
                      " *         }",
                      " *       ]",
                      " *     },",
                      " *     \"type\": \"OFFLINE\",",
                      " *     \"orderMethod\": \"UNKNOWN\",",
                      " *     \"status\": \"PAUSED\",",
                      " *     \"lastPaymentStatus\": \"PAID\",",
                      " *     \"startDate\": \"2022-07-11T13:45:53.129Z\",",
                      " *     \"pausePeriods\": [",
                      " *       {",
                      " *         \"status\": \"ACTIVE\",",
                      " *         \"pauseDate\": \"2022-07-12T15:07:41.283Z\"",
                      " *       }",
                      " *     ],",
                      " *     \"currentCycle\": {",
                      " *       \"index\": 1,",
                      " *       \"startedDate\": \"2022-07-11T13:45:53.129Z\"",
                      " *     },",
                      " *     \"planName\": \"Gold\",",
                      " *     \"planDescription\": \"Gold membership to the MyGame World of Online Gaming\",",
                      " *     \"planPrice\": \"9.99\",",
                      " *     \"_createdDate\": \"2022-07-04T14:18:46.636Z\",",
                      " *     \"_updatedDate\": \"2022-07-12T15:07:41.283Z\"",
                      " *   }",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of orders",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Retrieve all orders",
                      "",
                      "export async function myListAllOrdersFunction() {",
                      "  ",
                      "  const ordersPerPage = 50;",
                      "",
                      "  let pageNumber = 0;",
                      "  let currentOrdersPage = [];",
                      "  let allOrders = [];",
                      "",
                      "  // Use the 'skip' parameter to retrieve sequential pages of 50 orders",
                      "  // until the retrieved page contains no orders",
                      "  do {",
                      "    let ordersToSkip = {skip: pageNumber * ordersPerPage};",
                      "    try {",
                      "      currentOrdersPage = await orders.listOrders(null, null, ordersToSkip);",
                      "    } catch (error) {",
                      "      console.error(error);",
                      "    }",
                      "    allOrders = allOrders.concat(currentOrdersPage);",
                      "    pageNumber++;",
                      "  } while (currentOrdersPage.length != 0)",
                      "",
                      "  return allOrders;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to retrieve all orders, bypassing the maximum limit of 50." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "markAsPaid",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order being marked as paid." },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Options",
              "doc": "Options to use when marking an order as paid.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the order is marked as paid." },
        "locations":
          [ { "lineno": 265,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Marks an offline pricing plan order as paid.",
            "description":
              [ "The `markAsPaid()` function returns a Promise that resolves when the offline order is successfully marked as paid. ",
                "",
                " The entire order is marked as paid, even if the order's payments are recurring.",
                "",
                " > **Note:** Marking separate payment cycles as paid is not yet supported. Subsequent offline payments do trigger events and emails, but are not registered as additional offline payments.",
                "",
                " Marking an offline order as paid causes the following changes: ",
                " + The order's `lastPaymentStatus` changes to `\"PAID\"`.",
                " + The order's `status` changes to either `\"PENDING\"` or `\"ACTIVE\"`, depending on the order's `startDate`.",
                "",
                " An error occurs if you attempt to: ",
                " ",
                " + Mark an already-paid, offline order as paid. You cannot mark an offline order as paid twice.",
                " + Mark an online order as paid. The `markAsPaid()` function is supported for offline orders only. ",
                " ",
                " The [`onOrderMarkedAsPaid()`](wix-pricing-plans-backend/events/onOrderMarkedAsPaid) and [`onOrderUpdated()`](wix-pricing-plans-backend/events/onOrderUpdated) event handlers run when an offline order is marked as paid.",
                "",
                " > **Note**: Only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) ",
                " > can mark offline orders as paid. You can override the permissions by setting the function's `suppressAuth` ",
                " > option to `true`." ],
            "links":
              [ "[onOrderMarkedAsPaid(Â )](wix-pricing-plans-backend/events/onOrderMarkedAsPaid)",
                "[onOrderUpdated()](wix-pricing-plans-backend/events/onOrderUpdated)" ],
            "examples":
              [ { "title": "Mark an offline order as paid",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId value: '19b28b41-1ef2-42dc-afaa-9dc1854d0191'",
                      "",
                      "export async function myMarkAsPaidFunction(orderId) {",
                      "  try {",
                      "    const order = await orders.markAsPaid(orderId);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } },
                { "title": "Mark an offline order as paid, bypassing permission checks",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample orderId value: '895fd8d9-f732-444f-a82b-19f7e55e9617'",
                      " *",
                      " * Sample options object: ",
                      " * { ",
                      " *   suppressAuth : true ",
                      " * }",
                      " */",
                      "",
                      "export async function myMarkAsPaidWithOptionsFunction(orderId, options) {",
                      "  try {",
                      "    const order = await orders.markAsPaid(orderId, options);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "pauseOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order being paused." },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Options",
              "doc": "Options to use when pausing an order.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the order is paused." },
        "locations":
          [ { "lineno": 301,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Pauses a pricing plans order.",
            "description":
              [ "The `pauseOrder()` function returns a Promise that resolves when the order is successfully paused. ",
                "",
                " For orders with recurring payments, `pauseOrder()` also pauses the payment schedule. Buyers are not ",
                " charged when an order is paused. Use `pauseOrder()`, for example, if the buyer is away and would ",
                " like to put their pricing plan membership on hold until they return. Pausing an order affects the ",
                " end date of the order by adding the time the order is paused to the `endDate`. Can only pause orders ",
                " with an `ACTIVE` status. ",
                "",
                " Pausing an order causes the following changes: ",
                " + The order status changes to `\"PAUSED\"`.",
                " + The `pausePeriods` array is updated.",
                " ",
                " The `endDate` and the `earliestEndDate` for the order are adjusted to include the pause period when the order is resumed.",
                "",
                " The [`onOrderPaused()`](wix-pricing-plans-backend/events/onOrderPaused) and [`onOrderUpdated()`](wix-pricing-plans-backend/events/onOrderUpdated) event handlers run when an order is paused.",
                "",
                " Paused orders can be continued with the [`resumeOrder()`](#resumeOrder) function. ",
                "",
                " > **Note**: Only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) ",
                " > can pause orders. You can override the permissions by setting the function's `suppressAuth` ",
                " > option to `true`." ],
            "links":
              [ "[resumeOrder(Â )](#resumeOrder)",
                "[onOrderPaused(Â )](wix-pricing-plans-backend/events/onOrderPaused)",
                "[onOrderUpdated(Â )](wix-pricing-plans-backend/events/onOrderUpdated)" ],
            "examples":
              [ { "title": "Pause an order",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId value: '19b28b41-1ef2-42dc-afaa-9dc1854d0191'",
                      "",
                      "export async function myPauseOrderFunction(orderId) {",
                      "  try {",
                      "    const order = await orders.pauseOrder(orderId);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } },
                { "title": "Pause an order, bypassing permission checks",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample orderId value: '895fd8d9-f732-444f-a82b-19f7e55e9617'",
                      " *",
                      " * Sample options object: ",
                      " * { ",
                      " *   suppressAuth : true ",
                      " * }",
                      " */",
                      "",
                      "export async function myPauseOrderWithOptionsFunction(orderId, options) {",
                      "  try {",
                      "    const order = await orders.pauseOrder(orderId, options);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "postponeEndDate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order whose end date must change." },
            { "name": "endDate",
              "type": "Date",
              "doc": "New date and time to update the endDate at which the order will expire." },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Options",
              "doc": "Options to use when changing the end date of an order.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the order's end date has been postponed or made earlier." },
        "locations":
          [ { "lineno": 339,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Extends the duration of a pricing plan order by postponing the order's `endDate`.",
            "description":
              [ "The `postponeEndDate()` function returns a Promise that resolves when the order's end date is successfully changed. ",
                "",
                " The new end date and time must be later than the order's current `endDate`.",
                "",
                " Postponing the end date of an order does not impact payments. For example, if the pricing plan is for a membership ",
                " to an online lecture series, and you want to extend the duration of the series because the lecturer could not",
                " attend some sessions, you can postpone the end date of the orders for all relevant participants. The ",
                " participants will not be billed additionally.",
                "",
                " Postponing an order causes the following changes: ",
                " + The `endDate` for the order is adjusted to the new end date.",
                " The [`onOrderEndDatePostponed()`](wix-pricing-plans-backend/events/onOrderEndDatePostponed) and [`onOrderUpdated()`](wix-pricing-plans-backend/events/onOrderUpdated) event handlers run when an order's end date is postponed or made earlier.",
                "",
                " > **Note**: Only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) ",
                " > can change the end date of orders. You can override the permissions by setting the function's `suppressAuth` ",
                " > option to `true`." ],
            "links":
              [ "[onOrderEndDatePostponed(Â )](wix-pricing-plans-backend/events/onOrderEndDatePostponed)",
                "[onOrderUpdated(Â )](wix-pricing-plans-backend/events/onOrderUpdated)" ],
            "examples":
              [ { "title": "Postpone the end of an order to a later date",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId value: '5bc6d668-f09f-4f1d-98f2-289d4c209f2b'",
                      "//",
                      "// Sample endDate value: new Date('November 1, 2022 10:00:00')",
                      "",
                      "export async function myPostponeEndDateFunction(orderId) {",
                      "  try {",
                      "    const order = await orders.postponeEndDate(orderId, endDate);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } },
                { "title": "Bring the end of an order forward to an earlier date, bypassing permission checks",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample orderId value: '895fd8d9-f732-444f-a82b-19f7e55e9617'",
                      " * ",
                      " * Sample endDate value: new Date('Fri Jul 22 2022 17:50:26')",
                      " *",
                      " * Sample options object: ",
                      " * { ",
                      " *   suppressAuth : true ",
                      " * }",
                      " */",
                      "",
                      "export async function myPostponeEndDateWithOptionsFunction(orderId, endDate, options) {",
                      "  try {",
                      "    const order = await orders.postponeEndDate(orderId, endDate, options);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "requestCurrentMemberOrderCancellation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order whose cancellation is requested." },
            { "name": "effectiveAt",
              "type": "string",
              "doc": "The request can be that the order is canceled immediately or at the next payment date. One-time orders can only be canceled immediately.\nOne of:\n + `\"IMMEDIATELY\"` The request indicates that the order should be canceled immediately. \n + `\"NEXT_PAYMENT_DATE\"`. The request indicates that the order be canceled at the next payment date." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the cancellation process is started." },
        "locations":
          [ { "lineno": 458,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Starts the process of cancelling the logged-in member's pricing plan order.",
            "description":
              [ "The `requestCurrentMemberOrderCancellation()` function returns a Promise that resolves when the order cancellation is successfully requested. ",
                "",
                " For orders with recurring payments, a cancellation can be set to occur either immediately or at the next payment date.",
                " For orders with one-time payments, a cancellation occurs immediately after the request is processed.",
                "",
                " Requesting an order cancellation starts the cancellation process. The event is triggered immediately and the function's promise",
                " is fulfilled. However, there may be some operations that continue to be processed before the status of the order is ",
                " changed to `\"CANCELED\"`. For example, payments might need to be refunded before the order is fully canceled.",
                "",
                " The [`onOrderUpdated()`](wix-pricing-plans-backend/events/onOrderUpdated) event handler runs when a cancellation is requested.",
                " The [`onOrderCanceled()`](wix-pricing-plans-backend/events/onOrderCanceled) event handler runs when the cancellation is completed." ],
            "links":
              [ "[cancelOrder( )](#cancelOrder)",
                "[onOrderUpdated( )](wix-pricing-plans-backend/events/onOrderUpdated)",
                "[onOrderCanceled( )](wix-pricing-plans-backend/events/onOrderCanceled)" ],
            "examples":
              [ { "title": "Start the cancellation process for the currently logged-in member's order",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId value: 'a8c4a1b2-b5e8-4b33-9693-057ec93e9a27'",
                      "// ",
                      "// Sample effectiveAt value: 'IMMEDIATELY'",
                      "",
                      "export async function myRequestCurrentMemberCancelFunction(orderId, effectiveAt) {",
                      "  try {",
                      "    const order = await orders.requestCurrentMemberOrderCancellation(orderId, effectiveAt);",
                      "  ",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "resumeOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "ID of the order being resumed." },
            { "name": "options",
              "type": "wix-pricing-plans-backend.Options",
              "doc": "Options to use when resuming an order.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the order is resumed." },
        "locations":
          [ { "lineno": 372,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Resumes a paused pricing plan order.",
            "description":
              [ "The `resumeOrder()` function returns a Promise that resolves when a paused order is successfully resumed. ",
                "",
                " For orders with recurring payments, `resumeOrder()` also restarts the payment schedule.",
                "",
                " Resuming an order causes the following changes: ",
                " + The order status changes to `\"ACTIVE\"`.",
                " + The `pausePeriods` array is updated. ",
                " + The `endDate` for the order is adjusted to include the pause period.",
                " + The `earliestEndDate` is adjusted to include the pause period. This property is reserved for future use.",
                "",
                " The [`onOrderResumed()`](wix-pricing-plans-backend/events/onOrderResumed) and [`onOrderUpdated()`](wix-pricing-plans-backend/events/onOrderUpdated) event handlers run when an order is resumed.",
                "",
                " > **Note**: Only site visitors with the **Manage Pricing Plans** and **Manage Subscriptions** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions/roles) ",
                " > can resume orders. You can override the permissions by setting the function's `suppressAuth` ",
                " > option to `true`." ],
            "links":
              [ "[pauseOrder(Â )](#pauseOrder)",
                "[onOrderResumed(Â )](wix-pricing-plans-backend/events/onOrderResumed)",
                "[onOrderUpdated(Â )](wix-pricing-plans-backend/events/onOrderUpdated)" ],
            "examples":
              [ { "title": "Resume a paused order",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "// Sample orderId value: '19b28b41-1ef2-42dc-afaa-9dc1854d0191'",
                      "",
                      "export async function myResumeOrderFunction(orderId) {",
                      "  try {",
                      "    const order = await orders.resumeOrder(orderId);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } },
                { "title": "Resume a paused order, bypassing permission checks",
                  "body":
                    [ "import { orders } from 'wix-pricing-plans-backend';",
                      "",
                      "/* Sample orderId value: '895fd8d9-f732-444f-a82b-19f7e55e9617'",
                      " *",
                      " * Sample options object: ",
                      " * { ",
                      " *   suppressAuth : true ",
                      " * }",
                      " */",
                      "",
                      "export async function myResumeOrderWithOptionsFunction(orderId, options) {",
                      "  try {",
                      "    const order = await orders.resumeOrder(orderId, options);",
                      "",
                      "    return order;",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "// Returns a promise that resolves to void" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Buyer",
        "locations":
          [ { "lineno": 35,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Buyer details.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "memberId",
              "type": "string",
              "doc": "Member ID for the buyer. See [`wix-members-backend`](wix-members-backend/introduction) to learn more about a site's members." },
            { "name": "contactId",
              "type": "string",
              "doc": "Contact ID for the buyer. See [Contacts in `wix-crm-backend`](wix-crm-backend/contacts/introduction) to learn more about a site's contacts." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Cancellation",
        "locations":
          [ { "lineno": 43,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Details about the cancellation of an order. Only present if the order `status` is `\"CANCELED\"`.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "requestedDate",
              "type": "Date",
              "doc": "Date and time when the cancellation was requested." },
            { "name": "cause",
              "type": "string",
              "doc": "The reason for the cancellation. \nSupported values:\n + `\"OWNER_ACTION\"`. The site owner canceled the order. \n + `\"MEMBER_ACTION\"`. The buyer initiated the cancellation.\n + `\"PAYMENT_FAILURE\"`. A payment transaction failed.\n + `\"PAYMENT_SETUP_FAILURE\"`. The buyer's payment details weren't set up correctly." },
            { "name": "effectiveAt",
              "type": "string",
              "doc": "When the cancellation takes effect. This is set when cancelling the order.\nSupported values:\n + `\"IMMEDIATELY\"`. The cancellation occurs immediately and the buyer can no longer use the plan at this point.\n + `\"NEXT_PAYMENT_DATE\"`. The cancellation occurs at the next payment date and time. The buyer can continue to use the plan until that date and time." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Coupon",
        "locations":
          [ { "lineno": 213,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Coupon applied to the order.  \n\nTo learn more about coupons, see [applyCoupon()](wix-pricing-plans-backend/checkout/applycoupon).",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "code",
              "type": "string",
              "doc": "Code of the applied coupon." },
            { "name": "amount",
              "type": "string",
              "doc": "Total discount of the coupon, as a monetary amount." },
            { "name": "id",
              "type": "string",
              "doc": "Coupon ID." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "CurrentCycle",
        "locations":
          [ { "lineno": 60,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Current payment cycle for the order. \n\n`currentCycle` will be omitted if the order's `status` is `CANCELED` or `ENDED`, or if the `startDate` hasn't been reached yet.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "index",
              "type": "number",
              "doc": "Index of the current payment cycle in the order.\n\n`0` when the order is in a free trial period. In all other cases, the index starts with `1`." },
            { "name": "startedDate",
              "type": "Date",
              "doc": "Start date and time for the current payment cycle." },
            { "name": "endedDate",
              "type": "Date",
              "doc": "End date and time for the current payment cycle." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "CurrentMemberFilterOptions",
        "locations":
          [ { "lineno": 419,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Fields to filter by when listing orders for the current member.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "planIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific IDs of plans that were ordered by the current member.",
              "optional": true },
            { "name": "autoRenewCanceled",
              "type": "boolean",
              "doc": "Whether the auto-renewal of the current member's recurring orders was canceled.",
              "optional": true },
            { "name": "orderStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific statuses for the current member's orders.\n + `\"DRAFT\"`. The order has been initiated but payment has not been processed yet. The plan is not yet available for use.\n + `\"PENDING\"`. Payment is being processed.  The plan is not yet available for use.\n + `\"ACTIVE\"`. The order has been processed and paid for.  The plan is available for use.\n + `\"PAUSED\"`. Use of the plan has been [paused](wix-pricing-plans-backend/orders/pauseorder), for example, if the buyer is away. The plan can be [resumed](wix-pricing-plans-backend/orders/resumeorder).\n + `\"ENDED\"`. The order has completed its duration and is no longer available for use.\n + `\"CANCELED\"`. The order has been [canceled](wix-pricing-plans-backend/orders/cancelorder).",
              "optional": true },
            { "name": "paymentStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific payment statuses for the current member's orders.\n + `\"PAID\"`. The last payment was paid.\n + `\"REFUNDED\"`. The last payment was refunded.\n + `\"FAILED\"`. The last payment transaction did not complete.\n + `\"UNPAID\"`. The last payment was not paid.\n + `\"PENDING\"`. Awaiting payment. \n + `\"NOT_APPLICABLE\"`. No payment was necessary, such as for free plans or free trials.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Duration",
        "locations":
          [ { "lineno": 2,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Length of one payment cycle. For example, `1` `MONTH` for monthly payments.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "count",
              "type": "number",
              "doc": "The amount of a duration `unit` in a single payment cycle. \n\nCurrently limited to support only value of `1`." },
            { "name": "unit",
              "type": "string",
              "doc": "Unit of time for the cycle duration. \n\nSupported values: `\"UNDEFINED\"`, `\"DAY\"`, `\"WEEK\"`, `\"MONTH\"`, `\"YEAR\"`" } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FilterOptions",
        "locations":
          [ { "lineno": 196,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Fields to filter by when listing orders.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "buyerIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific member IDs of buyers who ordered a pricing plan.",
              "optional": true },
            { "name": "planIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific IDs of plans that were ordered.",
              "optional": true },
            { "name": "autoRenewCanceled",
              "type": "boolean",
              "doc": "Whether the auto-renewal of recurring orders was canceled.",
              "optional": true },
            { "name": "orderStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific order statuses.\n + `\"DRAFT\"`. The order has been initiated but payment has not been processed yet. The plan is not yet available for use.\n + `\"PENDING\"`. Payment is being processed.  The plan is not yet available for use.\n + `\"ACTIVE\"`. The order has been processed and paid for.  The plan is available for use.\n + `\"PAUSED\"`. Use of the plan has been [paused](wix-pricing-plans-backend/orders/pauseorder), for example, if the buyer is away. The plan can be [resumed](wix-pricing-plans-backend/orders/resumeorder).\n + `\"ENDED\"`. The order has completed its duration and is no longer available for use.\n + `\"CANCELED\"`. The order has been [canceled](wix-pricing-plans-backend/orders/cancelorder).",
              "optional": true },
            { "name": "paymentStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific payment statuses.\n + `\"PAID\"`. The last payment was paid.\n + `\"REFUNDED\"`. The last payment was refunded.\n + `\"FAILED\"`. The last payment transaction did not complete.\n + `\"UNPAID\"`. The last payment was not paid.\n + `\"PENDING\"`. Awaiting payment. \n + `\"NOT_APPLICABLE\"`. No payment was necessary, such as for free plans or free trials.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Order",
        "locations":
          [ { "lineno": 73,
              "filename": "orders-shared.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Order ID." },
            { "name": "planId",
              "type": "string",
              "doc": "ID of the plan that was ordered." },
            { "name": "subscriptionId",
              "type": "string",
              "doc": "ID of the related Wix subscription. \n\nEvery pricing plan order corresponds to a Wix subscription, including orders for single payment plans. You can see all orders from your site's [Subscriptions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fsubscriptions%3FreferralInfo%3Dvelo-docs) page in the Dashboard." },
            { "name": "wixPayOrderId",
              "type": "string",
              "doc": "ID of the associated Wix Pay order. \n\nCreated by the [`createOnlineOrder()`](wix-pricing-plans-backend/checkout/createonlineorder) or [`createfflineOrder()`](wix-pricing-plans-backend/checkout/createofflineorder) function. For online orders, send this value as a parameter to the Wix Pay [`startPayment()`](wix-pay/startPayment) function to enable your buyer to pay for the order. `wixPayOrderId` is omitted if the order is free.",
              "optional": true },
            { "name": "buyer",
              "type": "wix-pricing-plans-backend.Orders.Buyer",
              "doc": "The buyer's IDs. Includes `memberId` and `contactId`.\n\nCurrently, Pricing Plan orders are limited to members only. `contactId` is returned, but a buyer will not be able to order a plan without a `memberId`." },
            { "name": "priceDetails",
              "type": "wix-pricing-plans-backend.Orders.PriceDetails",
              "doc": "**Deprecated.** Use `pricing` instead." },
            { "name": "pricing",
              "type": "wix-pricing-plans-backend.Orders.Pricing",
              "doc": "Order [pricing model](wix-pricing-plans-backend/introduction#pricing-models), price, and payment schedule.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "How the order was processed. \nSupported values:\n + `\"ONLINE\"`. The buyer ordered the plan using the site.\n + `\"OFFLINE\"`. The buyer made a manual, offline order without using the site." },
            { "name": "status",
              "type": "string",
              "doc": "Status of the order.\nSupported values:\n + `\"DRAFT\"`. The order has been initiated but payment hasn't been processed yet. The plan isn't yet available for use.\n + `\"PENDING\"`. The order has been processed and its start date is set in the future. The plan isn't yet available for use.\n + `\"ACTIVE\"`. The order has been processed. The plan is available for use.\n + `\"PAUSED\"`. The order, and use of the plan, is [paused](wix-pricing-plans-backend/orders/pauseorder). For example, if the buyer is away. The order, and use of the plan, can be [resumed](wix-pricing-plans-backend/orders/resumeorder).\n + `\"ENDED\"`. The order has completed its duration and is no longer available for use.\n + `\"CANCELED\"`. The order has been [canceled](wix-pricing-plans-backend/orders/cancelorder)." },
            { "name": "autoRenewCanceled",
              "type": "boolean",
              "doc": "Whether the order will be canceled at the next payment date.\n\nIf `true`, the order `status` will be `CANCELED` and the next payment won't be charged. Omitted for single payment orders.",
              "optional": true },
            { "name": "cancellation",
              "type": "wix-pricing-plans-backend.Orders.Cancellation",
              "doc": "Details about the cancellation of an order. Only present if the `status` is `\"CANCELED\"`.",
              "optional": true },
            { "name": "lastPaymentStatus",
              "type": "string",
              "doc": "Status of the last payment for the order. This is updated automatically for online orders. The site owner updates this manually for offline orders.\nSupported values:\n + `\"PAID\"`. The last payment was paid.\n + `\"REFUNDED\"`. The last payment was refunded.\n + `\"FAILED\"`. The last payment transaction didn't complete.\n + `\"UNPAID\"`. The last payment wasn't paid.\n + `\"PENDING\"`. Awaiting payment. \n + `\"NOT_APPLICABLE\"`. No payment was necessary. For example, for free plans or free trials." },
            { "name": "startDate",
              "type": "Date",
              "doc": "Start date and time for the ordered plan." },
            { "name": "endDate",
              "type": "Date",
              "doc": "Current date and time the ordered plan will expire. \n\n`endDate` may be updated over the course of an order. If the order is [paused](wix-pricing-plans-backend/orders/pauseorder), it will have a later `endDate` once it [resumes](wix-pricing-plans-backend/orders/resumeorder). `endDate` may also be [postponed](wix-pricing-plans-backend/orders/postponeenddate).\n\nOmitted if the order is valid until canceled and still `\"ACTIVE\"`.",
              "optional": true },
            { "name": "pausePeriods",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-pricing-plans-backend.Orders.PausePeriod" ] },
              "doc": "List of periods during which this order is paused." },
            { "name": "freeTrialDays",
              "type": "string",
              "doc": "Free trial period, in days. Only available for recurring plans.",
              "optional": true },
            { "name": "earliestEndDate",
              "type": "Date",
              "doc": "Earliest end date and time that the plan for this order can expire. \n\nThis is calculated by adding all pause periods to the original end date. Omitted if the order is active until canceled. Reserved for future use.",
              "optional": true },
            { "name": "currentCycle",
              "type": "wix-pricing-plans-backend.Orders.CurrentCycle",
              "doc": "Current payment cycle for the order.\n\n`currentCycle` will be omitted if the order's status is `CANCELED` or `ENDED`, or if the `startDate` hasn't passed yet." },
            { "name": "planName",
              "type": "string",
              "doc": "Name of the plan at the time of the order." },
            { "name": "planDescription",
              "type": "string",
              "doc": "Description of the plan at the time of the order." },
            { "name": "planPrice",
              "type": "string",
              "doc": "Plan price as it was at the moment of order creation." },
            { "name": "_createdDate",
              "type": "Date",
              "doc": "Date and time the order was created." },
            { "name": "_updatedDate",
              "type": "Date",
              "doc": "Date and time the order was last updated. For example, the date and time an order was paused, resumed, or canceled." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "OrderCopy",
        "locations":
          [ { "lineno": 72,
              "filename": "orders-shared copy.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Order Copy ID." },
            { "name": "planId",
              "type": "string",
              "doc": "ID of the plan that was purchased with this order." },
            { "name": "subscriptionId",
              "type": "string",
              "doc": "ID of the related Wix subscription. Every pricing plan order corresponds to a Wix subscription, including orders for single payment plans. You can see all orders from your site's [Subscriptions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fsubscriptions%3FreferralInfo%3Dvelo-docs) page in the Dashboard." },
            { "name": "wixPayOrderId",
              "type": "string",
              "doc": "ID of the associated Wix Pay order, created by the [`createOnlineOrder()`](wix-pricing-plans-backend/checkout/createonlineorder) function. Send this value as a parameter to the Wix Pay [`startPayment()`](wix-pay/startPayment) function to enable your buyer to pay for the order. `wixPayOrderId` is omitted if the order is free.",
              "optional": true },
            { "name": "buyer",
              "type": "wix-pricing-plans-backend.Orders.Buyer",
              "doc": "Buyer details." },
            { "name": "priceDetails",
              "type": "wix-pricing-plans-backend.Orders.PriceDetails",
              "doc": "Order pricing details for one payment cycle, payment schedule, and expiration." },
            { "name": "pricing",
              "type": "wix-pricing-plans-backend.Orders.Pricing",
              "doc": "Order pricing model, price, and payment schedule.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "How the order was processed. \nOne of:\n + `\"ONLINE\"`. The buyer purchased the plan using the site.\n + `\"OFFLINE\"`. The buyer made a manual, offline purchase without using the site." },
            { "name": "status",
              "type": "string",
              "doc": "Status of the order.\nOne of:\n + `\"DRAFT\"`. The order has been initiated but payment hasn't been processed yet. The plan isn't yet available for use.\n + `\"PENDING\"`. Payment is being processed. The plan isn't yet available for use.\n + `\"ACTIVE\"`. The order has been processed and paid for. The plan is available for use.\n + `\"PAUSED\"`. Use of the plan has been [paused](wix-pricing-plans-backend/orders/pauseorder), for example, if the buyer is away. The plan can be [resumed](wix-pricing-plans-backend/orders/resumeorder).\n + `\"ENDED\"`. The order has completed its duration and is no longer available for use.\n + `\"CANCELED\"`. The order has been [canceled](wix-pricing-plans-backend/orders/cancelorder)." },
            { "name": "autoRenewCanceled",
              "type": "boolean",
              "doc": "If true, next payment won't be charged at the next scheduled payment date. The order `status` will become `\"CANCELED\"` at the expiration date. Omitted for single payment orders.",
              "optional": true },
            { "name": "cancellation",
              "type": "wix-pricing-plans-backend.Orders.Cancellation",
              "doc": "Details about the cancellation of an order. Omitted if the order `status` isn't `\"CANCELED\"`.",
              "optional": true },
            { "name": "lastPaymentStatus",
              "type": "string",
              "doc": "Status of the last payment for the order. The site owner updates this manually for offline orders.\nOne of:\n + `\"PAID\"`. The last payment was paid.\n + `\"REFUNDED\"`. The last payment was refunded.\n + `\"FAILED\"`. The last payment transaction didn't complete.\n + `\"UNPAID\"`. The last payment wasn't paid.\n + `\"PENDING\"`. Awaiting payment. \n + `\"NOT_APPLICABLE\"`. No payment was necessary, such as for free plans or free trials." },
            { "name": "startDate",
              "type": "Date",
              "doc": "Date the plan for this order will become active." },
            { "name": "endDate",
              "type": "Date",
              "doc": "Date the plan for this order will expire. Omitted if the order is active until canceled.",
              "optional": true },
            { "name": "pausePeriods",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-pricing-plans-backend.Orders.PausePeriod" ] },
              "doc": "List of periods during which this order is paused, if there are any." },
            { "name": "freeTrialDays",
              "type": "string",
              "doc": "Free trial period, in days. Only available for recurring plans.",
              "optional": true },
            { "name": "earliestEndDate",
              "type": "Date",
              "doc": "Earliest possible date that the plan for this order can end. This is calculated by adding all pause periods to the original end date. This date is used as a boundary for extending or shortening the duration of a plan. You can't set a plan to expire before this date. Omitted if the order is active until canceled.",
              "optional": true },
            { "name": "currentCycle",
              "type": "wix-pricing-plans-backend.Orders.CurrentCycle",
              "doc": "Current payment cycle for the order.\n\n`currentCycle` will be omitted if the order's status is `CANCELLED` or `ENDED`, or if the `startDate` hasn't passed yet." },
            { "name": "planName",
              "type": "string",
              "doc": "Name of the plan at the time of the order." },
            { "name": "planDescription",
              "type": "string",
              "doc": "Description of the plan at the time of the order." },
            { "name": "planPrice",
              "type": "string",
              "doc": "Plan price as it was at the moment of order creation." },
            { "name": "_createdDate",
              "type": "Date",
              "doc": "Date order was created. This is the date before initiating a payment or any other actions." },
            { "name": "_updatedDate",
              "type": "Date",
              "doc": "Date order was last updated, such as the date an order was paused, resumed, or canceled." } ],
        "extra":
          {  },
        "labels":
          [ "removed" ] },
      { "name": "OrderRecurrence",
        "locations":
          [ { "lineno": 14,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "The order has recurring payments.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "cycleDuration",
              "type": "wix-pricing-plans-backend.Orders.Duration",
              "doc": "Length of one payment cycle. For example, `1` `MONTH` for monthly payments." },
            { "name": "cycleCount",
              "type": "number",
              "doc": "Amount of payment cycles this subscription is valid for. \n\n`0` for orders of plans that are unlimited or until-canceled." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaginationOptions",
        "locations":
          [ { "lineno": 219,
              "filename": "orders.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "limit",
              "type": "number",
              "doc": "Limit the number of orders returned. \n\nDefault: `50`",
              "optional": true },
            { "name": "skip",
              "type": "number",
              "doc": "Number of entries to skip.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PausePeriod",
        "locations":
          [ { "lineno": 134,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Period during which the order of a plan is suspended.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "status",
              "type": "string",
              "doc": "Status of the pause period. \nSupported values:\n + `\"ACTIVE\"`. Status while the order is [paused](wix-pricing-plans-backend/orders/pauseorder).\n + `\"ENDED\"`. Status while the order is [resumed](wix-pricing-plans-backend/orders/resumeorder)." },
            { "name": "pauseDate",
              "type": "Date",
              "doc": "Start date and time of the pause period." },
            { "name": "resumeDate",
              "type": "Date",
              "doc": "End date and time of the pause period.\n\nOmitted while the pause period remains `\"ACTIVE\"`." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Price",
        "locations":
          [ { "lineno": 183,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Order price details.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "subtotal",
              "type": "string",
              "doc": "Price of the order excluding tax, specified as a monetary amount. For example, `\"9.99\"`." },
            { "name": "coupon",
              "type": "wix-pricing-plans-backend.Orders.Coupon",
              "doc": "Coupon applied to the order.  \n\nTo learn more about coupons, see [applyCoupon()](wix-pricing-plans-backend/checkout/applycoupon)." },
            { "name": "discount",
              "type": "string",
              "doc": "Total discount applied to the order." },
            { "name": "tax",
              "type": "wix-pricing-plans-backend.Orders.Tax",
              "doc": "Tax applied to the order.",
              "optional": true },
            { "name": "total",
              "type": "string",
              "doc": "Price after tax and discount is applied, specified as a monetary amount. For example, `\"13.98\"`. \n\nIf no tax is applied, this amount is the same as `subtotal`." },
            { "name": "currency",
              "type": "string",
              "doc": "Three-letter currency code in [ISO 4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PriceDetails",
        "locations":
          [ { "lineno": 148,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "**Deprecated.** Use `pricing` instead.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "subtotal",
              "type": "string",
              "doc": "Price of the order, excluding tax. Specified as a monetary amount, such as `\"3.99\"`." },
            { "name": "tax",
              "type": "wix-pricing-plans-backend.Orders.Tax",
              "doc": "Tax applied for the plan. Omitted if no tax was applied.",
              "optional": true },
            { "name": "total",
              "type": "string",
              "doc": "Price after tax is applied. Specified as a monetary amount, such as `\"4.98\"`. If no tax was applied, this amount is the same as `subtotal`." },
            { "name": "planPrice",
              "type": "string",
              "doc": "Price of the plan when the order was created. This price is the amount for a single payment. For subscriptions, this is the amount to pay for each single payment cycle and the `planPrice` is required. Otherwise, the payment is for the entire plan." },
            { "name": "currency",
              "type": "string",
              "doc": "Currency code. Must be a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code (for example, `\"USD\"`)." },
            { "name": "subscription",
              "type": "wix-pricing-plans-backend.Orders.OrderRecurrence",
              "doc": "Pricing model indicating that the order has recurring payments. This type of subscription isn't a \"Wix subscription,\" which encompasses various types of subscriptions, such as Wix Stores subscriptions, Wix invoice subscriptions, and *all* pricing plan models.",
              "optional": true },
            { "name": "singlePaymentForDuration",
              "type": "wix-pricing-plans-backend.Duration",
              "doc": "Pricing model indicating that the order is paid with a single payment per cycle and what the length of the cycle is. The cycle is the duration of the order's plan, not a payment cycle.",
              "optional": true },
            { "name": "singlePaymentUnlimited",
              "type": "boolean",
              "doc": "Pricing model indicating that the order of the plan is paid in one single payment and that the order is active until canceled.",
              "optional": true },
            { "name": "freeTrialDays",
              "type": "number",
              "doc": "Free trial period for the order in days. Available only for orders whose plans are recurring, meaning plans whose pricing model is `subscription`.",
              "optional": true } ],
        "extra":
          { "oneOfGroups":
              [ { "name": "pricingModel",
                  "members":
                    [ "singlePaymentForDuration",
                      "singlePaymentUnlimited",
                      "subscription" ] } ] },
        "labels": [] },
      { "name": "PriceDuration",
        "locations":
          [ { "lineno": 198,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Cycle duration to apply `price` for.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "cycleFrom",
              "type": "number",
              "doc": "Price starts to apply with this cycle. \n\n`1` is the first payment cycle for all pricing models." },
            { "name": "numberOfCycles",
              "type": "number",
              "doc": "Amount of cycles to apply price for.\n\nFor `subscription` pricing models with a finite number of cycles, the `numberOfCycles` is the same as `pricing.subscription.cycleCount`.\n\nFor `subscription` pricing models that are unlimited or until-canceled, the `numberOfCycles` is not returned.\n\nFor `singlePaymentForDuration` and `singlePaymentUnlimited` pricing models, the `numberOfCycles` is `1`." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Prices",
        "locations":
          [ { "lineno": 174,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Pricing details for all pricing models.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "duration",
              "type": "wix-pricing-plans-backend.Orders.PriceDuration",
              "doc": "Cycle duration to apply `price` for. \n\nUse with all pricing models. Can apply the same price to multiple payment cycles." },
            { "name": "price",
              "type": "wix-pricing-plans-backend.Orders.Price",
              "doc": "Order price." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Pricing",
        "locations":
          [ { "lineno": 164,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Order pricing model, price, and payment schedule.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "subscription",
              "type": "wix-pricing-plans-backend.Orders.OrderRecurrence",
              "doc": "Pricing model for an order with recurring payment cycles.",
              "optional": true },
            { "name": "singlePaymentForDuration",
              "type": "wix-pricing-plans-backend.Orders.Duration",
              "doc": "Pricing model for an order with a one-time payment and the order is valid for a specific amount of time.",
              "optional": true },
            { "name": "singlePaymentUnlimited",
              "type": "boolean",
              "doc": "Pricing model for an order with a one-time payment and the order is valid until canceled.",
              "optional": true },
            { "name": "prices",
              "type": "wix-pricing-plans-backend.Orders.Prices",
              "doc": "Pricing details for all pricing models." } ],
        "extra":
          { "oneOfGroups":
              [ { "name": "pricingModel",
                  "members":
                    [ "singlePaymentForDuration",
                      "singlePaymentUnlimited",
                      "subscription" ] } ] },
        "labels": [] },
      { "name": "SortingOptions",
        "locations":
          [ { "lineno": 233,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Sorting details.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "fieldName",
              "type": "string",
              "doc": "Name of the property to sort by.  \n\nSupported values: `_createdDate`, `endDate` \n\nDefault: `_createdDate`",
              "optional": true },
            { "name": "order",
              "type": "string",
              "doc": "Sort order.  \n\nSupported values:\n+ `\"ASC\"`: Ascending\n+ `\"DESC\"`: Descending  \n\nDefault: `\"ASC\"`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Tax",
        "locations":
          [ { "lineno": 223,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Tax applied to the order. If empty, no tax was applied.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "Name of the tax. For example, VAT." },
            { "name": "includedInPrice",
              "type": "boolean",
              "doc": "Whether tax is included in the original price. When `false`, tax is added at checkout." },
            { "name": "rate",
              "type": "string",
              "doc": "Tax rate percentage, as a number between 0 and 100. For example, a 7% tax rate is `\"7.00\"`." },
            { "name": "amount",
              "type": "string",
              "doc": "Total tax, specified as a monetary amount. For example, `\"3.99\"`." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }