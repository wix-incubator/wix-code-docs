{ "name": "Orders",
  "memberOf": "wix-pricing-plans-backend",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "orders.js" },
  "docs":
    { "summary": "The Pricing Plans Orders API contains functionality for managing\n your site's pricing plan [orders](https://support.wix.com/en/article/pricing-plans-an-overview).",
      "description":
        [ "Use the Pricing Plans Orders API to manage orders for your pricing plans. The Pricing Plans ",
          " Orders API provides functionality for managing pricing plan orders created ",
          " in the Wix Pricing Plans app or using this Wix Pricing Plans API.",
          "",
          " > **Note:**",
          " > As part of our Velo rebranding efforts, we have improved plan ordering and purchasing functionality",
          "   in our Pricing Plans APIs. The Pricing Plans APIs replace the deprecated Paid Plans APIs.",
          " > The deprecated APIs will continue to work, but they will not receive updates.",
          " > To keep any existing code compatible with future changes, see the",
          " > [migration instructions](wix-paid-plans/introduction#migration-instructions).",
          "",
          " ### Setting Up Pricing Plans",
          "",
          " To use APIs to manage your plan orders, first set up your site to:",
          "",
          " + Accept payments as described in [About Accepting Payments](https://support.wix.com/en/article/about-accepting-payments).",
          "",
          " + Offer membership plans as described in [About Pricing Plans](https://support.wix.com/en/article/about-pricing-plans). When setting up your site to accept pricing plans, ",
          "   define the plans you want to offer [using the Dashboard](https://support.wix.com/en/article/creating-a-plan-in-pricing-plans) or",
          "   [using the Pricing Plan APIs](wix-pricing-plans/introduction).",
          "",
          "",
          " ### Managing Orders",
          "",
          " Members can order pricing plans in 2 ways:",
          " + **Online**. Members order and pay for their plans",
          "   on your site without manual intervention. ",
          " + **Offline**. Members place their order by phone, fax, text, or email. You ",
          "   manually record each stage of the transaction.",
          "",
          " Use the Orders API to manage both online and ",
          " offline pricing plan orders. You can: ",
          "",
          " + Get and list orders.",
          " + Let members get and list their own orders.",
          " + Cancel orders and allow members to request cancellation of their own orders. ",
          " + Mark offline orders as paid. ",
          " + Manage orders, including pausing, postponing, and resuming them.",
          " ",
          " Updating the properties of a pricing plan does not affect any current purchases of the plan by members. The purchases retain",
          " their existing terms and pricing.",
          "",
          " > **Note:**",
          " > Deprecated [Paid Plans](wix-paid-plans/introduction/) APIs are still available for the following, ",
          " > but we encourage you to migrate to the [Pricing Plans](wix-pricing-plans/introduction/) APIs instead:",
          " > + Let site visitors [purchase](wix-paid-plans/purchasePlan) a plan directly, as if they were using the Pricing Plans app in the Wix Editor.",
          " > + Let site visitors [purchase](wix-paid-plans/orderPlan) a plan using your own customized process.",
          " > + Let site visitors [cancel](wix-paid-plans/cancelPlan) plan subscriptions (orders) that they have purchased. ",
          "",
          "",
          "",
          " ### Plans and Subscriptions",
          " ",
          " ",
          " Actions related to basic pricing plan management are available from the [Pricing Plans](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmembership%3FreferralInfo%3Dvelo-docs)",
          " page in the Dashboard. These actions correspond to the functions available in the [Pricing Plans APIs]().",
          "",
          " Every pricing plan order corresponds to a Wix subscription, including orders for single payment plans. You can see all orders from your site's",
          " [Subscriptions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fsubscriptions%3FreferralInfo%3Dvelo-docs)",
          " page in the Dashboard. Actions available on this page correspond to the functions available in the Orders APIs and the [Checkout APIs](wix-pricing-plans-backend/checkout/).",
          "",
          "",
          " > **Note**: Wix pricing plans are one type of Wix subscriptions available from the Subscriptions page. The Subscriptions page also includes Wix Stores subscriptions, Wix invoice subscriptions, *all* pricing plan models (not just the subscription model), and more.  ",
          "",
          "",
          "",
          " ### Roles and Permissions",
          "",
          " You need \"Manage Pricing Plans\" [permissions](https://support.wix.com/en/article/roles-permissions-accessing-roles-permissions) to perform ",
          " plan order functions, such as [`pauseOrder()`](wix-pricing-plans-backend/orders/pauseorder), [`cancelOrder()`](wix-pricing-plans-backend/orders/cancelorder), [`markAsPaid()`](wix-pricing-plans-backend/orders/markaspaid), and so on. ",
          "",
          "",
          " ### Importing the APIs",
          "",
          " To use the Orders API, import `orders` from the `wix-pricing-plans-backend` module.",
          "",
          "   ```javascript",
          "   import {orders} from 'wix-pricing-plans-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "cancelOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "ID of the order to cancel." },
            { "name": "effectiveAt",
              "type": "string",
              "doc": "When the order will be canceled. One-time orders can only be canceled immediately.\nOne of:\n + `\"IMMEDIATELY\"`. The order is canceled immediately.\n + `\"NEXT_PAYMENT_DATE\"`. The order will be canceled at the next payment date." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 97,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Cancels an order.",
            "description":
              [ "The `cancelOrder()` function returns a Promise that resolves when the order is successfully canceled. ",
                "",
                " For orders with recurring payments, cancellation can be set to occur either immediately or at the next payment date.",
                " For orders with one-time payments, cancellation occurs immediately.",
                "",
                " Canceling an order causes the following changes: ",
                " + The order status changes to `\"CANCELED\"`.",
                "",
                " The [`onOrderCanceled( )`] XXX event handler runs when an order is canceled.",
                "",
                " > **Note**: Only those with \"Manage Pricing Plans\" permissions can cancel orders." ],
            "links":
              [ "[requestCurrentMemberOrderCancellation(Â )](#requestCurrentMemberOrderCancellation)" ],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function cancelOrder() {",
                      "  const id = \"a string\";",
                      "  const effectiveAt = \"UNDEFINED\";",
                      "",
                      "  return orders",
                      "    .cancelOrder(id, effectiveAt)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getCurrentMemberOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "Order ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Orders.Order" ] },
            "doc": "Fulfilled - The requested pricing plan order." },
        "locations":
          [ { "lineno": 389,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Gets an order for the currently-logged in member.",
            "description":
              [ "The `getCurrentMemberOrders()` function returns a Promise that resolves to information about a specified order for the currently-logged in member. ",
                " > **Note**: Only those with \"XXX\" permissions can get orders." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function getCurrentMemberOrder() {",
                      "  const orderId = \"a string\";",
                      "",
                      "  return orders",
                      "    .getCurrentMemberOrder(orderId)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderId",
              "type": "string",
              "doc": "Order ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.Orders.Order" ] },
            "doc": "Fulfilled - The requested pricing plan order." },
        "locations":
          [ { "lineno": 169,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Gets an existing pricing plan order by ID.",
            "description":
              [ "The `getOrder()` function returns a Promise that resolves to information about the specified order. ",
                "",
                " > **Note**: Only those with \"Manage Pricing Plans\" permissions can get orders." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function getOrder() {",
                      "  const orderId = \"a string\";",
                      "",
                      "  return orders",
                      "    .getOrder(orderId)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listCurrentMemberOrders",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "filtering",
              "type": "wix-pricing-plans-backend.Orders.CurrentMemberFilterOptions",
              "doc": "Filter options for limiting which orders are listed.",
              "optional": true },
            { "name": "sorting",
              "type": "wix-pricing-plans-backend.Orders.SortingOptions",
              "doc": "Sorting options, such as direction.",
              "optional": true },
            { "name": "paging",
              "type": "wix-pricing-plans-backend.Orders.PaginationOptions",
              "doc": "Pagination options, such as how many results are listed at a time.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-pricing-plans-backend.Orders.Order" ] } ] },
            "doc": "Fulfilled - Pricing plan orders for the current member that match the specified filtering, sorting, and pagination options." },
        "locations":
          [ { "lineno": 420,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Lists orders for the currently-logged in member.",
            "description":
              [ "The `listCurrentMemberOrders()` function returns a Promise that resolves to a list of up to 100 pricing plan orders. ",
                " You can specify options for filtering, sorting, and paging the results.",
                "",
                " > **Note**: Only those with \"XXX\" permissions can list the current member's orders." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function listCurrentMemberOrders() {",
                      "  const listOrdersRequest = {",
                      "    planIds: [\"a string\"],",
                      "    autoRenewCanceled: true,",
                      "    orderStatuses: [\"UNDEFINED\"],",
                      "    paymentStatuses: [\"UNDEFINED\"],",
                      "    limit: 42,",
                      "    offset: 42,",
                      "    sorting: {",
                      "      fieldName: \"a string\",",
                      "      order: \"ASC\"",
                      "    }",
                      "  };",
                      "",
                      "  return orders",
                      "    .listCurrentMemberOrders(listOrdersRequest)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listOrders",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "filtering",
              "type": "wix-pricing-plans-backend.Orders.FilterOptions",
              "doc": "Filter options for limiting which orders are listed.",
              "optional": true },
            { "name": "sorting",
              "type": "wix-pricing-plans-backend.Orders.SortingOptions",
              "doc": "Sorting options, such as direction.",
              "optional": true },
            { "name": "paging",
              "type": "wix-pricing-plans-backend.Orders.PaginationOptions",
              "doc": "Pagination options, such as how many results are listed at a time.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-pricing-plans-backend.Orders.Order" ] } ] },
            "doc": "Fulfilled - Pricing plan orders that match the specified filtering, sorting, and pagination options." },
        "locations":
          [ { "lineno": 208,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Lists pricing plan orders.",
            "description":
              [ "The `listOrders()` function returns a Promise that resolves to a list of up to 100 pricing plan orders. ",
                " You can specify options for filtering, sorting, and paginating the results.",
                "",
                " > **Note**: Only those with \"XXX\" permissions can list orders." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function listOrders() {",
                      "  const filters = {",
                      "    buyerIds: [\"a string\"],",
                      "    planIds: [\"a string\"],",
                      "    autoRenewCanceled: true,",
                      "    orderStatuses: [\"UNDEFINED\"],",
                      "    paymentStatuses: [\"UNDEFINED\"]",
                      "  };",
                      "  const sorting = {",
                      "    fieldName: \"a string\",",
                      "    order: \"ASC\"",
                      "  };",
                      "  const paging = {",
                      "    limit: 42,",
                      "    skip: 42",
                      "  };",
                      "",
                      "  return orders",
                      "    .listOrders(filters, sorting, paging)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "markAsPaid",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "Order ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 226,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Indicates that an offline pricing plan order is paid.",
            "description":
              [ "The `markAsPaid()` function returns a Promise that resolves when the offline order is successfully marked as paid. ",
                "",
                " The entire order is marked as paid, even if the order's payments are recurring.",
                "",
                " > **Note:** Marking separate payment cycles as paid is not yet supported. Subsequent offline payments do trigger events and emails, but are not registered as additional offline payments.",
                "",
                " Marking an offline order as paid causes the following changes: ",
                " + The order's `lastPaymentStatus` changes to `\"PAID\"`.",
                " + The order's `status` changes to either `\"PENDING\"` or `\"ACTIVE\"`, depending on the order's `startDate`.",
                "",
                " The [`onOrderMarkedAsPaid( )`] XXX event handler runs when an offline order is marked as paid.",
                "",
                " > **Note**: Only those with \"Manage Pricing Plans\" permissions can mark orders as paid." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function markAsPaid() {",
                      "  const id = \"a string\";",
                      "",
                      "  return orders",
                      "    .markAsPaid(id)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "pauseOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "Order ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 251,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Pauses a pricing plan's order and, for recurring orders, also pauses its payment schedule.",
            "description":
              [ "The `pauseOrder()` function returns a Promise that resolves when the order is successfully paused. ",
                "",
                " Pausing an order affects the end date of the order. ",
                " For orders with recurring payments, `pauseOrder()` also pauses the payment schedule. Buyers are not ",
                " charged when an order is paused. Use `pauseOrder()`, for example, if the buyer is away and would ",
                " like to put their pricing plan membership on hold until they return. ",
                "",
                " Pausing an order causes the following changes: ",
                " + The order status changes to `\"PAUSED\"`.",
                " + The `pausePeriods` array is updated. ",
                " + The `endDate` for the order is adjusted to include the pause period.",
                " + The `earliestEndDate` is adjusted. This property is used when extending or shortening the duration of the order's plan.",
                "",
                " The [`onOrderPaused( )`] XXX event handler runs when an order is paused.",
                "",
                " Paused orders can be continued with the [`resumeOrder()`](#resumeOrder) function. ",
                "",
                " > **Note**: Only those with \"Manage Pricing Plans\" permissions can pause orders." ],
            "links":
              [ "[resumeOrder(Â )](#resumeOrder)" ],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function pauseOrder() {",
                      "  const id = \"a string\";",
                      "",
                      "  return orders",
                      "    .pauseOrder(id)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "postponeEndDate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "ID of the order whose end date must change." },
            { "name": "endDate",
              "type": "Date",
              "doc": "New expiration date, which cannot be earlier than the value of the `earliestEndDate` property.  The `endDate` is in timestamp format, \n which is the UTC date-time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)) format. \n If a timezone offset is specified, the time is converted to UTC. For example, if you \n specify `new Date('2021-01-06T16:00:00.000-07:00')`, the stored value will be `\"2021-01-06T23:00:00.000Z\"`." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the order's end date has been postponed or made earlier." },
        "locations":
          [ { "lineno": 282,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Extends or shortens the duration of a pricing plan order by moving its end date earlier or later.",
            "description":
              [ "The `postponeEndDate()` function returns a Promise that resolves when the order's end date is successfully changed. ",
                "",
                " This function can be used to move the end date for a plan's order either earlier or later. This either",
                " shortens the duration of the plan's order or extends the duration of the plan's order.",
                "",
                " The new end date must be later than the order's original start date plus any pause periods. This  ",
                " is calculated for you and stored in the order's `earliestEndDate` property.",
                "",
                " Postponing the end date of an order does not impact payments. For example, if the pricing plan is for membership ",
                " to an online lecture series, and you want to extend the duration of the series because the lecturer could not",
                " attend some sessions, you can postpone the end date of the orders for all relevant participants. The ",
                " participants do not pay extra.",
                "",
                "",
                " Postponing an order causes the following changes: ",
                " + The `endDate` for the order is adjusted to the new end date.",
                " The [onOrderPostponed( )`] XXX event handler runs when an order's end date is postponed or made earlier.",
                "",
                " > **Note**: Only those with \"XXX\" permissions can postpone orders." ],
            "links": [],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function postponeEndDate() {",
                      "  const id = \"a string\";",
                      "  const endDate = new Date();",
                      "",
                      "  return orders",
                      "    .postponeEndDate(id, endDate)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "requestCurrentMemberOrderCancellation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "ID of the order whose cancellation is requested." },
            { "name": "effectiveAt",
              "type": "string",
              "doc": "The request can be that the order is canceled immediately or at the next payment date. One-time orders can only be canceled immediately.\nOne of:\n + `\"IMMEDIATELY\"` The request indicates that the order should be cancelled immediately. \n + `\"NEXT_PAYMENT_DATE\"`. The request indicates that the order be cancelled at the next payment date." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 438,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Requests cancellation of a pricing plan order.",
            "description":
              [ "The `requestCurrentMemberOrderCancellation()` function returns a Promise that resolves when the order cancellation is successfully requested. ",
                "",
                " For orders with recurring payments, cancellation can be set to occur either immediately or at the next payment date.",
                " For orders with one-time payments, cancellation occurs immediately after the request is processed.",
                "",
                " The [`onOrderCancellationRequested( )`] XXX event handler runs when a cancellation is requested.",
                "",
                " > **Note**: Only those with \"XXX\" permissions can request cancellation of their own orders." ],
            "links":
              [ "[cancelOrder(Â )](#cancelOrder)" ],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function requestCurrentMemberOrderCancellation() {",
                      "  const id = \"a string\";",
                      "  const effectiveAt = \"UNDEFINED\";",
                      "",
                      "  return orders",
                      "    .requestCurrentMemberOrderCancellation(id, effectiveAt)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "resumeOrder",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "ID of the order being resumed." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 318,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Resumes a paused pricing plan order.",
            "description":
              [ "The `resumeOrder()` function returns a Promise that resolves when a paused order is successfully resumed. ",
                "",
                " For orders with recurring payments, `resumeOrder()` also restarts the payment schedule.",
                "",
                " Resuming an order causes the following changes: ",
                " + The order status changes to `\"ACTIVE\"`.",
                " + The `pausePeriods` array is updated. ",
                " + The `endDate` for the order is adjusted to include the pause period.",
                " + The `earliestEndDate` is adjusted. This property is used when extending or shortening the duration of the order's plan.",
                "",
                " The [`onPlanResumed( )`] XXX event handler runs when an order is resumed.",
                "",
                " > **Note**: Only those with \"XXX\" permissions can resume orders." ],
            "links":
              [ "[pauseOrder(Â )](#pauseOrder)" ],
            "examples":
              [ { "title": "basic usage",
                  "body":
                    [ "import { orders } from \"wix-pricing-plans-backend.Orders\";",
                      "",
                      "export function resumeOrder() {",
                      "  const id = \"a string\";",
                      "",
                      "  return orders",
                      "    .resumeOrder(id)",
                      "    .then((response) => {",
                      "      console.log(response);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Buyer",
        "locations":
          [ { "lineno": 23,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Buyer details.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Buyer ID." },
            { "name": "identityType",
              "type": "string",
              "doc": "Type of the buyer. Currently only `\"MEMBER\"` is supported.\nOne of:\n . The buyer is a member of the site." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Cancellation",
        "locations":
          [ { "lineno": 33,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Details about the cancellation of an order. Omitted if the order `status` is not `\"CANCELED\"`.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "requestedDate",
              "type": "Date",
              "doc": "Date when cancellation was requested." },
            { "name": "cause",
              "type": "string",
              "doc": "The reason for the cancellation owner. \nOne of:\n + `\"OWNER_ACTION\"`. The site owner cancelled the order. \n + `\"MEMBER_ACTION\"`. The buyer initiated the cancellation.\n + `\"PAYMENT_FAILURE\"`. A payment transaction failed.\n + `\"PAYMENT_SETUP_FAILURE\"`. The buyer's payment details were not set up correctly." },
            { "name": "effectiveAt",
              "type": "string",
              "doc": "Indicates when the cancellation takes effect. This is set when cancelling the order.\nOne of:\n + `\"IMMEDIATELY\"`. The cancellation occurs immediately and the buyer cannot use the plan at this point.\n + `\"NEXT_PAYMENT_DATE\"`. The cancellation occurs at the next payment date. The buyer can continue to use the plan until that date." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "CurrentMemberFilterOptions",
        "locations":
          [ { "lineno": 404,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Fields to filter by when listing orders for the current member.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "planIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific IDs of plans that were ordered/purchased by the current member.",
              "optional": true },
            { "name": "autoRenewCanceled",
              "type": "boolean",
              "doc": "Whether the auto-renewal of the current member's recurring orders was canceled.",
              "optional": true },
            { "name": "orderStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific statuses for the current member's orders.",
              "optional": true },
            { "name": "paymentStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific payment statuses for the current member's orders.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FilterOptions",
        "locations":
          [ { "lineno": 184,
              "filename": "orders.js" } ],
        "docs":
          { "summary": "Fields to filter by when listing orders.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "buyerIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific IDs of buyers who ordered/purchased a pricing plan.",
              "optional": true },
            { "name": "planIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific IDs of plans that were ordered/purchased.",
              "optional": true },
            { "name": "autoRenewCanceled",
              "type": "boolean",
              "doc": "Whether the auto-renewal of recurring orders was canceled.",
              "optional": true },
            { "name": "orderStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific order statuses.",
              "optional": true },
            { "name": "paymentStatuses",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Specific payment statuses.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Order",
        "locations":
          [ { "lineno": 50,
              "filename": "orders-shared.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Order ID." },
            { "name": "planId",
              "type": "string",
              "doc": "ID of the plan that was purchased with this order." },
            { "name": "subscriptionId",
              "type": "string",
              "doc": "ID of the related Wix subscription. Every pricing plan order corresponds to a Wix subscription, including orders for single payment plans. You can see all orders from your site's [Subscriptions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fsubscriptions%3FreferralInfo%3Dvelo-docs) page in the Dashboard." },
            { "name": "wixPayOrderId",
              "type": "string",
              "doc": "ID of the associated Wix Pay order, created by the `createOnlineOrder()` function. Send this value as a parameter to the Wix Pay [`startPayment()`](wix-pay/startPayment) function to enable your buyer to pay for the order. `wixPayOrderId` is blank if the order is free." },
            { "name": "buyer",
              "type": "wix-pricing-plans-backend.Orders.Buyer",
              "doc": "Buyer details." },
            { "name": "priceDetails",
              "type": "wix-pricing-plans-backend.Orders.PriceDetails",
              "doc": "Order pricing details for one payment cycle, payment schedule, and expiration." },
            { "name": "type",
              "type": "string",
              "doc": "How the order was processed. \nOne of:\n + `\"ONLINE\"`. The buyer purchased the plan using the site.\n + `\"OFFLINE\"`. The buyer made a manual, offline purchase without using the site." },
            { "name": "status",
              "type": "string",
              "doc": "Status of the order (active, expired, etc.)\nOne of:\n + `\"DRAFT\"`. The order has been initiated but payment has not been processed yet. The plan is not yet available for use.\n + `\"PENDING\"`. Payment is being processed.  The plan is not yet available for use.\n + `\"ACTIVE\"`. The order has been processed and paid for.  The plan is available for use.\n + `\"PAUSED\"`. Use of the plan has been [paused](wix-pricing-plans-backend/orders/pauseorder), for example, if the buyer is away. The plan can be [resumed](wix-pricing-plans-backend/orders/resumeorder).\n + `\"ENDED\"`. The order has completed its duration and is no longer available for use.\n + `\"CANCELED\"`. The order has been [canceled](wix-pricing-plans-backend/orders/cancelorder)." },
            { "name": "autoRenewCanceled",
              "type": "boolean",
              "doc": "Next payment will not be charged at the next scheduled payment date. The order `status` will become `\"CANCELED\"` at the expiration date." },
            { "name": "cancellation",
              "type": "wix-pricing-plans-backend.Orders.Cancellation",
              "doc": "Details about the cancellation of an order. Omitted if the order `status` is not `\"CANCELED\"`." },
            { "name": "lastPaymentStatus",
              "type": "string",
              "doc": "Status of the last payment for the order. The site owner updates this manually for offline orders.\nOne of:\n + `\"PAID\"`. The last payment as paid.\n + `\"REFUNDED\"`. The last payment was refunded.\n + `\"FAILED\"`. The last payment transaction did not complete.\n + `\"UNPAID\"`. The last payment was not paid\n + `\"PENDING\"`. Awaiting payment. \n + `\"NOT_APPLICABLE\"`. No payment was necessary, such as for free plans or free trials." },
            { "name": "startDate",
              "type": "Date",
              "doc": "Date the plan for this order will become active." },
            { "name": "endDate",
              "type": "Date",
              "doc": "Date the plan for this order will expire." },
            { "name": "pausePeriods",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-pricing-plans-backend.Orders.PausePeriod" ] },
              "doc": "List of periods during which this order is paused, if there are any." },
            { "name": "earliestEndDate",
              "type": "Date",
              "doc": "Earliest possible date that the plan for this order can end. This is calculated by adding all pause periods to the original end date. This date is used as a boundary for extending or shortening the duration of a plan. You cannot set a plan to expire before this date." },
            { "name": "planName",
              "type": "string",
              "doc": "Name of the plan at the time of the order." },
            { "name": "planDescription",
              "type": "string",
              "doc": "Description of the plan at the time of the order." },
            { "name": "_createdDate",
              "type": "Date",
              "doc": "Date order was created. This is the date before initiating a payment or any other actions." },
            { "name": "_updatedDate",
              "type": "Date",
              "doc": "Date order was last updated, such as the date an order was paused, resumed, or canceled." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "OrderRecurrence",
        "locations":
          [ { "lineno": 15,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "The order has recurring payments.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "cycleDuration",
              "type": "wix-pricing-plans-backend.Duration",
              "doc": "Length of one payment cycle, for example, 1 month to have monthly payments. Multiply `cycleDuration`'s `count` by `cycleCount` to get the subscription duration. *Currently, only a value of `1` is supported.*" },
            { "name": "cycleCount",
              "type": "number",
              "doc": "Number of cycles. Zero for unlimited plan orders and orders whose plans are valid until canceled." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaginationOptions",
        "locations":
          [ { "lineno": 195,
              "filename": "orders.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "limit",
              "type": "number",
              "doc": "Limit the number of orders returned. Defaults to 50.",
              "optional": true },
            { "name": "skip",
              "type": "number",
              "doc": "Number of entries to skip.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PausePeriod",
        "locations":
          [ { "lineno": 91,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Period during which the order of a plan is suspended.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "status",
              "type": "string",
              "doc": "Whether the pause period (suspension) is currently in effect. \nOne of:\n + `\"ACTIVE\"`. The plan for the order is suspended. The pause period is in progress.\n + `\"ENDED\"`. The plan for the order no longer suspended. The pause period has ended." },
            { "name": "pauseDate",
              "type": "Date",
              "doc": "Date defining the start of the the pause period." },
            { "name": "resumeDate",
              "type": "Date",
              "doc": "When an order for a plan is resumed, the date the order of the plan resumed." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PriceDetails",
        "locations":
          [ { "lineno": 103,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Price details for the order.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "subtotal",
              "type": "string",
              "doc": "Price of the order, excluding tax. Specified as a monetary amount, such as `3.99`." },
            { "name": "tax",
              "type": "wix-pricing-plans-backend.Orders.Tax",
              "doc": "Tax applied for the plan. Omitted if no tax was applied.",
              "optional": true },
            { "name": "total",
              "type": "string",
              "doc": "Price after tax is applied. Specified as a monetary amount, such as `4.98`. If no tax was applied, this amount is the same as `subtotal`." },
            { "name": "planPrice",
              "type": "string",
              "doc": "Price of the plan when the order was created. This price is the amount for a single payment. For subscriptions, this is the amount to pay for each single payment cycle and it is required. Otherwise, the single payment is for the entire plan." },
            { "name": "currency",
              "type": "string",
              "doc": "Currency code. Must be a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code (for example, USD)." },
            { "name": "subscription",
              "type": "wix-pricing-plans-backend.Orders.OrderRecurrence",
              "doc": "Pricing model indicating that the order has recurring payments. This type of subscription is not a \"Wix subscription,\" which encompasses various types of subscriptions, such as Wix Stores subscriptions, Wix invoice subscriptions, and *all* pricing plan models.",
              "optional": true },
            { "name": "singlePaymentForDuration",
              "type": "wix-pricing-plans-backend.Duration",
              "doc": "Pricing model indicating that the order is paid with a single payment per cycle and what the length of the cycle is. The cycle is the duration of the order's plan, not a payment cycle.",
              "optional": true },
            { "name": "singlePaymentUnlimited",
              "type": "boolean",
              "doc": "Pricing model indicating that the order of the plan is paid in one single payment and that the order is valid until canceled.",
              "optional": true },
            { "name": "freeTrialDays",
              "type": "number",
              "doc": "Free trial period for the order in days. Available only for orders whose plans are recurring, meaning plans whose pricing model is `subscription`." } ],
        "extra":
          { "oneOfGroups":
              [ { "name": "pricingModel",
                  "members":
                    [ "singlePaymentForDuration",
                      "singlePaymentUnlimited",
                      "subscription" ] } ] },
        "labels": [] },
      { "name": "SortingOptions",
        "locations":
          [ { "lineno": 129,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Sorting details.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "fieldName",
              "type": "string",
              "doc": "Name of the property to sort by.",
              "optional": true },
            { "name": "order",
              "type": "string",
              "doc": "Sort order. Defaults to `\"ASC\"`.\nOne of:\n + `\"ASC\"`. Ascending.\n + `\"DESC\"`. Descending.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Tax",
        "locations":
          [ { "lineno": 119,
              "filename": "orders-shared.js" } ],
        "docs":
          { "summary": "Tax applied to the order. If empty, no tax was applied.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "Name of the tax, such as `VAT`." },
            { "name": "includedInPrice",
              "type": "boolean",
              "doc": "Whether the tax is included in the original price (`true`) or added at checkout (`false`)." },
            { "name": "rate",
              "type": "string",
              "doc": "Tax rate as a percentage, such as `17.00`." },
            { "name": "amount",
              "type": "string",
              "doc": "Total amount of the tax, specified as a monetary amount, such as `0.99`." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }