{ "name": "PublicPlansQueryBuilder",
  "memberOf": "wix-pricing-plans-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "PublicPlansQueryBuilder.js" },
  "docs":
    { "summary": "Contains functionality for refining a public pricing plan query.",
      "description":
        [ "The `PublicPlansQueryBuilder` functions enable you to run, sort, filter, and control",
          " which results a query returns.",
          "",
          " Typically, you build a query using any of the public pricing plan query functions,",
          " refine the query by chaining `PublicPlansQueryBuilder` functions, and then execute the",
          " query by chaining *one* of the following functions: [`find()`](#find), [`distinct()`](#distinct), or [`count()`](#count).",
          "",
          " For example, the following code queries the non-primary public plans in plan ID order:",
          "",
          " ```javascript",
          " import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
          "",
          " wixPricingPlansBackend.queryPublicPlans",
          "   .eq(\"primary\", \"false)",
          "   .ascending(\"_id\")",
          "   .limit(5)",
          "   .find()",
          "   .then( (results) => {",
          "     console.log(results.items);",
          "   } );",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 447,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `PublicPlansQueryBuilder` to sort in ascending order of",
                " the specified properties. If you specify more than one property,",
                " `ascending()` sorts the results in ascending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to a query",
                  "body":
                    [ "let query = queryPublicPlans().ascending(\"_createdDate\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "between",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `rangeStart` and `rangeEnd`." },
            { "name": "rangeStart",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The beginning value of the range to match against." },
            { "name": "rangeEnd",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The ending value of the range to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 206,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property is greater than or equal",
                " to `rangeStart` and less than `rangeEnd`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so",
                "   + `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.",
                "   + `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not." ],
            "links": [],
            "examples":
              [ { "title": "Add a between filter to a query",
                  "body":
                    [ "const now = new Date();",
                      "const date = new Date(\"2020-11-01\");",
                      "let query=queryPublicPlans().between(\"_createdDate\", date, now);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "contains",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for inside the specified property value." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 302,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `PublicPlansQueryBuilder` to",
                " only match items where the value of the specified property contains the",
                " specified `string`. Matching with `contains()` is not case sensitive, so",
                " `\"text\"` does contain `\"Tex\"`.",
                "",
                " You can use `contains()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a contains filter to a query",
                  "body":
                    [ "let newQuery = queryPublicPlans.contains(\"slug\", \"free\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "count",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder.QueryOptions",
              "doc": "Options to use when performing a query count.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "number" ] },
            "doc": "Fulfilled - The number of items that match the query.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 564,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Returns the number of items that match the query.",
            "description":
              [ "The `count()` function returns a Promise that resolves to the number of",
                " items that match the query. The Promise is rejected if `count()` is called",
                " with incorrect permissions or if any of the functions used to refine the",
                " query are invalid.",
                "",
                " Use the `options` parameter to run `count()` without checking for permissions.",
                "",
                " Any function that does not filter query results (for example, [`ascending()`](#ascending)),",
                " does not affect the result of `count()`.",
                "",
                " If you have already run a query with [`find()`](#find), you can retrieve",
                " the number of query results without calling `count()`. The [`find()`](#find)",
                " function returns a Promise that resolves to a [`PublicPlansQueryResult`](wix-pricing-plans-backend.PublicPlansQueryResult)",
                " object, which has a `totalCount` property whose value is the number of results." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 472,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `PublicPlansQueryBuilder` to sort in descending order of",
                " the specified properties. If you specify more than one property,",
                " `descending()` sorts the results in descending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add a descending sort to a query",
                  "body":
                    [ "let query = queryPublicPlans().descending(\"_createdDate\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "endsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the end of the specified property value." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 285,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property ends with the specified",
                "`string`. Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends",
                " with `\"ext\"`.",
                "",
                " You can only use `endsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add an endsWith filter to a query",
                  "body":
                    [ "let newQuery = queryPublicPlans.endsWith(\"slug\", \"vip\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 43,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property equals the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `eq()` includes items",
                " in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "let query = queryPublicPlans().eq(\"primary\", true);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder.QueryOptions",
              "doc": "Options to use when performing a query.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.PublicPlansQueryResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the query.\nRejected - Error that caused the query to fail." },
        "locations":
          [ { "lineno": 563,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Returns the items that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                " by the query and some information about the results. The Promise is",
                " rejected if `find()` is called with incorrect permissions or if any of the",
                " functions used to refine the query are invalid.",
                "",
                " Use the `options` parameter to run `find()` without checking for permissions." ],
            "links": [],
            "examples":
              [ { "title": "Perform a find on a query",
                  "body":
                    [ "import wixPricingPlansBackend from \"wix-pricing-plans-backend\";",
                      "",
                      "// ...",
                      "",
                      "queryPublicPlans()",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Perform a find on a query using options",
                  "body":
                    [ "import wixPricingPlansBackend from \"wix-pricing-plans-backend\";",
                      "",
                      "// ...",
                      "const options = {",
                      "  \"suppressAuth\": true",
                      "};",
                      "",
                      "queryPublicPlans()",
                      "  .find(options)",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Perform a find on a query",
                  "body":
                    [ "import wixPricingPlansBackend from \"wix-pricing-plans-backend\";",
                      "",
                      "// ...",
                      "",
                      "queryPublicPlans()",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Perform a find on a query using options",
                  "body":
                    [ "import wixPricingPlansBackend from \"wix-pricing-plans-backend\";",
                      "",
                      "// ...",
                      "const options = {",
                      "  \"suppressAuth\": true",
                      "};",
                      "",
                      "queryPublicPlans()",
                      "  .find(options)",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 114,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property is greater than or",
                " equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),",
                "   but `\"ABC\"` is not greater than or equal to `\"abc\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a query",
                  "body":
                    [ "let query = queryPublicPlans().ge(\"_updatedDate\", \"2020-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 86,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `PublicPlansQueryBuilder` to only match",
                " items where the value of the specified property is greater than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add",
                  "body":
                    [ "let query=queryPublicPlans().gt(\"_updatedDate\",\"2021-04-27T10:00:00.000Z\")" ],
                  "extra":
                    { "description": "a greater than filter to a query" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose values will be compared with `values`. The property type must be an array of strings." },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 320,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property contains any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `PublicPlansQueryBuilder` to",
                " only match items where any of the values of the array of the specified property equal any of",
                " the specified values.",
                "",
                " Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has some filter to a query",
                  "body":
                    [ "let query = queryPublicPlans()",
                      "  .hasSome(\"_id\", [",
                      "    \"11111111-aaaa-1111-aaaa-111111111111\", ",
                      "    \"22222222-bbbb-2222-bbbb-222222222222\", ",
                      "    \"33333333-cccc-3333-cccc-333333333333\"",
                      "  ]",
                      ");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "in",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `values`. The property must be of type string or number." },
            { "name": "values",
              "type":
                [ { "name": "Array",
                    "typeParams":
                      [ "string" ] },
                  { "name": "Array",
                    "typeParams":
                      [ "number" ] } ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 351,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified field value equals any of the specified values.",
            "description":
              [ "The `in()` function refines a `PublicPlansQueryBuilder` to",
                " only match items where the value of the specified field equals any of",
                " the specified values.",
                "",
                " Matching strings with `in()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add an in filter to a query",
                  "body":
                    [ "let query = queryPublicPlans()",
                      "  .in(\"_id\", [",
                      "    \"11111111-aaaa-1111-aaaa-111111111111\", ",
                      "    \"22222222-bbbb-2222-bbbb-222222222222\", ",
                      "    \"33333333-cccc-3333-cccc-333333333333\"",
                      "  ]",
                      ");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 173,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `PublicPlansQueryBuilder`to only match",
                " items where the value of the specified property is less than or equal to the",
                " specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),",
                "   but `\"abc\"` is not less than or equal to `\"ABC\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a query",
                  "body":
                    [ "let query = queryPublicPlans().le(\"_updatedDate\", \"2021-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "The number of items to return, which is also the [`pageSize`](wix-pricing-plans-backend.PublicPlansQueryResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 527,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                " page. Only one page of results is retrieved at a time. The [`next()`](wix-pricing-plans-backend.PublicPlansQueryResult.html#next)",
                " and [`prev()`](wix-pricing-plans-backend.PublicPlansQueryResult.html#prev) functions are used to",
                " navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to a query",
                  "body":
                    [ "let query = queryPublicPlans().limit(10);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 145,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `PublicPlansQueryBuilder` to only match",
                " items where the value of the specified property is less than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a query",
                  "body":
                    [ "let query = queryPublicPlans().lt(\"_updatedDate\", \"2021-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 64,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property does not equal the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type is considered not equal to the same number stored as a Number type.",
                "",
                " Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `ne()` includes items",
                " in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a query",
                  "body":
                    [ "let query = queryPublicPlans().ne(\"primary\", false);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 545,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the query",
                " results before returning new query results.",
                "",
                " For example, if you query a collection and 50 items match your query, but",
                " you set `skip` to 10, the results returned will skip the first 10 items",
                " that match and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "let query = queryPublicPlans().skip(10);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 267,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `PublicPlansQueryBuilder` to",
                " only match items where the value of the specified property starts with the",
                " defined `string`. Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts",
                " with `\"tex\"`.",
                "",
                " You can only use `startsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a startsWith filter to a query",
                  "body":
                    [ "let newQuery = queryPublicPlans.startsWith(\"slug\", \"gold\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "QueryOptions",
        "locations":
          [ { "lineno": 28,
              "filename": "PublicPlansQueryBuilder.js" } ],
        "docs":
          { "summary": "Options to use when performing a query.",
            "description":
              [ "The `options` parameter is an optional parameter that can be used when",
                " calling the query [`find()`](#find), [`distinct()`](#distinct), or [`count()`](#count) functions. ",
                " To use `options`, pass it a `QueryOptions` object with the following key:value pair:",
                "",
                " + `\"suppressAuth\"`: `true`/`false`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "suppressAuth",
              "type": "boolean",
              "doc": "When `true`, prevents permission checks from running for the operation.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }