{ "name": "PublicPlansQueryBuilder",
  "memberOf": "wix-pricing-plans-backend",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "plan-queries.js" },
  "docs":
    { "summary": "Contains functionality for refining a public pricing plan query.",
      "description":
        [ "The `PublicPlansQueryBuilder` functions enable you to run, sort, filter, and control",
          " which results a query returns.",
          "",
          " Typically, you build a query with the [`queryPublicPlans()`]((wix-pricing-plans-backend/querypublicplans)) query function,",
          " refine the query by chaining `PublicPlansQueryBuilder` functions, and then execute the",
          " query with the [`find()`](#find) function.",
          "",
          " For example, the following code queries the non-primary public plans and logs the first 5 results to the console, sorted in ascending order by plan ID:",
          "",
          " ```javascript",
          " import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
          "",
          " wixPricingPlansBackend.queryPublicPlans()",
          "   .eq(\"primary\", false)",
          "   .ascending(\"_createdDate\")",
          "   .limit(5)",
          "   .find()",
          "   .then((results) => {",
          "     console.log(results.items);",
          "   } );",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "and",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
              "doc": "A query to add to the initial query as an `and` condition." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 432,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Adds an `and` condition to the query.",
            "description":
              [ "The `and()` function adds an `and` condition to a `PublicPlansQueryBuilder`.",
                " A query with an `and` returns all the items that match the query",
                " as defined up to the `and` function.",
                "",
                " Note that when chaining multiple `PublicPlansQueryBuilder` functions to a query an `and` condition is assumed.",
                " In such cases, you do not need to add a call to the `and()` function.",
                " For example, this query returns results where the plan was created during a ",
                " certain date range **and** the plan's",
                " slug starts with \"gold\" (such as `gold`, `gold-vip`, `gold-trial`).",
                "",
                " ```javascript",
                " wixPricingPlansBackend.queryPublicPlans()",
                "   .between(\"_createdDate\", specificDate, now)",
                "   .startsWith(\"slug\", \"gold\");",
                " ```",
                "",
                " The `and()` function is needed when performing compound queries. For",
                " example, the final query, `typeAndDateQuery`, in this set of queries returns results where a plan",
                " is created after a certain date, **and** the plan is either ",
                " a \"gold\" or a \"silver\" membership plan, as defined in the plan's slug.",
                "",
                " ```javascript",
                " const slugPlanQuery = ",
                "   wixPricingPlansBackend.queryPublicPlans()",
                "     .startsWith(\"slug\", \"silver\")",
                "     .or(",
                "       wixPricingPlansBackend.plans.queryPublicPlans()",
                "         .startsWith(\"slug\", \"gold\")",
                "     );",
                "",
                " const datePlanQuery = ",
                "   wixPricingPlansBackend.queryPublicPlans()",
                "     .between(\"_createdDate\", date, now);",
                "     );",
                "",
                " const typeAndDateQuery = slugPlanQuery.and(datePlanQuery);",
                " ```",
                "",
                " The 'and()' function is designed to work with 2 or more queries or filters. ",
                " If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an `and` filter to a query",
                  "body":
                    [ "const newQuery = query1.and(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a compound query, add an `and` filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "const now = new Date();",
                      "const date = new Date(\"2020-11-01\");",
                      "",
                      "const slugPlanQuery = ",
                      "  wixPricingPlansBackend.queryPublicPlans()",
                      "    .startsWith(\"slug\", \"silver\")",
                      "    .or(",
                      "      wixPricingPlansBackend.queryPublicPlans()",
                      "        .startsWith(\"slug\", \"gold\")",
                      "    );",
                      "",
                      "const datePlanQuery = ",
                      "  wixPricingPlansBackend.queryPublicPlans()",
                      "    .between(\"_createdDate\", date, now);",
                      "  ",
                      "const typeAndDateQuery = slugPlanQuery.and(datePlanQuery);",
                      "",
                      "return wixPricingPlansBackend.queryPublicPlans()",
                      "  .ne(\"primary\", true).and(typeAndDateQuery)",
                      "  .find()",
                      "  .then((publicPlans) => {",
                      "    if(publicPlans.items.length > 0) {",
                      "      const items = publicPlans.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = publicPlans.totalCount;",
                      "      const pageSize = publicPlans.pageSize;",
                      "      const currentPage = publicPlans.currentPage;",
                      "      const totalPages = publicPlans.totalPages;",
                      "      const hasNext = publicPlans.hasNext();",
                      "      const hasPrev = publicPlans.hasPrev();",
                      "      const length = publicPlans.length;",
                      "      const query = publicPlans.query;",
                      "    } else {",
                      "      // handle case where no matching public plans found",
                      "    }",
                      "  } )",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  } );",
                      "",
                      "/*",
                      " * The results contain public",
                      " * plans with slugs that start with ",
                      " * \"gold\" or \"silver\":",
                      " *",
                      " * gold-vip",
                      " * silver",
                      " * silver-vip",
                      " * ",
                      " * But not the primary public plan (slug = gold)",
                      " * ",
                      " * And no public plans created earlier than ",
                      " * November 11, 2020",
                      " */" ],
                  "extra":
                    { "description": "The final query, `typeAndDateQuery`, in this set of queries returns results where a plan\n is created after a certain date (November 11, 2020), **and** the plan is either \n a \"gold\" or a \"silver\" membership plan, as defined in the plan's slug. Also, \n when combined with the `ne` filter, the query also excludes the primary plan." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `primary`\n+ `slug`\n+ `_createdDate`\n+ `_updatedDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 530,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `PublicPlansQueryBuilder` to sort in ascending order of",
                " the specified properties. If you specify more than one property,",
                " `ascending()` sorts the results in ascending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest. When sorting, ascending order is: ",
                " numbers, followed by symbols, and then letters." ],
            "links": [],
            "examples":
              [ { "title": "Add an `ascending` sort to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().ascending(\"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `ascending` sort, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .ascending(\"_createdDate\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "between",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `rangeStart` and `rangeEnd`.\n\nSupported properties:\n+ `_createdDate`\n+ `_updatedDate`" },
            { "name": "rangeStart",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The beginning value of the range to match against." },
            { "name": "rangeEnd",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The ending value of the range to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 252,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property is greater than or equal",
                " to `rangeStart` and less than `rangeEnd`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest. When sorting, ascending order is: ",
                " numbers, followed by symbols, and then letters. ",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so",
                "   + `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.",
                "   + `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"between\" filter to a query",
                  "body":
                    [ "const now = new Date();",
                      "const date = new Date(\"2020-11-01\");",
                      "const query = wixPricingPlansBackend.queryPublicPlans().between(\"_createdDate\", date, now);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"between\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "const now = new Date();",
                      "const date = new Date(\"2021-01-01\");",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .between(\"_createdDate\", date, now)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "contains",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string.\n\nSupported property: `slug`" },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for inside the specified property value." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 361,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `PublicPlansQueryBuilder` to",
                " only match items where the value of the specified property contains the",
                " specified `string`. Matching with `contains()` is not case sensitive, so",
                " `\"text\"` does contain `\"Tex\"`.",
                "",
                " You can only use `contains()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a 'contains' filter to a query",
                  "body":
                    [ "const newQuery = wixPricingPlansBackend.queryPublicPlans().contains(\"slug\", \"free\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a 'contains' filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .contains(\"slug\", \"free\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `primary`\n+ `slug`\n+ `_createdDate`\n+ `_updatedDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 565,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `PublicPlansQueryBuilder` to sort in descending order of",
                " the specified properties. If you specify more than one property,",
                " `descending()` sorts the results in descending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest. When sorting, ascending order is: ",
                " numbers, followed by symbols, and then letters." ],
            "links": [],
            "examples":
              [ { "title": "Add a `descending` sort to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().descending(\"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `descending` sort, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .descending(\"_createdDate\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "endsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string.\n \n Supported property: `slug`" },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the end of the specified property value." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 341,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property ends with the specified",
                "`string`. Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends",
                " with `\"ext\"`.",
                "",
                " You can only use `endsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add an \"ends with\" filter to a query",
                  "body":
                    [ "const newQuery = wixPricingPlansBackend.queryPublicPlans().endsWith(\"slug\", \"vip\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an \"ends with\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .endsWith(\"slug\", \"vip\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_id`\n+ `primary`\n+ `slug`\n+ `_createdDate`\n+ `_updatedDate`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 43,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property equals the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `eq()` includes items",
                " in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an \"equals\" filter to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().eq(\"primary\", true);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an \"equals\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .eq(\"primary\", false)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-pricing-plans-backend.PublicPlansQueryResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the query.\nRejected - Error that caused the query to fail." },
        "locations":
          [ { "lineno": 672,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Returns the items that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                " by the query and some information about the results. The Promise is",
                " rejected if `find()` is called with incorrect permissions or if any of the",
                " functions used to refine the query are invalid." ],
            "links": [],
            "examples":
              [ { "title": "Perform a find on a query",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\n Supported properties:\n + `_createdDate`\n + `_updatedDate`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 138,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property is greater than or",
                " equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest. When sorting, ascending order is: ",
                " numbers, followed by symbols, and then letters. ",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),",
                "   but `\"ABC\"` is not greater than or equal to `\"abc\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"greater than or equals\" filter to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().ge(\"_updatedDate\", \"2020-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"greater than or equals\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .ge(\"_updatedDate\", \"2020-04-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_createdDate`\n+ `_updatedDate`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 103,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `PublicPlansQueryBuilder` to only match",
                " items where the value of the specified property is greater than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest. When sorting, ascending order is: ",
                " numbers, followed by symbols, and then letters. ",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"greater than\" filter to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().gt(\"_updatedDate\",\"2021-01-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"greater than\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .gt(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose values will be compared with `values`. The property type must be an array of strings.\n Supported property: `_id`" },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 382,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property contains any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `PublicPlansQueryBuilder` to",
                " only match items where any of the values of the array of the specified property equal any of",
                " the specified values.",
                "",
                " Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"has some\" filter to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans()",
                      "  .hasSome(\"_id\", [",
                      "    \"001c0674-d7c9-4c77-acb5-b492b427b201\", ",
                      "    \"003d0674-d7c9-4d88-acb5-b492b427b302\",",
                      "    \"011d0123-d7c9-5e44-acb5-d300a123b321\"",
                      "  ]",
                      ");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"has some\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .hasSome(\"_id\", [",
                      "    \"001c0674-d7c9-4c77-acb5-b492b427b201\", ",
                      "    \"003d0674-d7c9-4d88-acb5-b492b427b302\",",
                      "    \"011d0123-d7c9-5e44-acb5-d300a123b321\"",
                      "  ])",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_createdDate`\n+ `_updatedDate`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 211,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `PublicPlansQueryBuilder`to only match",
                " items where the value of the specified property is less than or equal to the",
                " specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest. When sorting, ascending order is: ",
                " numbers, followed by symbols, and then letters. ",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),",
                "   but `\"abc\"` is not less than or equal to `\"ABC\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"less than or equals\" filter to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().le(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"less than or equals\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .le(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "The number of items to return, which is also the [`pageSize`](wix-pricing-plans-backend.PublicPlansQueryResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 629,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                " page. Only one page of results is retrieved at a time. The [`next()`](wix-pricing-plans-backend.PublicPlansQueryResult.html#next)",
                " and [`prev()`](wix-pricing-plans-backend.PublicPlansQueryResult.html#prev) functions are used to",
                " navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a limit, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .limit(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\n Supported properties:\n + `_createdDate`\n + `_updatedDate`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 176,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `PublicPlansQueryBuilder` to only match",
                " items where the value of the specified property is less than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest. When sorting, ascending order is: ",
                " numbers, followed by symbols, and then letters. ",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"less than\" filter to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().lt(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"less than\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .lt(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_id`\n+ `primary`\n+ `slug`\n+ `_createdDate`\n+ `_updatedDate`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 73,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `PublicPlansQueryBuilder` to only",
                " match items where the value of the specified property does not equal the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type is considered not equal to the same number stored as a Number type.",
                "",
                " Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `ne()` includes items",
                " in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"not equals\" filter to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().ne(\"primary\", false);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"not equals\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .ne(\"primary\", false)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "not",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
              "doc": "A query to add to the initial query as a `not` condition." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 511,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Adds a `not` condition to the query.",
            "description":
              [ "The `not()` function adds a `not` condition to a `PublicPlansQueryBuilder`. A query with a `not`",
                " returns all the items that match the query as defined up to the `not`",
                " function, but don't match the query passed to the `not` function.",
                "",
                " If the query only contains a `not()` function, it returns all the items",
                " that don't match the query defined by the `not` method." ],
            "links": [],
            "examples":
              [ { "title": "Add a `not` filter to a query",
                  "body":
                    [ "const newQuery = query1.not(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `not` filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .not(wixPricingPlansBackend.queryPublicPlans().startsWith(\"slug\", \"silver\"))",
                      "  .find()",
                      "  .then((publicPlans) => {",
                      "    if (publicPlans.items.length > 0) {",
                      "      const items = publicPlans.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = publicPlans.totalCount;",
                      "      const pageSize = publicPlans.pageSize;",
                      "      const currentPage = publicPlans.currentPage;",
                      "      const totalPages = publicPlans.totalPages;",
                      "      const hasNext = publicPlans.hasNext();",
                      "      const hasPrev = publicPlans.hasPrev();",
                      "      const length = publicPlans.length;",
                      "      const query = publicPlans.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    { "description": "The results for this query do not contain any Silver public plans. This is determined\n by looking for slugs that start with the string \"silver.\"" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
              "doc": "A query to add to the initial query as an `or` condition." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 487,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Adds an `or` condition to the query.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `PublicPlansQueryBuilder`. A query",
                " with an `or` returns all the items that match the query as defined up to",
                " the `or` function, the items that match the query passed to the `or`",
                " function, and the items that match both.",
                "",
                " The 'or()' function is designed to work with 2 or more queries. ",
                " If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an `or` filter to a query",
                  "body":
                    [ "const newQuery = query1.or(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `or` filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "const date = new Date(\"2020-11-01\");",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .gt(\"_createdDate\", date)",
                      "  .or(wixPricingPlansBackend.queryPublicPlans().endsWith(\"slug\", \"vip\"))",
                      "  .find()",
                      "  .then((publicPlans) => {",
                      "    if (publicPlans.items.length > 0) {",
                      "      const items = publicPlans.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = publicPlans.totalCount;",
                      "      const pageSize = publicPlans.pageSize;",
                      "      const currentPage = publicPlans.currentPage;",
                      "      const totalPages = publicPlans.totalPages;",
                      "      const hasNext = publicPlans.hasNext();",
                      "      const hasPrev = publicPlans.hasPrev();",
                      "      const length = publicPlans.length;",
                      "      const query = publicPlans.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    { "description": "This query shows public VIP plans that were either created after a certain date. It is assumed that the slug of all VIP public plans ends with the characters \"vip\"." } },
                { "title": "Create a compound query, add an `or` filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "const now = new Date();",
                      "const date = new Date('2020-11-01');",
                      "",
                      "const slugPlanQuery = ",
                      "  wixPricingPlansBackend.queryPublicPlans()",
                      "    .startsWith(\"slug\", \"silver\")",
                      "    .or(",
                      "      wixPricingPlansBackend.queryPublicPlans()",
                      "        .startsWith(\"slug\", \"gold\")",
                      "    );",
                      "",
                      "const datePlanQuery = ",
                      "  wixPricingPlansBackend.queryPublicPlans()",
                      "    .between(\"_createdDate\", date, now);",
                      "  ",
                      "const typeAndDateQuery = slugPlanQuery.and(datePlanQuery);",
                      "",
                      "return wixPricingPlansBackend.queryPublicPlans()",
                      "  .eq(\"primary\", true).or(typeAndDateQuery)",
                      "  .find()",
                      "  .then((publicPlans) => {",
                      "    if(publicPlans.items.length > 0) {",
                      "      const items = publicPlans.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = publicPlans.totalCount;",
                      "      const pageSize = publicPlans.pageSize;",
                      "      const currentPage = publicPlans.currentPage;",
                      "      const totalPages = publicPlans.totalPages;",
                      "      const hasNext = publicPlans.hasNext();",
                      "      const hasPrev = publicPlans.hasPrev();",
                      "      const length = publicPlans.length;",
                      "      const query = publicPlans.query;",
                      "    } else {",
                      "      // handle case where no matching public plans found",
                      "    }",
                      "  } )",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  } );",
                      "",
                      "/*",
                      " * The results contain public",
                      " * plans with slugs that start with ",
                      " * \"gold\" or \"silver\":",
                      " *",
                      " * gold      The primary public plan is included",
                      " * gold-vip",
                      " * silver",
                      " * silver-vip",
                      " * ",
                      " * And no public plans created earlier than ",
                      " * November 11, 2020",
                      " */" ],
                  "extra":
                    { "description": "The final query, `typeAndDateQuery`, in this set of queries returns results where a plan\n is created after a certain date (November 11, 2020), **and** the plan is either \n a \"gold\" or a \"silver\" membership plan, as defined in the plan's slug. Also, \n when combined with the `eq` filter, the query also includes the primary plan." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 648,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the query",
                " results before returning new query results.",
                "",
                " For example, if you query a collection and 50 items match your query, but",
                " you set `skip` to 10, the results returned will skip the first 10 items",
                " that match and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "const query = wixPricingPlansBackend.queryPublicPlans().skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .skip(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string.\n\nSupported property: `slug`" },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-pricing-plans-backend.PublicPlansQueryBuilder",
            "doc": "A `PublicPlansQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 320,
              "filename": "plan-queries.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `PublicPlansQueryBuilder` to",
                " only match items where the value of the specified property starts with the",
                " defined `string`. Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts",
                " with `\"tex\"`.",
                "",
                " You can only use `startsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"starts with\" filter to a query",
                  "body":
                    [ "const newQuery = queryPublicPlans().startsWith(\"slug\", \"gold\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"starts with\" filter, and run it",
                  "body":
                    [ "import wixPricingPlansBackend from 'wix-pricing-plans-backend';",
                      "",
                      "// ...",
                      "",
                      "wixPricingPlansBackend.queryPublicPlans()",
                      "  .startsWith(\"slug\", \"gold\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }