{ "name": "WixSearchBuilder",
  "memberOf": "wix-search",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 2,
      "filename": "searchBuilder.js" },
  "docs":
    { "summary": "Contains functionality for refining a site search.",
      "description":
        [ "The `WixSearchBuilder` functions enable you to run, filter, sort, apply facets (categorize), and control",
          " which results a search returns.",
          "",
          " Typically, you build a search using the [`search()`](wix-search.html#search) function,",
          " refine the search by chaining `WixSearchBuilder` functions, and then execute the",
          " search by chaining a [`find()`](#find) function.",
          "",
          " For example, the following searches a site for all store products containing the phrase",
          " \"shoe\" in English that are on sale, sorts them alphabetically according to their SKU, ",
          " and logs the first 5 results to the console:",
          "",
          " ```javascript",
          " import wixSearch from 'wix-search';",
          "",
          " wixSearch.search(\"shoe\")",
          "   .language(\"en\")",
          "   .documentType(\"Stores/Products\")",
          "   .eq(\"onSale\", true)",
          "   .ascending(\"sku\")",
          "   .limit(5)",
          "   .find()",
          "   .then( (results) => {",
          "     console.log(results.documents);",
          "   } );",
          " ```",
          "",
          "Only some fields can be searched, filtered, sorted, or faceted. Check the supported schemas for each [`documentType`](#documentType):",
          "",
          "",
          " - <a href=\"https://support.wix.com/en/article/corvid-wix-blog-schema-for-wix-search\" target=\"_blank\">Blog/Posts schema</a>",
          " - <a href=\"https://support.wix.com/en/article/corvid-wix-bookings-schema-for-wix-search\" target=\"_blank\">Bookings/Services schema</a> ",
          " - <a href=\"https://support.wix.com/en/article/corvid-wix-forum-schema-for-wix-search\" target=\"_blank\">Forum/Content schema</a>",
          " - <a href=\"https://support.wix.com/en/article/corvid-wix-stores-schema-for-wix-search\" target=\"_blank\">Stores/Products schema</a>",
          "",
          "",
          "To use the [`and()`](#and), [`or()`](#or), and [`not()`](#not) filtering functions, you first need to create ",
          "`WixSearchFilters` using the [`filter()`](wix-search.html#filter) function",
          "and the [`WixSearchFilterBuilder`](wix-search.WixSearchFilterBuilder.html) filtering functions. You can then ",
          "pass the `WixSearchFilters` to the `and()`, `or()`, and `not()` functions.",
          "",
          "Note that when you chain multiple filtering functions to a `WixSearchBuilder`, an `and` condition is assumed." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "and",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "filters",
              "type": "wix-search.WixSearchFilter",
              "doc": "One or more filters.",
              "spread": true } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 278,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents that meet the conditions of all of the specified filters.",
            "description":
              [ "The `and()` function joins `WixSearchFilters` with an inclusive `and` condition ",
                " and adds them to a `WixSearchBuilder`. A search with an `and()` returns all the documents that match the condition of all of the filters.",
                "",
                " Note that when chaining multiple `WixSearchBuilder` filtering functions to a search, an `and` condition is assumed.",
                " In such cases, you do not need to add a call to the `and()` function. `and()` is useful for combining compound filters",
                " created using [`WixSearchFilterBuilder`](wix-search.WixSearchFilterBuilder.html) filtering functions.",
                "",
                " If the `and()` function contains a single filter, the filter is applied directly to the WixSearchBuilder." ],
            "links": [],
            "examples":
              [ { "title": "Create filters, create a search, add an `and()` filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "const geLikeFilter = wixSearch",
                      "  .filter()",
                      "  .ge(\"likeCount\", 20)",
                      "",
                      "const geViewFilter = wixSearch",
                      "  .filter()",
                      "  .ge(\"viewCount\", 100)",
                      "",
                      "const gtDateFilter = wixSearch",
                      "  .filter()",
                      "  .gt(\"lastActivityDate\", \"2020-04-26T00:00:00.000Z\")",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .and(geLikeFilter, geViewFilter, gtDateFilter)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Create multiple search filters and add them to a search",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "const filterBuilder = wixSearch.filter();",
                      "",
                      "const gtJanFilter = filterBuilder.gt(\"lastActivityDate\", \"2020-01-01T00:00:00.000Z\");",
                      "const ltFebFilter = filterBuilder.lt(\"lastActivityDate\", \"2020-02-01T00:00:00.000Z\");",
                      "",
                      "const gtAprilFilter = filterBuilder.gt(\"lastActivityDate\", \"2020-04-01T00:00:00.000Z\");",
                      "const ltMayFilter = filterBuilder.lt(\"lastActivityDate\", \"2020-05-01T00:00:00.000Z\");",
                      "",
                      "const januaryFilter = filterBuilder.and(gtJanFilter, ltFebFilter);",
                      "const aprilFilter = filterBuilder.and(gtAprilFilter, ltMayFilter);",
                      "",
                      "const dateFilter = filterBuilder.or(januaryFilter, aprilFilter)",
                      "",
                      "const viewFilter = filterBuilder.gt(\"viewCount\", 200)",
                      "",
                      "wixSearch.search(phrase)",
                      "  .documentType(\"Forum/Content\")",
                      "  .and(dateFilter, viewFilter)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });" ],
                  "extra":
                    { "description": "This example demonstrates how to create multiple `WixSearchFilters` and combine them to search for forum posts\nwith more than 200 views that were posted either in the month of January or April of 2020." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The fields used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 568,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Adds a sort to a search, sorting by the specified fields in ascending order.",
            "description":
              [ "The `ascending()` function refines a `WixSearchBuilder` to sort in ascending order of",
                " the specified fields. If you specify more than one field,",
                " `ascending()` sorts the results in ascending order by each field in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                " + Boolean: `false` comes after `true`.",
                "",
                "",
                " If a property contains a number as a string, that value will be sorted",
                " alphabetically and not numerically. Documents that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Stores/Products\")",
                      "  .ascending(\"sku\");" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add an ascending sort, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .ascending(\"lastActivityDate\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to sort forum content from earliest to latest." } },
                { "title": "Create a search, add filters, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .eq(\"onSale\", true)",
                      "  .hasSome(\"collections\", [\"Spring\", \"Summer\"])",
                      "  .ascending(\"sku\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for store products that are on sale, are part of the \"Spring\" \nor \"Summer\" store collections, and how to sort the results in alphabetical order according to the SKU." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The fields used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 599,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Adds a sort to a search, sorting by the specified fields in descending order.",
            "description":
              [ "The `descending()` function refines a `WixSearchBuilder` to sort in descending order of",
                " the specified properties. If you specify more than one property,",
                " `descending()` sorts the results in descending order by each field in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                " + Boolean: `true` comes after `false`.",
                "",
                "",
                " If a property contains a number as a string, that value will be sorted",
                " alphabetically and not numerically. Documents that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add a descending sort to a search builder",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Stores/Products\")",
                      "  .descending(\"sku\");" ],
                  "extra":
                    {  } },
                { "title": "Create a search builder, add a descending sort, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .descending(\"likeCount\", \"viewCount\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "/** Example order of search result documents:",
                      "  * ",
                      "  * Likes  Views",
                      "  * 10     23",
                      "  * 7      24",
                      "  * 7      18",
                      "  * 3      29",
                      "  * 0      31",
                      "  * 0      12",
                      "  * ",
                      "  */   ",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to sort forum posts in descending order from most to least popular. Posts are sorted\nfrom most likes to least likes. If multiple posts have the same number of likes, they're sorted from most views to least views." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "documentType",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "type",
              "type": "string",
              "doc": "The document type to search in." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 50,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search builder to only search for documents of the specified document type.",
            "description":
              [ "The document type can be one of the following:",
                "",
                " + `\"Site/Pages\"`",
                " + `\"Blog/Posts\"`",
                " + `\"Bookings/Services\"`",
                " + `\"Forum/Content\"`",
                " + `\"Stores/Products\"`",
                "",
                "",
                "Setting the document type to `Site/Pages`:",
                "",
                " - Restricts the search to all regular and dynamic pages on your site that have <a href=\"https://support.wix.com/en/article/enabling-search-engines-eg-google-to-find-your-site\" target=\"_blank\">SEO indexing enabled</a>. Note that all Wix site pages are indexed by default.",
                " - Most main Wix app pages (for example, the Stores Shop page and the Blog Posts page) are included in the search. ",
                " - App pages with content based on app collections (for example, individual Store products and Blog posts) are not included in the search. To search Wix app collection content, set the `documentType` to the corresponding app collection (for example, `\"Stores/Products\"`).",
                " - Custom router pages and some Wix app pages are not currently included in the search. ",
                " - If the `documentType` is set to `\"Site/Pages\"`, you cannot [filter](wix-search.html#filter), [sort](#ascending), or apply [facets](#facets) to your search results.",
                " - Only the content of the `title` and `description` fields are searched.",
                "",
                "",
                "Setting the document type to a Wix app:",
                "",
                " - Restricts the search to the content of the specified Wix app collection, which also appear as pages on your site. For example, setting the `documentType` to `\"Stores/Products\"` restricts the search to products stored in the `\"Stores/Products\"` collection, which are also displayed in your site's Product Page.",
                " - The document properties returned in the search results differ depending on the supported schema for the specified `documentType`. ",
                " - You can [filter](wix-search.html#filter), [sort](#ascending), and apply [facets](#facets) to selected fields based on the supported schema for each app. ",
                " - For schema information see the following articles: ",
                "   - <a href=\"https://support.wix.com/en/article/corvid-wix-blog-schema-for-wix-search\" target=\"_blank\">Blog/Posts schema</a>",
                "   - <a href=\"https://support.wix.com/en/article/corvid-wix-bookings-schema-for-wix-search\" target=\"_blank\">Bookings/Services schema</a> ",
                "   - <a href=\"https://support.wix.com/en/article/corvid-wix-forum-schema-for-wix-search\" target=\"_blank\">Forum/Content schema</a>",
                "   - <a href=\"https://support.wix.com/en/article/corvid-wix-stores-schema-for-wix-search\" target=\"_blank\">Stores/Products schema</a>",
                "",
                "",
                "If the `documentType` is not specified, it defaults to `\"Site/Pages\"`.",
                "",
                "Note that you cannot chain multiple `documentType()` functions to search for multiple document types. ",
                "Only the last specified document type will be searched.",
                "",
                "Deprecation note: `\"Forum/Posts\"` is no longer supported. Use `\"Forum/Content\"` instead." ],
            "links": [],
            "examples":
              [ { "title": "Add a document type filter to a search",
                  "body":
                    [ "let newSearch = search.documentType(\"Bookings/Services\");" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a document type filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .documentType(\"Stores/Products\")",
                      "      .find()",
                      "      .then( (results) => {",
                      "        if(results.documents.length > 0) {",
                      "          let documents = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch( (error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});" ],
                  "extra":
                    {  } },
                { "title": "Build and run a search and display the results in a repeater",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "// Before search runs, set the repeater data as empty",
                      "$w('#repeater').data = [];",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .documentType(\"Stores/Products\")",
                      "      .find()",
                      "      .then((results) => {",
                      "        if (results.documents.length > 0) {",
                      "          $w('#repeater').data = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch((error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});",
                      "",
                      "$w(\"#repeater\").onItemReady(($item, itemData) => {",
                      "  $item(\"#title\").text = itemData.title;",
                      "  $item(\"#description\").text = itemData.description;",
                      "  $item(\"#image\").src = itemData.image;",
                      "  $item(\"#button\").link = itemData.url;",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to set up a search for store products and display the results in a repeater. Each button in the repeater links to the product page for the selected product." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 324,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents whose specified field value equals the specified value.",
            "description":
              [ "The `eq()` filter function refines a `WixSearchBuilder` to only",
                " match documents where the value of the specified field equals the specified `value`.",
                "",
                " `eq()` only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If other filters were previously used in the same `WixSearchBuilder` instance, `eq()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Stores/Products\")",
                      "  .eq(\"onSale\", true);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add an equals filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .eq(\"contentType\", \"COMMENTS\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search only for forum comments and not forum posts." } },
                { "title": "Create a search, add filters, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .eq(\"onSale\", true)",
                      "  .hasSome(\"collections\", [\"Spring\", \"Summer\"])",
                      "  .ascending(\"sku\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for store products that are on sale and are part of the \"Spring\" \nor \"Summer\" store collections. The results are sorted in alphabetical order according to the SKU." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "facets",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "facets",
              "type": "string",
              "doc": "The fields to use as facets.",
              "spread": true } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 198,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Categorizes search results according to the specified facets.",
            "description":
              [ "The `facets()` function allows you to categorize search results according to one or more",
                " specified fields.",
                "",
                " For example, if you have a sports equipment store with products divided into `collections` ",
                " of `Basketball`, `Football`, and `Baseball` equipment, you can apply `collections` as a facet to your search ",
                " and get information about how many documents in the search results are included in each collection. ",
                "",
                " If you chained a `facets()` function to your search, your [`WixSearchResult`](wix-search.WixSearchResult.html) ",
                " will include an array of [facet results](wix-search.WixSearchResult.html#facets). ",
                "",
                " Faceting is a useful tool for presenting categorization data to site visitors ",
                " and allowing them to narrow down and navigate search results. ",
                " Visitors can select one or more facets, and you can apply corresponding filters to your search results.",
                "",
                "![Facet Example](images/faceting_tshirts4.png \"Facet Example\")",
                " ",
                " By default, `facets()` is set to none.",
                "",
                " You cannot apply facets to your search if the [`documentType`](#documentType) is set to `\"Site/Pages\"`. ",
                "",
                " Only some fields can be used for faceting. You can check which fields are facetable in the schema for each [`documentType`](#documentType)." ],
            "links": [],
            "examples":
              [ { "title": "Add a single facet to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Stores/Products\")",
                      "  .facets(\"inStock\");" ],
                  "extra":
                    {  } },
                { "title": "Add multiple facets to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Forum/Content\")",
                      "  .facets(\"likeCount\", \"viewCount\");" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add facets to it, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .facets(\"collections\", \"inStock\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    const facets = results.facets;",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      " /* Example facets array",
                      "  * ",
                      "  * [",
                      "  *   {",
                      "  *     \"facet\": \"collections\",",
                      "  *     \"facets\":",
                      "  *       [",
                      "  *         {",
                      "  *           \"facetValue\": \"Winter\",",
                      "  *           \"count\": 29",
                      "  *         },",
                      "  *         {",
                      "  *           \"facetValue\": \"Spring\",",
                      "  *           \"count\": 17",
                      "  *         },",
                      "  *         {",
                      "  *           \"facetValue\": \"Summer\",",
                      "  *           \"count\": 36",
                      "  *         }",
                      "  *       ]",
                      "  *   },",
                      "  *   {",
                      "  *     \"facet\": \"inStock\",",
                      "  *     \"facets\":",
                      "  *       [",
                      "  *         {",
                      "  *           \"facetValue\": \"true\",",
                      "  *           \"count\": 67",
                      "  *         },",
                      "  *         {",
                      "  *           \"facetValue\": \"false\",",
                      "  *           \"count\": 15",
                      "  *         }",
                      "  *       ]",
                      "  *   }",
                      "  * ]",
                      "  * ",
                      "  */" ],
                  "extra":
                    {  } },
                { "title": "Filter search results according to selected facets",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "$w.onReady(function () {",
                      "",
                      "  // Define what happens when the facet repeater's data is set",
                      "  $w(\"#facetRepeater\").onItemReady(($item, itemData) => {",
                      "    $item(\"#facetText\").text = itemData.facetValue;",
                      "    $item(\"#facetNumberText\").text = \"(\" + itemData.count + \")\";",
                      "",
                      "    // When a facet is selected, run the function",
                      "    // that displays only the selected products",
                      "    $item(\"facetText\").onClick(event => {",
                      "      const facet = $item(\"#facetText\").text;",
                      "      displaySelectedProducts(facet);",
                      "    });",
                      "  });",
                      "",
                      "  // Define what happens when the product repeater's data is set",
                      "  $w(\"productRepeater\").onItemReady(($item, itemData) => {",
                      "    $item(\"#productTitleText\").text = itemData.title;",
                      "    $item(\"#productDescriptionText\").text = itemData.description;",
                      "    $item(\"#productImage\").src = itemData.image;",
                      "  });",
                      "  ",
                      "  // Run a search which applies a facet that categorizes store",
                      "  // products according to the collection they belong to",
                      "  wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .facets(\"collections\")",
                      "  .find()",
                      "  .then((results) => {",
                      "",
                      "      // Get the first (and only) facet result",
                      "      const facets = results.facets[0].facets;",
                      "",
                      "      // Add an ID to each object in the facets ",
                      "      // array (required for repeater data)",
                      "      const newFacets = facets.map((facet) => {",
                      "        facet._id = facet.facetValue;",
                      "        return facet;",
                      "      });",
                      "      ",
                      "      // Set the facet repeater's data",
                      "      $w('#facetRepeater').data = newFacets;",
                      "      // Set the initial pre-filtered product repeater's data ",
                      "      $w('#productRepeater').data = results.documents;",
                      "    });",
                      "});",
                      "",
                      "// Display only products from the collection ",
                      "// corresponding to the selected facet",
                      "export function displaySelectedProducts(facet) {",
                      "  wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .hasSome(\"collections\", [facet])",
                      "  .find()",
                      "  .then((results) => {",
                      "    $w('#productRepeater').data = results.documents;",
                      "  });",
                      "}" ],
                  "extra":
                    { "description": "This example demonstrates how to display facet information for store products and let site visitors filter the products by\nselecting a facet. We use 2 repeaters, 1 to display the facet info and 1 for the products. We apply\nthe `collections` field as a facet to our search. Each facet value and number is loaded into the facet repeater. When a site visitor\nselects a facet, the products are filtered according to the selected collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-search.WixSearchResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the search.\nRejected - Error that caused the search to fail." },
        "locations":
          [ { "lineno": 236,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Returns the documents that match the search.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                " by the search and some information about the results. The Promise is",
                " rejected if any of the functions used to refine the search are invalid.",
                "",
                " If you build a search and don't refine it with any `WixSearchBuilder` functions,",
                " `find()` returns all matching site documents." ],
            "links": [],
            "examples":
              [ { "title": "Perform a find on a search",
                  "body":
                    [ "search.find()",
                      "  .then((results) => {",
                      "    if (results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.log(error);",
                      "  });",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to run a `find()` on a `search()` that was previously built and stored in a variable." } },
                { "title": "Create a search and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .find()",
                      "      .then((results) => {",
                      "        if (results.documents.length > 0) {",
                      "          let documents = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch((error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `search()` and then run a `find()` on it." } },
                { "title": "Create a search, add functions to the search, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .documentType(\"Stores/Products\")",
                      "      .eq(\"onSale\", true)",
                      "      .ascending(\"sku\")",
                      "      .limit(5)",
                      "      .find()",
                      "      .then((results) => {",
                      "        if (results.documents.length > 0) {",
                      "          let documents = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch((error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a search, chain additional functions such as `eq()` and `limit()`, and then run the search." } },
                { "title": "Build and run a search and display the results in a repeater",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "// Before search runs, set the repeater data as empty",
                      "$w('#repeater').data = [];",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .documentType(\"Stores/Products\")",
                      "      .find()",
                      "      .then((results) => {",
                      "        if (results.documents.length > 0) {",
                      "          $w('#repeater').data = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch((error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});",
                      "",
                      "$w(\"#repeater\").onItemReady(($item, itemData) => {",
                      "  $item(\"#title\").text = itemData.title;",
                      "  $item(\"#description\").text = itemData.description;",
                      "  $item(\"#image\").src = itemData.image;",
                      "  $item(\"#button\").link = itemData.url;",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to set up a search for store products and display the results in a repeater. Each button in the repeater links to the product page for the selected product." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "fuzzy",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "fuzzy",
              "type": "boolean",
              "doc": "Whether the search is fuzzy or not." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 138,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Sets whether to search for exact matches or approximate matches of the search phrase.",
            "description":
              [ "If `fuzzy` is `false`, the search only returns documents containing an exact match of the search phrase.",
                " For example, a search for \"applf\" or \"app\" will not return documents containing the phrase \"apple\".",
                "",
                " If `fuzzy` is `true`, the search returns documents containing exact matches and approximate matches of the search phrase.",
                " For example, a search for \"applf\" or \"app\" will return documents containing the phrase \"apple\"." ],
            "links": [],
            "examples":
              [ { "title": "Set whether a search is fuzzy",
                  "body":
                    [ "let newSearch = search.fuzzy(false);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, set the search to only match the exact search phrase, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .fuzzy(false)",
                      "      .find()",
                      "      .then( (results) => {",
                      "        if(results.documents.length > 0) {",
                      "          let documents = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch( (error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The default for `fuzzy` is `true`." ] } },
      { "name": "ge",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 374,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents whose specified field value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` filter function refines a `WixSearchBuilder` to only",
                " match documents where the value of the specified field is greater than or",
                " equal to the specified `value`.",
                "",
                " `ge()` only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a field contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Documents that do not have a value for the",
                " specified field are ranked lowest.",
                "",
                " The following types of fields can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"text\"` is greater than or equal to `\"Text\"` (because of the 'greater than').",
                "",
                " If other filters were previously used in the same `WixSearchBuilder` instance, `ge()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Forum/Content\")",
                      "  .ge(\"likeCount\", 10);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .ge(\"totalComments\", 5)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 405,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents whose specified field value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `WixSearchBuilder` to only match",
                " documents where the value of the specified field is greater than the specified `value`.",
                "",
                " `gt()` only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a field contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Documents that do not have a value for the",
                " specified field are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.",
                "",
                "",
                " If other filters were previously used in the same `WixSearchBuilder` instance, `gt()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Forum/Content\")",
                      "  .gt(\"likeCount\", 10);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a greater than filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .gt(\"totalComments\", 5)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasAll",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `values`. The field type must be an array of strings." },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 525,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents whose specified field value contains all of the specified values.",
            "description":
              [ "The `hasAll()` function refines a `WixSearchBuilder` to",
                " only match documents where the values of the array in the specified field equal all of",
                " the specified values. ",
                "",
                " Matching strings with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                "If other filters were previously used in the same `WixSearchBuilder` instance, `hasAll()`",
                "is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add a has all filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Blog/Posts\")",
                      "  .hasAll(\"hashtags\", [\"vacation\", \"summer\", \"fun\"]);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a has all filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .hasAll(\"collections\", [\"Shirts\", \"Summer\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for store products that belong to both \nthe \"Shirts\" and \"Summer\" store collections." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `values`. The field type must be an array of strings." },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 501,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents whose specified field contains any of the specified values.",
            "description":
              [ "The `hasSome()` function refines a `WixSearchBuilder` to",
                " only match documents where any of the values of the array in the specified field equal any of",
                " the specified values. ",
                "",
                " Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                "If other filters were previously used in the same `WixSearchBuilder` instance, `hasSome()`",
                "is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add a has some filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Blog/Posts\")",
                      "  .hasSome(\"hashtags\", [\"vacation\", \"summer\", \"fun\"]);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a has some filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Bookings/Services\")",
                      "  .hasSome(\"staffMembers\", [\"Mary Jane\", \"John Doe\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for booking services run by any of the specified staff members." } },
                { "title": "Create a search, add filters, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .eq(\"onSale\", true)",
                      "  .hasSome(\"collections\", [\"Spring\", \"Summer\"])",
                      "  .ascending(\"sku\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for store products that are on sale, are part of the \"Spring\" \nor \"Summer\" store collections, and to sort the results in alphabetical order according to the SKU." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "in",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `values`. The field must be of type string or number." },
            { "name": "values",
              "type":
                [ { "name": "Array",
                    "typeParams":
                      [ "string" ] },
                  { "name": "Array",
                    "typeParams":
                      [ "number" ] } ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 547,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents whose specified field value equals any of the specified values.",
            "description":
              [ "The `in()` function refines a `WixSearchBuilder` to",
                " only match documents where the value of the specified field equals any of",
                " the specified values.",
                "",
                " Matching strings with `in()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                "If other filters were previously used in the same `WixSearchBuilder` instance, `in()`",
                "is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add an `in()` filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Forum/Content\")",
                      "  .in(\"categoryId\", [\"5df7504fa8a9b30017fc1053\", \"4e14023806a63c0017e0c1d0\"]);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add an `in()` filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .in(\"sku\", [\"B04\", \"B07\", \"B08\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for store products with any of the specified SKUs." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "language",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "language",
              "type": "string",
              "doc": "The search language." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 100,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search builder to search in the specified language.",
            "description":
              [ "The value of the search language must be a two-letter language code string of <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1 format</a>.",
                "",
                "Defaults for `language`:",
                "",
                " + If your site is multilingual, default is the [current language](wix-window.multilingual.html#currentLanguage).",
                " + If your site is not multilingual, default is the [site language](wix-site.html#language)." ],
            "links": [],
            "examples":
              [ { "title": "Add a language filter to a search",
                  "body":
                    [ "let newSearch = search.language(\"fr\"); // French" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a language filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .language(\"pt\") // Portuguese",
                      "      .find()",
                      "      .then((results) => {",
                      "        if (results.documents.length > 0) {",
                      "          let documents = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch((error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 437,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search or filter to match documents whose specified field value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `WixSearchBuilder` to only match",
                " documents where the value of the specified field is less than or equal to the",
                " specified `value`.",
                "",
                " `le()` only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a field contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Documents that do not have a value for the",
                " specified field are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"Text\"` is less than or equal to `\"text\"` (because of the 'less than').",
                "",
                "",
                " If other filters were previously used in the same `WixSearchBuilder` instance, `le()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Forum/Content\")",
                      "  .le(\"viewCount\", 50);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .le(\"totalComments\", 5)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "The number of documents to return, which is also the [`pageSize`](wix-search.WixSearchResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 117,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Limits the number of documents the search returns.",
            "description":
              [ "The `limit()` function defines the number of results a search returns in each",
                " page. Only one page of results is retrieved at a time. The [`next()`](wix-search.WixSearchResult.html#next)",
                " and [`prev()`](wix-search.WixSearchResult.html#prev) functions are used to",
                " navigate the pages of a search result.",
                "",
                " By default, `limit` is set to `25`.",
                "",
                " The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to a search",
                  "body":
                    [ "let newSearch = search.limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a limit, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .limit(10)",
                      "      .find()",
                      "      .then((results) => {",
                      "        if (results.documents.length > 0) {",
                      "          let documents = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch((error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of search results",
                  "body":
                    [ "async function retrieveAllDocuments(phrase){",
                      "  let allDocuments = [];",
                      "    ",
                      "  let results = await wixSearch.search(phrase)",
                      "    .limit(1000)",
                      "    .find();",
                      "    ",
                      "  allDocuments.push(results.documents);",
                      "    ",
                      "  while(results.hasNext()) {",
                      "    results = await results.next();",
                      "    allDocuments.push(results.documents);",
                      "  }",
                      "    ",
                      "  return allDocuments;",
                      "}" ],
                  "extra":
                    { "description": "This example demonstrates how to get all search results, bypassing the maximum limit of 1000." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 469,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search or filter to match documents whose specified field value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `WixSearchBuilder` to only match",
                " documents where the value of the specified field is less than the specified `value`.",
                "",
                " `lt()` only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a field contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Documents that do not have a value for the",
                " specified field are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`.",
                "",
                "",
                " If other filters were previously used in the same `WixSearchBuilder` instance, `lt()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Forum/Content\")",
                      "  .lt(\"viewCount\", 50);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a less than filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .lt(\"lastActivityDate\", \"2020-04-26T00:00:00.000Z\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for forum content that was last updated before April 26, 2020." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "field",
              "type": "string",
              "doc": "The field whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 350,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents whose specified field value does not equal the specified value.",
            "description":
              [ "The `ne()` filter function refines a `WixSearchBuilder` to only",
                " match documents where the value of the specified field does not equal the specified `value`.",
                "",
                " `ne()` only matches values of the same type. For example, a number value stored",
                " as a String type is considered not equal to the same number stored as a Number type.",
                "",
                " Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If other filters were previously used in the same `WixSearchBuilder` instance, `ne()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a search",
                  "body":
                    [ "let newSearch = search",
                      "  .documentType(\"Forum/Content\")",
                      "  .ne(\"categoryId\", \"5df7504fa9a9b30017fc1053\");" ],
                  "extra":
                    { "description": "This example demonstrates how to exclude a forum category from a search for forum content]" } },
                { "title": "Create a search, add a not equals filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .ne(\"sku\", \"SHO-11-BLA\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to exclude a product with a specific SKU from a search for store products" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "not",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "filters",
              "type": "wix-search.WixSearchFilter",
              "doc": "One or more filters.",
              "spread": true } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 299,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents that do not meet the conditions of all of the specified filters.",
            "description":
              [ "The `not()` function adds a `not` condition to a `WixSearchBuilder`. A search with a `not()`",
                " returns all the documents that don't match **all** of the `WixSearchFilters`",
                " passed to the `not()` function. The ",
                "`not()` function first applies an `and` condition between the filter parameters and then negates them. ",
                " If a document does not meet the conditions of some but not all of the specified filters, the document ",
                " will be included in the search results.",
                "",
                " If other filtering functions were previously used in the same `WixSearchBuilder` instance, `not()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Create filters, create a search, add a not filter, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "const eqStockFilter = wixSearch",
                      "  .filter()",
                      "  .eq(\"inStock\", true)",
                      "",
                      "const eqSaleFilter = wixSearch",
                      "  .filter()",
                      "  .eq(\"onSale\", true)",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Stores/Products\")",
                      "  .not(eqStockFilter, eqSaleFilter)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for store products that are not both on sale and in stock.\n\n\nSearch results will exclude only products which return `true` for both `onSale` and `inStock`. \nProducts that are `onSale` but not `inStock` or `inStock` but not `onSale` will be included in the search results." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "filters",
              "type": "wix-search.WixSearchFilter",
              "doc": "One or more filters.",
              "spread": true } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 260,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Refines a search to match documents that meet the condition of any of the specified filters.",
            "description":
              [ "The `or()` function joins `WixSearchFilters` with an inclusive `or` condition ",
                " and adds them to a `WixSearchBuilder`. A search with an `or()` returns all the documents that match the condition of any of the filters.",
                "",
                " If the `or()` function contains a single filter, the filter is applied directly to the `WixSearchBuilder`.",
                "",
                " If other filtering functions were previously used in the same `WixSearchBuilder` instance, `or()`",
                " is applied using an `and` condition with previously set filters." ],
            "links": [],
            "examples":
              [ { "title": "Create a search, add an or, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "const geLikeFilter = wixSearch",
                      "        .filter()",
                      "        .ge(\"likeCount\", 20)",
                      "",
                      "const geViewFilter = wixSearch",
                      "        .filter()",
                      "        .ge(\"viewCount\", 100)",
                      "",
                      "wixSearch.search()",
                      "  .documentType(\"Forum/Content\")",
                      "  .or(geLikeFilter, geViewFilter)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.documents.length > 0) {",
                      "      let documents = results.documents;",
                      "    } else {",
                      "      console.log(\"No matching results\");",
                      "    }",
                      "  })",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  });",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to search for popular forum posts with either 20 or more likes or 100 or more views." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "query",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "phrase",
              "type": "string",
              "doc": "The phrase to run the search on." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 157,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Sets the search phrase to search for.",
            "description":
              [ "The `query()` function provides an alternate method for setting the search phrase for your search. Instead",
                "of setting the search phrase directly as a parameter of the [`search()`](wix-search.html#search) function, ",
                "you can set the search phrase using the `query()` function chained to a `WixSearchBuilder`. ",
                "",
                "Setting the search phrase with `query()` allows you to build searches dynamically. For example, ",
                "you could use a different search phrase depending on whether a specific condition is met." ],
            "links": [],
            "examples":
              [ { "title": "Add a query to a search",
                  "body":
                    [ "let newSearch = search.query(phrase);" ],
                  "extra":
                    {  } },
                { "title": "Build and run a dynamic search",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchButton\").onClick(event => {",
                      "  const dropdownValue = $w(\"#myDropdown\").value;",
                      "  const freeText = $w('#myInput').value;",
                      "",
                      "  let searchBuilder = wixSearch.search();",
                      "  ",
                      "  if (dropdownValue) {",
                      "    searchBuilder = searchBuilder.query(dropdownValue);",
                      "  } else {",
                      "    searchBuilder = searchBuilder.query(freeText);",
                      "  }",
                      "",
                      "  searchBuilder",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.documents.length > 0) {",
                      "        let documents = results.documents;",
                      "      } else {",
                      "        console.log(\"No matching results\");",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error);",
                      "    });",
                      "",
                      "});" ],
                  "extra":
                    { "description": "In this example, site visitors can search a site either by selecting a search option\nfrom a dropdown element, or by entering free text in an input element. If a dropdown option\nis selected, the dropdown value is searched. If there is no dropdown selection, the free text is searched." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "The number of documents to skip in the search results before returning the results." } ],
        "ret":
          { "type": "wix-search.WixSearchBuilder",
            "doc": "A `WixSearchBuilder` object representing the refined search." },
        "locations":
          [ { "lineno": 177,
              "filename": "searchBuilder.js" } ],
        "docs":
          { "summary": "Sets the number of documents to skip before returning search results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the search",
                " results before returning new search results.",
                "",
                " For example, if you search your site and 20 documents match your search, but",
                " you set `skip()` to 5, the results returned will skip the first 5 documents",
                " that match and return the 6th through 20th documents.",
                "",
                " By default, `skip()` is set to 0.",
                "",
                "The maximum value that `skip()` can accept is `100000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a search",
                  "body":
                    [ "let newSearch = search.skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a search, add a skip, and run it",
                  "body":
                    [ "import wixSearch from 'wix-search';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#searchInput\").onKeyPress((keyPress) => {",
                      "  if (keyPress.key === \"Enter\") {",
                      "    const phrase = $w(\"#searchInput\").value;",
                      "    wixSearch.search(phrase)",
                      "      .skip(10)",
                      "      .find()",
                      "      .then((results) => {",
                      "        if (results.documents.length > 0) {",
                      "          let documents = results.documents;",
                      "        } else {",
                      "          console.log(\"No matching results\");",
                      "        }",
                      "      })",
                      "      .catch((error) => {",
                      "        console.log(error);",
                      "      });",
                      "  }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }