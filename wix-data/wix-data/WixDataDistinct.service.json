{ "name": "WixDataDistinct",
  "memberOf": "wix-data",
  "mixes":
    [ "wix-data.WixDataFilter" ],
  "labels":
    [ "changed",
      "removed" ],
  "location":
    { "lineno": 1,
      "filename": "distinct.js" },
  "docs":
    { "summary": "Provides functionality for refining a distinct data query.",
      "description":
        [ "The `WixDataDistinct` methods allow you to refine a distinct query before it runs, as well as sort and limit its results.",
          "",
          "To refine the distinct query, chain  `WixDataDistinct` methods to it in the [`beforeDistinct()`](https://dev.wix.com/docs/velo/events-service-plugins/data/hooks/wix-data-hooks/before-distinct) hook. The hook runs before the distinct query does, and is triggered when you call the [`distinct()`](https://dev.wix.com/docs/velo/api-reference/wix-data/wix-data-query/distinct) method on a [`WixDataQuery`](https://dev.wix.com/docs/velo/api-reference/wix-data/wix-data-query/introduction) object.",
          "",
          "",
          "For example, the following hook refines the distinct query by adding an age requirement, and then sorts the results in ascending order:",
          "",
          "",
          " ```javascript",
          "// In site backend code",
          "",
          "import wixData from \"wix-data\";",
          "",
          "wixData",
          "  .query(\"customers\")",
          "  .distinct(\"lastName\") // Triggers the beforeDistinct() hook",
          "  .then((results) => {",
          "    if (results.items.length > 0) {",
          "      let items = results.items;",
          "    } else {",
          "      // handle case where no matching items found",
          "    }",
          "  })",
          "  .catch((error) => {",
          "    let errorMsg = error.message;",
          "    let code = error.code;",
          "  });",
          "",
          "",
          "// In data.js",
          "",
          "export function myCollection_beforeDistinct(distinct, context) {",
          " // Get the current filter",
          " const currentFilter = distinct.getFilter();",
          "",
          " // Add an age requirement",
          " const updatedFilter = currentFilter.ge(\"age\", 18);",
          "",
          " // Set the updated filter and sort the results",
          " const updatedDistinctQuery = distinct.filter(updatedFilter)",
          "   .ascending();",
          "",
          " return updatedDistinctQuery;",
          "}",
          " ```",
          "",
          " You can further refine the distinct query by chaining additional `WixDataDistinct` methods." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "The distinct query object." },
        "locations":
          [ { "lineno": 127,
              "filename": "distinct.js" },
            { "lineno": 10,
              "filename": "sortMixin.js" } ],
        "docs":
          { "summary": "Sorts the results of the distinct query in ascending order based on the distinct property name.",
            "description":
              [ "The `ascending()` method sorts the distinct query in ascending order based on the distinct property name." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to the distinct query",
                  "body":
                    [ "// Sort the results of the distinct query in ascending order",
                      "",
                      "let newDistinctQuery = query.distinct.ascending();" ],
                  "extra":
                    {  } },
                { "title": "Add an ascending sort to the distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Add an ascending sort to the distinct query",
                      "  const updatedDistinctQuery = distinct.ascending();",
                      "",
                      "  return updatedDistinctQuery;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "The distinct query object." },
        "locations":
          [ { "lineno": 153,
              "filename": "distinct.js" },
            { "lineno": 41,
              "filename": "sortMixin.js" } ],
        "docs":
          { "summary": "Sorts the results of the distinct query in descending order based on the distinct property name.",
            "description":
              [ "The `descending()` method sorts the distinct query in descending order based on the distinct property name." ],
            "links": [],
            "examples":
              [ { "title": "Add an descending sort to the distinct query",
                  "body":
                    [ "// Sort the results of the distinct query in descending order",
                      "",
                      "let newDistinctQuery = query.distinct.descending();" ],
                  "extra":
                    {  } },
                { "title": "Add an descending sort to the distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Add an descending sort to the distinct query",
                      "  const updatedDistinctQuery = distinct.descending();",
                      "",
                      "  return updatedDistinctQuery;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "filter",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "filter",
              "type": "wix-data.WixDataFilter",
              "doc": "Filter to refine the distinct query." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "The distinct query object." },
        "locations":
          [ { "lineno": 72,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Sets the filter used to refine the distinct query.",
            "description":
              [ "The `filter()` method defines the filter used to refine the distinct query." ],
            "links": [],
            "examples":
              [ { "title": "Set the distinct query filter",
                  "body":
                    [ "// Set the distinct query filter",
                      "",
                      "let newDistinctQuery = query.distinct.filter(newFilter);" ],
                  "extra":
                    {  } },
                { "title": "Set a new or modified filter",
                  "body":
                    [ "// In data.js",
                      "",
                      "import wixData from \"wix-data\";",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Create a new filter",
                      "  const newFilter = wixData.filter().ge(\"age\", 18);",
                      "  let updatedDistinctQuery = distinct.filter(newFilter);",
                      "",
                      "  // Or modify the existing filter",
                      "  const currentFilter = distinct.getFilter();",
                      "  const updatedFilter = currentFilter.ge(\"age\", 21);",
                      "  updatedDistinctQuery = distinct.filter(updatedFilter);",
                      "",
                      "  return updatedDistinctQuery;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getFilter",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataFilter",
            "doc": "The filter used to refine the distinct query." },
        "locations":
          [ { "lineno": 59,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Returns the filter used to refine the distinct query.",
            "description":
              [ "The `getFilter()` method returns a [`WixDataFilter()`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-filter/introduction) that was used to refine the distinct query." ],
            "links": [],
            "examples":
              [ { "title": "Get the distinct query filter",
                  "body":
                    [ "// Get the distinct query filter",
                      "",
                      "let filter = query.distinct.getFilter();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getPropertyName",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "string",
            "doc": "The property used to define the distinct query." },
        "locations":
          [ { "lineno": 86,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Returns the name of the property used to define the distinct query.",
            "description":
              [ "The `getPropertyName()` method returns the name of the property used to define the distinct query." ],
            "links": [],
            "examples":
              [ { "title": "Get the distinct property",
                  "body":
                    [ "// Get the name of the property used to define the distinct query",
                      "",
                      "let distinctPropertyName = query.distinct.getPropertyName();" ],
                  "extra":
                    {  } },
                { "title": "Get and modify the distinct property",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Get the current property name that defines the distinct query",
                      "  const currentPropertyName = distinct.getPropertyName();",
                      "",
                      "  // Modify the property name if needed",
                      "  if (currentPropertyName === \"id\") {",
                      "    const updatedPropertyName = \"_id\";",
                      "    distinct.propertyName(updatedPropertyName);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isAscending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "Whether the results of the distinct query are sorted in ascending order." },
        "locations":
          [ { "lineno": 114,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Whether the results of the distinct query are sorted in ascending order.",
            "description":
              [ "The `isAscending()` method returns `true` if the results of the distinct query are sorted in ascending order based on the distinct property." ],
            "links": [],
            "examples":
              [ { "title": "Check whether the results of the distinct property are sorted in ascending order",
                  "body":
                    [ "// Whether the results of the distinct property are sorted in ascending order",
                      "",
                      "let ascending = query.distinct.isAscending();" ],
                  "extra":
                    {  } },
                { "title": "Check the result sort order and skip the first 10 results",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Check whether the distinct query returns results in ascending order.",
                      "  const ascending = distinct.isAscending();",
                      "",
                      "  // If the results are ordered in ascending order, skip the first 10 results",
                      "  if (ascending) {",
                      "    distinct = distinct.skip(10);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isDescending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "Whether the results of the distinct query are sorted in descending order." },
        "locations":
          [ { "lineno": 140,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Whether the results of the distinct query are sorted in descending order.",
            "description":
              [ "The `isDescending()` method returns `true` if the results of the distinct query are sorted in ascending order based on the distinct property." ],
            "links": [],
            "examples":
              [ { "title": "Check whether the results of the distinct property are sorted in descending order",
                  "body":
                    [ "// Whether the results of the distinct property are sorted in descending order",
                      "",
                      "let descending = query.distinct.isDescending();" ],
                  "extra":
                    {  } },
                { "title": "Check the result sort order and skip the first 10 results",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Check whether the distinct query returns results in descending order.",
                      "  const descending = distinct.isDescending();",
                      "",
                      "  // If the results are ordered in descending order, skip the first 10 results",
                      "  if (descending) {",
                      "    distinct = distinct.skip(10);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "Number of items to return, which is also the [`pageSize`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-result/page-size) of the results object." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "A [`WixDataDistinct`](https://dev.wix.com/docs/velo/apis/wix-data/wix-data-distinct/introduction) object representing the refined distinct query." },
        "locations":
          [ { "lineno": 166,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Limits the number of items the distinct query returns.",
            "description":
              [ "The `limit()` method defines the number of results a distinct query returns in each page. Only one page of results is retrieved at a time. use the [`next()`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-result/next) and [`prev()`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-result/prev) methods to navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`.",
                "",
                " > **Note** : For some [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), the maximum value `limit()` can accept is less than `1000`. For example, the maximum limit for the Wix `Stores/Product` collection is 100." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to the results of a distinct query",
                  "body":
                    [ "// Limit the number of results of a distinct query",
                      "",
                      "let distinctQuery = query.distinct.limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Add a limit to the results of a distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Limit the number of results of the distinct query",
                      "  distinct = distinct.limit(25);",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "propertyName",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "newPropertyName",
              "type": "string",
              "doc": "Property by which to return distinct values, without duplicates." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "The distinct query object." },
        "locations":
          [ { "lineno": 99,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Sets the property name by which to return distinct values.",
            "description":
              [ "The `propertyName()` method defines the property by which to return distinct values, without duplicates." ],
            "links": [],
            "examples":
              [ { "title": "Set the distinct property",
                  "body":
                    [ "// Set the property by which the distinct query is defined",
                      "",
                      "let distinctQuery = query.distinct.propertyName(\"company\");" ],
                  "extra":
                    {  } },
                { "title": "Check and change the distinct property",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Get the current property name that defines the distinct query",
                      "  const currentPropertyName = distinct.getPropertyName();",
                      "",
                      "  // Modify the property name if needed",
                      "  if (currentPropertyName === \"secretField\") {",
                      "    const updatedPropertyName = \"firstName\";",
                      "    distinct.propertyName(updatedPropertyName);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "Number of items to skip in before returning the distinct query results." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "A `WixDataDistinct` object representing the refined query." },
        "locations":
          [ { "lineno": 185,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning distinct query results.",
            "description":
              [ "The `skip()` method defines the number of query results to skip before returning the remaining results.",
                "",
                " For example, if you query a collection and 50 items match your query, but you set `skip` to 10, the results skip the first 10 items that match and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to the results of a distinct query",
                  "body":
                    [ "// Add a skip to a distinct query",
                      "",
                      "let newDistinctQuery = query.distinct.skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Add a skip to the results of a distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Skip the first 10 query results",
                      "  distinct = distinct.skip(10);",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }