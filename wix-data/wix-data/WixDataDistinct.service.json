{ "name": "WixDataDistinct",
  "memberOf": "wix-data",
  "mixes":
    [ "wix-data.WixDataFilter" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "distinct.js" },
  "docs":
    { "summary": "Provides functionality for refining a distinct data query.",
      "description":
        [ "The `WixDataDistinct` methods allow you to refine a distinct query before it runs, as well as sort and limit its results. A distinct query returns unique values for the specified property, without duplicates.",
          "",
          "To refine the distinct query, use `WixDataDistinct` methods in the [`beforeDistinct()`](https://dev.wix.com/docs/velo/events-service-plugins/data/hooks/wix-data-hooks/before-distinct) hook. This hook is triggered when you call [`distinct()`](https://dev.wix.com/docs/velo/api-reference/wix-data/wix-data-query/distinct), and runs before the distinct query operation executes.",
          "",
          "For example, the following hook refines the distinct query by adding an age requirement, and then sorts the results in ascending order:",
          "",
          "",
          " ```javascript",
          "// In site backend code",
          "",
          "import wixData from \"wix-data\";",
          "",
          "wixData",
          "  .query(\"customers\")",
          "  .distinct(\"lastName\") // Triggers the beforeDistinct() hook",
          "  .then((results) => {",
          "    if (results.items.length > 0) {",
          "      let items = results.items;",
          "    } else {",
          "      // handle case where no matching items found",
          "    }",
          "  })",
          "  .catch((error) => {",
          "    let errorMsg = error.message;",
          "    let code = error.code;",
          "  });",
          "",
          "",
          "// In data.js",
          "",
          "export function myCollection_beforeDistinct(distinct, context) {",
          " // Get the current filter",
          " const currentFilter = distinct.getFilter();",
          "",
          " // Add an age requirement",
          " const updatedFilter = currentFilter.ge(\"age\", 18);",
          "",
          " // Set the updated filter and sort the results",
          " const updatedDistinctQuery = distinct.filter(updatedFilter)",
          "   .ascending();",
          "",
          " return updatedDistinctQuery;",
          "}",
          " ```",
          "",
          " You can further refine the distinct query by chaining additional `WixDataDistinct` methods." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "Distinct query object." },
        "locations":
          [ { "lineno": 126,
              "filename": "distinct.js" },
            { "lineno": 10,
              "filename": "sortMixin.js" } ],
        "docs":
          { "summary": "Sorts the results of the distinct query in ascending order by the distinct property.",
            "description":
              [ "The `ascending()` method sorts the results of the distinct query by the distinct property in ascending order." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to the distinct query",
                  "body":
                    [ "// Sort the results of the distinct query in ascending order",
                      "",
                      "let newDistinctQuery = query.distinct.ascending();" ],
                  "extra":
                    {  } },
                { "title": "Add an ascending sort to the distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Add an ascending sort to the distinct query",
                      "  const updatedDistinctQuery = distinct.ascending();",
                      "",
                      "  return updatedDistinctQuery;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "Distinct query object." },
        "locations":
          [ { "lineno": 152,
              "filename": "distinct.js" },
            { "lineno": 41,
              "filename": "sortMixin.js" } ],
        "docs":
          { "summary": "Sorts the results of the distinct query by the distinct property in descending order.",
            "description":
              [ "The `descending()` method sorts the results of the distinct query by the distinct property in descending order." ],
            "links": [],
            "examples":
              [ { "title": "Add an descending sort to the distinct query",
                  "body":
                    [ "// Sort the results of the distinct query in descending order",
                      "",
                      "let newDistinctQuery = query.distinct.descending();" ],
                  "extra":
                    {  } },
                { "title": "Add an descending sort to the distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Add an descending sort to the distinct query",
                      "  const updatedDistinctQuery = distinct.descending();",
                      "",
                      "  return updatedDistinctQuery;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "filter",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "filter",
              "type": "wix-data.WixDataFilter",
              "doc": "Filter to refine the distinct query." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "Distinct query object." },
        "locations":
          [ { "lineno": 71,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Sets the filter used to refine the distinct query.",
            "description":
              [ "The `filter()` method defines the filter used to refine the distinct query." ],
            "links": [],
            "examples":
              [ { "title": "Set the distinct query filter",
                  "body":
                    [ "// Set the distinct query filter",
                      "",
                      "let newDistinctQuery = query.distinct.filter(newFilter);" ],
                  "extra":
                    {  } },
                { "title": "Set a new or modified filter",
                  "body":
                    [ "// In data.js",
                      "",
                      "import wixData from \"wix-data\";",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Create a new filter",
                      "  const newFilter = wixData.filter().ge(\"age\", 18);",
                      "  let updatedDistinctQuery = distinct.filter(newFilter);",
                      "",
                      "  // Or modify the existing filter",
                      "  const currentFilter = distinct.getFilter();",
                      "  const updatedFilter = currentFilter.ge(\"age\", 21);",
                      "",
                      "  updatedDistinctQuery = distinct.filter(updatedFilter);",
                      "",
                      "  return updatedDistinctQuery;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getFilter",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataFilter",
            "doc": "Filter used to refine the distinct query." },
        "locations":
          [ { "lineno": 58,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Returns the filter used to refine the distinct query.",
            "description":
              [ "The `getFilter()` method returns the [`WixDataFilter()`](https://dev.wix.com/docs/velo/apis/wix-data/wix-data-filter/introduction) used to refine the distinct query." ],
            "links": [],
            "examples":
              [ { "title": "Get the distinct query filter",
                  "body":
                    [ "// Get the distinct query filter",
                      "",
                      "let filter = query.distinct.getFilter();" ],
                  "extra":
                    {  } },
                { "title": "Get and modify the distinct query filter",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Get the current filter",
                      "  const currentFilter = distinct.getFilter();",
                      "",
                      "  // Modify the filter",
                      "  const updatedFilter = currentFilter.ge(\"age\", 18);",
                      "  const updatedDistinctQuery = distinct.filter(updatedFilter);",
                      "",
                      "  return updatedDistinctQuery;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getPropertyName",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "string",
            "doc": "Property used to define the distinct query." },
        "locations":
          [ { "lineno": 85,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Returns the name of the property used to define the distinct query.",
            "description":
              [ "The `getPropertyName()` method returns the name of the property used to define the distinct query." ],
            "links": [],
            "examples":
              [ { "title": "Get the distinct property",
                  "body":
                    [ "// Get the name of the property used to define the distinct query",
                      "",
                      "let distinctPropertyName = query.distinct.getPropertyName();" ],
                  "extra":
                    {  } },
                { "title": "Get and modify the distinct property",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Get the current property name that defines the distinct query",
                      "  const currentPropertyName = distinct.getPropertyName();",
                      "",
                      "  // Modify the property name if needed",
                      "  if (currentPropertyName === \"id\") {",
                      "    const updatedPropertyName = \"_id\";",
                      "    distinct.propertyName(updatedPropertyName);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isAscending",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "Whether the results of the distinct query are sorted in ascending order." },
        "locations":
          [ { "lineno": 113,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Whether the results of the distinct query are sorted by the distinct property in ascending order.",
            "description":
              [ "The `isAscending()` method returns `true` if the results of the distinct query are sorted in ascending order by the distinct property." ],
            "links": [],
            "examples":
              [ { "title": "Check whether the results of the distinct property are sorted in ascending order",
                  "body":
                    [ "// Whether the results of the distinct property are sorted in ascending order",
                      "",
                      "let ascending = query.distinct.isAscending();" ],
                  "extra":
                    {  } },
                { "title": "Check the result sort order and skip the first 10 results",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Check whether the distinct query returns results in ascending order.",
                      "  const ascending = distinct.isAscending();",
                      "",
                      "  // If the results are ordered in ascending order, skip the first 10 results",
                      "  if (ascending) {",
                      "    distinct = distinct.skip(10);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isDescending",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "Whether the results of the distinct query are sorted in descending order." },
        "locations":
          [ { "lineno": 139,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Whether the results of the distinct query are sorted by the distinct property in descending order",
            "description":
              [ "The `isDescending()` method returns `true` if the results of the distinct query are sorted by the distinct property in descending order." ],
            "links": [],
            "examples":
              [ { "title": "Check whether the results of the distinct property are sorted in descending order",
                  "body":
                    [ "// Whether the results of the distinct property are sorted in descending order",
                      "",
                      "let descending = query.distinct.isDescending();" ],
                  "extra":
                    {  } },
                { "title": "Check the result sort order and skip the first 10 results",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Check whether the distinct query returns results in descending order.",
                      "  const descending = distinct.isDescending();",
                      "",
                      "  // If the results are ordered in descending order, skip the first 10 results",
                      "  if (descending) {",
                      "    distinct = distinct.skip(10);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "Number of items to return. This is also the [`pageSize`](https://dev.wix.com/docs/velo/apis/wix-data/wix-data-query-result/page-size) of the results object." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "A [`WixDataDistinct`](https://dev.wix.com/docs/velo/apis/wix-data/wix-data-distinct/introduction) object representing the refined distinct query." },
        "locations":
          [ { "lineno": 165,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Limits the number of items the distinct query returns.",
            "description":
              [ "The `limit()` method defines the maximum number of results a distinct query returns in each page. Only one page of results is retrieved at a time. Use the [`next()`](https://dev.wix.com/docs/velo/apis/wix-data/wix-data-query-result/next) and [`prev()`](https://dev.wix.com/docs/velo/apis/wix-data/wix-data-query-result/prev) methods to navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`.",
                "",
                " > **Note** : For some [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), the maximum value you can specify to `limit()` is lower than `1000`. For example, the maximum limit for the Wix `Stores/Product` collection is 100." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to the results of a distinct query",
                  "body":
                    [ "// Limit the number of results of a distinct query",
                      "",
                      "let distinctQuery = query.distinct.limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Add a limit to the results of a distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Limit the number of results of the distinct query",
                      "  distinct = distinct.limit(25);",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "propertyName",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "newPropertyName",
              "type": "string",
              "doc": "Property by which to return distinct values, without duplicates." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "Distinct query object." },
        "locations":
          [ { "lineno": 98,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Specifies the property name by which to return distinct values.",
            "description":
              [ "The `propertyName()` method defines the property by which to return distinct values, without duplicates." ],
            "links": [],
            "examples":
              [ { "title": "Set the distinct property",
                  "body":
                    [ "// Set the property by which the distinct query is defined",
                      "",
                      "let distinctQuery = query.distinct.propertyName(\"company\");" ],
                  "extra":
                    {  } },
                { "title": "Check and change the distinct property",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Get the current property name that defines the distinct query",
                      "  const currentPropertyName = distinct.getPropertyName();",
                      "",
                      "  // Modify the property name if needed",
                      "  if (currentPropertyName === \"secretField\") {",
                      "    const updatedPropertyName = \"firstName\";",
                      "    distinct.propertyName(updatedPropertyName);",
                      "  }",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "Number of items to skip before returning the distinct query results." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "`WixDataDistinct` object representing the refined query." },
        "locations":
          [ { "lineno": 184,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Skips the specified number of items before returning the distinct query results.",
            "description":
              [ "The `skip()` method skips the specified number of results before returning the rest.",
                "",
                " For example, if you query a collection and 50 items match your query, but you set `skip` to 10, the results skip the first 10 matching items and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to the results of a distinct query",
                  "body":
                    [ "// Add a skip to a distinct query",
                      "",
                      "let newDistinctQuery = query.distinct.skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Add a skip to the results of a distinct query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeDistinct(distinct, context) {",
                      "  // Skip the first 10 query results",
                      "  distinct = distinct.skip(10);",
                      "",
                      "  return distinct;",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }