{ "name": "$widget",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "$widget.js" },
  "docs":
    { "summary": "The `$widget` namespace contains functionality for working with your Blocks widget's API from within the widget code.",
      "description":
        [ "> **This namespace is available only in Wix Blocks widget code**  ",
          "> [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is a workspace for building Wix apps. It is currently a Beta version, open to a limited number of users.",
          "",
          "Blocks widgets can expose a [widget API](https://support.wix.com/en/article/wix-blocks-about-the-widget-api), letting you add properties, events, and functions to your widget.",
          "The `$widget` namespace provides functionality for working with to your widget's API from within the widget code." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "props",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Object",
        "locations":
          [ { "lineno": 13,
              "filename": "$widget.js" },
            { "lineno": 26,
              "filename": "$widget.js" } ],
        "docs":
          { "summary": "Sets or gets the [widget's properties](https://support.wix.com/en/article/wix-blocks-widget-api-properties).",
            "description":
              [ "The `props` property is an object containing all of the widget's properties." ],
            "links": [],
            "examples":
              [ { "title": "Get a widget's properties",
                  "body":
                    [ "$w('#text1').text = $widget.props.shoe.size; // \"43\"" ],
                  "extra":
                    {  } },
                { "title": "Set a widget's properties",
                  "body":
                    [ "$widget.props = { saleIndicator: \"No Sale\" };" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "fireEvent",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventName",
              "type": "string",
              "doc": "The name of te event to be fired." },
            { "name": "data",
              "type": "Object",
              "doc": "A data object that is passed to the event handler." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 46,
              "filename": "$widget.js" } ],
        "docs":
          { "summary": "Fires an event that is defined in the Widget API.",
            "description":
              [ "The `fireEvent()` function fires a widget event, which can then be handled from outside the widget (by code in a parent widget or a site page).",
                "When using the widget's API, the event is named `on<EventName>`, for example, `onAddedToCart`." ],
            "links": [],
            "examples":
              [ { "title": "Fire a widget event",
                  "body":
                    [ "$w(`#button1`).onClick(() => {",
                      "  $widget.fireEvent(`addedToCart`, {productId: product.id, customerId: customer.id})",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onPropsChanged",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$widget.onPropsChangedHandler",
              "doc": "The name of the function or\n the function expression to run when the value of a widget property is changed." } ],
        "ret":
          { "type": "any" },
        "locations":
          [ { "lineno": 33,
              "filename": "$widget.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the value of a widget property is changed.",
            "description":
              [ "A widget receives an `onPropsChanged` event when one or more of its properties is changed via its API." ],
            "links": [],
            "examples":
              [ { "title": "Load updated data when a widget's property is changed",
                  "body":
                    [ "$widget.onPropsChanged((oldProps, newProps) => {",
                      "  loadProductData(newProps.productId);",
                      "  loadCustomerData(newProps.customerId);",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "onPropsChangedHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "oldProps",
              "type": "Object",
              "doc": "The old widget properties." },
            { "name": "newProps",
              "type": "Object",
              "doc": "The new widget properties." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 59,
              "filename": "$widget.js" } ],
        "docs":
          { "description":
              [ "Handles events fired when a widget's properties are changed." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    {  } }