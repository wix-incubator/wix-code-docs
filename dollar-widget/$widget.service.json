{ "name": "$widget",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "$widget.js" },
  "docs":
    { "summary": "The `$widget` namespace contains functionality for working with your Blocks widget's API from within the widget code.",
      "description":
        [ "widget namespace [Blocks widget API](https://support.wix.com/en/article/wix-blocks-about-the-widget-api)" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "props",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "Object",
        "locations":
          [ { "lineno": 9,
              "filename": "$widget.js" },
            { "lineno": 21,
              "filename": "$widget.js" } ],
        "docs":
          { "summary": "Sets or gets the Blocks widget's properties.",
            "description":
              [ "an object with all of the widget's properties" ],
            "links": [],
            "examples":
              [ { "title": "Fire an event",
                  "body":
                    [ "/************************************",
                      " * Backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptchaBackend from 'wix-captcha-backend';",
                      "",
                      "export function captchaAuthorize(token) {",
                      "  return wixCaptchaBackend.authorize(token);",
                      "}",
                      "",
                      "/********************",
                      " * Client-side code *",
                      " ********************/",
                      "",
                      "import { captchaAuthorize } from 'backend/submitHandler';",
                      "",
                      "export function myButton_click(event, $w) {",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "",
                      "  captchaAuthorize(myToken)",
                      "    .then((result) => {",
                      "      console.log(result);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error); // Request failed with status code 400",
                      "      $w(\"#myCaptcha\").reset();",
                      "      $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "      $w(\"#messageText\").show();",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "fireEvent",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "eventName",
              "type": "string",
              "doc": "bla." },
            { "name": "data",
              "type": "Object",
              "doc": "bla." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 41,
              "filename": "$widget.js" } ],
        "docs":
          { "summary": "triggers an event that you defined in the Widget API.",
            "description":
              [ "triggers an event that you defined in the Widget API." ],
            "links": [],
            "examples":
              [ { "title": "Fire an event",
                  "body":
                    [ "/************************************",
                      " * Backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptchaBackend from 'wix-captcha-backend';",
                      "",
                      "export function captchaAuthorize(token) {",
                      "  return wixCaptchaBackend.authorize(token);",
                      "}",
                      "",
                      "/********************",
                      " * Client-side code *",
                      " ********************/",
                      "",
                      "import { captchaAuthorize } from 'backend/submitHandler';",
                      "",
                      "export function myButton_click(event, $w) {",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "",
                      "  captchaAuthorize(myToken)",
                      "    .then((result) => {",
                      "      console.log(result);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error); // Request failed with status code 400",
                      "      $w(\"#myCaptcha\").reset();",
                      "      $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "      $w(\"#messageText\").show();",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onPropsChanged",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$widget.onPropsChangedHandler",
              "doc": "The name of the function or\n the function expression to run when the value of a widget property is changed." } ],
        "ret":
          { "type": "any" },
        "locations":
          [ { "lineno": 28,
              "filename": "$widget.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the value of a widget property is changed.",
            "description":
              [ "An widget receives an `onPropsChanged` event when one or more of its properties are changed via it API." ],
            "links": [],
            "examples":
              [ { "title": "Fire an event",
                  "body":
                    [ "/************************************",
                      " * Backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptchaBackend from 'wix-captcha-backend';",
                      "",
                      "export function captchaAuthorize(token) {",
                      "  return wixCaptchaBackend.authorize(token);",
                      "}",
                      "",
                      "/********************",
                      " * Client-side code *",
                      " ********************/",
                      "",
                      "import { captchaAuthorize } from 'backend/submitHandler';",
                      "",
                      "export function myButton_click(event, $w) {",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "",
                      "  captchaAuthorize(myToken)",
                      "    .then((result) => {",
                      "      console.log(result);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log(error); // Request failed with status code 400",
                      "      $w(\"#myCaptcha\").reset();",
                      "      $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "      $w(\"#messageText\").show();",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "onPropsChangedHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "oldProps",
              "type": "Object",
              "doc": "The event that occurred." },
            { "name": "newProps",
              "type": "Object",
              "doc": "The event that occurred.\n bla bla." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 53,
              "filename": "$widget.js" } ],
        "docs":
          { "description":
              [ "Handles events." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    {  } }