{ "name": "wix-bookings-frontend",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "bookings.js" },
  "docs":
    { "summary": "The wix-bookings-frontend module contains functionality for working with\n bookings from client-side code.",
      "description":
        [ "<blockquote class='warning'>",
          "",
          "__Deprecation Notice:__",
          "",
          "The **Bookings Frontend Velo API** has been replaced with [Time Slots V2](https://dev.wix.com/docs/sdk/backend-modules/bookings/time-slots/introduction), [Bookings](https://dev.wix.com/docs/sdk/backend-modules/bookings/bookings/introduction), and [eCommerce](https://dev.wix.com/docs/sdk/backend-modules/ecom/introduction) SDK APIs and will be removed on March 31, 2026.",
          "",
          "</blockquote>",
          "",
          "**Migration Instructions**:",
          "+ Replace `getServiceAvailability()` with [Time Slots V2 SDK APIs](https://dev.wix.com/docs/sdk/backend-modules/bookings/time-slots/introduction) for availability checking.",
          "+ Replace `checkoutBooking()` with [Create Booking](https://dev.wix.com/docs/sdk/backend-modules/bookings/bookings/create-booking), [Create Checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/create-checkout), and [Get Checkout URL](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/get-checkout-url) for booking creation and payment processing.",
          "+ See the [End-to-End Booking Flows](https://dev.wix.com/docs/sdk/backend-modules/bookings/end-to-end-booking-flows) for complete implementation examples using the new APIs.",
          "",
          " With the Bookings API, you can build a customized bookings experience ",
          " for customers to book and check out a service.",
          "",
          " With the Bookings API, you can:",
          " + See the available slots and payment options for a service.",
          " + Book a service and process payment. ",
          "",
          " Learn more by reviewing this sample flow ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/sample-flow) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/sample-flow)). ",
          "",
          " To use the Bookings API, import `wixBookingsFrontend` from the `wix-bookings-frontend` module:",
          "",
          "   ```javascript",
          "   import wixBookingsFrontend from 'wix-bookings-frontend';",
          "   ```",
          "",
          " ## Before you begin ",
          "",
          " It's important to note the following points before starting to code:  ",
          "",
          " + A site must have a [Premium Business Plan](https://support.wix.com/en/article/upgrading-wix-bookings) in order to accept bookings and receive payments.",
          "",
          " + [Wix Bookings](https://www.wix.com/app-market/web-solution/bookings) must be installed on a site before you can use the Bookings API.",
          "",
          " ## Terminology",
          "",
          " For a comprehensive glossary of Wix Bookings terms, see Terminology ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/terminology) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-v2/terminology))." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "checkoutBooking",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "bookingInfo",
              "type": "wix-bookings-frontend.BookingInfo",
              "doc": "Information about the slot to be booked." },
            { "name": "options",
              "type": "wix-bookings-frontend.PaymentOptions",
              "doc": "Information about the payment method and coupon codes.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-frontend.BookingResult" ] },
            "doc": "Fulfilled - Results of the booking checkout." },
        "locations":
          [ { "lineno": 243,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "**Deprecated.**\nCheckout Booking has been replaced with [Create Booking](https://dev.wix.com/docs/sdk/backend-modules/bookings/bookings/create-booking) and Wix eCommerce's[Create Checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/create-checkout) SDK methods and will be removed on March 31, 2026.",
            "description":
              [ "To understand how `checkoutBooking()` is used in a typical booking lifecycle,",
                " see Typical Booking Lifecycle ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/sample-flow) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/sample-flow)).",
                "",
                " Call `checkoutBooking()` with a `BookingInfo` object that",
                " contains the slot to book, values for all the form fields, and",
                " the number of spots to book.",
                "",
                " The form fields contain additional information required for the booking.",
                "",
                " If the service being checked out is not a free service, you also need to specify",
                " a `PaymentOptions` object containing information about the",
                " method of payment and any coupon codes. If an online method of payment is specified,",
                " a payment popup is presented for the customer to input payment information, such",
                " as credit card information. The method's returned Promise resolves after the",
                " customer finishes entering the payment information and the service has been successfully",
                " booked. If no payment or an offline method of payment is specified, the payment",
                " popup is not presented and the Promise resolves when the service has been",
                " successfully booked.",
                "",
                " If a service is configured as a paid service in a site's dashboard, attempting",
                " to perform a checkout as if it is a free service results in an error.",
                "",
                " When a service is booked successfully:",
                "",
                " + A site contact is automatically created or appended ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/crm/contacts/append-or-create-contact) | [Velo](https://dev.wix.com/docs/velo/apis/wix-crm-frontend/contacts/append-or-create-contact)) with the provided booking information.",
                " + An email is sent to the merchant about the new booking.",
                " + An email is sent to the customer confirming that the service was booked.",
                "",
                "",
                "> **Note:**",
                "To use `checkoutBooking()` a site must have a [Business Premium Plan](https://support.wix.com/en/article/upgrading-wix-bookings)." ],
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookingsFrontend.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": \"wixPay_Offline\",",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookingsFrontend.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "A full bookings scenario",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "let formFields;   // form fields the selected service requires",
                      "let selectedSlot; // service slot that was selected",
                      "",
                      "// When the page loads, query for all services and use the",
                      "// results to set the service repeater's data.",
                      "$w.onReady(function () {",
                      "  wixData.query(\"Bookings/Services\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w(\"#serviceRepeater\").data = results.items;",
                      "    } );",
                      "});",
                      "",
                      "// When the service repeater's data is set, populate its items",
                      "// with the service data.",
                      "export function serviceRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#serviceName\").text = itemData.serviceName;",
                      "  $item(\"#tagLine\").text = itemData.tagLine;",
                      "  $item(\"#image\").src = itemData.imageURL;",
                      "}",
                      "",
                      "// When a service is selected, store its form fields for later,",
                      "// get the service's available slots, and use the results to set",
                      "// the slot repeater's data.",
                      "export function serviceRepeaterContainer_click(event) {",
                      "  $w(\"#serviceRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    formFields = itemData.form.fields;",
                      "  } );",
                      "",
                      "  wixBookingsFrontend.getServiceAvailability(event.context.itemId)",
                      "    .then( (availability) => {",
                      "      $w(\"#slotRepeater\").data = availability.slots;",
                      "    } );",
                      "}",
                      "",
                      "// When the slot repeater's data is set, populate its items",
                      "// with the slot data.",
                      "export function slotRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#dateText\").text = itemData.startDateTime.toLocaleDateString();",
                      "  $item(\"#timeText\").text = itemData.startDateTime.toLocaleTimeString();",
                      "}",
                      "",
                      "// When a slot is selected, store it for later, use the stored form",
                      "// fields to set form field repeater's data.",
                      "export function slotRepeaterContainer_click(event) {",
                      "  $w(\"#slotRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    selectedSlot = itemData;",
                      "  } );",
                      "",
                      "  $w(\"#formFieldRepeater\").data = formFields;",
                      "}",
                      "",
                      "// When the form field repeater's data is set, populate its items",
                      "// with the form fields.",
                      "export function formFieldRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#fieldInput\").placeholder = itemData.label;",
                      "}",
                      "",
                      "// When the booking button is clicked, grab the form field values,",
                      "// build the bookingInfo object, and perform a booking checkout.",
                      "export function bookButton_click(event) {",
                      "  let formFieldValues = [];",
                      "",
                      "  $w(\"#formFieldRepeater\").forEachItem( ($item, itemData, index) => {",
                      "    formFieldValues.push({",
                      "      \"_id\": itemData._id,",
                      "      \"value\": $item(\"#fieldInput\").value",
                      "    });",
                      "  } );",
                      "",
                      "  let bookingInfo = {",
                      "    \"slot\": selectedSlot,",
                      "    \"formFields\": formFieldValues",
                      "  };",
                      "",
                      "  wixBookingsFrontend.checkoutBooking(bookingInfo)",
                      "    .then( (results) => {",
                      "      $w(\"#confirmationText\").text = `Booking ID: ${results.bookingId} Status: ${results.status}`;",
                      "    } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates a simple bookings scenario. In the interest of\n simplicity the code does not deal with display considerations or validations\n that would normally be required to make sure customers perform the flow as\n intended.\n The code assumes a page with the following elements:\n\n + `serviceRepeater`: Displays the services that can be booked. The\n   elements in the repeater match the information we want to display\n   for each service.\n + `slotRepeater`: Displays the slots that are available for the selected\n   service. The elements in the repeater match the information we want to\n   display for each slot.\n + `formFieldRepeater`: Contains input fields for collecting form field values\n   needed to book the selected service. Each item contains one input element.\n + `bookButton`: Performs a booking checkout after a service and slot are selected\n   and the form fields have been entered." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getCheckoutOptions",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "checkoutOptionOptions",
              "type": "wix-bookings-frontend.CheckoutOptionOptions",
              "doc": "An object containing the information needed to identify the service for which to list the possible checkout options. Currently, you can request the checkout options using the ID of a slot." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-frontend.CheckoutMethod" ] },
            "doc": "Fulfilled - The available payment options for the service and the logged-in user.\nRejected - Checkout payment options error object." },
        "locations":
          [ { "lineno": 370,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "**Deprecated.**\nGet Checkout Options has been replaced with [Wix eCommerce checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) SDK methods and will be removed on March 31, 2026. The new flow integrates Wix Bookings with Wix eCommerce for cart, checkout, and order functionality. See the [End-to-End Booking Flows](https://dev.wix.com/docs/sdk/backend-modules/bookings/end-to-end-booking-flows) for a complete booking and payment process example.",
            "description":
              [ "To understand how `getCheckoutOptions()` is used in a typical booking lifecycle,",
                " see Typical Booking Lifecycle ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/sample-flow) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/sample-flow)).",
                "",
                " The specified `checkoutOptionOptions` object contains the slot ID for the service. Typically, you retrieve the slot ID with the getServiceAvailability() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/get-service-availability) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/get-service-availability))",
                " method.",
                "",
                " `getCheckoutOptions()` returns the options available for the specified user. For example, if the customer has not",
                " purchased any pricing plans, pricing plans are not returned even if there are pricing plans associated with the service." ],
            "links": [],
            "examples":
              [ { "title": "Get the checkout options for a service that are available to the logged-in user",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "import { members } from \"wix-members.v2\";",
                      "",
                      "",
                      "// ...",
                      "",
                      "let member = members.getCurrentMember();",
                      "let currentMemberId = member.id;     ",
                      "",
                      "// get available slot with `getServiceAvailability()`",
                      "",
                      "let options = {",
                      "  \"slotId\": slot._id,",
                      "  \"userId\": currentMemberId",
                      "}",
                      "",
                      "wixBookingsFrontend.getCheckoutOptions(options)",
                      "  .then((checkoutOptions) => {",
                      "     let firstOptionType = checkoutOptions[0].type;",
                      "  });",
                      "",
                      "/* An object containing checkout options:  ",
                      " * {",
                      " *   [",
                      " *    { ",
                      " *      \"type\":\"wixPay_Online\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"wixPay_Offline\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"membership\",",
                      " *      \"planName\":\"Frequent Flier\",",
                      " *      \"planOrderId\":\"b1a75-...-a236\",",
                      " *      \"planExpiration\":\"2021-01-08T11:39:29.218Z\",",
                      " *      \"benefitId\":\"93de9c-...-48e6\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"package\",",
                      " *      \"planName\":\"Repeat Customer\",",
                      " *      \"planOrderId\":\"9551f-...-1b8039\",",
                      " *      \"planExpiration\":\"2020-07-08T11:39:11.340Z\",",
                      " *      \"benefitId\":\"8b11cc-...-67a49e\",",
                      " *      \"remainingCredits\":58,",
                      " *      \"totalCredits\":60",
                      " *    }",
                      " *  ]",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getServiceAvailability",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "serviceId",
              "type": "string",
              "doc": "The ID of the service for which to check slot availability." },
            { "name": "options",
              "type": "wix-bookings-frontend.AvailabilityOptions",
              "doc": "Options that refine which slots should be returned.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-frontend.ServiceAvailability" ] },
            "doc": "Fulfilled - A list of available slots.\nRejected - Bookings error object." },
        "locations":
          [ { "lineno": 307,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "**Deprecated.**\nGet Service Availability has been replaced with [Time Slots V2](https://dev.wix.com/docs/sdk/backend-modules/bookings/time-slots/introduction) SDK methods and will be removed on March 31, 2026. Depending on your [service type](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-types), use the appropriate Time Slots V2 API to replace it. See the [End-to-End Booking Flows](https://dev.wix.com/docs/sdk/backend-modules/bookings/end-to-end-booking-flows) for implementation examples.",
            "description":
              [ "> **Note:** `location` in the slot object is not yet available to all sites.",
                "",
                " Service availability means different things for the different service types ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-types) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-v2/services/introduction)):",
                "",
                " + **Appointments**: See [here](https://support.wix.com/en/article/setting-availability-for-appointments-in-wix-bookings) to",
                "   understand what affects the availability of an appointment. An",
                "   appointment is returned as available if it meets the conditions outlined in the",
                "   article linked above and the appointment slot's time falls within the time specified by the",
                "   `AvailabilityOptions` or within the default time frame if no options are specified.",
                " + **Classes**: A class slot is returned as available if the slot's",
                "   time falls within the time specified by the `AvailabilityOptions` or within",
                "   the default time frame if no options are specified.",
                " + **Courses**: The first session slot from a set of course sessions is returned",
                "   as available if the first course slot's time falls within the time specified by the",
                "   `AvailabilityOptions` or within the default time frame if no options are specified.",
                "",
                " To understand how `getServiceAvailability()` is used in a typical booking lifecycle,",
                " see Typical Booking Lifecycle ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/sample-flow) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/sample-flow)).",
                "",
                " The specified `serviceId` must be an ID from the site's **Bookings/Services**",
                " collection. Typically, you retrieve the ID from the collection using a",
                " query or through a dataset.",
                "",
                " Optionally, you can specify an `AvailabilityOptions`",
                " object that defines a date range for which slots should be returned. If you",
                " do not specify an `AvailabilityOptions` object, the",
                " default date range is from the date and time the method is called until one",
                " week later." ],
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "wixBookingsFrontend.getServiceAvailability(serviceId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\",",
                      " *   \"location\": {",
                      " *      \"type\": \"OWNER_BUSINESS\",",
                      " *      \"businessLocation\": {        ",
                      " *          \"id\": \"d3cd28cf-4415-4680-9fa3-f690484e7432\",",
                      " *          \"name\": \"New York Office\",",
                      " *          \"description\": \"Our Office in NY\",",
                      " *          \"address\": {",
                      " *              \"formatted\": \"100 Gansevoort St, New York, NY 10014, United States\",",
                      " *              \"location\": {",
                      " *                  \"latitude\": 40.7391622,",
                      " *                  \"longitude\": -74.0113215",
                      " *              },",
                      " *              \"streetAddress\": {",
                      " *              \"name\": \"Gansevoort St\",",
                      " *              \"number\": \"100\"",
                      " *              },",
                      " *              \"city\": \"New York\",",
                      " *              \"subdivision\": \"New York\", ",
                      " *              \"country\": US\",",
                      " *              \"postalCode\": \"NY 10014\"",
                      " *          }",
                      " *      }",
                      " *   }",
                      " *   \"bookable\": false,",
                      " *   \"constraints\": { ",
                      " *     \"bookableFrom\": \"2018-12-12T14:00:00.000Z\",",
                      " *     \"bookableUntil\": \"2019-01-16T14:00:00.000Z\"",
                      " *   } ",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get the available slots for a service for a specific date range",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "let today = new Date();",
                      "let startRange = new Date();",
                      "let endRange = new Date();",
                      "startRange.setDate(today.getDate() + 7);  // one week from now",
                      "endRange.setDate(today.getDate() + 14);   // two weeks from now",
                      "",
                      "let options = {",
                      "  startDateTime: startRange,",
                      "  endDateTime: endRange",
                      "};",
                      "",
                      "wixBookingsFrontend.getServiceAvailability(serviceId, options)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " *   \"location\": {",
                      " *   \"type\": \"OWNER_BUSINESS\",",
                      " *   \"businessLocation\": {        ",
                      " *       \"id\": \"d3cd28cf-4415-4680-9fa3-f690484e7432\",",
                      " *       \"name\": \"New York Office\",",
                      " *       \"description\": \"Our Office in NY\",",
                      " *       \"address\": {",
                      " *           \"formatted\": \"100 Gansevoort St, New York, NY 10014, United States\",",
                      " *           \"location\": {",
                      " *               \"latitude\": 40.7391622,",
                      " *               \"longitude\": -74.0113215",
                      " *           },",
                      " *           \"streetAddress\": {",
                      " *           \"name\": \"Gansevoort St\",",
                      " *           \"number\": \"100\"",
                      " *           },",
                      " *           \"city\": \"New York\",",
                      " *           \"subdivision\": \"New York\", ",
                      " *           \"country\": US\",",
                      " *           \"postalCode\": \"NY 10014\"",
                      " *       }",
                      " *     }",
                      " *   }",
                      " *   \"bookable\": false,",
                      " *   \"constraints\": {",
                      " *     \"bookableFrom\": \"2018-12-12T14:00:00.000Z\",",
                      " *     \"bookableUntil\": \"2019-01-16T14:00:00.000Z\"",
                      " *   }",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "A full bookings scenario",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "let formFields;   // form fields the selected service requires",
                      "let selectedSlot; // service slot that was selected",
                      "",
                      "// When the page loads, query for all services and use the",
                      "// results to set the service repeater's data.",
                      "$w.onReady(function () {",
                      "  wixData.query(\"Bookings/Services\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w(\"#serviceRepeater\").data = results.items;",
                      "    } );",
                      "});",
                      "",
                      "// When the service repeater's data is set, populate its items",
                      "// with the service data.",
                      "export function serviceRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#serviceName\").text = itemData.serviceName;",
                      "  $item(\"#tagLine\").text = itemData.tagLine;",
                      "  $item(\"#image\").src = itemData.imageURL;",
                      "}",
                      "",
                      "// When a service is selected, store its form fields for later,",
                      "// get the service's available slots, and use the results to set",
                      "// the slot repeater's data.",
                      "export function serviceRepeaterContainer_click(event) {",
                      "  $w(\"#serviceRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    formFields = itemData.form.fields;",
                      "  } );",
                      "",
                      "  wixBookingsFrontend.getServiceAvailability(event.context.itemId)",
                      "    .then( (availability) => {",
                      "      $w(\"#slotRepeater\").data = availability.slots;",
                      "    } );",
                      "}",
                      "",
                      "// When the slot repeater's data is set, populate its items",
                      "// with the slot data.",
                      "export function slotRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#dateText\").text = itemData.startDateTime.toLocaleDateString();",
                      "  $item(\"#timeText\").text = itemData.startDateTime.toLocaleTimeString();",
                      "}",
                      "",
                      "// When a slot is selected, store it for later, use the stored form",
                      "// fields to set form field repeater's data.",
                      "export function slotRepeaterContainer_click(event) {",
                      "  $w(\"#slotRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    selectedSlot = itemData;",
                      "  } );",
                      "",
                      "  $w(\"#formFieldRepeater\").data = formFields;",
                      "}",
                      "",
                      "// When the form field repeater's data is set, populate its items",
                      "// with the form fields.",
                      "export function formFieldRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#fieldInput\").placeholder = itemData.label;",
                      "}",
                      "",
                      "// When the booking button is clicked, grab the form field values,",
                      "// build the bookingInfo object, and perform a booking checkout.",
                      "export function bookButton_click(event) {",
                      "  let formFieldValues = [];",
                      "",
                      "  $w(\"#formFieldRepeater\").forEachItem( ($item, itemData, index) => {",
                      "    formFieldValues.push({",
                      "      \"_id\": itemData._id,",
                      "      \"value\": $item(\"#fieldInput\").value",
                      "    });",
                      "  } );",
                      "",
                      "  let bookingInfo = {",
                      "    \"slot\": selectedSlot,",
                      "    \"formFields\": formFieldValues",
                      "  };",
                      "",
                      "  wixBookingsFrontend.checkoutBooking(bookingInfo)",
                      "    .then( (results) => {",
                      "      $w(\"#confirmationText\").text = `Booking ID: ${results.bookingId} Status: ${results.status}`;",
                      "    } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This examples demonstrates a simple bookings scenario. In the interest of\n simplicity the code does not deal with display considerations or validations\n that would normally be required to make sure customers perform the flow as\n intended.\n The code assumes a page with the following elements:\n\n + `serviceRepeater`: Displays the services that can be booked. The\n   elements in the repeater match the information we want to display\n   for each service.\n + `slotRepeater`: Displays the slots that are available for the selected\n   service. The elements in the repeater match the information we want to\n   display for each slot.\n + `formFieldRepeater`: Contains input fields for collecting form field values\n   needed to book the selected service. Each item contains one input element.\n + `bookButton`: Performs a booking checkout after a service and slot are selected\n   and the form fields have been entered." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Address",
        "locations":
          [ { "lineno": 108,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object that contains address information.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "formatted",
              "type": "string",
              "doc": "Full text address comprised of street name and number, city, subdivision, country, and postal code." },
            { "name": "location",
              "type": "wix-bookings-frontend.AddressCoordinates",
              "doc": "Address coordinates." },
            { "name": "streetAddress",
              "type": "wix-bookings-frontend.StreetAddress",
              "doc": "Address street address." },
            { "name": "city",
              "type": "string",
              "doc": "Address city." },
            { "name": "subdivision",
              "type": "string",
              "doc": "Address subdivision, state, prefecture, or province." },
            { "name": "country",
              "type": "string",
              "doc": "Address country." },
            { "name": "postalCode",
              "type": "string",
              "doc": "Address postal code." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "AddressCoordinates",
        "locations":
          [ { "lineno": 120,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object that contains the geographic coordinates of the address.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "latitude",
              "type": "number",
              "doc": "Address latitude." },
            { "name": "longitude",
              "type": "number",
              "doc": "Address longitude." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "AvailabilityOptions",
        "locations":
          [ { "lineno": 50,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling getServiceAvailability() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/get-service-availability) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/get-service-availability))\n containing options for which slots should be returned.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service for a specific date range",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "let today = new Date();",
                      "let startRange = new Date();",
                      "let endRange = new Date();",
                      "startRange.setDate(today.getDate() + 7);  // one week from now",
                      "endRange.setDate(today.getDate() + 14);   // two weeks from now",
                      "",
                      "let options = {",
                      "  startDateTime: startRange,",
                      "  endDateTime: endRange",
                      "};",
                      "",
                      "wixBookingsFrontend.getServiceAvailability(serviceId, options)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " *   \"location\": {",
                      " *   \"type\": \"OWNER_BUSINESS\",",
                      " *   \"businessLocation\": {        ",
                      " *       \"id\": \"d3cd28cf-4415-4680-9fa3-f690484e7432\",",
                      " *       \"name\": \"New York Office\",",
                      " *       \"description\": \"Our Office in NY\",",
                      " *       \"address\": {",
                      " *           \"formatted\": \"100 Gansevoort St, New York, NY 10014, United States\",",
                      " *           \"location\": {",
                      " *               \"latitude\": 40.7391622,",
                      " *               \"longitude\": -74.0113215",
                      " *           },",
                      " *           \"streetAddress\": {",
                      " *           \"name\": \"Gansevoort St\",",
                      " *           \"number\": \"100\"",
                      " *           },",
                      " *           \"city\": \"New York\",",
                      " *           \"subdivision\": \"New York\", ",
                      " *           \"country\": US\",",
                      " *           \"postalCode\": \"NY 10014\"",
                      " *       }",
                      " *     }",
                      " *   }",
                      " *   \"bookable\": false,",
                      " *   \"constraints\": {",
                      " *     \"bookableFrom\": \"2018-12-12T14:00:00.000Z\",",
                      " *     \"bookableUntil\": \"2019-01-16T14:00:00.000Z\"",
                      " *   }",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "startDateTime",
              "type": "Date",
              "doc": "Start date and time of the slots\n to be returned. Defaults to the current date and time.",
              "optional": true },
            { "name": "endDateTime",
              "type": "Date",
              "doc": "End date and time of the slots to\n be returned. Defaults to one week from `startDateTime`, which is one week\n from the current date and time if `startDateTime` is also omitted.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BookingInfo",
        "locations":
          [ { "lineno": 142,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling checkoutBooking() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/checkout-booking) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/checkout-booking))\n containing information about the slot to be booked.",
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookingsFrontend.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "slot",
              "type": "wix-bookings-frontend.Slot",
              "doc": "The slot to be booked." },
            { "name": "formFields",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-bookings-frontend.FormField" ] },
              "doc": "List of form field values required to book the session." },
            { "name": "numberOfSpots",
              "type": "number",
              "doc": "Number of spots to book.  Default: `1`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BookingResult",
        "locations":
          [ { "lineno": 230,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object representing the result of a call to checkoutBooking() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/checkout-booking) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/checkout-booking)).",
            "links": [],
            "examples":
              [ { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": \"wixPay_Offline\",",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookingsFrontend.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "bookingId",
              "type": "string",
              "doc": "ID of the booking that was checked out." },
            { "name": "status",
              "type": "string",
              "doc": "Status of the booking that was checked out.\n One of:\n\n + `\"Confirmed\"`: Payment was successful or payment is to be done offline.\n + `\"Pending Payment\"`: Payment is pending.\n + `\"Terminated\"`: Payment failed or was cancelled." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BusinessLocation",
        "locations":
          [ { "lineno": 99,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object describing the business location.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "Business location ID." },
            { "name": "name",
              "type": "string",
              "doc": "Business location name." },
            { "name": "description",
              "type": "string",
              "doc": "Business location description." },
            { "name": "address",
              "type": "wix-bookings-frontend.Address",
              "doc": "An object describing the address." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "CheckoutMethod",
        "locations":
          [ { "lineno": 202,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object returned after calling getCheckoutOptions() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/get-checkout-options) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/get-checkout-options))\n containing information about the available payment options for the service and the logged-in user.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "options",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-bookings-frontend.CheckoutMethodOption" ] },
              "doc": "Available checkout methods." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "CheckoutMethodOption",
        "locations":
          [ { "lineno": 209,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object returned after calling getCheckoutOptions() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/get-checkout-options) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/get-checkout-options))\n containing information about the available payment options for the service and the logged-in user.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Type of the available payment option. Valid options are:\n\n + `\"wixPay_Online\"`: For online collections.\n + `\"wixPay_Offline\"`: For offline collections.\n + `\"package\"`: For a package-type pricing plan.\n + `\"membership\"`: For a membership-type pricing plan." },
            { "name": "planName",
              "type": "string",
              "doc": "Name of the plan package or membership. For booking with pricing plans only.",
              "optional": true },
            { "name": "planOrderId",
              "type": "string",
              "doc": "Order ID of the plan package or membership. For booking with pricing plans only.",
              "optional": true },
            { "name": "benefitId",
              "type": "string",
              "doc": "ID of the benefit provided by the plan package. For booking with package-type pricing plans only.",
              "optional": true },
            { "name": "remainingCredits",
              "type": "number",
              "doc": "Number of sessions remaining in the plan package. For booking with package-type pricing plans only.",
              "optional": true },
            { "name": "totalCredits",
              "type": "number",
              "doc": "Number of sessions initially provided with the plan package.  For booking with package-type pricing plans only.",
              "optional": true },
            { "name": "planExpiration",
              "type": "Date",
              "doc": "Date by which the plan package or membership expires. For booking with pricing plans only.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "CheckoutOption",
        "locations":
          [ { "lineno": 188,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object returned after calling getCheckoutOptions() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/get-checkout-options) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/get-checkout-options))\n containing information about the available payment options for the service and the logged-in user.",
            "links": [],
            "examples":
              [ { "title": "Get the payment options for the service that are available to the logged-in user.",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "import { members } from \"wix-members.v2\";",
                      "",
                      "",
                      "// ...",
                      "",
                      "let member = members.getCurrentMember();",
                      "let currentMemberId = member.id;     ",
                      "",
                      "// get available slot with `getServiceAvailability()`",
                      "",
                      "let options = {",
                      "  \"slotId\": slot._id,",
                      "  \"userId\": currentMemberId",
                      "}",
                      "",
                      "wixBookingsFrontend.getCheckoutOptions(options)",
                      "  .then((checkoutOptions) => {",
                      "     let firstOptionType = checkoutOptions[0].type;",
                      "  });",
                      "",
                      "/* An object containing checkout options:  ",
                      " * {",
                      " *   [",
                      " *    { ",
                      " *      \"type\":\"wixPay_Online\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"wixPay_Offline\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"membership\",",
                      " *      \"planName\":\"Frequent Flier\",",
                      " *      \"planOrderId\":\"b1a75-...-a236\",",
                      " *      \"planExpiration\":\"2021-01-08T11:39:29.218Z\",",
                      " *      \"benefitId\":\"93de9c-...-48e6\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"package\",",
                      " *      \"planName\":\"Repeat Customer\",",
                      " *      \"planOrderId\":\"9551f-...-1b8039\",",
                      " *      \"planExpiration\":\"2020-07-08T11:39:11.340Z\",",
                      " *      \"benefitId\":\"8b11cc-...-67a49e\",",
                      " *      \"remainingCredits\":58,",
                      " *      \"totalCredits\":60",
                      " *    }",
                      " *  ]",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Book a service with the pricing plan payment option",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "let serviceId = // get chosen serviceId;",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000001\", // name field ID",
                      "    \"value\": \"Joe Smith\"",
                      "  }, {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000003\", // Phone field ID",
                      "    \"value\": \"0987654321\"",
                      "  },{",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000002\", // email field ID",
                      "    \"value\": \"abc@abc\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "",
                      "  wixBookingsFrontend.getServiceAvailability(serviceId)",
                      "    .then( (availability) => {\t\t",
                      "      let slots = availability.slots;",
                      "      slot = slots[0];",
                      "\t    let slotId = slot._id; ",
                      "\t  ",
                      "      wixBookingsFrontend.getCheckoutOptions({slotId})",
                      "        .then( (checkoutOptions) => {",
                      "",
                      "          // Make sure each option object in ",
                      "          // the array of the repeater's data",
                      "          // has a unique _id. ",
                      "",
                      "          checkoutOptions.forEach((option, index) => {",
                      "\t\t\t\t\t\toption._id = index.toString(); ",
                      "\t\t\t\t\t});",
                      "         })",
                      "",
                      "         $w('#myRepeater').data = checkoutOptions;",
                      "       });",
                      "\t} );",
                      "\t",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#title\").text = itemData.type;",
                      "    $item(\"#selectButton\").onClick( (event) => {\t\t\t",
                      "      let paymentOptions = {",
                      "        \"paymentType\": itemData.type",
                      "\t  };",
                      "\t  ",
                      "    if ((itemData.type === \"package\") || (itemData.type === \"membership\")) {",
                      "      paymentOptions.paidPlan = {};",
                      "      paymentOptions.paidPlan.planOrderId = itemData.planOrderId;",
                      "      paymentOptions.paidPlan.benefitId = itemData.benefitId;",
                      "\t};",
                      "\t",
                      "    let bookingInfo = {",
                      "      \"slot\": slot,",
                      "      \"formFields\": formFieldValues",
                      "    };",
                      "",
                      "    wixBookingsFrontend.checkoutBooking(bookingInfo, paymentOptions)",
                      "      .then( (results) => {",
                      "        let id = results.bookingId;",
                      "        let status = results.status;",
                      "\t  } );",
                      "\t} );",
                      "\t",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "We find the next available slot for a given service. Using this slot, we display the service's available payment options\n for the logged-in visitor in a repeater. If a pricing plan is selected as the payment option, we add the plan's order ID\n and  benefit ID to the payment options to use for the booking." } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Type of the available payment option. Valid options are:\n\n + `\"wixPay_Online\"`: For online collections.\n + `\"wixPay_Offline\"`: For offline collections.\n + `\"package\"`: For a package-type pricing plan.\n + `\"membership\"`: For a membership-type pricing plan." },
            { "name": "planName",
              "type": "string",
              "doc": "Name of the plan package or membership. For booking with pricing plans only.",
              "optional": true },
            { "name": "planOrderId",
              "type": "string",
              "doc": "Order ID of the plan package or membership. For booking with pricing plans only.",
              "optional": true },
            { "name": "benefitId",
              "type": "string",
              "doc": "ID of the benefit provided by the plan package. For booking with package-type pricing plans only.",
              "optional": true },
            { "name": "remainingCredits",
              "type": "number",
              "doc": "Number of sessions remaining in the plan package. For booking with package-type pricing plans only.",
              "optional": true },
            { "name": "totalCredits",
              "type": "number",
              "doc": "Number of sessions initially provided with the plan package.  For booking with package-type pricing plans only.",
              "optional": true },
            { "name": "planExpiration",
              "type": "Date",
              "doc": "Date by which the plan package or membership expires. For booking with pricing plans only.",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "removed" ] },
      { "name": "CheckoutOptionOptions",
        "locations":
          [ { "lineno": 134,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used to request checkout options for the service. Currently, you can request the checkout options using the ID of a slot.",
            "links": [],
            "examples":
              [ { "title": "Get the payment options for the service that are available to the logged-in user",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "import { members } from \"wix-members.v2\";",
                      "",
                      "",
                      "// ...",
                      "",
                      "let member = members.getCurrentMember();",
                      "let currentMemberId = member.id;     ",
                      "",
                      "// get available slot with `getServiceAvailability()`",
                      "",
                      "let options = {",
                      "  \"slotId\": slot._id,",
                      "  \"userId\": currentMemberId",
                      "}",
                      "",
                      "wixBookingsFrontend.getCheckoutOptions(options)",
                      "  .then((checkoutOptions) => {",
                      "     let firstOptionType = checkoutOptions[0].type;",
                      "  });",
                      "",
                      "/* An object containing checkout options:  ",
                      " * {",
                      " *   [",
                      " *    { ",
                      " *      \"type\":\"wixPay_Online\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"wixPay_Offline\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"membership\",",
                      " *      \"planName\":\"Frequent Flier\",",
                      " *      \"planOrderId\":\"b1a75-...-a236\",",
                      " *      \"planExpiration\":\"2021-01-08T11:39:29.218Z\",",
                      " *      \"benefitId\":\"93de9c-...-48e6\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"package\",",
                      " *      \"planName\":\"Repeat Customer\",",
                      " *      \"planOrderId\":\"9551f-...-1b8039\",",
                      " *      \"planExpiration\":\"2020-07-08T11:39:11.340Z\",",
                      " *      \"benefitId\":\"8b11cc-...-67a49e\",",
                      " *      \"remainingCredits\":58,",
                      " *      \"totalCredits\":60",
                      " *    }",
                      " *  ]",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "slotId",
              "type": "string",
              "doc": "Unique slot identifier." },
            { "name": "userId",
              "type": "string",
              "doc": "Member ID ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/members/introduction) | [Velo](https://dev.wix.com/docs/velo/apis/wix-members-v2/members/introduction)) for the customer making the booking. Used for retrieving valid payment plans for the customer for the selected slot." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Constraints",
        "locations":
          [ { "lineno": 153,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object that defines a booking window for limiting when a member can book a slot. For example,\n you can prevent members from booking a service too far in advance, because perhaps the service might\n be discontinued by then. Or, you can prevent members from booking a service right before it starts, as\n this would make it hard to schedule resources.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "bookableFrom",
              "type": "Date",
              "doc": "Date from which a member is allowed to book a slot." },
            { "name": "bookableUntil",
              "type": "Date",
              "doc": "Date until which a member is allowed to book a slot." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FormField",
        "locations":
          [ { "lineno": 164,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling checkoutBooking() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/checkout-booking) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/checkout-booking))\n containing values for form fields required to book the session.",
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookingsFrontend.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "ID of the form field from the **form** property in the **Booking/Services** collection." },
            { "name": "value",
              "type": "string",
              "doc": "Form field value." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Location",
        "locations":
          [ { "lineno": 88,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "The location where a service is offered.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Location type. Valid options are:\n- `\"OWNER_BUSINESS\"`: The business address set by the merchant. This type is set when choosing **Business Address** in the Service Details page of a site's dashboard, and populates the `businessLocation` object. \n- `\"OWNER_CUSTOM\"`: A custom address set by the merchant. This type is set when choosing **Custom Location** in the Service Details page of a site's dashboard, and populates the `locationText` property.\n- `\"CUSTOM\"`: An address set for the individual booking, usually chosen by the customer and entered in the booking form." },
            { "name": "locationText",
              "type": "string",
              "doc": "Text describing the location." },
            { "name": "businessLocation",
              "type": "wix-bookings-frontend.BusinessLocation",
              "doc": "An object describing the business location." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaidPlan",
        "locations":
          [ { "lineno": 194,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling checkoutBooking() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/checkout-booking) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/checkout-booking))\n containing details about the pricing plan used to pay for the booking.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "planOrderId",
              "type": "string",
              "doc": "Order ID of the plan package or membership. For booking with pricing plans only.",
              "optional": true },
            { "name": "benefitId",
              "type": "string",
              "doc": "ID of the benefit provided by the plan package. For booking with package-type pricing plans only.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaymentOptions",
        "locations":
          [ { "lineno": 173,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling checkoutBooking() ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/bookings/checkout-booking) | [Velo](https://dev.wix.com/docs/velo/apis/wix-bookings-frontend/checkout-booking))\n containing information about the payment options.",
            "links": [],
            "examples":
              [ { "title": "Book a service with online or offline payment options",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": \"wixPay_Offline\",",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookingsFrontend.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Book a service with the pricing plan payment option",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "let serviceId = // get chosen serviceId;",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000001\", // name field ID",
                      "    \"value\": \"Joe Smith\"",
                      "  }, {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000003\", // Phone field ID",
                      "    \"value\": \"0987654321\"",
                      "  },{",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000002\", // email field ID",
                      "    \"value\": \"abc@abc\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "",
                      "  wixBookingsFrontend.getServiceAvailability(serviceId)",
                      "    .then( (availability) => {\t\t",
                      "      let slots = availability.slots;",
                      "      slot = slots[0];",
                      "\t    let slotId = slot._id; ",
                      "\t  ",
                      "      wixBookingsFrontend.getCheckoutOptions({slotId})",
                      "        .then( (checkoutOptions) => {",
                      "",
                      "          // Make sure each option object in ",
                      "          // the array of the repeater's data",
                      "          // has a unique _id. ",
                      "",
                      "          checkoutOptions.forEach((option, index) => {",
                      "\t\t\t\t\t\toption._id = index.toString(); ",
                      "\t\t\t\t\t});",
                      "         })",
                      "",
                      "         $w('#myRepeater').data = checkoutOptions;",
                      "       });",
                      "\t} );",
                      "\t",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#title\").text = itemData.type;",
                      "    $item(\"#selectButton\").onClick( (event) => {\t\t\t",
                      "      let paymentOptions = {",
                      "        \"paymentType\": itemData.type",
                      "\t  };",
                      "\t  ",
                      "    if ((itemData.type === \"package\") || (itemData.type === \"membership\")) {",
                      "      paymentOptions.paidPlan = {};",
                      "      paymentOptions.paidPlan.planOrderId = itemData.planOrderId;",
                      "      paymentOptions.paidPlan.benefitId = itemData.benefitId;",
                      "\t};",
                      "\t",
                      "    let bookingInfo = {",
                      "      \"slot\": slot,",
                      "      \"formFields\": formFieldValues",
                      "    };",
                      "",
                      "    wixBookingsFrontend.checkoutBooking(bookingInfo, paymentOptions)",
                      "      .then( (results) => {",
                      "        let id = results.bookingId;",
                      "        let status = results.status;",
                      "\t  } );",
                      "\t} );",
                      "\t",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "We find the next available slot for a given service. Using this slot, we display the service's available payment options\n for the logged-in visitor in a repeater. If a pricing plan is selected as the payment option, we add the plan's order ID\n and benefit ID to the payment options to use for the booking." } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "paymentType",
              "type": "string",
              "doc": "Type of payment. Valid options are:\n\n  + `\"wixPay_Online\"`: For online collections.\n  + `\"wixPay_Offline\"`: For offline collections.\n  + `\"package\"`: For a package-type pricing plan.\n  + `\"membership\"`: For a membership-type pricing plan." },
            { "name": "couponCode",
              "type": "string",
              "doc": "A coupon code to be used with the payment.",
              "optional": true },
            { "name": "paidPlan",
              "type": "wix-bookings-frontend.PaidPlan",
              "doc": "Information about the pricing plan used to pay for the booking.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ServiceAvailability",
        "locations":
          [ { "lineno": 62,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object returned from [`getServiceAvailability()`](#getServiceAvailability)\n containing the available bookings slots.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "wixBookingsFrontend.getServiceAvailability(serviceId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\",",
                      " *   \"location\": {",
                      " *      \"type\": \"OWNER_BUSINESS\",",
                      " *      \"businessLocation\": {        ",
                      " *          \"id\": \"d3cd28cf-4415-4680-9fa3-f690484e7432\",",
                      " *          \"name\": \"New York Office\",",
                      " *          \"description\": \"Our Office in NY\",",
                      " *          \"address\": {",
                      " *              \"formatted\": \"100 Gansevoort St, New York, NY 10014, United States\",",
                      " *              \"location\": {",
                      " *                  \"latitude\": 40.7391622,",
                      " *                  \"longitude\": -74.0113215",
                      " *              },",
                      " *              \"streetAddress\": {",
                      " *              \"name\": \"Gansevoort St\",",
                      " *              \"number\": \"100\"",
                      " *              },",
                      " *              \"city\": \"New York\",",
                      " *              \"subdivision\": \"New York\", ",
                      " *              \"country\": US\",",
                      " *              \"postalCode\": \"NY 10014\"",
                      " *          }",
                      " *      }",
                      " *   }",
                      " *   \"bookable\": false,",
                      " *   \"constraints\": { ",
                      " *     \"bookableFrom\": \"2018-12-12T14:00:00.000Z\",",
                      " *     \"bookableUntil\": \"2019-01-16T14:00:00.000Z\"",
                      " *   } ",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "slots",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-bookings-frontend.Slot" ] },
              "doc": "List of the available slots.\n\nMax: 500 slots" } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Slot",
        "locations":
          [ { "lineno": 72,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object representing a booking slot.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookingsFrontend from 'wix-bookings-frontend';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "wixBookingsFrontend.getServiceAvailability(serviceId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\",",
                      " *   \"location\": {",
                      " *      \"type\": \"OWNER_BUSINESS\",",
                      " *      \"businessLocation\": {        ",
                      " *          \"id\": \"d3cd28cf-4415-4680-9fa3-f690484e7432\",",
                      " *          \"name\": \"New York Office\",",
                      " *          \"description\": \"Our Office in NY\",",
                      " *          \"address\": {",
                      " *              \"formatted\": \"100 Gansevoort St, New York, NY 10014, United States\",",
                      " *              \"location\": {",
                      " *                  \"latitude\": 40.7391622,",
                      " *                  \"longitude\": -74.0113215",
                      " *              },",
                      " *              \"streetAddress\": {",
                      " *              \"name\": \"Gansevoort St\",",
                      " *              \"number\": \"100\"",
                      " *              },",
                      " *              \"city\": \"New York\",",
                      " *              \"subdivision\": \"New York\", ",
                      " *              \"country\": US\",",
                      " *              \"postalCode\": \"NY 10014\"",
                      " *          }",
                      " *      }",
                      " *   }",
                      " *   \"bookable\": false,",
                      " *   \"constraints\": { ",
                      " *     \"bookableFrom\": \"2018-12-12T14:00:00.000Z\",",
                      " *     \"bookableUntil\": \"2019-01-16T14:00:00.000Z\"",
                      " *   } ",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Unique slot identifier." },
            { "name": "startDateTime",
              "type": "Date",
              "doc": "Starting date and time of the slot." },
            { "name": "endDateTime",
              "type": "Date",
              "doc": "Ending date and time of the slot." },
            { "name": "serviceId",
              "type": "string",
              "doc": "ID of the service that the slot belongs to." },
            { "name": "capacity",
              "type": "number",
              "doc": "Maximum number of participants that can book the service for this slot." },
            { "name": "remainingSpots",
              "type": "number",
              "doc": "Number of remaining spots that can be booked for the slot." },
            { "name": "staffMemberId",
              "type": "string",
              "doc": "ID of the slot's staff member." },
            { "name": "location",
              "type": "wix-bookings-frontend.Location",
              "doc": "The location where this slot is offered." },
            { "name": "bookable",
              "type": "boolean",
              "doc": "Whether the slot can be booked right now, meaning today's date is within the booking window defined by `constraints`. Not available for courses." },
            { "name": "constraints",
              "type": "wix-bookings-frontend.Constraints",
              "doc": "The dates between which the slot can be booked. The constraints define the booking window. The booking window prevents site members from booking way in advance or just right before the slot starts. Not available for courses." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "StreetAddress",
        "locations":
          [ { "lineno": 127,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object representing information about the street name and street number of an address.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "Address street name." },
            { "name": "number",
              "type": "string",
              "doc": "Address street number." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "scopes":
        [ "frontend" ] },
  "menuSections": "APIs",
  "relatedContent":
    [ { "icon": "article",
        "text": "Ideas for Working with Your Bookings App Collections",
        "url": "https://support.wix.com/en/article/wix-code-ideas-for-working-with-your-bookings-app-collections" },
      { "icon": "article",
        "text": "Creating a Bookings Timetable",
        "url": "https://support.wix.com/en/article/wix-code-how-to-create-a-bookings-timetable" },
      { "icon": "example",
        "text": "Service Page",
        "url": "https://www.wix.com/velo/example/Service-Page" },
      { "icon": "example",
        "text": "Service List",
        "url": "https://www.wix.com/velo/example/Service-List" },
      { "icon": "example",
        "text": "Quick Book & Pending Appointments",
        "url": "https://www.wix.com/velo/example/quick-book-and-pending-appointments" },
      { "icon": "article",
        "text": "Creating a Custom Bookings Experience",
        "url": "https://support.wix.com/en/article/wix-code-creating-a-custom-bookings-experience" } ] }