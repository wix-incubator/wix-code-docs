{
  "name": "ProductsQueryBuilder",
  "memberOf": "wix-metro-backend-v2.Products",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-metro-backend-v2-product.products.products-query-builder",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "ascending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
        "description": [
          "The `ascending()` function refines a `ProductsQueryBuilder` to sort in ascending order of the specified properties. If you specify more than one property, `ascending()` sorts the results in ascending order by each property in the order they are listed.",
          "",
          "You can sort the following types:",
          "",
          "Number: Sorts numerically.",
          "Date: Sorts by date and time.",
          "String: Sorts lexicographically, so \"abc\" comes after \"XYZ\".",
          "If a property contains a number as a String, that value will be sorted alphabetically and not numerically. Items that do not have a value for the specified sort property are ranked lowest."
        ],
        "examples": [
          {
            "title": "ascending example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .ascending('title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "ascending"
    },
    {
      "name": "descending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in descending order.",
        "description": [
          "The `descending()` function refines a `ProductsQueryBuilder` to sort in descending order of the specified properties. If you specify more than one property, `descending()` sorts the results in descending order by each property in the order they are listed.",
          "",
          "You can sort the following types:",
          "",
          "Number: Sorts numerically.",
          "Date: Sorts by date and time.",
          "String: Sorts lexicographically, so \"abc\" comes after \"XYZ\".",
          "If a property contains a number as a String, that value will be sorted alphabetically and not numerically. Items that do not have a value for the specified sort property are ranked lowest."
        ],
        "examples": [
          {
            "title": "descending example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .descending('title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "descending"
    },
    {
      "name": "eq",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value equals the specified value.",
        "description": [
          "The `eq()` function refines a `ProductsQueryBuilder` to only match items where the value of the specified property equals the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type does not match the same number stored as a Number type.",
          "",
          "Matching strings with `eq()` is case sensitive, so \"text\" is not equal to \"Text\"."
        ],
        "examples": [
          {
            "title": "eq example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .eq('title', 'some-title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "eq"
    },
    {
      "name": "exists",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": [
          {
            "title": "exists example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .exists('title', 'some-title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "exists"
    },
    {
      "name": "find",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-metro-backend-v2.Products.ProductsQueryResult"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns the `products` that match the query.",
        "description": [
          "The `find()` function returns a Promise that resolves to the results found by the query and some information about the results. The Promise is rejected if `find()` is called with incorrect permissions or if any of the functions used to refine the query are invalid."
        ],
        "examples": [
          {
            "title": "find example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "find"
    },
    {
      "name": "hasSome",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "any"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property contains any of the specified value parameters.",
        "description": [
          "The `hasSome()` function refines a `ProductsQueryBuilder` to only match items where the value of the specified property equals any of the specified values.",
          "",
          "Matching strings with `hasSome()` is case sensitive, so \"text\" is not equal to \"Text\".",
          "",
          "If the value of the specified property is an array, `hasSome()` will match if any of the elements of that array match any of the specified values.",
          "",
          "You can specify a list of values to match by providing comma-separated String types as the value parameters. You can also specify a list of these values by including them in an array and providing the array as the value.",
          "",
          ""
        ],
        "examples": [
          {
            "title": "hasSome example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .hasSome('title', 'some-title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "hasSome"
    },
    {
      "name": "in",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": [
          {
            "title": "in example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .in('title', 'some-title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "in"
    },
    {
      "name": "limit",
      "params": [
        {
          "name": "limit",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Limits the number of items the query returns.",
        "description": [
          "The `limit()` function defines the number of results a query returns in each page. Only one page of results is retrieved at a time. The `next()` and `prev()` functions are used to navigate the pages of a query result.",
          "",
          "By default, `limit` is set to 50.",
          "",
          "The maximum value that `limit()` can accept is 1000."
        ],
        "examples": [
          {
            "title": "limit example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .limit(10)",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "limit"
    },
    {
      "name": "ne",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value does not equal the specified value.",
        "description": [
          "The `ne()` function refines a `ProductsQueryBuilder` to only match items where the value of the specified property does not equal the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type is considered not equal to the same number stored as a Number type.",
          "",
          "Matching strings with `ne()` is case sensitive, so \"text\" is not equal to \"Text\"."
        ],
        "examples": [
          {
            "title": "ne example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .ne('title', 'some-title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "ne"
    },
    {
      "name": "startsWith",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-metro-backend-v2.Products.ProductsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": [
          {
            "title": "startsWith example",
            "body": [
              "import { products } from 'wix-metro-backend-v2';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .startsWith('title', 'some-title')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "syntaxName": "startsWith"
    }
  ],
  "messages": []
}
