{ "name": "wix-stores-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "products.js" },
  "docs":
    { "summary": "The wix-stores-backend module contains functionality for working with your\n site's store from backend code.",
      "description":
        [ "Before using the `wix-stores-backend` functions, set up your site for stores. To learn more, see [Adding Wix Stores](https://support.wix.com/en/article/adding-wix-stores).",
          " When setting up your Wix Stores site, be sure to select the payment",
          " methods you want to offer and <a href=\"https://support.wix.com/en/article/setting-your-currency-for-accepting-payments\" target=\"_blank\">set your payment currency</a>.",
          "",
          " To use the Stores API, import `wixStoresBackend` from the `wix-stores-backend` module:",
          "",
          "   ```javascript",
          "   import wixStoresBackend from 'wix-stores-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "addProductMedia",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "Product ID." },
            { "name": "media",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.Media" ] },
              "doc": "IDs or URLs of media items already uploaded to the Wix site." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 564,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Adds media items by ID to a product.",
            "description":
              [ "When adding media by ID, the `addProductMedia()` function returns a Promise that resolves when the",
                " media (images or videos) are added to a product.",
                "",
                " When adding media by URL, the `addProductMedia()` function returns a Promise that resolves when the adding of",
                " the media (images or videos) to a product has started.",
                " ",
                " Adding media by ID to the product is generally quicker than adding by URL.",
                "",
                " **Limitation**",
                " When adding media by URL, the URL is not validated and no event is triggered to indicate if the media was added successfully." ],
            "links":
              [ "[addProductMediaToChoices()](#addProductMediaToChoices)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "addProductMediaToChoices",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product with choices to which to add media items." },
            { "name": "mediaChoices",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.MediaChoices" ] },
              "doc": "IDs of media items already uploaded to the Wix site, and the choices to which to upload the media." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 588,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Adds media items by ID to product options.",
            "description":
              [ "The `addProductMediaToChoices()` function returns a Promise that resolves when the",
                " media (images or videos) are added to a product's options." ],
            "links":
              [ "[addProductMedia()](#addProductMedia)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "addProductsToCollection",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "collectionId",
              "type": "string",
              "doc": "ID of the product collection to which to add products." },
            { "name": "productIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "IDs of the products to add to the product collection, separated by commas." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 481,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Adds products by ID to a product collection.",
            "description":
              [ "The `addProductsToCollection()` function returns a Promise that resolves when the",
                " products with the given IDs are added to a product collection with a given ID.",
                " ",
                " You can add multiple products to a collection at one time by delimiting the list of products",
                " with commas.",
                "",
                " With this function, you can only add existing products to a collection. You cannot use the `addProductsToCollection()` function to create a product. See [`createProduct()`](#createProduct) to add a product to the store." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "createProduct",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productInfo",
              "type": "wix-stores-backend.ProductInfo",
              "doc": "The information for the product being created." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 414,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Creates a new product.",
            "description":
              [ "The `createProduct()` function receives a [`ProductInfo`](wix-stores-backend.html#ProductInfo) object and returns a Promise that resolves to a [`Product`](#Product)",
                " object when the product has been created.",
                "",
                " Creating a product is the first step in the process of enabling visitors to buy your products. After you create a product, you can ",
                " add choices and variants to the product." ],
            "links":
              [ "[getProduct()]($w.ProductPage.html#getProduct)",
                "[Product](#Product)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "deleteProduct",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product to delete." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 438,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Deletes an existing product.",
            "description":
              [ "The `deleteProduct()` function returns a Promise that resolves when the",
                " product with the given ID is deleted." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "deleteProductOptions",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product with options to delete." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 468,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Deletes all options for an existing product.",
            "description":
              [ "The `deleteProductOptions()` function returns a Promise that resolves when the",
                " options for the product with the given ID are deleted." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getAbandonedCart",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "cartId",
              "type": "string",
              "doc": "ID of the abandoned cart to get." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 42,
              "filename": "abandonedCarts.js" } ],
        "docs":
          { "summary": "Gets the current site visitor's shopping cart.",
            "description":
              [ "The `getAbandonedCart()` function returns a Promise that resolves to the",
                " specified abandoned shopping cart." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getCurrentCart",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "external:Promise" },
        "locations":
          [ { "lineno": 156,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "Gets the current site visitor's shopping cart.",
            "description":
              [ "The `getCurrentCart()` function returns a Promise that resolves to the current",
                " site visitor's shopping cart." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getProductOptionsAvailability",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "The ID of the product whose availability is being checked." },
            { "name": "choices",
              "type": "wix-stores-backend.ProductChoices",
              "doc": "Option choices to use when checking the product's availability." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 253,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Gets the availability of a product based on the specified option choices.",
            "description":
              [ "The `getProductOptionsAvailability()` function returns a Promise that is resolved",
                " to a `ProductOptionsAvailability` object when the product's availability information",
                " about the product is retrieved.",
                "",
                " The information returned in the `selectedVariant` and `availableForPurchase`",
                " properties reflects the option choices passed in using the `ProductChoices`",
                " parameter.",
                "",
                " If the specified choices result in the selection of a single product variant,",
                " that variant is returned in the `selectedVariant` property and the `availableForPurchase`",
                " property indicates whether that product variant is available for purchase.",
                "",
                " If the specified choices do not result in the selection of a single product variant,",
                " no variant is returned in the `selectedVariant` property and the `availableForPurchase`",
                " property will be `false`." ],
            "links":
              [ "[addToCart()]($w.CartIcon.html#addToCart)",
                "[getProduct()]($w.ProductPage.html#getProduct)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getProductVariants",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "The ID of the product whose variants are being retrieved." },
            { "name": "options",
              "type": "wix-stores-backend.ProductVariantOptions",
              "doc": "Option to use when checking the product's variants." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 398,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Gets a product's available variants based on the specified option choices.",
            "description":
              [ "The `getProductVariants()` function returns a Promise that is resolved",
                " to an array of `VariantItem` objects when the product variants with the specified",
                " choices or variant IDs are retrieved." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "removeProductMedia",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product from which to remove media items." },
            { "name": "mediaIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.Media" ] },
              "doc": "IDs or URLs of the media items to remove from the product, separated by commas. If no `mediaIds` are specified, all media items are removed from the product." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 604,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Removes media items by ID from a product.",
            "description":
              [ "The `removeProductMedia()` function returns a Promise that resolves when the",
                " media items with the given IDs are removed from a product with a given ID.",
                " ",
                " You can remove multiple media items from a product at one time by delimiting the list of products",
                " with commas.",
                "",
                " If you do not specify any media IDs, all media items are removed from the product.",
                "",
                " Removing media items from a product does not delete the media from the site." ],
            "links":
              [ "[removeProductMediaFromChoices()](#removeProductMediaFromChoices)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "removeProductMediaFromChoices",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product from whose options to remove media items." },
            { "name": "mediaChoices",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.MediaChoices" ] },
              "doc": "IDs of media items to remove from the specified choices. If no choices are specified, the media items are removed from all choices for the given product." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 627,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Removes media items by ID from a product's options.",
            "description":
              [ "The `removeProductMediaFromChoices()` function returns a Promise that resolves when the",
                " products with the given IDs are removed from a product's options.",
                " ",
                " You can remove multiple media items from a product's option at one time by delimiting the list of options",
                " with commas.",
                "",
                " Removing media items from a product option does not delete the media items from the product." ],
            "links":
              [ "[removeProductMedia()](#removeProductMedia)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "removeProductsFromCollection",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "collectionId",
              "type": "string",
              "doc": "ID of the product collection from which to remove products." },
            { "name": "productIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "IDs of the products to remove from the product collection, separated by commas. If no product IDs are specified, all products are removed from the collection.",
              "optional": true } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 500,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Removes products by ID from a product collection.",
            "description":
              [ "The `removeProductsFromCollection()` function returns a Promise that resolves when the",
                " products with the given IDs are removed from a collection with a given ID.",
                " ",
                " You can remove multiple products from a collection at one time by delimiting the list of products",
                " with commas.",
                "",
                " If you do not specify any IDs, all products are removed from the collection.",
                "",
                " Removing products from a collection does not delete the products from the store.  See [`deleteProduct()`](#deleteProduct) to delete a product from the store." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "resetVariantData",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product whose variants should be reset." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 547,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Resets the data (such as the price and the weight) of all variants for a given product to their default values.",
            "description":
              [ "The `resetVariantData()` function returns a Promise that resolves when a product's",
                " variants have been reset." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateInventoryVariantFields",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "inventoryId",
              "type": "string",
              "doc": "ID of the inventory item with variants to update." },
            { "name": "inventoryItemVariantInfo",
              "type": "wix-stores-backend.InventoryItemVariantInfo",
              "doc": "The information to update in the variant." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 116,
              "filename": "inventory.js" } ],
        "docs":
          { "summary": "Updates existing product inventory item's variants by ID.",
            "description":
              [ "The `updateInventoryVariantFields()` function returns a Promise that resolves when the",
                " variant with the specified ID has been updated.",
                "",
                " Only the properties passed in the [`Inventory Item`](#InventoryItemVariantInfo) object will",
                " be updated. All other properties will remain the same." ],
            "links":
              [ "[InventoryItem](#InventoryItem)",
                "[updateInventoryVariantFieldsByExternalId( )](#updateInventoryVariantFieldsByExternalId)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateInventoryVariantFieldsByExternalId",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "inventoryExternalId",
              "type": "string",
              "doc": "Unique external identifier for the inventory item. The external ID is one of the following: \n\n\n + The corresponding product ID for the inventory item in a Wix store.\n + The corresponding ID for the inventory item in a non-Wix store's catalog." },
            { "name": "inventoryItemVariantInfo",
              "type": "wix-stores-backend.InventoryItemVariantInfo",
              "doc": "The information to update in the variant." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 154,
              "filename": "inventory.js" } ],
        "docs":
          { "summary": "Updates existing product inventory item's variants by external ID.",
            "description":
              [ "The `updateInventoryVariantFieldsByExternalId()` function returns a Promise that resolves when the",
                " variant with the specified external ID has been updated.",
                "",
                " Only the properties passed in the [`Inventory Item`](#InventoryItemVariantInfo) object will",
                " be updated. All other properties will remain the same." ],
            "links":
              [ "[InventoryItem](#InventoryItem)",
                "[updateInventoryVariantFields( )](#updateInventoryVariantFields)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateProductFields",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product to update." },
            { "name": "productInfo",
              "type": "wix-stores-backend.ProductInfo",
              "doc": "The information to update in the product." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 451,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Updates an existing product by ID.",
            "description":
              [ "The `updateProductFields()` function returns a Promise that resolves when the",
                " product with the specified ID has been updated.",
                "",
                " Only the properties passed in the [`Product`](#Product) object will",
                " be updated. All other properties will remain the same." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateVariantData",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "productId",
              "type": "string",
              "doc": "ID of the product to update." },
            { "name": "variantInfo",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.VariantInfo" ] },
              "doc": "The information to update for the variant." } ],
        "ret":
          { "type": "Promise" },
        "locations":
          [ { "lineno": 521,
              "filename": "products.js" } ],
        "docs":
          { "summary": "Updates the data (such as the price and the weight) of an existing product variant in the store.",
            "description":
              [ "The `updateVariantData()` function returns a Promise that resolves when a product's",
                " variant, with the specified choice and corresponding value, has been updated. ",
                "",
                " For example, if my product is a ring, I can update the price of the Gold value of the Metal choice, or ",
                " the price of the Silver value of the Metal choice. In this example, \"price\" is the variant's ",
                " data.",
                "",
                " When passing parameters to `updateVariantData()`, if the combination of the product ID, choice, or choice value does not match any existing ",
                " variants, an error is issued.",
                "",
                " Only the properties passed in the [`VariantInfo`](wix-stores-backend~VariantInfo) object will",
                " be updated. All other properties remain the same." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "AbandonedCart",
        "locations":
          [ { "lineno": 29,
              "filename": "abandonedCarts.js" } ],
        "docs":
          { "summary": "An object representing an abandoned shopping cart.",
            "links":
              [ "[`getAbandonedCart( )`](#getAbandonedCart)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Unique identifier of the shopping cart." },
            { "name": "abandonTime",
              "type": "Date",
              "doc": "Date and time the shopping cart was abandoned." },
            { "name": "total",
              "type": "string",
              "doc": "Total price of all items in the cart." },
            { "name": "buyerInfo",
              "type": "wix-stores-backend.BuyerInfo",
              "doc": "The buyer's information." },
            { "name": "activities",
              "type": "wix-stores-backend.Activity",
              "doc": "<Placeholder text>" },
            { "name": "status",
              "type": "string",
              "doc": "Status of the abandoned cart. Either `\"ABANDONED\"` or `\"RECOVERED\"`." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "Activity",
        "locations":
          [ { "lineno": 10,
              "filename": "abandonedCarts.js" } ],
        "docs":
          { "summary": "An object representing a shopping cart activity.",
            "links":
              [ "[`getAbandonedCart( )`](#getAbandonedCart)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "activityType",
              "type": "string",
              "doc": "One of:\n\n + `\"CUSTOM_ACTIVITY\"`\n + `\"EMAIL_NOT_SENT\"`\n + `\"EMAIL_SENT\"`\n + `\"NOTIFICATION_SENT\"`\n + `\"SCHEDULED\"`\n + `\"TASK_CREATED\"`\n + `\"UNRECOGNIZED_TYPE\"`" },
            { "name": "message",
              "type": "string",
              "doc": "Activity message." },
            { "name": "timestamp",
              "type": "Date",
              "doc": "Time activity occurred." },
            { "name": "customData",
              "type": "wix-stores-backend.CustomData",
              "doc": "Custom activity data." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "Address",
        "locations":
          [ { "lineno": 19,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing an address - roi.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "firstName",
              "type": "external:String",
              "doc": "First name." },
            { "name": "lastName",
              "type": "external:String",
              "doc": "Last name." },
            { "name": "email",
              "type": "external:String",
              "doc": "Email address." },
            { "name": "phone",
              "type": "external:String",
              "doc": "Phone number." },
            { "name": "address",
              "type": "external:String",
              "doc": "Address." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "AppliedCoupon",
        "locations":
          [ { "lineno": 32,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing a coupon applied in a shopping cart.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "code",
              "type": "external:String",
              "doc": "Coupon code." },
            { "name": "couponId",
              "type": "external:String",
              "doc": "Coupon unique identifier." },
            { "name": "name",
              "type": "external:String",
              "doc": "Coupon name." },
            { "name": "couponType",
              "type": "external:String",
              "doc": "Type of coupon.\n One of:\n\n + `\"BuyXGetY\"`\n + `\"FixedPriceAmount\"`\n + `\"FreeShipping\"`\n + `\"MoneyOffAmount\"`\n + `\"PercentOffRate\"`" },
            { "name": "discountValue",
              "type": "external:String",
              "doc": "Value of the coupon discount." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "BuyerInfo",
        "locations":
          [ { "lineno": 52,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing a visitor who abandoned a shopping cart.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "external:String",
              "doc": "Buyer's unique ID." },
            { "name": "email",
              "type": "external:String",
              "doc": "Buyer's email address." },
            { "name": "firstName",
              "type": "external:String",
              "doc": "Buyer's first name." },
            { "name": "lastName",
              "type": "external:String",
              "doc": "Buyer's last name." },
            { "name": "identityType",
              "type": "external:String",
              "doc": "Buyer's identity.\n One of:\n\n + `\"ADMIN\"`: Buyer is the site owner.\n + `\"MEMBER\"`: Buyer is a logged-in site member.\n + `\"VISITOR\"`: Buyer is not logged in.\n + `\"CONTACT\"`: A contact has been created for the buyer." },
            { "name": "phone",
              "type": "external:String",
              "doc": "Buyer's phone number." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "Cart",
        "locations":
          [ { "lineno": 1,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing a shopping cart.",
            "links":
              [ "[getCurrentCart( )](#getCurrentCart)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "external:String",
              "doc": "Unique identifier of the shopping cart." },
            { "name": "appliedCoupon",
              "type": "wix-stores-backend.AppliedCoupon",
              "doc": "Coupon applied in the shopping cart." },
            { "name": "billingAddress",
              "type": "wix-stores-backend.Address",
              "doc": "Cart billing address." },
            { "name": "buyerInfo",
              "type": "wix-stores-backend.BuyerInfo",
              "doc": "The buyer's information." },
            { "name": "status",
              "type": "external:String",
              "doc": "Cart status. Either `\"INCOMPLETE\"` or `\"COMPLETE\"`." },
            { "name": "currency",
              "type": "wix-stores-backend.Currency",
              "doc": "Currency of the shopping cart." },
            { "name": "shippingInfo",
              "type": "wix-stores-backend.ShippingInfo",
              "doc": "The shopping cart's shipping information." },
            { "name": "lineItems",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.LineItem" ] },
              "doc": "Items in the shopping cart." },
            { "name": "totals",
              "type": "wix-stores-backend.OrderTotals",
              "doc": "The shopping cart's totals." },
            { "name": "weightUnit",
              "type": "external:String",
              "doc": "The order's units of weight. One of: `\"KG\"`, `\"LB\"`, or `\"UNSPECIFIED_WEIGHT_UNIT\"`." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "Choice",
        "locations":
          [ { "lineno": 381,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing the choice for a product variant.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "choices",
              "type": "Object",
              "doc": "Product options to use when creating or updating the\n product. The object contains key:value pairs where the key is the\n option name and the value is the chosen option value." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Choices",
        "locations":
          [ { "lineno": 390,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing the choice for a product variant.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "option",
              "type": "string",
              "doc": "Option name." },
            { "name": "choice",
              "type": "string",
              "doc": "Choice name." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Currency",
        "locations":
          [ { "lineno": 72,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing a currency.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "currency",
              "type": "external:String",
              "doc": "The currency code." },
            { "name": "symbol",
              "type": "external:String",
              "doc": "The currency symbol." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "CustomData",
        "locations":
          [ { "lineno": 1,
              "filename": "abandonedCarts.js" } ],
        "docs":
          { "summary": "An object representing custom activity data.",
            "links":
              [ "[`getAbandonedCart( )`](#getAbandonedCart)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "namespace",
              "type": "string",
              "doc": "Activity namespace." },
            { "name": "customValue",
              "type": "Object",
              "doc": "JSON object containing custom data." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "CustomTextField",
        "locations":
          [ { "lineno": 131,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing a custom text field.",
            "links":
              [ "[getCurrentCart( )](#getCurrentCart)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "title",
              "type": "external:String",
              "doc": "Field title." },
            { "name": "value",
              "type": "external:String",
              "doc": "Field value." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "InventoryItem",
        "locations":
          [ { "lineno": 1,
              "filename": "inventory.js" } ],
        "docs":
          { "summary": "An object representing an inventory item for a product variant in a store.",
            "links":
              [ "[updateInventoryVariantFieldsByExternalId( )](#updateInventoryVariantFieldsByExternalId)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Unique identifier for the inventory item." },
            { "name": "externalId",
              "type": "string",
              "doc": "Unique external identifier for the inventory item. The external ID is one of the following: \n\n\n + The corresponding product ID for the inventory item in a Wix store.\n + The corresponding product ID for the inventory item in a non-Wix store's catalog." },
            { "name": "trackQuantity",
              "type": "boolean",
              "doc": "Indicates whether the on-hand inventory quantity is tracked for the inventory item's variants. If true, you can update the actual number of variants available. If false, you can indicate if a variant is in stock." },
            { "name": "variants",
              "type": "wix-stores-backend.InventoryItemVariants",
              "doc": "Inventory item's variants." },
            { "name": "_updatedDate",
              "type": "Date",
              "doc": "Date the inventory item was last updated." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "InventoryItemVariantInfo",
        "locations":
          [ { "lineno": 53,
              "filename": "inventory.js" } ],
        "docs":
          { "links":
              [ "[updateInventoryVariantFields( )](#updateInventoryVariantFields)",
                "[updateInventoryVariantFieldsByExternalId( )](#updateInventoryVariantFieldsByExternalId)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "trackQuantity",
              "type": "boolean",
              "doc": "Indicates whether the on-hand inventory quantity is tracked for the inventory item's variants. If true, you can update the actual number of variants available. If false, you can indicate if a variant is in stock." },
            { "name": "variants",
              "type": "wix-stores-backend.InventoryItemVariants",
              "doc": "Inventory item variants." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "InventoryItemVariantItem",
        "locations":
          [ { "lineno": 104,
              "filename": "inventory.js" } ],
        "docs":
          { "summary": "An object representing a product inventory item's variant item.",
            "links":
              [ "[InventoryItem](#InventoryItem)",
                "[updateInventoryVariantFields( )](#updateInventoryVariantFields)",
                "[updateInventoryVariantFieldsByExternalId( )](#updateInventoryVariantFieldsByExternalId)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "variantId",
              "type": "string",
              "doc": "Unique product inventory item's variant ID." },
            { "name": "inStock",
              "type": "boolean",
              "doc": "Whether the variant is in stock at the store. Used when `trackQuantity` is false. If `trackQuantity` is true, `inStock` is based on the actual tracked `quantity`." },
            { "name": "quantity",
              "type": "number",
              "doc": "In-stock quantity at the store. Used when `trackQuantity` is true. If `trackQuantity` is false, undefined." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "InventoryItemVariants",
        "locations":
          [ { "lineno": 94,
              "filename": "inventory.js" } ],
        "docs":
          { "summary": "An object representing a product inventory item's variants.",
            "links":
              [ "[InventoryItem](#InventoryItem)",
                "[updateInventoryVariantFields( )](#updateInventoryVariantFields)",
                "[updateInventoryVariantFieldsByExternalId( )](#updateInventoryVariantFieldsByExternalId)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "variantItems",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.InventoryItemVariantItem" ] },
              "doc": "Variant items." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "LineItem",
        "locations":
          [ { "lineno": 94,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing a line item in a shopping cart.",
            "links":
              [ "[getCurrentCart( )](#getCurrentCart)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "external:String",
              "doc": "Name of the line item." },
            { "name": "notes",
              "type": "external:String",
              "doc": "Notes about the line item." },
            { "name": "price",
              "type": "external:String",
              "doc": "Line item price." },
            { "name": "productId",
              "type": "external:String",
              "doc": "Line item product ID." },
            { "name": "quantity",
              "type": "external:Number",
              "doc": "Line item quantity." },
            { "name": "sku",
              "type": "external:String",
              "doc": "Line item stock keeping unit." },
            { "name": "totalPrice",
              "type": "external:String",
              "doc": "Total price charged to the customer for all line items after any applicable discounts." },
            { "name": "weight",
              "type": "external:String",
              "doc": "Line item weight." },
            { "name": "lineItemType",
              "type": "external:String",
              "doc": "Type of the line item.\n One of:\n\n + `\"DIGITAL\"`: Digital item.\n + `\"PHYSICAL\"`: Physical item.\n + `\"CUSTOM_AMOUNT_ITEM\"`: Item with a custom price.\n + `\"UNSPECIFIED\"`: Type can't be classified due to an error." },
            { "name": "options",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.Option" ] },
              "doc": "Line item options." },
            { "name": "mediaItem",
              "type": "wix-stores-backend.MediaItem",
              "doc": "Media item." },
            { "name": "customTextFields",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.CustomTextField" ] },
              "doc": "Custom text." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "Media",
        "locations":
          [ { "lineno": 352,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing the media item for a product.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "(mediaId|url)",
              "type": "string",
              "doc": "One of:\n\n + A Wix media item's ID, or\n + A media item's URL\n\n\n\n\n\n Use `mediaId` (preferred) for images hosted by Wix. Use `url` for other images. \n\n If you specify both, `mediaId` takes precedence. We recommend only specifying one to avoid unpredictable results. \n\n You can get the `mediaId` from: \n\n  + A query of the [`Product`]($w.ProductPage.html#Product) object. \n  + The [`UploadedFile`]($w.UploadButton.html#UploadedFile)'s properties when uploading an image." },
            { "name": "choice",
              "type": "wix-stores-backend.Choice",
              "doc": "A choice of the product variant." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "MediaChoices",
        "locations":
          [ { "lineno": 344,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing the media item for a product's choices.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "mediaIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Wix media item IDs." },
            { "name": "option",
              "type": "string",
              "doc": "Option name." },
            { "name": "choice",
              "type": "string",
              "doc": "Choice name." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "MediaItem",
        "locations":
          [ { "lineno": 66,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing a media item.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "Media item ID." },
            { "name": "title",
              "type": "string",
              "doc": "Media item title." },
            { "name": "description",
              "type": "string",
              "doc": "Media item description." },
            { "name": "type",
              "type": "string",
              "doc": "Media items type. Can be \"image\" or \"video.\"" },
            { "name": "src",
              "type": "string",
              "doc": "Media item URL.\n\n The `src` property can be an image or video from the <a href=\"https://support.wix.com/en/article/about-the-media-manager\" target=\"_blank\">Media Manager</a>.\n\n The image source format is:\n `wix:image://v1/<uri>/<filename>#originWidth=<width>&originHeight=<height>[&watermark=<watermark_manifest_string>]`\n \n The video source format is:\n `wix:video://v1/<video_uri>/<filename>#posterUri=<poster_uri>&posterWidth=<width>&posterHeight=<height>`" },
            { "name": "thumbnail",
              "type": "string",
              "doc": "Thumbnail URL for videos only.",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "Option",
        "locations":
          [ { "lineno": 120,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing a line item option.",
            "links":
              [ "[getCurrentCart( )](#getCurrentCart)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "option",
              "type": "external:String",
              "doc": "Name of the product option." },
            { "name": "selection",
              "type": "external:String",
              "doc": "Selected option." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "OrderTotals",
        "locations":
          [ { "lineno": 141,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing an order's totals.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "subtotal",
              "type": "external:Number",
              "doc": "The subtotal of all the order's line items, excluding tax." },
            { "name": "shipping",
              "type": "external:Number",
              "doc": "The total shipping price, including tax." },
            { "name": "tax",
              "type": "external:String",
              "doc": "The total amount of tax." },
            { "name": "discount",
              "type": "external:Number",
              "doc": "The total calculated discount amount." },
            { "name": "total",
              "type": "external:Number",
              "doc": "The total price." },
            { "name": "weight",
              "type": "external:Number",
              "doc": "The total weight of the order's items." },
            { "name": "quantity",
              "type": "external:Number",
              "doc": "The total quantity of the the order's line items." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "PagingOptions",
        "locations":
          [ { "lineno": 310,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing paging options.",
            "links":
              [ "[getProductVariants()]($w.ProductPage.html#getProductVariants)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "limit",
              "type": "number",
              "doc": "Maximum number of variants to retrieve. Defaults to 300." },
            { "name": "skip",
              "type": "number",
              "doc": "Number of variants to skip before the retrieved variants. Defaults to 0." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "Product",
        "locations":
          [ { "lineno": 18,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing a product in a store.",
            "links":
              [ "[createProduct()](#createProduct)",
                "[getProduct()]($w.ProductPage.html#getProduct)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Product ID." },
            { "name": "_updatedDate",
              "type": "Date",
              "doc": "Date product was last updated." },
            { "name": "name",
              "type": "string",
              "doc": "Product name." },
            { "name": "description",
              "type": "string",
              "doc": "Product description." },
            { "name": "mainMedia",
              "type": "string",
              "doc": "Main product media item (image or video thumbnail) URL." },
            { "name": "mediaItems",
              "type": "wix-stores-backend.MediaItem",
              "doc": "List of product media items." },
            { "name": "sku",
              "type": "string",
              "doc": "Product stock keeping unit value. Must be unique." },
            { "name": "ribbons",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.ProductRibbon" ] },
              "doc": "List of product ribbons." },
            { "name": "currency",
              "type": "string",
              "doc": "Product currency." },
            { "name": "price",
              "type": "number",
              "doc": "Product price. \n The price must be greater than its discount.\n The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price." },
            { "name": "discountedPrice",
              "type": "number",
              "doc": "Discounted product price." },
            { "name": "formattedPrice",
              "type": "string",
              "doc": "Product price formatted with the currency." },
            { "name": "formattedDiscountedPrice",
              "type": "string",
              "doc": "Discounted product price formatted with the currency." },
            { "name": "inventoryItemId",
              "type": "string",
              "doc": "ID for the inventory item." },
            { "name": "discount",
              "type": "wix-stores-backend.ProductDiscount",
              "doc": "Product discount." },
            { "name": "trackInventory",
              "type": "boolean",
              "doc": "Indicates whether inventory is tracked for the product." },
            { "name": "inStock",
              "type": "boolean",
              "doc": "Indicates whether the product is in stock." },
            { "name": "quantityInStock",
              "type": "number",
              "doc": "Number of units currently in stock." },
            { "name": "additionalInfoSections",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.ProductAdditionalInfoSection" ] },
              "doc": "Additional product information sections." },
            { "name": "productOptions",
              "type": "wix-stores-backend.ProductOptions",
              "doc": "All the available options for a store product." },
            { "name": "productPageUrl",
              "type": "string",
              "doc": "Product page relative URL." },
            { "name": "manageVariants",
              "type": "boolean",
              "doc": "Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined." },
            { "name": "customTextFields",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.ProductCustomTextFields" ] },
              "doc": "List of product customization fields." },
            { "name": "productType",
              "type": "string",
              "doc": "Product type. Either `\"physical\"` or `\"digital\"`. When creating a product using the API, currently only `\"physical\"` is supported." },
            { "name": "slug",
              "type": "string",
              "doc": "Product slug." },
            { "name": "weight",
              "type": "string",
              "doc": "Product weight." },
            { "name": "variants",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.VariantItem" ] },
              "doc": "Product variants." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "ProductAdditionalInfoSection",
        "locations":
          [ { "lineno": 89,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing an additional info section for a store product.",
            "links":
              [ "[getProduct()](#getProduct)",
                "[Product](#Product)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "title",
              "type": "string",
              "doc": "Section title." },
            { "name": "description",
              "type": "string",
              "doc": "Section description." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductChoices",
        "locations":
          [ { "lineno": 288,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing a product variant's option choices.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "optionKey",
              "type": "string",
              "doc": "Value of the choice. This key name is dependent on the\n product option. For example, if a product has a size option, this\n key value will be something like `\"Size\"` and its value will be something like\n `\"Large\"`.\n \n `optionKey` is not case-sensitive. Therefore the values for the option keys \"`Size`\", \"`SIZE`\", and \"`size`\", are combined." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductCustomTextFields",
        "locations":
          [ { "lineno": 56,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing a custom text field for a store product.",
            "links":
              [ "[getProduct( )](#getProduct)",
                "[Product](#Product)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "title",
              "type": "string",
              "doc": "Product customization field title." },
            { "name": "maxLength",
              "type": "string",
              "doc": "Maximum length of product customization field in characters." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductDiscount",
        "locations":
          [ { "lineno": 127,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing a product discount.",
            "links":
              [ "[Product](#Product)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Discount type. Required.\n\n\n\n One of:\n\n\n\n - `\"AMOUNT\"` \n\n - `\"PERCENT\"`\n\n - `\"NONE\"`" },
            { "name": "value",
              "type": "string",
              "doc": "Discount value. The discount value cannot be greater than the price of the product or the variant." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductInfo",
        "locations":
          [ { "lineno": 107,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing information for creating or updating a product in a store.",
            "links":
              [ "[`createProduct()`](#createProduct)",
                "[`updateProductFields()`](#updateProductFields)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "Product name." },
            { "name": "description",
              "type": "string",
              "doc": "Product description." },
            { "name": "sku",
              "type": "number",
              "doc": "Product stock keeping unit value. Must be unique." },
            { "name": "price",
              "type": "number",
              "doc": "Product price. \n The price must be greater than its discount.\n The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price." },
            { "name": "discount",
              "type": "wix-stores-backend.ProductDiscount",
              "doc": "An object representing a product discount." },
            { "name": "productOptions",
              "type": "wix-stores-backend.ProductOptionsInfo",
              "doc": "An object representing all the available options for a store product." },
            { "name": "manageVariants",
              "type": "boolean",
              "doc": "Indicates whether product variants can be managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](wix-stores.html#getProductVariants) to check if variants exist.  You cannot set `manageVariants` to true if more than 300 variants are defined." },
            { "name": "productType",
              "type": "string",
              "doc": "Product type. Currently only \"physical\" is supported for creating a new product using the API. Soon \"digital\" will also be supported." },
            { "name": "weight",
              "type": "number",
              "doc": "Product weight." },
            { "name": "visible",
              "type": "boolean",
              "doc": "Whether the product is visible in the store." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductOption",
        "locations":
          [ { "lineno": 180,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing an option for a store product.",
            "links":
              [ "[createProduct( )](#createProduct)",
                "[ProductOptions](#ProductOptions)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "optionType",
              "type": "string",
              "doc": "Option type. Either `\"color\"` or `\"drop_down\"`." },
            { "name": "name",
              "type": "string",
              "doc": "Option name." },
            { "name": "choices",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.ProductOptionsChoice" ] },
              "doc": "Option choices.\n Each option can contain between one and thirty choices." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductOptionInfo",
        "locations":
          [ { "lineno": 191,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing an option for a store product.",
            "links":
              [ "[createProduct( )](#createProduct)",
                "[ProductOptions](#ProductOptions)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "Option name." },
            { "name": "choices",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.ProductOptionsChoice" ] },
              "doc": "Option choices.\n Each option can contain between one and thirty choices." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductOptions",
        "locations":
          [ { "lineno": 153,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing all the available options for a store product, such as \"Size\" or \"Color.\"",
            "links":
              [ "[Product](#Product)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "optionKey",
              "type": "wix-stores-backend.ProductOption",
              "doc": "Name of the option. This key name\n is dependent on the options added to the product. For example, if a product has a size \n option, this key will be something like `\"Size\"`.\n \n `optionKey` is not case-sensitive. Therefore the values for the option keys \"`Size`\", \"`SIZE`\",\n and \"`size`\" are combined.\n\n An option cannot be changed if it has choices and variants. To change an option, reset its variants\n with [`resetVariantData()`](wix-stores-backend.html#resetVariantData).\n For each option, you can define a maximum of six choices." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductOptionsAvailability",
        "locations":
          [ { "lineno": 224,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.",
            "links":
              [ "[getProductOptionsAvailability()](#getProductOptionsAvailability)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "availableForPurchase",
              "type": "boolean",
              "doc": "Whether the product with the specified option choices is available for purchase." },
            { "name": "productOptions",
              "type": "wix-stores-backend.ProductOptions",
              "doc": "An object representing all the available options for a store product." },
            { "name": "mainMedia",
              "type": "string",
              "doc": "Main product media item (image or video) URL." },
            { "name": "mediaItems",
              "type": "wix-stores-backend.MediaItem",
              "doc": "List of product media items." },
            { "name": "selectedVariant",
              "type": "wix-stores-backend.ProductOptionsAvailabilitySelectedVariant",
              "doc": "The variant of the product selected using the specified option choices if there is one." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "ProductOptionsAvailabilitySelectedVariant",
        "locations":
          [ { "lineno": 236,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing the product variant selected using the `getProductOptionsAvailability()` function.",
            "links":
              [ "[getProductOptionsAvailability()](#getProductOptionsAvailability)",
                "[ProductOptionsAvailability()](#ProductOptionsAvailability)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "sku",
              "type": "string",
              "doc": "Product variant stock keeping unit value." },
            { "name": "currency",
              "type": "string",
              "doc": "Product variant currency." },
            { "name": "price",
              "type": "number",
              "doc": "Product variant price. The variant price must be greater than its discount." },
            { "name": "discountedPrice",
              "type": "number",
              "doc": "Discounted product variant price." },
            { "name": "formattedPrice",
              "type": "string",
              "doc": "Product variant price formatted with the currency." },
            { "name": "formattedDiscountedPrice",
              "type": "string",
              "doc": "Discounted product variant price formatted with the currency." },
            { "name": "visible",
              "type": "boolean",
              "doc": "Whether the product variant is shown in the store." },
            { "name": "inStock",
              "type": "boolean",
              "doc": "Whether the product variant is in stock." },
            { "name": "weight",
              "type": "number",
              "doc": "Product variant weight." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "ProductOptionsChoice",
        "locations":
          [ { "lineno": 203,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing an options choice for a store product, such as choice \"Small\" for the option \"Size.\"",
            "links":
              [ "[ProductOption](#ProductOption)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "number",
              "doc": "Choice value." },
            { "name": "description",
              "type": "number",
              "doc": "Choice description." },
            { "name": "media",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.ProductOptionsChoiceMedia" ] },
              "doc": "Choice media." },
            { "name": "inStock",
              "type": "boolean",
              "doc": "Indicates whether the product with this choice is in stock. When adding a product, this property is read-only." },
            { "name": "visible",
              "type": "boolean",
              "doc": "Indicates whether the product with this option is visible.  When adding a product, this property is read-only." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductOptionsChoiceMedia",
        "locations":
          [ { "lineno": 214,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing the choice media.",
            "links":
              [ "[createProduct( )](#createProduct)",
                "[ProductOptionsChoice](#ProductOptionsChoice)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "mainMedia",
              "type": "string",
              "doc": "Main choice media item (image or video thumbnail) URL." },
            { "name": "mediaItems",
              "type": "wix-stores-backend.MediaItem",
              "doc": "List of choice media items." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductOptionsInfo",
        "locations":
          [ { "lineno": 169,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing all the available options for a store product.",
            "links":
              [ "[Product](#Product)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "optionKey",
              "type": "wix-stores-backend.ProductOptionInfo",
              "doc": "Name of the option. This key name\n is dependent on the options added to the product. For example, if a product has a size \n option, this key will be something like `\"Size\"`.\n \n `optionKey` is not case-sensitive. Therefore the values for the option keys \"`Size`\", \"`SIZE`\", and \"`size`\" are combined." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductRibbon",
        "locations":
          [ { "lineno": 99,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing a ribbon for a store product.",
            "links":
              [ "[getProduct( )](#getProduct)",
                "[Product](#Product)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "text",
              "type": "string",
              "doc": "Ribbon text." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ProductVariantOptions",
        "locations":
          [ { "lineno": 299,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing the selection of specific variants of a product. Use only one of\n `choices` or `variantIds`.",
            "links":
              [ "[getProductVariants()](#getProductVariants)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "choices",
              "type": "wix-stores-backend.ProductChoices",
              "doc": "The choices the retrieved variants will have." },
            { "name": "variantIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "IDs of variants to retrieve." },
            { "name": "paging",
              "type": "wix-stores-backend.PagingOptions",
              "doc": "Paging options." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "ShippingInfo",
        "locations":
          [ { "lineno": 82,
              "filename": "carts.js" } ],
        "docs":
          { "summary": "An object representing shipping information.",
            "links":
              [ "[onCartCompleted( )](#onCartCompleted)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "shippingAddress",
              "type": "wix-stores-backend.Address",
              "doc": "Shipment address.",
              "optional": true },
            { "name": "pickupInfo",
              "type": "wix-stores-backend.Address",
              "doc": "Pickup address.",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "VariantInfo",
        "locations":
          [ { "lineno": 328,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object containing variant information.",
            "links":
              [ "[getProductVariants()](#getProductVariants)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "currency",
              "type": "string",
              "doc": "Variant currency." },
            { "name": "price",
              "type": "number",
              "doc": "Variant price. The variant price must be greater than its discount." },
            { "name": "discountedPrice",
              "type": "number",
              "doc": "Discounted variant price." },
            { "name": "formattedPrice",
              "type": "string",
              "doc": "Variant price formatted with the currency." },
            { "name": "formattedDiscountedPrice",
              "type": "string",
              "doc": "Discounted variant price formatted with the currency." },
            { "name": "weight",
              "type": "number",
              "doc": "Variant weight." },
            { "name": "sku",
              "type": "string",
              "doc": "Variant stock keeping unit value." },
            { "name": "visible",
              "type": "boolean",
              "doc": "Whether the variant is visible in the store." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "VariantItem",
        "locations":
          [ { "lineno": 319,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing a product variant item.",
            "links":
              [ "[getProductVariants()](#getProductVariants)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Unique variant ID." },
            { "name": "choices",
              "type": "wix-stores-backend.ProductChoices",
              "doc": "The choices of the retrieved variant." },
            { "name": "variant",
              "type": "wix-stores-backend.VariantInfo",
              "doc": "Variant information." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Variants",
        "locations":
          [ { "lineno": 647,
              "filename": "products.js" } ],
        "docs":
          { "summary": "An object representing product variants.",
            "links":
              [ "[getProductVariants()](#getProductVariants)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "items",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-stores-backend.VariantItem" ] },
              "doc": "List of variant items that match the specified choices or variant IDs." },
            { "name": "length",
              "type": "number",
              "doc": "Number of items in the current results page." },
            { "name": "totalCount",
              "type": "number",
              "doc": "Total number of variants with the specified choices." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] } ],
  "extra":
    {  },
  "menuSections": "APIs",
  "FAQs":
    [ { "title": "When should I write code in the backend instead of the client side?",
        "markdown": "You may want to write your code in the backend in the following cases:\n\n*   When you don't want visitors to view or manipulate code containing sensitive information such as payment details or API keys. \n*   When you perform security checks or validations that expose private data such as emails and passwords. \n*   When you've set your collection permissions so that a particular role cannot access a collection, but you want visitors with that role to partially access the collection in some manner. In this case you can suppress permission checks using [`suppressAuth`](https://www.wix.com/code/reference/wix-data.html#WixDataOptions).\n\n[Learn more](https://support.wix.com/en/article/wix-code-security-considerations) about writing code in the backend." },
      { "title": "How do I get my store's order data?",
        "markdown": "You can get data about orders made in your store by querying the [Stores/Orders collection](https://support.wix.com/en/article/wix-code-wix-stores-orders-collection-fields) using the [wix-data](https://www.wix.com/code/reference/wix-data.html) API." },
      { "title": "How do I react to events that happen in my store?",
        "markdown": "There are several [events](https://www.wix.com/code/reference/wix-stores-backend.Events.html) that get fired when a user is interacting with your site's store. You can write backend event handlers to perform actions when these events occur." } ] }