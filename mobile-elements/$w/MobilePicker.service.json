{ "name": "MobilePicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.MobileElement",
      "$w.LabelMixin",
      "$w.ValueMixin",
      "$w.MobileHiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.MobilePressableMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "MobilePicker.js" },
  "docs":
    { "summary": "A picker for selecting items on a mobile app.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          "A picker for selecting items on a mobile app." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.MobilePicker.Option" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 36,
              "filename": "MobilePicker.js" },
            { "lineno": 59,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the picker's options.",
            "description":
              [ "Setting the `options` property sets all the options available to a mobile app user.",
                "",
                "Getting the `options` property returns the current list of options available to a mobile app user.",
                "",
                "You cannot modify the data array in-place. To add, change, or remove individual mobile picker options:",
                "1. Store the value of the `options` property in a variable.",
                "2. Make changes to the options array.",
                "3. Reset the `options` property with the modified array." ],
            "links": [],
            "examples":
              [ { "title": "Get the picker's options",
                  "body":
                    [ "let myPickerOptions = $w('#mobilePicker1').options; // [{ value: 'L', label: 'Large', description: 'Adult Large', selected: false, enabled: true }, { value: 'XL', label: 'Extra Large', description: 'Adult Extra Large', selected: false, enabled: true }]" ],
                  "extra":
                    {  } },
                { "title": "Set the picker's options",
                  "body":
                    [ "$w('#mobilePicker1').options = [",
                      "  { value: 'S', label: 'Small', description: 'Adult Small', selected: false, enabled: true },",
                      "  { value: 'M', label: 'Medium', description: 'Adult Medium', selected: false, enabled: true },",
                      "  { value: 'L', label: 'Large', description: 'Adult Large', selected: false, enabled: true },",
                      "  { value: 'XL', label: 'Extra Large', description: 'Adult Extra Large', selected: false, enabled: true }",
                      "];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "optionsDialogSubtitle",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 119,
              "filename": "MobilePicker.js" },
            { "lineno": 133,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the option dialog's subtitle.",
            "links": [],
            "examples":
              [ { "title": "Get the option dialog's subtitle",
                  "body":
                    [ "let myOptionsDialogSubtitle = $w('#mobilePicker1').optionsDialogSubtitle; // 'Select all that apply:'" ],
                  "extra":
                    {  } },
                { "title": "Set the option dialog's subtitle",
                  "body":
                    [ "$w('#mobilePicker1').optionsDialogSubtitle = 'Select all that apply:';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "optionsDialogTitle",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 99,
              "filename": "MobilePicker.js" },
            { "lineno": 113,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the option dialog's title.",
            "links": [],
            "examples":
              [ { "title": "Get the option dialog's title",
                  "body":
                    [ "let myOptionsDialogSubtitle = $w('#mobilePicker1').optionsDialogTitle; // 'Additional Toppings'" ],
                  "extra":
                    {  } },
                { "title": "Set the option dialog's title",
                  "body":
                    [ "$w('#mobilePicker1').optionsDialogTitle = 'Additional Toppings';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectedIndices",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 139,
              "filename": "MobilePicker.js" },
            { "lineno": 157,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the indicies of the selected options.",
            "description":
              [ "Setting the `selectedIndices` property sets the options at each specified index to be a selected option.",
                "To reset the mobile picker to have no option selected, set the `selectedIndices` property to an empty array, null, or `undefined`.",
                "",
                "Getting the `selectedIndices` property returns an array of the indices of all selected options. If no value is selected, the `selectedIndices` property returns an empty array." ],
            "links": [],
            "examples":
              [ { "title": "Get the indices of the selected options",
                  "body":
                    [ "let myselectedIndices = $w('#mobilePicker1').selectedIndices; // [0,2]" ],
                  "extra":
                    {  } },
                { "title": "Set the indices of the selected options",
                  "body":
                    [ "$w('#mobilePicker1').selectedIndices = [0,2];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "valid",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 164,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Indicates if the mobile picker element's value is valid.",
            "description":
              [ "The `valid` property indicates if a mobile picker element's value satisfies",
                " all conditions defined in the [`validations`](#validations) property to pass a validation check." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the element is valid",
                  "body":
                    [ "let isValid = $w(\"#myMobileElement\").valid; // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validateOnChange",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 213,
              "filename": "MobilePicker.js" },
            { "lineno": 228,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets whether to validate the mobile element when its value changes.",
            "description":
              [ "If `validateOnChange` is `true`, the mobile element will validate when its value changes.",
                "",
                " If `validateOnChange` is `false`, the mobile element won't validate when its value changes." ],
            "links": [],
            "examples":
              [ { "title": "Get whether to validate the mobile element on change",
                  "body":
                    [ "let validateElementOnChange = $w('#myMobileElement').validateOnChange; // false" ],
                  "extra":
                    {  } },
                { "title": "Set whether to validate the mobile element on change",
                  "body":
                    [ "$w('#myMobileElement').validateOnChange = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validateOnStart",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 234,
              "filename": "MobilePicker.js" },
            { "lineno": 248,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets whether to validate the mobile element when it is loaded.",
            "description":
              [ "If `validateOnStart` is `true`, the mobile element will validate when it is finished loading.",
                "",
                " If `validateOnStart` is `false`, the mobile element won't validate when it is finished loading." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validations",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.MobilePicker.ValidationObject" ] },
        "locations":
          [ { "lineno": 178,
              "filename": "MobilePicker.js" },
            { "lineno": 195,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the validations for mobile elements in a form.",
            "description":
              [ "Setting the `validations` property sets the validations for mobile elements in a form.",
                "",
                " Getting the `validations` property returns the current list of validation objects for mobile elements in a form.",
                "",
                " Each validation object contains a `validation` and a `message` property." ],
            "links": [],
            "examples":
              [ { "title": "Set the mobile element's validations",
                  "body":
                    [ "$w('#mobilePicker1').validations = [",
                      "  { validation: 'required', message: 'This field is Required!' },",
                      "  { validation: 'url', message: 'Not a valid URL.' }",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Get the mobile element's validations",
                  "body":
                    [ "let myValidations = $w('#mobilePicker1').validations; // [{ validation: 'required', message: 'This field is Required!' },{ validation: 'url', message: 'Not a valid URL.' }]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 66,
              "filename": "MobilePicker.js" },
            { "lineno": 93,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the value of the selected option.",
            "description":
              [ "Setting the `value` property sets the `options` property's value",
                " to be the selected option. You must set the `value`",
                " property to a value that exists in the [`options`](#options) list.",
                "",
                " To reset the mobile picker to have no options",
                " selected, set the `value` property to an empty string, `null` or `undefined`.",
                "",
                " Getting the `value` property returns the value of",
                " the currently selected option. If no value is selected, the",
                " `value` property returns an empty string.",
                "",
                " > **Notes:** ",
                " > + Changing a mobile picker's `value` in code does not trigger an `onChange` event.",
                " > + If multiple options are currently selected, the `value` property returns the first selection. To get all the selected options, use the [`selectedIndices`](#selectedIndices) property." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the selected option",
                  "body":
                    [ "let selectedOptionValues = $w('#mobilePicker1').value; // 'Large'" ],
                  "extra":
                    {  } },
                { "title": "Set the selected option by value",
                  "body":
                    [ "$w('#mobilePicker1').value = 'Large';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the mobile picker element's value changes." } ],
        "ret":
          { "type": "$w.MobilePicker",
            "doc": "The mobile picker element on which the event is now registered." },
        "locations":
          [ { "lineno": 254,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the mobile picker element's value\n is changed.",
            "description":
              [ "A mobile picker element receives a `change` event when a mobile app user changes the value",
                " in the mobile picker element.",
                "",
                " A `change` event is not triggered when you change the mobile picker element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check ",
                " any of the validation properties in the `onChange()` event handler. For example, ",
                " do not code an if statement that checks the `valid` property in the `onChange()` ",
                " because the property at this point contains values prior to the `onChange()`." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myMobileElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } },
                { "title": "Enable the submit button when an option is selected",
                  "body":
                    [ "$w('#submitButton').disable();",
                      "$w('mobilePicker1').onChange( (event) => {",
                      "  if ($w('#mobilePicker1').value) {",
                      "    $w('#submitButton').enable();",
                      "  }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Option",
        "locations":
          [ { "lineno": 26,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "summary": "An object used by the `options` property that contains the attributes of a mobile picker item.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The value of the mobile picker option. This is what you use in code and is what is stored in your collections. Mandatory if `label` is not specified.",
              "optional": true },
            { "name": "label",
              "type": "string",
              "doc": "The label of the mobile picker option. This is what a mobile app user sees.  Mandatory if `value` is not specified.",
              "optional": true },
            { "name": "description",
              "type": "string",
              "doc": "The description of the mobile picker option. This is what a mobile app user sees.",
              "optional": true },
            { "name": "selected",
              "type": "boolean",
              "doc": "Whether the mobile picker option is selected.",
              "optional": true },
            { "name": "enabled",
              "type": "boolean",
              "doc": "Whether the mobile picker option is enabled.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ValidationObject",
        "locations":
          [ { "lineno": 201,
              "filename": "MobilePicker.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "validation",
              "type": "string",
              "doc": "The validation type. \nSupported values:\n+ `'required'`\n+ `'url'`\n+ `'numeric'`\n+ `'wholeNumber'`\n+ `'decimalNumber'`" },
            { "name": "message",
              "type": "string",
              "doc": "The validation message." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }