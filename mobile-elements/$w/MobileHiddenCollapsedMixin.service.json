{ "name": "MobileHiddenCollapsedMixin",
  "memberOf": "$w",
  "mixes":
    [ "$w.MobileHiddenMixin",
      "$w.CollapsedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "MobileHiddenCollapsedMixin.js" },
  "docs":
    { "summary": "Provides functionality for all mobile elements that can be hidden or collapsed.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          "",
          "The `MobileHiddenCollapsedMixin` [mixin](https://support.wix.com/en/article/velo-about-mixins) provides properties and functions that elements can inherit and use.",
          " ",
          " > **Note:** Mixins are not elements. You cannot add mixins to the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "collapsed",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 51,
              "filename": "MobileHiddenCollapsedMixin.js" } ],
        "docs":
          { "summary": "Indicates if the element is collapsed or expanded.",
            "description":
              [ "If `collapsed` is `true`, the element is not displayed on the app under",
                " any circumstances. Unlike a",
                " `hidden` element, a collapsed element doesn't take up any",
                " space on the app. ",
                "",
                " If `collapsed` is `false`, the element _may_ be displayed on the app.",
                "",
                " However, an expanded element (an element whose `collapsed` property is",
                " `false`) is still not displayed if:",
                "",
                " + It is `hidden`.",
                " + Its parent element is hidden or collapsed.",
                "",
                " Even if the element is not displayed due to the conditions",
                " mentioned above, if its `collapsed` property is `false`, it's",
                " displayed when the conditions no longer apply.",
                "",
                " To determine if the element is actually visible, use the",
                " [`isVisible`](#isVisible) property.",
                "",
                " To set the `collapsed` property on an element, use the element's",
                " [`collapse()`](#collapse) and [`expand()`](#expand) functions.",
                "",
                " If you select **Collapsed on load** in the element's Properties panel",
                " in the Editor, the `collapsed` property is set to `true` when the app loads." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's collapsed status",
                  "body":
                    [ "let isCollapsed = $w(\"#myMobileElement\").collapsed; // false" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's collapsed state",
                  "body":
                    [ "if( $w(\"#myMobileElement\").collapsed ) {",
                      "  $w(\"#myMobileElement\").expand();",
                      "}",
                      "else {",
                      "  $w(\"#myMobileElement\").collapse();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "collapse",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `collapsed` property has been set to `true`." },
        "locations":
          [ { "lineno": 27,
              "filename": "MobileHiddenCollapsedMixin.js" } ],
        "docs":
          { "summary": "Collapses the element and sets its `collapsed` property to `true`.",
            "description":
              [ "The `collapse()` function returns a Promise that is resolved when the",
                " element's `collapsed` property has been set to `true`.",
                "",
                " To learn about the behavior of a collapsed element,",
                " see the `collapsed` property.",
                "",
                " You can also collapse an element",
                " when the app loads by using the Properties panel in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Collapse an element",
                  "body":
                    [ "$w(\"#myMobileElement\").collapse();" ],
                  "extra":
                    {  } },
                { "title": "Collapse an element and log a message when done",
                  "body":
                    [ "$w(\"#myMobileElement\").collapse()",
                      "  .then( () => {",
                      "    console.log(\"Done with collapse\");",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's collapsed state",
                  "body":
                    [ "if( $w(\"#myMobileElement\").collapsed ) {",
                      "  $w(\"#myMobileElement\").expand();",
                      "}",
                      "else {",
                      "  $w(\"#myMobileElement\").collapse();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "expand",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `collapsed` property has been set to `false`." },
        "locations":
          [ { "lineno": 92,
              "filename": "MobileHiddenCollapsedMixin.js" } ],
        "docs":
          { "summary": "Expands the element and sets its `collapsed` property to `false`.",
            "description":
              [ "The `expand()` function returns a Promise that is resolved when the",
                " element's `collapsed` property has been set to `false`.",
                "",
                " To learn about the behavior of an expanded element,",
                " see the `collapsed` property." ],
            "links": [],
            "examples":
              [ { "title": "Expand an element",
                  "body":
                    [ "$w(\"#myMobileElement\").expand();" ],
                  "extra":
                    {  } },
                { "title": "Expand an element and log a message when done",
                  "body":
                    [ "$w(\"#myMobileElement\").expand()",
                      "  .then( () => {",
                      "    console.log(\"Done with expand\");",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's collapsed state",
                  "body":
                    [ "if( $w(\"#myMobileElement\").collapsed ) {",
                      "  $w(\"#myMobileElement\").expand();",
                      "}",
                      "else {",
                      "  $w(\"#myMobileElement\").collapse();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }