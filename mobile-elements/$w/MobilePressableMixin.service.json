{ "name": "MobilePressableMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "MobilePressableMixin.js" },
  "docs":
    { "summary": "Provides functionality for elements on a mobile app that can be pressed.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          "` MobilePressableMixin` provides event handlers that run when an element on a mobile app is pressed or long-pressed.",
          "",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          " $w(\"#PressableMixin\").onPress( (event) => {",
          "    let targetId = event.target.id;",
          "   }",
          " );",
          " ```",
          "",
          " Instead, you can code the following if `myMobileButton` is an element that can be pressed and  ",
          " \"mixes in\" `PressableMixin`. ",
          "",
          "  ```javascript",
          " $w(\"#myMobileButton\").onPress( (event) => {",
          "    let targetId = event.target.id;",
          "   }",
          " );",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "onLongPress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or the function expression to run when an element on a mobile app is pressed for more than 500 milliseconds." } ],
        "ret":
          { "type": "$w.MobileElement",
            "doc": "The mobile element to which the event handler was added." },
        "locations":
          [ { "lineno": 75,
              "filename": "MobilePressableMixin.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element is pressed for more than 500 milliseconds.",
            "description":
              [ "A mobile element receives an `event` when a mobile app user presses on the element for more than 500 milliseconds." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the element that was long-pressed",
                  "body":
                    [ "$w('#mobileButton1').onLongPress( (event) => {",
                      "  let targetId = event.target.id;  // 'mobileButton1'",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "longPress" } },
      { "name": "onPress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or the function expression to run when an element on a mobile app is pressed." } ],
        "ret":
          { "type": "$w.MobileElement",
            "doc": "The mobile element to which the event handler was added." },
        "locations":
          [ { "lineno": 61,
              "filename": "MobilePressableMixin.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element on a mobile app is pressed.",
            "description":
              [ "A mobile element receives an `event` when a mobile app user presses on the element and releases." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the mobile button when the button is pressed",
                  "body":
                    [ "$w('#mobileButton1').onPress( (event) => {",
                      "  let targetId = event.target.id;  // 'mobileButton1'",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Change the mobile button's label when the button is pressed",
                  "body":
                    [ "$w('mobileButton1').onPress((event) => {",
                      "  $w('#mobileButton1').label = 'Order Now';",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "press" } },
      { "name": "onPressIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or the function expression to run when an element on a mobile app is pressed." } ],
        "ret":
          { "type": "$w.MobileElement",
            "doc": "The mobile element to which the event handler was added." },
        "locations":
          [ { "lineno": 88,
              "filename": "MobilePressableMixin.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs immediately when an element on a mobile app is pressed.",
            "description":
              [ "A mobile element receives an `event` immediately when a mobile app user presses on the element.",
                "The `onPressIn()` function runs before the `onPress()` and `onLongPress()` functions." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the mobile button immediately when the button is pressed",
                  "body":
                    [ "$w('#mobileButton1').onPressIn( (event) => {",
                      "  let targetId = event.target.id;  // 'mobileButton1'",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Change the mobile button's label immediately when the button is pressed",
                  "body":
                    [ "$w('mobileButton1').onPressIn((event) => {",
                      "  $w('#mobileButton1').label = 'Order Now';",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "pressIn" } },
      { "name": "onPressOut",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or the function expression to run when an element on a mobile app is released after being pressed." } ],
        "ret":
          { "type": "$w.MobileElement",
            "doc": "The mobile element to which the event handler was added." },
        "locations":
          [ { "lineno": 104,
              "filename": "MobilePressableMixin.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element on a mobile app is released after being pressed.",
            "description":
              [ "A mobile element receives an `event` when a mobile app user presses on the element and then releases." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the mobile button immediately when an element is released",
                  "body":
                    [ "$w('#mobileButton1').onPressOut( (event) => {",
                      "  let targetId = event.target.id;  // 'mobileButton1'",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Change the mobile button's label immediately when the button is released",
                  "body":
                    [ "$w('mobileButton1').onPressOut((event) => {",
                      "  $w('#mobileButton1').label = 'Order Now';",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "pressOut" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }