{ "name": "MobileFormElementMixin",
  "memberOf": "$w",
  "mixes":
    [ "$w.MobileElement",
      "$w.MobileValueMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "MobileFormElement.js" },
  "docs":
    { "summary": "Provides functionality for input elements on mobile apps.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          "",
          " The `MobileFormElement` [mixin](https://support.wix.com/en/article/velo-about-mixins) provides properties, functions, and event handlers that user input elements can inherit and use.",
          " ",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          "  $w(\"#MobileFormElementMixin\").onPressIn( (event) => {",
          "    let targetId = event.target.id; ",
          "  });",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that ",
          " \"mixes in\" `MobileFormElementMixin`. ",
          "",
          "  ```javascript",
          "  $w(\"#myElement\").onPressIn( (event) => {",
          "    let targetId = event.target.id; ",
          "  });",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "validateOnBlur",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 48,
              "filename": "MobileFormElement.js" },
            { "lineno": 66,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "summary": "Sets or gets whether to validate the mobile element when it loses focus.",
            "description":
              [ "An element loses focus (blurs) through user actions, such as pressing a button or another input element.  ",
                "",
                " If `validateOnBlur` is `true`, the mobile element will validate when it loses focus.",
                "",
                " If `validateOnBlur` is `false`, the mobile element won't validate when it loses focus." ],
            "links": [],
            "examples":
              [ { "title": "Get whether to validate the mobile element on blur",
                  "body":
                    [ "let validateElementOnBlur = $w('#myMobileElement').validateOnBlur; // false" ],
                  "extra":
                    {  } },
                { "title": "Set whether to validate the mobile element on blur",
                  "body":
                    [ "$w('#myMobileElement').validateOnBlur = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }