{ "name": "MobileFormElementMixin",
  "memberOf": "$w",
  "mixes":
    [ "$w.MobileElement",
      "$w.ValueMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "MobileFormElement.js" },
  "docs":
    { "summary": "Provides functionality for input elements on mobile apps.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          "",
          " The `MobileFormElement` [mixin](https://support.wix.com/en/article/velo-about-mixins) provides properties, functions, and event handlers that user input elements can inherit and use.",
          " ",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          "  $w(\"#MobileFormElementMixin\").onPressIn( (event) => {",
          "    let targetId = event.target.id; ",
          "  });",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that ",
          " \"mixes in\" `MobileFormElementMixin`. ",
          "",
          "  ```javascript",
          "  $w(\"#myElement\").onPressIn( (event) => {",
          "    let targetId = event.target.id; ",
          "  });",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "valid",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 47,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "summary": "Indicates if an input element's value is valid.",
            "description":
              [ "The `valid` property indicates if an input element's value satisfies",
                " all conditions defined in the [`validations`](#validations) property to pass a validation check." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the element is valid",
                  "body":
                    [ "let isValid = $w(\"#myMobileElement\").valid; // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validateOnBlur",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 97,
              "filename": "MobileFormElement.js" },
            { "lineno": 114,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "summary": "Sets or gets whether to validate the mobile element when it loses focus.",
            "description":
              [ "An element loses focus (blurs) through user actions, such as pressing a button or another input element.  ",
                "",
                " If `validateOnBlur` is `true`, the mobile element will validate when it loses focus.",
                "",
                " If `validateOnBlur` is `false`, the mobile element won't validate when it loses focus." ],
            "links": [],
            "examples":
              [ { "title": "Get whether to validate the mobile element on blur",
                  "body":
                    [ "let validateElementOnBlur = $w('#myMobileElement').validateOnBlur; // false" ],
                  "extra":
                    {  } },
                { "title": "Set whether to validate the mobile element on blur",
                  "body":
                    [ "$w('#myMobileElement').validateOnBlur = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validateOnChange",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 120,
              "filename": "MobileFormElement.js" },
            { "lineno": 135,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "summary": "Sets or gets whether to validate the mobile element when its value changes.",
            "description":
              [ "If `validateOnChange` is `true`, the mobile element will validate when its value changes.",
                "",
                " If `validateOnChange` is `false`, the mobile element won't validate when its value changes." ],
            "links": [],
            "examples":
              [ { "title": "Get whether to validate the mobile element on change",
                  "body":
                    [ "let validateElementOnChange = $w('#myMobileElement').validateOnChange; // false" ],
                  "extra":
                    {  } },
                { "title": "Set whether to validate the mobile element on change",
                  "body":
                    [ "$w('#myMobileElement').validateOnChange = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validateOnStart",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 141,
              "filename": "MobileFormElement.js" },
            { "lineno": 155,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "summary": "Sets or gets whether to validate the mobile element when it is loaded.",
            "description":
              [ "If `validateOnStart` is `true`, the mobile element will validate when it is finished loading.",
                "",
                " If `validateOnStart` is `false`, the mobile element won't validate when it is finished loading." ],
            "links": [],
            "examples":
              [ { "title": "Get whether to validate the mobile element when it is loaded",
                  "body":
                    [ "let validateElementOnStart = $w('#myMobileElement').validateOnStart; // false" ],
                  "extra":
                    {  } },
                { "title": "Set whether to validate the mobile element when it is loaded",
                  "body":
                    [ "$w('#myMobileElement').validateOnStart = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validations",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.MobileFormElementMixin.Validation" ] },
        "locations":
          [ { "lineno": 61,
              "filename": "MobileFormElement.js" },
            { "lineno": 78,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "summary": "Sets or gets the validations for mobile elements in a form.",
            "description":
              [ "Setting the `validations` property sets the validations for mobile elements in a form.",
                "",
                " Getting the `validations` property returns the current list of validation objects for mobile elements in a form.",
                "",
                " Each validation object contains a `validationType` and a validation `message`." ],
            "links": [],
            "examples":
              [ { "title": "Set the mobile element's validations",
                  "body":
                    [ "$w('#mobileTextInput1').validations = [",
                      "  { validationType: 'required', message: 'This field is required.' },",
                      "  { validationType: 'url', message: 'Not a valid URL.' }",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Get the mobile element's validations",
                  "body":
                    [ "let myMobileTextInputValidation = $w('#mobileTextInput1').validations; // [{ validationType: 'required', message: 'This field is required.' }, { validationType: 'url', message: 'Not a valid URL.' }]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.MobileElement",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 161,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "A mobile element receives a `change` event when a mobile app user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check ",
                " any of the validation properties in the `onChange()` event handler. For example, ",
                " do not code an `if` statement that checks the `valid` property in the `onChange()` event handler,",
                " because the property at this point contains values prior to validation." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myMobileElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Validation",
        "locations":
          [ { "lineno": 84,
              "filename": "MobileFormElement.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "validationType",
              "type": "string",
              "doc": "The validation type. \nSupported values:\n+ 'required'\n+ 'url'\n+ 'numeric'\n+ 'wholeNumber'\n+ 'decimalNumber'" },
            { "name": "message",
              "type": "string",
              "doc": "The validation message." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }