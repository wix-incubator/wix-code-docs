{ "name": "MobileHiddenMixin",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "MobileHiddenMixin.js" },
  "docs":
    { "summary": "Provides functionality for mobile elements that can be hidden.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          " To learn about the behavior of a hidden element,",
          " see the [`hidden`](#hidden) property.",
          "",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          " let isHidden = $w(\"#MobileHiddenMixin\").hidden;",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that ",
          " \"mixes in\" `MobileHiddenMixin`. ",
          "",
          " ```javascript",
          " let isHidden = $w(\"#myElement\").hidden;",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "hidden",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 82,
              "filename": "MobileHiddenMixin.js" } ],
        "docs":
          { "summary": "Indicates if the element is visible or hidden.",
            "description":
              [ "If `hidden` is `true`, the element is not displayed on the app under",
                " any circumstances. Unlike a",
                " [`collapsed`]($w.MobileHiddenCollapsedMixin.html#collapsed) element, a hidden element continues to",
                " take up the same space on the app as it did when it was visible.",
                "",
                " If `hidden` is `false`, the element _may_ be displayed on the app.",
                "",
                " However, an element whose `hidden` property is `false` is still not",
                " displayed if:",
                "",
                " + It is [collapsed]($w.MobileHiddenCollapsedMixin.html#collapsed).",
                " + Its [parent element]($w.MobileElement.html#parent) is hidden or collapsed.",
                "",
                " Even if the element is not displayed due to the conditions",
                " mentioned above, if its `hidden` property is set to `false`, it's",
                " displayed when the conditions no longer apply.",
                "",
                " To determine if the element is actually visible, use the",
                " [`isVisible`](#isVisible) property.",
                "",
                " To set the `hidden` property on an element, use the element's",
                " [`hide()`](#hide) or [`show()`](#show) functions.",
                "",
                " If you select **Hidden on load** in the Properties panel",
                " in the Editor, the `hidden` property is set to `true` when the app loads.",
                "",
                " > **Note:** An element's `hidden` property is not the same as its",
                "  [isVisible](#isVisible) property. The `hidden` property",
                "  indicates whether the element _should_ be displayed, while `isVisible`",
                "  indicates if it is actually displayed." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's hidden status",
                  "body":
                    [ "let isHidden = $w(\"#myMobileElement\").hidden;  // false" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's hidden state",
                  "body":
                    [ "if( $w(\"#myMobileElement\").hidden ) {",
                      "  $w(\"#myMobileElement\").show();",
                      "}",
                      "else {",
                      "  $w(\"#myMobileElement\").hide();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isVisible",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 127,
              "filename": "MobileHiddenMixin.js" } ],
        "docs":
          { "summary": "Indicates if the element is actually visible.",
            "description":
              [ "If `isVisible` is `true`, the element is displayed on the app.",
                "",
                " If `isVisible` is `false`, the element is not displayed on the app.",
                "",
                " The value of the `isVisible` property is calculated based on the",
                " [`hidden`](#hidden) and [`collapsed`](#collapsed) properties of the element and all of its ancestors. ",
                " `isVisible` is `true` only the element is displayed on the app. ",
                " This means that for the element and its ancestors, `hidden` and ",
                " `collapsed` are `false`.",
                "",
                "> **Notes:** ",
                "> + An element's `isVisible` property is not the same as its",
                ">   [hidden](#hidden) property. The `isVisible` property",
                ">   indicates whether the element is actually displayed, while `hidden`",
                ">   indicates if it _should_ be displayed.",
                ">",
                ">",
                "> + The `isVisible` property of an element remains `true` even if",
                ">   another element completely covers it so that a user cannot see it.",
                ">" ],
            "links": [],
            "examples":
              [ { "title": "Get whether an element is visible",
                  "body":
                    [ "let isVisible = $w(\"#myMobileElement\").isVisible;  // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "hide",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `hidden` property has been set to `true`." },
        "locations":
          [ { "lineno": 42,
              "filename": "MobileHiddenMixin.js" } ],
        "docs":
          { "summary": "Hides the element and sets its `hidden` property\n to `true`.",
            "description":
              [ "The `hide()` function hides the element and returns a Promise that is",
                " resolved when the effect is complete and the element's [`hidden`](#hidden)",
                " property has been set to `true`.",
                "",
                " To learn about the behavior of a hidden element,",
                " see the [`hidden`](#hidden) property.",
                "",
                " You can also hide an element",
                " when the app loads by using the Properties panel in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Hide an element",
                  "body":
                    [ "$w(\"#myMobileElement\").hide();" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's hidden state",
                  "body":
                    [ "if( $w(\"#myMobileElement\").hidden ) {",
                      "  $w(\"#myMobileElement\").show();",
                      "}",
                      "else {",
                      "  $w(\"#myMobileElement\").hide();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "show",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `hidden` property has been set to `false`." },
        "locations":
          [ { "lineno": 64,
              "filename": "MobileHiddenMixin.js" } ],
        "docs":
          { "summary": "Shows the element and sets its `hidden` property\n to `false`.",
            "description":
              [ "The `show()` function shows the element and returns a Promise that is",
                " resolved when the effect is complete and the element's [`hidden`](#hidden)",
                " property has been set to `false`.",
                "",
                "> **Note:** Calling `show()` will change the `hidden` property of the element to `false`." ],
            "links": [],
            "examples":
              [ { "title": "Show an element",
                  "body":
                    [ "$w(\"#myMobileElement\").show();" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's hidden state",
                  "body":
                    [ "if( $w(\"#myMobileElement\").hidden ) {",
                      "  $w(\"#myMobileElement\").show();",
                      "}",
                      "else {",
                      "  $w(\"#myMobileElement\").hide();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }