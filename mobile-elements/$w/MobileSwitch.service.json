{ "name": "MobileSwitch",
  "memberOf": "$w",
  "mixes":
    [ "$w.MobileElement",
      "$w.MobileDisabledMixin",
      "$w.MobileHiddenCollapsedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "MobileSwitch.js" },
  "docs":
    { "summary": "A switch used for a single binary choice on a mobile app.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          "A mobile [Switch](https://support.wix.com/en/article/adding-and-setting-up-a-switch-element) is used for a single binary choice on a mobile app." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 27,
              "filename": "MobileSwitch.js" },
            { "lineno": 41,
              "filename": "MobileSwitch.js" } ],
        "docs":
          { "summary": "Sets or gets the value of the switch state.",
            "description":
              [ "Setting the `value` property to `true` toggles the switch to the on position. Setting it to `false` toggles the switch to the off position.",
                "",
                " Getting the `value` property returns `true` when the switch is on, and `false` when the switch is off." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the switch state",
                  "body":
                    [ "let switchValue = $w('#mobileSwitch1').value; // true" ],
                  "extra":
                    {  } },
                { "title": "Set the value of the switch state",
                  "body":
                    [ "$w('#mobileSwitch1').value = false;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 47,
              "filename": "MobileSwitch.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onChange()`",
                " because the property at this point contains values prior to the `onChange()`." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }