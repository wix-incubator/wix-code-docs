{ "name": "GroupsQueryBuilder",
  "memberOf": "wix-groups-backend.Groups",
  "mixes": [],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 244,
      "filename": "groups.js" },
  "docs":
    { "summary": "Contains functionality for refining a Groups query.",
      "description":
        [ "The `GroupsQueryBuilder` functions enable you to run, sort, filter, and control",
          "which results a query returns.",
          "",
          "Typically, you build a query using the [`queryGroups()`](wix-groups-backend/groups/querygroups) function,",
          "refine the query by chaining `GroupsQueryBuilder` functions, and then execute the",
          "query by chaining the [`find()`](#find) function.",
          "",
          "For example, the following code returns the first 5 groups with the name 'Parents', and sorts them by created date in ascending order.",
          "",
          "```javascript",
          "import { groups } from 'wix-groups-backend';",
          "",
          "groups.queryGroups()",
          " .eq(\"name\", \"Parents\")",
          " .ascending(\"_createdDate\")",
          " .limit(5)",
          " .find()",
          " .then( (results) => {",
          "   console.log(results.items);",
          " });",
          "```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `_createdDate`\n+ `name`\n+ `memberCount`\n+ `lastActivityDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 489,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `GroupsQueryBuilder` to sort in ascending order of",
                "the specified properties. If you specify more than one property,",
                "`ascending()` sorts the results in ascending order by each property in the",
                "order they are listed.",
                "",
                "You can sort the following types:",
                "",
                "+ Number: Sorts numerically.",
                "+ Date: Sorts by date and time.",
                "+ String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                "",
                "If a property contains a number as a String, that value will be sorted",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an `ascending` sort to a query",
                  "body":
                    [ "const query = groups.queryGroups().ascending(\"name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `ascending` sort, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .ascending(\"name\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "contains",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported property:\n\n- `name`" },
            { "name": "value",
              "type": "string",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 356,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `GroupsQueryBuilder` to only",
                "match items where the value of the specified property contains the specified string.",
                "Matching with `contains()` is not case sensitive, so `\"TEXT\"` does contain `\"text\"`.",
                "",
                "You can only use `contains()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a `contains` filter to a query",
                  "body":
                    [ "const query = groups.queryGroups().contains(\"name\", \"art\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `contains` filter, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .contains(\"name\", \"art\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `_createdDate`\n+ `name`\n+ `memberCount`\n+ `lastActivityDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 519,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `GroupsQueryBuilder` to sort in descending order of",
                "the specified properties. If you specify more than one property,",
                "`descending()` sorts the results in descending order by each property in the",
                "order they are listed.",
                "",
                "You can sort the following types:",
                "",
                "+ Number: Sorts numerically.",
                "+ Date: Sorts by date and time.",
                "+ String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                "",
                "If a property contains a number as a String, that value will be sorted",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add a `descending` sort to a query",
                  "body":
                    [ "const query = groups.queryGroups().descending(\"name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `descending` sort, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .descending(\"name\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "endsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported property:\n\n- `name`" },
            { "name": "value",
              "type": "string",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 335,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `GroupsQueryBuilder` to only",
                "match items where the value of the specified property ends with a specified string.",
                "Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends with `\"text\"`.",
                "",
                "You can only use `endsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a `endsWith` filter to a query",
                  "body":
                    [ "const query = groups.queryGroups().endsWith(\"name\", \"s\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `endsWith` filter, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .endsWith(\"name\", \"s\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`. \n\nSupported property:\n+ `name`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 270,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `GroupsQueryBuilder` to only",
                "match items where the value of the specified property equals the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "const query = groups.queryGroups().eq(\"name\", \"Parents\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .eq(\"name\", \"Parent Group\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-groups-backend.Options",
              "doc": "Authorization options.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-groups-backend.Groups.GroupsQueryResult" ] },
            "doc": "Fulfilled - The results of a contacts query, containing the retrieved items.\nWhen you execute a query with the [`find()`](wix-groups-backend.GroupsQueryBuilder.html#find)\nfunction, it returns a Promise that resolves to a `GroupsQueryResult` object.\nThis object contains the items that match the query, information about the\nquery itself, and functions for paging through the query results." },
        "locations":
          [ { "lineno": 587,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Returns the items that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                "by the query and some information about the results. The Promise is",
                "rejected if `find()` is called with incorrect permissions or if any of the",
                "functions used to refine the query are invalid." ],
            "links": [],
            "examples":
              [ { "title": "Run a query with no filters",
                  "body":
                    [ "const queryResults = groups.queryGroups().find();" ],
                  "extra":
                    {  } },
                { "title": "Perform a `find` on a query",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .find({",
                      "      suppressAuth: true",
                      "    })",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`. \n\nSupported property:\n+ `name`" },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 377,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains any of the specified values.",
            "description":
              [ "The `hasSome()` function refines a `GroupsQueryBuilder` to only",
                "match items where any of the values of the array of the specified property equal any of",
                "the specified values.",
                "",
                "Matching with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a hasSome filter to a query",
                  "body":
                    [ "const query = groups.queryGroups().hasSome(\"name\", [\"Parents\", \"Friends\"]);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a hasSome filter, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .hasSome(\"name\", [\"Parents\", \"Friends\"])",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "string",
              "doc": "The number of items to return, which is also the [`pageSize`](wix-groups-backend.GroupsQueryResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 549,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                "page. Only one page of results is retrieved at a time. The [`next()`](wix-groups-backend.GroupsQueryResult.html#next)",
                "and [`prev()`](wix-groups-backend.GroupsQueryResult.html#prev) functions are used to",
                "navigate the pages of a query result.",
                "",
                "By default, `limit` is set to `50`.",
                "",
                "The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a `limit` to a query",
                  "body":
                    [ "const query = groups.queryGroups().limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `limit`, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .limit(10)",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`. \n\nSupported property:\n+ `name`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 292,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `GroupsQueryBuilder` to only",
                "match items where the value of the specified property does not equal the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a query",
                  "body":
                    [ "const query = groups.queryGroups().ne(\"name\", \"Parents\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .ne(\"name\", \"Parent Group\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
              "doc": "A query to add to the initial query as an `or` condition." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 449,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Adds an `or` condition to the query.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `GroupsQueryBuilder`. A query",
                "with an `or` returns all the items that match the query as defined up to",
                "the `or` function, the items that match the query passed to the `or`",
                "function, and the items that match both.",
                "",
                "The `or()` function is designed to work with 2 or more queries.",
                "If you use it on its own, it will return all the items that meet the query criteria." ],
            "links": [],
            "examples":
              [ { "title": "Add an `or` filter to a query",
                  "body":
                    [ "const query = query1.or(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `or` filter, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .startsWith(\"name\", \"S\")",
                      "    .or(groups.queryGroups()",
                      "      .endsWith(\"name\", \"g\"))",
                      "    .find({suppressAuth: true})",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "string",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 567,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The number of items to skip in the query results before returning the results.",
                "",
                "The `skip()` function defines the number of results to skip in the query",
                "results before returning new query results.",
                "",
                "For example, if you query a collection and 50 items match your query, but",
                "you set `skip` to 10, the results returned will skip the first 10 items",
                "that match and return the 11th through 50th items.",
                "",
                "By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "const query = groups.queryGroups().skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .skip(10)",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported property:\n\n- `name`" },
            { "name": "value",
              "type": "string",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-groups-backend.Groups.GroupsQueryBuilder",
            "doc": "A `GroupsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 314,
              "filename": "groups.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `GroupsQueryBuilder` to only",
                "match items where the value of the specified property starts with a specified string.",
                "Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts with `\"text\"`.",
                "",
                "You can only use `startsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a `startsWith` filter to a query",
                  "body":
                    [ "const query = groups.queryGroups().startsWith(\"name\", \"T\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `startsWith` filter, and run it",
                  "body":
                    [ "import { groups } from 'wix-groups-backend';",
                      "",
                      "export function myQueryGroupsFunction() {",
                      "",
                      "  return groups.queryGroups()",
                      "    .startsWith(\"name\", \"T\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const totalPages = results.totalPages;",
                      "        const totalCount = results.totalCount;",
                      "        const currentPage = results.currentPage();",
                      "        const next = results.next();",
                      "        const previous = results.prev();",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }