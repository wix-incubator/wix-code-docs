{ "name": "Authentication",
  "memberOf": "wix-members-frontend",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 52,
      "filename": "index.js" },
  "docs":
    { "summary": "The Authentication API contains functionality for authenticating members from frontend code.",
      "description":
        [ "To use the Authentication API, import `{authentication}` from the `wix-members-frontend` module:",
          "",
          "```javascript",
          "import { authentication } from 'wix-members-frontend';",
          "```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "applySessionToken",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "sessionToken",
              "type": "string",
              "doc": "Session token to apply." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the token is applied." },
        "locations":
          [ { "lineno": 1,
              "filename": "applySessionToken.js" } ],
        "docs":
          { "summary": "Logs the current member into the site using the specified session token.",
            "description":
              [ "You receive a session token from the following methods:",
                "",
                " - `approveByEmail()` ([Velo](https://dev.wix.com/docs/velo/apis/wix-members-backend/authentication/approve-by-email))",
                " - `approveByToken()` ([Velo](https://dev.wix.com/docs/velo/apis/wix-members-backend/authentication/approve-by-token))",
                " - `register()` ([SDK](https://dev.wix.com/docs/sdk/backend-modules/identity/authentication/register-v2) | [Velo](https://dev.wix.com/docs/velo/apis/wix-members-backend/authentication/register))",
                " - [`generateSessionToken()`](https://dev.wix.com/docs/velo/api-reference/wix-members-backend/authentication/generate-session-token)",
                " - `login()` ([SDK](https://dev.wix.com/docs/sdk/backend-modules/identity/authentication/login-v2) | [Velo](https://dev.wix.com/docs/velo/apis/wix-members-backend/authentication/login))",
                "",
                " Pass the returned session token to a site's page code and apply it by",
                " calling `applySessionToken()` to complete the process started by one of the",
                " above methods." ],
            "links": [],
            "examples":
              [ { "title": "Log in a member by applying a session token",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "authentication.applySessionToken(sessionToken)",
                      "  .then(() => {",
                      "    console.log('Member logged in.');",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Register a member using a 3rd party for approval",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.web.js *",
                      " *******************************/",
                      "import { Permissions, webMethod } from 'wix-web-module';",
                      "import { authentication } from 'wix-members-backend';",
                      "import { approveBy3rdParty } from 'backend/some-backend-module';",
                      "",
                      "export const doRegistration = webMethod(Permissions.Anyone, async (email, password, firstName, lastName) => {",
                      "",
                      "  // Call a 3rd-party API to check if the member is approved.",
                      "  const isApproved = await approveBy3rdParty(email, password);",
                      "",
                      "  // If member is approved by 3rd party, register and approve with the Wix site",
                      "  if (isApproved === true) {",
                      "    const options = {",
                      "      contactInfo: {",
                      "        firstName: firstName,",
                      "        lastName: lastName",
                      "      }",
                      "    };",
                      "",
                      "    // Register the member",
                      "    const registration = await authentication.register(email, password, options);",
                      "    const approvalToken = registration.approvalToken;",
                      "    console.log('Member is now registered with the site and pending approval');",
                      "",
                      "    // Approve the member and get session token, to be used to log in the member client-side",
                      "    const sessionToken = await authentication.approveByToken(approvalToken);",
                      "    console.log('Member is now approved, but not logged in');",
                      "",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "",
                      "  } else {",
                      "    // If not approved by the 3rd party",
                      "",
                      "    await authentication.blockByEmail(email);",
                      "    console.log('Member not approved by 3rd-party SSO. Blocking from Wix site.');",
                      "",
                      "    return { approved: false };",
                      "  }",
                      "});",
                      "",
                      "",
                      "/*************",
                      " * Page code *",
                      " *************/",
                      "import { authentication } from 'wix-members-frontend';",
                      "import { doRegistration } from 'backend/register.web';",
                      "",
                      "// ...",
                      "",
                      "$w('#register').onClick(() => {",
                      "",
                      "  const email = $w('#email').value;",
                      "  const password = $w('#password').value;",
                      "  const firstName = $w('#firstName').value;",
                      "  const lastName = $w('#lastName').value;",
                      "",
                      "  doRegistration(email, password, firstName, lastName)",
                      "    .then((result) => {",
                      "      if (result.approved) {",
                      "        // Log the member in",
                      "        console.log('Logging in...');",
                      "        authentication.applySessionToken(result.sessionToken);",
                      "      } else {",
                      "        console.log('Not approved!');",
                      "      }",
                      "    });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates a common 3rd-party approval flow.\nThe backend code calls a 3rd-party service that determines whether the member is approved.\nIf approved, `register()` is called from backend code,\nthe registration is approved,\nand a session token is returned to the calling page code.\nIf rejected, `blockByEmail()` is called." } },
                { "title": "Log a member in after 3rd-party authentication",
                  "body":
                    [ "/****************************",
                      " * Backend code - login.web.js *",
                      " ***************************/",
                      "",
                      "import { Permissions, webMethod } from 'wix-web-module';",
                      "import { authentication } from 'wix-members-backend';",
                      "import { authBy3rdParty } from 'backend/authentications';",
                      "",
                      "export const getLoginToken = webMethod(Permissions.Anyone, (email, password) => {",
                      "",
                      "  return authBy3rdParty(email, password)",
                      "    .then((isAuthenticated) => {",
                      "",
                      "      // If authenticated, generate and return the session token",
                      "      if (isAuthenticated) {",
                      "        return authentication.generateSessionToken(email)",
                      "          .then((sessionToken) => {",
                      "            return {",
                      "              sessionToken: sessionToken,",
                      "              approved: true",
                      "            };",
                      "          });",
                      "      }",
                      "",
                      "      // If not authenticated, return non-approval",
                      "      return { approved: false };",
                      "    });",
                      "});",
                      "",
                      "/*************",
                      " * Page code *",
                      " ************/",
                      "import { getLoginToken } from 'backend/login.web';",
                      "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "const email = $w('email').value;",
                      "const password = $w('password').value;",
                      "",
                      "// Call the backend function to get the session token",
                      "getLoginToken(email, password)",
                      "  .then((loginResult) => {",
                      "    if (loginResult.approved) {",
                      "      // If approved, log the member in using the returned session token",
                      "      authentication.applySessionToken(loginResult.sessionToken);",
                      "    } else {",
                      "      // If not approved, log a message",
                      "      console.log(\"Member not approved.\");",
                      "    }",
                      "  });" ],
                  "extra":
                    { "description": "This example contains a backend method that uses a 3rd-party service to authenticate a member.\nIf the authentication is successful,\na session token is returned to the page and used to log the member in." } },
                { "title": "Register a member, sending an email for confirmation",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.web.js *",
                      " *******************************/",
                      "",
                      "import { Permissions, webMethod } from 'wix-web-module';",
                      "import { authentication } from 'wix-members-backend';",
                      "import { triggeredEmails } from 'wix-crm-backend';",
                      "",
                      "export const doRegistration = webMethod(Permissions.Anyone, async (email, password, firstName, lastName) => {",
                      "  const registrationOptions = {",
                      "    contactInfo: {",
                      "      firstName: firstName,",
                      "      lastName: lastName",
                      "    }",
                      "  };",
                      "  const registration = await authentication.register(email, password, registrationOptions);",
                      "  console.log('Member is now registered with the site and pending approval');",
                      "",
                      "  const emailOptions = {",
                      "    variables: {",
                      "      name: firstName,",
                      "      verifyLink: `http://yourdomain.com/post-register?token=${registration.approvalToken}`",
                      "    }",
                      "  };",
                      "  triggeredEmails.emailMember('verifyRegistration', registration.member.id, emailOptions);",
                      "  console.log('Confirmation email sent');",
                      "});",
                      "",
                      "export const doApproval = webMethod(Permissions.Anyone, async (token) => {",
                      "  try {",
                      "    const sessionToken = await authentication.approveByToken(token);",
                      "    console.log('Member approved');",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "  } catch (error) {",
                      "    console.log('Member not approved');",
                      "    return {",
                      "      approved: false,",
                      "      reason: error",
                      "    };",
                      "  }",
                      "});",
                      "",
                      "/****************************",
                      " * Page code - registration *",
                      " ****************************/",
                      "import { doRegistration } from 'backend/register.web';",
                      "",
                      "// ...",
                      "",
                      "const email = $w('#email').value;",
                      "const password = $w('#password').value;",
                      "const firstName = $w('#firstName').value;",
                      "const lastName = $w('#lastName').value;",
                      "",
                      "doRegistration(email, password, firstName, lastName)",
                      "  .then(() => {",
                      "    console.log('Confirmation email sent.');",
                      "  });",
                      "",
                      "/*********************************",
                      " * Page code - post-registration *",
                      " *********************************/",
                      "import wixLocationFrontend from 'wix-location-frontend';",
                      "import { authentication } from 'wix-members-frontend';",
                      "import { doApproval } from 'backend/register.web';",
                      "",
                      "$w.onReady(async () => {",
                      "  const token = wixLocationFrontend.query.token;",
                      "",
                      "  const approval = await doApproval(token);",
                      "",
                      "  if (approval.approved === true) {",
                      "    authentication.applySessionToken(approval.sessionToken);",
                      "    console.log('Member approved & logged in');",
                      "  } else {",
                      "    console.log('Member not approved');",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates a common email verification flow.\nA member is initially registered but not yet approved.\nAt registration, a verification email is sent with a link to a verification page.\nWhen the member goes to the verification page,\nthe approval is granted and the member is logged into the site.\n\n The code is split between 3 locations:\n\n - A backend web module named **register.web.js**.\n - The page code for the page where members register.\n - The page code for the page where members confirm their registration." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "changePassword",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "newPassword",
              "type": "string",
              "doc": "New password the member wants to set. Minimum 6 characters." },
            { "name": "token",
              "type": "string",
              "doc": "Reset token received in the email triggered by `sendResetPasswordEmail()`." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the password is reset.\nRejected - Error message." },
        "locations":
          [ { "lineno": 2,
              "filename": "changePassword.js" } ],
        "docs":
          { "summary": "Changes the member's password to a new one, using a reset token.",
            "description":
              [ "<blockquote class=\"important\">",
                "",
                "__Important:__",
                "This method is in Developer Preview and is subject to change. ",
                "",
                "</blockquote>" ],
            "links": [],
            "examples":
              [ { "title": "Change the member's password using a reset token",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "authentication",
                      "  .changePassword(newPassword, token)",
                      "  .then(() => {",
                      "    console.log('Password changed successfully');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error('Error changing password:', error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "loggedIn",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "`true` if a member is logged in. Otherwise, `false`." },
        "locations":
          [ { "lineno": 1,
              "filename": "loggedIn.js" } ],
        "docs":
          { "summary": "Indicates whether the current site visitor is a logged-in member.",
            "description":
              [ "If a member is logged in, `loggedIn()` returns `true`.",
                "Otherwise, `loggedIn()` returns `false`." ],
            "links": [],
            "examples":
              [ { "title": "Check whether a member is logged in",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "const isLoggedIn = authentication.loggedIn();",
                      "",
                      "if (isLoggedIn) {",
                      "  console.log('Member is logged in');",
                      "} else {",
                      "  console.log('Member is not logged in');",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Check for a logged-in member before getting member details",
                  "body":
                    [ "import { authentication, currentMember } from 'wix-members-frontend';",
                      "",
                      "$w.onReady(async () => {",
                      "  const isLoggedIn = authentication.loggedIn();",
                      "",
                      "  if (isLoggedIn) {",
                      "    const loggedInMember = await currentMember.getMember()",
                      "    console.log('Member is logged in:', loggedInMember);",
                      "    const memberId = loggedInMember._id;",
                      "    const contactId = loggedInMember.contactId;",
                      "  } else {",
                      "    // Handle when member isn't logged in",
                      "  }",
                      "});" ],
                  "extra":
                    {  } },
                { "title": "Show a logout button if a member is logged in",
                  "body":
                    [ "/*****************************",
                      " * Page code - masterpage.js *",
                      " ****************************/",
                      "",
                      "import { authentication } from 'wix-members-frontend';",
                      "",
                      "$w.onReady(function () {",
                      "  const loggedIn = authentication.loggedIn();",
                      "",
                      "  if (loggedIn) {",
                      "    console.log('Logged in, showing the logout button');",
                      "    $w('#logout').show();",
                      "  }",
                      "",
                      "  authentication.onLogin(() => {",
                      "    console.log('Logged in, showing the logout button');",
                      "    $w('#logout').show();",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This code example runs on `masterpage.js` and relies on a logout button,\nwhich is hidden when the page loads.\n\nWhen the page loads, if `loggedIn()` returns `true`,\nthe logout button is displayed.\nAdditionally, if a member logs in after the page loads,\nthe button is displayed in response to the login event." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "login",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email address." },
            { "name": "password",
              "type": "string",
              "doc": "Member password." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the member is logged in.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "login.js" } ],
        "docs":
          { "summary": "Logs a registered member in with an email and password.",
            "description":
              [ "`login()` only works with existing members. To register a new member use ",
                " `register()` ([SDK](https://dev.wix.com/docs/sdk/backend-modules/identity/authentication/register-v2) | [Velo](https://dev.wix.com/docs/velo/apis/wix-members-backend/authentication/register)).",
                "",
                "> **Note:**",
                "> The frontend Members APIs aren't fully functional when previewing a site. View a published version of a site to see their complete functionality." ],
            "links": [],
            "examples":
              [ { "title": "Log a member in",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "authentication.login(email, password)",
                      "  .then(() => {",
                      "    console.log('Member is logged in');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Log a member in using data from input elements",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "$w('#login').onClick(async () => {",
                      "  const email = $w('#email').value;",
                      "  const password = $w('#password').value;",
                      "",
                      "  try {",
                      "    await authentication.login(email, password);",
                      "    console.log('Member is logged in');",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "logout",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "logout.js" } ],
        "docs":
          { "summary": "Logs the current member out of the site.",
            "description":
              [ "The `logout()` function logs the current member out of the site.",
                "",
                "> **Notes:**",
                ">",
                "> - The frontend Members APIs aren't fully functional when previewing a site. View a published version of a site to see their complete functionality.",
                ">",
                "> - The frontend Member APIs can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that's contained in or is called from the",
                ">   `onReady()` or any element event." ],
            "links": [],
            "examples":
              [ { "title": "Log the current member out",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "authentication.logout();" ],
                  "extra":
                    {  } },
                { "title": "Log the current member out when they click a button",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "$w('#logout').onClick(() => {",
                      "  authentication.logout();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onLogin",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "wix-members-frontend.Authentication.LoginHandler",
              "doc": "Method name or expression to run when a member logs in." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 6,
              "filename": "onLogin.js" } ],
        "docs":
          { "summary": "Sets the method that runs when a member logs in.",
            "description":
              [ "`onLogin()` runs when a member logs into a site.",
                "",
                "`onLogin` receives a `currentMember` object for the logged-in member,",
                "which contains the `CurrentMember` API methods",
                "you can use to retrieve the member's information.",
                "",
                "Usually, you want to call `onLogin()` in the **masterPage.js** file in the",
                "code editor so that `onLogin()` runs no matter which",
                "page a member uses to log in.",
                "",
                "> **Notes:**",
                ">",
                "> - The frontend Members APIs aren't fully functional when previewing a site. View a published version of a site to see their complete functionality.",
                ">",
                "> - The frontend Member APIs can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that's contained in or is called from the",
                ">   `onReady()` or any element event." ],
            "links": [],
            "examples":
              [ { "title": "Run code when a member logs in",
                  "body":
                    [ "import {authentication} from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "authentication.onLogin(async (member) => {",
                      "  const loggedInMember = await member.getMember();",
                      "  const memberId = loggedInMember._id;",
                      "  console.log(`Member ${memberId} logged in:`, loggedInMember);",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onLogout",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "wix-members-frontend.Authentication.LogoutHandler",
              "doc": "Method name or expression to run when a member logs out." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 5,
              "filename": "onLogout.js" } ],
        "docs":
          { "summary": "Sets the method that runs when a member logs out.",
            "description":
              [ "Use `onLogout()` for code you want to run after a member logs out",
                "from a site.",
                "",
                " Usually, you want to call `onLogout()` in the **masterPage.js** file in the",
                " code editor so that `onLogout()` runs no matter which",
                " page on a site a member uses to log out.",
                "",
                "> **Notes:**",
                ">",
                "> - The frontend Members APIs aren't fully functional when previewing a site. View a published version of a site to see their complete functionality.",
                ">",
                "> - The frontend Member APIs can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that's contained in or is called from the",
                ">   `onReady()` or any element event." ],
            "links": [],
            "examples":
              [ { "title": "Run code when a member logs out",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "authentication.onLogout(() => {",
                      "  console.log('Member logged out');",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "promptForgotPassword",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the form is submitted.\nRejected - Message that the dialog was canceled, user is already logged in, or another reason the password reset failed." },
        "locations":
          [ { "lineno": 1,
              "filename": "promptForgotPassword.js" } ],
        "docs":
          { "summary": "Prompts the current site visitor with a password reset modal.",
            "description":
              [ "`promptForgotPassword()` returns a Promise that resolves when",
                "the visitor submits the **Create New Password** form.",
                "",
                "If the visitor cancels the form without submitting it,",
                "the Promise is rejected.",
                "",
                "`promptForgotPassword()` can't be called before the page is ready.",
                "",
                "> **Notes:**",
                ">",
                "> - The frontend Members APIs aren't fully functional when previewing a site. View a published version of a site to see their complete functionality.",
                ">",
                "> - The frontend Member APIs can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that's contained in or is called from the",
                ">   `onReady()` or any element event.",
                ">",
                "> - If you `return` or `await` `promptForgotPassword()`",
                ">   when calling from `onReady()`, the page is prevented from loading.",
                ">   To handle the resolved promise, use `.then()` and `.catch()`." ],
            "links":
              [ "[promptLogin( )](#promptLogin)" ],
            "examples":
              [ { "title": "Prompt the visitor with a password reset",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "authentication.promptForgotPassword()",
                      "  .then(() => {",
                      "    console.log('Sending \"forgot password\" email');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "promptLogin",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-members-frontend.Authentication.LoginOptions",
              "doc": "The options that determine how the login dialog box appears.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the member is logged in.\nRejected - Message that the dialog was canceled, or any other reason the member failed to log in." },
        "locations":
          [ { "lineno": 15,
              "filename": "promptLogin.js" } ],
        "docs":
          { "summary": "Prompts the current visitor to log in as a site member.",
            "description":
              [ "`promptLogin()` returns a Promise that resolves",
                "when the login has completed.",
                "",
                "If the visitor cancels the form without logging in,",
                "the Promise is rejected.",
                "",
                "`promptLogin()` can't be called before the page is ready.",
                "",
                "> **Notes:**",
                ">",
                "> - The frontend Members APIs aren't fully functional when previewing a site. View a published version of a site to see their complete functionality.",
                ">",
                "> - The frontend Member APIs can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that's contained in or is called from the",
                ">   `onReady()` or any element event.",
                ">",
                "> - If you `return` or `await` `promptLogin()`",
                ">   when calling from `onReady()`, the page is prevented from loading.",
                ">   To handle the resolved promise, use `.then()` and `.catch()`." ],
            "links":
              [ "[promptForgotPassword( )](#promptForgotPassword)" ],
            "examples":
              [ { "title": "Prompt the current visitor to log in",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "// Sample options value:",
                      "// {",
                      "//    mode: 'login',",
                      "//    modal: true",
                      "// }",
                      "",
                      "authentication.promptLogin(options)",
                      "  .then(() => {",
                      "    console.log('Member is logged in');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "register",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Email address the new member will use to log in." },
            { "name": "password",
              "type": "string",
              "doc": "Password to assign to the new member.\nMust be 4 to 100 ASCII characters." },
            { "name": "options",
              "type": "wix-members-frontend.Authentication.RegistrationOptions",
              "doc": "Registration options.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members-frontend.Authentication.RegistrationResult" ] },
            "doc": "Fulfilled - When the member is registered.\nRejected - Error message." },
        "locations":
          [ { "lineno": 58,
              "filename": "register.js" } ],
        "docs":
          { "summary": "Registers a new site member.",
            "description":
              [ "`register()` returns a Promise that resolves to a `RegistrationResult`",
                " object when the member is registered or pending registration.",
                "",
                " The specified `password` must be between 4 and 100 ASCII characters.",
                "",
                " See New Members ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/members/authentication/new-members) | [Velo](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members)) to learn about verifying emails and approving members.",
                "",
                " > **Notes:**",
                " >",
                " > - The frontend Members APIs aren't fully functional when previewing a site. View a published version of a site to see their complete functionality.",
                " >",
                " > - The member data in the resolved Promise only includes custom fields from a site's contacts ",
                " >   if those [fields are added to a site's members in a dashboard](https://support.wix.com/en/article/site-members-customizing-your-member-profile-fields).",
                " >",
                " > - When a new member signs up using an email address",
                " >   that's already in a site's Contact List,",
                " >   a notification is displayed",
                " >   and a confirmation email is sent to the new member.",
                " >   To register a member without displaying the notification, use",
                " >   `register()` ([SDK](https://dev.wix.com/docs/sdk/backend-modules/identity/authentication/register-v2) | [Velo](https://dev.wix.com/docs/velo/apis/wix-members-backend/authentication/register))",
                " >   (this doesn't suppress the confirmation email).",
                " >",
                " > - When a site's member signup settings are set to automatic approval (see New Members ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/members/authentication/new-members) | [Velo](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members))), ",
                " >   calling the frontend `register()` in page code is as secure as calling `register()` in backend code, ",
                " >   unless you are implementing [custom site registration using code](https://dev.wix.com/docs/develop-websites/articles/code-tutorials/wix-members/creating-a-custom-registration-form-with-code).",
                " >   However, when registration is set to [anual approval (see New Members ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/members/authentication/new-members) | [Velo](https://dev.wix.com/docs/velo/api-reference/wix-members-frontend/authentication/new-members))),",
                " >   calling `register()` from the backend code allows you to build more secure approval flows",
                " >   by keeping tokens hidden from the frontend." ],
            "links": [],
            "examples":
              [ { "title": "Register a site member",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "/* Sample options value:",
                      " * {",
                      " *   contactInfo: {",
                      " *     firstName: 'Juan',",
                      " *     lastName: 'Doe',",
                      " *     picture: 'https://static.parastorage.com/unpkg-semver/communities-blog-statics/assets/wix-logo.png',",
                      " *     hobby: 'Football'",
                      " *   },",
                      " *   privacyStatus: \"PRIVATE\"",
                      " * }",
                      " */",
                      "",
                      "authentication.register(email, password, options)",
                      "  .then((registrationResult) => {",
                      "    const status = registrationResult.status;",
                      "",
                      "    if (status === \"PENDING\") {",
                      "      // When the site is configured for manual approval,",
                      "      // status is \"PENDING\" and approvalToken is returned.",
                      "      const approvalToken = registrationResult.approvalToken;",
                      "      console.log('Member registered and waiting for approval:', registrationResult);",
                      "    } else {",
                      "      // When the site is configured for automatic approval,",
                      "      // status is \"ACTIVE\" and the member is approved and logged in.",
                      "      // To prevent logging in the member automatically,",
                      "      // use the backend function: wix-members-backend.authentication.register()",
                      "      console.log('Member registered and logged in:', registrationResult);",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    { "description": "This example contains a custom field, \"hobby\"." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "resendVerificationCodeEmail",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the email is sent.\nRejected - Error message." },
        "locations":
          [ { "lineno": 2,
              "filename": "resendVerificationCodeEmail.js" } ],
        "docs":
          { "summary": "Resends a one-time password (OTP) for email verification.",
            "description":
              [ "<blockquote class=\"important\">",
                "",
                "__Important:__",
                "This method is in Developer Preview and is subject to change. ",
                "",
                "</blockquote>",
                "",
                "`resendVerificationCodeEmail()` returns a Promise that resolves when the email is successfully sent, or rejects with an error if the operation fails." ],
            "links": [],
            "examples":
              [ { "title": "Email a member with a link to verify their email",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "authentication",
                      "  .resendVerificationCodeEmail()",
                      "  .then(() => {",
                      "    console.log('Verification code email resent');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error('Error resending verification email:', error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sendForgotPasswordEmail",
        "labels":
          [ "changed",
            "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email of the member whose password will be set." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the email is sent.\nRejected - Error message." },
        "locations":
          [ { "lineno": 2,
              "filename": "sendForgotPasswordEmail.js" } ],
        "docs":
          { "summary": "Sends a site member an email with a link to set their password.\nalizas1 marked this conversation as resolved.",
            "description":
              [ "The `sendForgotPasswordEmail()` function returns a Promise that resolves",
                "when the set password link is emailed to the member.",
                "",
                "The set password link is valid for 3 hours,",
                "and it can be used only once.",
                "If the link expires, no changes are made to the password." ],
            "links": [],
            "examples":
              [ { "title": "Email a member with a link to set their password",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "authentication",
                      "  .sendForgotPasswordEmail(email)",
                      "  .then((status) => {",
                      "    console.log('Password reset email sent');    ",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error('Error sending email:', error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sendResetPasswordEmail",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email of the member whose password will be set." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the email is sent.\nRejected - Error message." },
        "locations":
          [ { "lineno": 2,
              "filename": "sendResetPasswordEmail.js" } ],
        "docs":
          { "summary": "Sends a site member an email with a link to set their password.",
            "description":
              [ "> **Note:**",
                "> This method is in Developer Preview and is subject to change.",
                "",
                "The reset password link is valid for 3 hours,",
                "and it can be used only once.",
                "If the link expires, no changes are made to the password.",
                "A site can send a maximum of 200 reset password emails per day." ],
            "links": [],
            "examples":
              [ { "title": "Email a member with a link to reset their password",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "authentication",
                      "  .sendResetPasswordEmail(email)",
                      "  .then((status) => {",
                      "    console.log('Password reset email sent');    ",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error('Error sending email:', error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sendSetPasswordEmail",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email of the member whose password will be set." },
            { "name": "options",
              "type": "wix-members-frontend.Authentication.SetPasswordEmailOptions",
              "doc": "Email display options.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "boolean" ] },
            "doc": "Fulfilled - If the email is sent.\nRejected - Error message." },
        "locations":
          [ { "lineno": 12,
              "filename": "sendSetPasswordEmail.js" } ],
        "docs":
          { "summary": "Sends a site member an email with a link to set their password.",
            "description":
              [ "> **Deprecated.** Send Set Password Email has been replaced with Send Reset Password Email ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/members/authentication/send-reset-password-email) | [Velo](https://dev.wix.com/docs/velo/apis/wix-members-frontend/authentication/send-reset-password-email)) and will be removed on September 30, 2025.",
                "",
                "The set password link is valid for 3 hours,",
                "and it can be used only once.",
                "If the link expires, no changes are made to the password." ],
            "links": [],
            "examples":
              [ { "title": "Email a member with a link to set their password",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "/* Sample options value:",
                      "* {",
                      "*   hideIgnoreMessage: true",
                      "* }",
                      "*/",
                      "",
                      "authentication.sendSetPasswordEmail(email, options)",
                      "  .then((status) => {",
                      "",
                      "    console.log(status);",
                      "    if (status === true) {",
                      "",
                      "        console.log('Email sent!');",
                      "    }",
                      "    return status;    ",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });",
                      "",
                      "/* Promise resolves to a boolean */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "verifyEmail",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "code",
              "type": "string",
              "doc": "OTP code the member received in an email." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - If the OTP is valid.\nRejected - Error message." },
        "locations":
          [ { "lineno": 2,
              "filename": "verifyEmail.js" } ],
        "docs":
          { "summary": "Validates the email address using OTP (One-Time Password) that was sent during the registration.",
            "description":
              [ "<blockquote class=\"important\">",
                "",
                "__Important:__",
                "This method is in Developer Preview and is subject to change. ",
                "",
                "</blockquote>" ],
            "links": [],
            "examples":
              [ { "title": "Verify the member's email address with a one-time password",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "authentication",
                      "  .verifyEmail(code)",
                      "  .then(() => {",
                      "    console.log('OTP verified');    ",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error('Error verifying OTP:', error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "LoginHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "currentMember",
              "type": "wix-members-frontend.CurrentMember",
              "doc": "Logged-in member." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "onLogin.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "LogoutHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "onLogout.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages":
    [ { "name": "ContactInfo",
        "locations":
          [ { "lineno": 17,
              "filename": "register.js" } ],
        "docs":
          { "summary": "An object that contains information about a site contact.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "firstName",
              "type": "string",
              "doc": "Contact's first name.",
              "optional": true },
            { "name": "lastName",
              "type": "string",
              "doc": "Contact's last name.",
              "optional": true },
            { "name": "picture",
              "type": "string",
              "doc": "Contact's image source URL.",
              "optional": true },
            { "name": "emails",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of contact's email addresses.\n When creating a contact, if no phone number is\n provided, at least 1 email address must be provided.",
              "optional": true },
            { "name": "phones",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of contact's phone numbers.\n When creating a contact, if no email is\n provided, at least 1 phone number must be provided.",
              "optional": true },
            { "name": "language",
              "type": "string",
              "doc": "Contact's language.",
              "optional": true },
            { "name": "customFields",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "Any number of custom fields.\n\n Custom fields ([SDK](https://dev.wix.com/docs/sdk/frontend-modules/members/custom-fields) | [Velo](https://dev.wix.com/docs/velo/apis/wix-members-frontend/custom-fields))\n are used to store additional information about a site's contacts.\n\n >**Note:** `customFields` is not the name of a field in the `contactInfo` object. Here, it represents any custom fields that you've chosen to implement.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "LoginOptions",
        "locations":
          [ { "lineno": 1,
              "filename": "promptLogin.js" } ],
        "docs":
          { "links": [],
            "examples":
              [ { "title": "Prompt the current visitor to log in",
                  "body":
                    [ "import { authentication } from 'wix-members-frontend';",
                      "",
                      "// ...",
                      "",
                      "// Sample options value:",
                      "// {",
                      "//    mode: 'login',",
                      "//    modal: true",
                      "// }",
                      "",
                      "authentication.promptLogin(options)",
                      "  .then(() => {",
                      "    console.log('Member is logged in');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "mode",
              "type": "string",
              "doc": "Whether to display the `\"login\"` or `\"signup\"` prompt.\n\nDefaults to `\"signup\"`.",
              "optional": true },
            { "name": "modal",
              "type": "boolean",
              "doc": "Whether the login form should be modal (`true`)\nor full screen (`false`).\n\nDefaults to `false` (full screen).",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "RegistrationOptions",
        "locations":
          [ { "lineno": 1,
              "filename": "register.js" } ],
        "docs":
          { "summary": "An object that contains information about a site registration.",
            "links":
              [ "[register](#register)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "contactInfo",
              "type": "wix-members-frontend.Authentication.ContactInfo",
              "doc": "Contact information.",
              "optional": true },
            { "name": "privacyStatus",
              "type": "string",
              "doc": "Sets the [privacy status](https://support.wix.com/en/article/wix-groups-member-privacy-settings-for-groups) of a new member upon registration.\nOne of:\n\n - `\"PUBLIC\"`: Sets the new member status to public. A member whose status is public is a member of the site's community.\n - `\"PRIVATE\"`: Sets the new member status to private. A member whose status is private is not a member of the site's community.\n\nDefaults to `\"PRIVATE\"`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "RegistrationResult",
        "locations":
          [ { "lineno": 39,
              "filename": "register.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "status",
              "type": "string",
              "doc": "Registration status.\n\nOne of:\n\n- `\"PENDING\"`: The member must be approved before they can log in to the site.\n- `\"ACTIVE\"`: The member is approved and can log in to the site." },
            { "name": "approvalToken",
              "type": "string",
              "doc": "Token for approving the member\nwith [`approveByToken()`](https://dev.wix.com/docs/velo/apis/wix-members-backend/authentication/approve-by-token).\n`approvalToken` is safe to pass via email or from page code to backend code.\n\nReturned when `status` is `\"PENDING\"`.",
              "optional": true },
            { "name": "member",
              "type": "wix-members-frontend.CurrentMember.Member",
              "doc": "The registered member.\n\nReturned when `status` is `\"ACTIVE\"`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "SetPasswordEmailOptions",
        "locations":
          [ { "lineno": 1,
              "filename": "sendSetPasswordEmail.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "hideIgnoreMessage",
              "type": "boolean",
              "doc": "Whether to hide the \"ignore this email\" message.\n\nIf `false`, the email tells the member\nthey can safely ignore if they didn't request the password change.\n\nDefault: `false`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }