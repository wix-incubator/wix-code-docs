{ "name": "wix-dashboard",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "index.js" },
  "docs":
    { "summary": "The wix-dashboard module contains functionality for interacting with your site's dashboard in the code for dashboard pages.",
      "description":
        [ "The Wix Dashboard API allows the code for dashboard pages created in the [Wix Editor](https://support.wix.com/en/article/velo-working-with-dashboard-pages) or with [Wix Blocks](https://support.wix.com/en/article/wix-blocks-creating-and-managing-blocks-dashboard-pages) to interact with the Wix dashboard environment.",
          "",
          "",
          "Using the module you can:",
          "- Navigate users to other pages in the dashboard.",
          "- Display toast notifications at the top of the dashboard.  ",
          "  ![Toast notification](/images/toast_example.png \"Toast notification\")",
          "- Retrieve data about changes to the dashboard's state and use it to update your page in real time.",
          "",
          "To use the Wix Dashboard API, import the applicable function from `wix-dashboard`:",
          "",
          "```js",
          "import { <function> } from 'wix-dashboard';",
          "```",
          "## Before you begin",
          "It's important to note that the Wix Dashboard API can only be used in code running on dashboard pages. The functions in this API don't work in backend code or on any other pages on your site." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "closeModal",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "closeData",
              "type": "wix-dashboard.Serializable",
              "doc": "Data to pass to the modal's opener. This data is returned by [`openModal`](#openmodal) once the modal is closed. It must be Serializable data, which means it can be cloned using the [structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm). For example, you cannot pass function callbacks in this parameter.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 28,
              "filename": "modal.js" } ],
        "docs":
          { "summary": "Closes the currently open modal.",
            "description":
              [ "> This function can only be used in page code files for dashboard pages created in the [Wix editor](https://support.wix.com/en/article/velo-working-with-dashboard-pages) or with [Wix Blocks](https://support.wix.com/en/article/wix-blocks-creating-and-managing-blocks-dashboard-pages)." ],
            "links": [],
            "examples":
              [ { "title": "Close a modal",
                  "body":
                    [ "import { closeModal } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "closeModal({ message: 'The modal is closed!' });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getPageUrl",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "destination",
              "type": "wix-dashboard.Destination",
              "doc": "URL destination details." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - The URL of the dashboard page." },
        "locations":
          [ { "lineno": 15,
              "filename": "navigation.js" } ],
        "docs":
          { "summary": "Gets the full URL for a dashboard page.",
            "description":
              [ "> This function can only be used in page code files for dashboard pages created in the [Wix Editor](https://support.wix.com/en/article/velo-working-with-dashboard-pages) or with [Wix Blocks](https://support.wix.com/en/article/wix-blocks-creating-and-managing-blocks-dashboard-pages)." ],
            "links": [],
            "examples":
              [ { "title": "Get the URL of the dashboard home page",
                  "body":
                    [ "import { getPageUrl } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "console.log('Home page url is:', await getPageUrl({pageId: 'home'}));" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "navigate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "destination",
              "type": "wix-dashboard.Destination",
              "doc": "Destination to navigate to." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "navigation.js" } ],
        "docs":
          { "summary": "Navigates the user to another page in the dashboard.",
            "description":
              [ "> This function can only be used in page code files for dashboard pages created in the [Wix Editor](https://support.wix.com/en/article/velo-working-with-dashboard-pages) or with [Wix Blocks](https://support.wix.com/en/article/wix-blocks-creating-and-managing-blocks-dashboard-pages).",
                "",
                "If a `destination` object with an invalid `pageId` value is passed to this function, a **Page Not Found** message is displayed in the dashboard." ],
            "links": [],
            "examples":
              [ { "title": "Navigate to the dashboard home page",
                  "body":
                    [ "import { navigate } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "navigate({pageId: 'home'});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "observeState",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "observer",
              "type": "wix-dashboard.observeStateCallback",
              "doc": "Callback function for receiving state data." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "observeState.js" } ],
        "docs":
          { "summary": "Defines a callback function that receives changes to the state of a dashboard page's environment.",
            "description":
              [ "> This function can only be used in page code files for dashboard pages created in the [Wix Editor](https://support.wix.com/en/article/velo-working-with-dashboard-pages) or with [Wix Blocks](https://support.wix.com/en/article/wix-blocks-creating-and-managing-blocks-dashboard-pages).",
                "",
                "Use the data passed to `observeState()`'s  callback function to dynamically update a dashboard page's content.",
                "",
                "The callback function passed to `observeState()` is triggered when the dashboard page is initialized and every time it's updated." ],
            "links": [],
            "examples":
              [ { "title": "Receive state data and log it to the console",
                  "body":
                    [ "import { observeState } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "observeState((pageParams, environmentState) => {",
                      "  console.log('custom param', pageParams.customParam);",
                      "  console.log('locale', environmentState.locale);",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "openModal",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "modalId",
              "type": "string",
              "doc": "ID of the dashboard modal extension to open." },
            { "name": "modalParams",
              "type": "Object",
              "doc": "Custom data to pass into the extension. The extension can access this data using [`observeState()`](#observestate).",
              "optional": true } ],
        "ret":
          { "type": "wix-dashboard.OpenModalReturn" },
        "locations":
          [ { "lineno": 1,
              "filename": "modal.js" } ],
        "docs":
          { "summary": "Opens a [dashboard modal extension](https://dev.wix.com/docs/build-apps/developer-tools/extensions/dashboard-modal-extensions).",
            "description":
              [ "> This function can only be used in page code files for dashboard pages created in the [Wix editor](https://support.wix.com/en/article/velo-working-with-dashboard-pages) or with [Wix Blocks](https://support.wix.com/en/article/wix-blocks-creating-and-managing-blocks-dashboard-pages).",
                "",
                "",
                "The `openModal()` function returns an object with a property called `modalClosed`. This property is a promise that resolves to the data passed to [`closeModal()`](#closeModal) when the modal is closed.",
                "",
                "> **Note:** Before you use this function, you need a dashboard modal extension. Learn more about [implementing dashboard modal extensions](https://dev.wix.com/docs/build-apps/developer-tools/extensions/implement-a-dashboard-modal)." ],
            "links": [],
            "examples":
              [ { "title": "Open a modal and log the data returned when it's closed",
                  "body":
                    [ "import { openModal } from 'wix-dashboard';",
                      "",
                      "/* Sample modalID: '1d52d058-0392-44fa-bd64-ed09275a6fcc' */",
                      "",
                      "const { modalClosed } = openModal('myModalId')",
                      "",
                      "modalClosed",
                      "  .then((closeData) => {",
                      "        console.log('The modal was closed and returned: ', closeData);",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "    // Handle the error",
                      "  });",
                      "",
                      "/* The value of `modalClosed` resolves to an object containing the data passed in when the modal is closed. */" ],
                  "extra":
                    {  } },
                { "title": "Pass data to a modal extension",
                  "body":
                    [ "import { openModal } from 'wix-dashboard';",
                      "",
                      "/* Sample modalID value: '1d52d058-0392-44fa-bd64-ed09275a6fcc' ",
                      " * Sample modalParams value",
                      " * {",
                      " *   firstName: 'Name'",
                      " * }",
                      " */",
                      "",
                      "const { modalClosed } = client.dashboard.openModal('myModalId', myModalParams)",
                      "",
                      "modalClosed",
                      "  .then((closeData) => {",
                      "    console.log('The modal was closed and returned: ', closeData);",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "    // Handle the error",
                      "  });",
                      "",
                      "/* The value of `modalClosed` resolves to an object containing the data passed in when the modal is closed. */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showToast",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "config",
              "type": "wix-dashboard.ToastConfig",
              "doc": "Toast configuration options." } ],
        "ret":
          { "type": "wix-dashboard.ToastReturn" },
        "locations":
          [ { "lineno": 1,
              "filename": "toast.js" } ],
        "docs":
          { "summary": "Displays a toast notification at the top of a dashboard page.\n\n![Toast notification](/images/toast_example.png \"Toast notification\")",
            "description":
              [ "> This function can only be used in page code files for dashboard pages created in the [Wix Editor](https://support.wix.com/en/article/velo-working-with-dashboard-pages) or with [Wix Blocks](https://support.wix.com/en/article/wix-blocks-creating-and-managing-blocks-dashboard-pages).",
                "",
                "The `showToast()` function returns an object containing a key called `remove`. ",
                "The value of `remove` is a function that removes the toast from the page.",
                "",
                "Use the `config` parameter to:",
                "* Control the toast's content and appearance.",
                "* Set callback functions to run when the user sees or closes the toast.",
                "* Create a clickable call-to-action that displays in the toast.",
                "",
                "When showing multiple toasts, requests to display toasts may be queued and the toast may not be displayed immediately. Toasts with a higher",
                "priority level are displayed first. A toast's priority is defined using the `config.priority` parameter. Toasts with the same priority level are displayed in the order",
                "they're requested. ",
                "",
                "> **Note:** When the timeout parameter is set to `\"none\"` the toast is rendered into the page layout and pushes the rest of the page down. When timeout is set to `\"normal\"`, the toast appears on top of other content on the page." ],
            "links": [],
            "examples":
              [ { "title": "Display a success toast when a product is updated",
                  "body":
                    [ "import { showToast } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "const config = {",
                      "  message: 'Product updated successfully!',",
                      "  type: 'success',",
                      "}",
                      "",
                      "showToast(config);" ],
                  "extra":
                    {  } },
                { "title": "Display an error toast with a 'Learn more' link",
                  "body":
                    [ "import { showToast } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "const config = {",
                      "  message: 'Product update failed.',",
                      "  timeout: 'none',",
                      "  type: 'error',",
                      "  priority: 'low',",
                      "  action: {",
                      "    uiType: 'link',",
                      "    text: 'Learn more',",
                      "    removeToastOnClick: true,",
                      "    onClick: () => {",
                      "      console.log('Learn more clicked!');",
                      "    },",
                      "  },",
                      "};",
                      "",
                      "showToast(config);" ],
                  "extra":
                    {  } },
                { "title": "Remove a displayed toast",
                  "body":
                    [ "import { showToast } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "const config = {",
                      "  message: 'Product updated successfully!',",
                      "  type: 'success',",
                      "  timeout: 'none',",
                      "}",
                      "const toastRemover = showToast(config);",
                      "setTimeout(toastRemover.remove(), 5000);",
                      "",
                      "/* Promise resolves a function that removes the toast. */" ],
                  "extra":
                    {  } },
                { "title": "Remove a displayed toast when a button on the page is clicked",
                  "body":
                    [ "import { showToast } from 'wix-dashboard';",
                      "",
                      "// ...",
                      "",
                      "const config = {",
                      "    message: 'Product updated successfully!',",
                      "    type: 'success',",
                      "    timeout: 'none',",
                      "}",
                      "let toastRemover = showToast(config);",
                      "$w('#removeToastButton').onClick(() => {",
                      "    toastRemover.remove();",
                      "})",
                      "",
                      "/* Promise resolves a function that removes the toast. */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "observeStateCallback",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "pageParams",
              "type": "Object",
              "doc": "Custom parameters passed to the dashboard page." },
            { "name": "environmentState",
              "type": "wix-dashboard.EnvironmentState",
              "doc": "Data about the dashboard's environment." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 18,
              "filename": "observeState.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages":
    [ { "name": "Destination",
        "locations":
          [ { "lineno": 30,
              "filename": "navigation.js" } ],
        "docs":
          { "summary": "Destination Object",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "pageId",
              "type": "string",
              "doc": "ID of the page to link to. Use the [Dashboard Page IDs](#dashboard-page-ids) table to find the appropriate ID." },
            { "name": "relativeUrl",
              "type": "string",
              "doc": "URL segment to append to the base URL of the selected page. Can include path segments, a query string, and a fragment identifier.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "EnvironmentState",
        "locations":
          [ { "lineno": 24,
              "filename": "observeState.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "locale",
              "type": "string",
              "doc": "User's locale." },
            { "name": "pageLocation",
              "type": "wix-dashboard.PageLocation",
              "doc": "Information about the currently rendered page location." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "OpenModalReturn",
        "locations":
          [ { "lineno": 22,
              "filename": "modal.js" } ],
        "docs":
          { "summary": "Open Modal Return Object",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "modalClosed",
              "type":
                { "name": "Promise",
                  "typeParams":
                    [ "wix-dashboard.Serializable" ] },
              "doc": "Resolves to the data passed to [`closeModal()`](#closeModal) when the modal is closed." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "PageLocation",
        "locations":
          [ { "lineno": 30,
              "filename": "observeState.js" } ],
        "docs":
          { "summary": "PageLocation Object",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "pageId",
              "type": "string",
              "doc": "ID of the rendered page." },
            { "name": "pathname",
              "type": "string",
              "doc": "Any parts of the current URL path appended to the page's full URL." },
            { "name": "search",
              "type": "string",
              "doc": "The current URL's query string.",
              "optional": true },
            { "name": "hash",
              "type": "string",
              "doc": "The current URL's fragment.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Serializable",
        "locations":
          [ { "lineno": 39,
              "filename": "modal.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members": [],
        "extra":
          {  },
        "labels": [] },
      { "name": "ToastAction",
        "locations":
          [ { "lineno": 65,
              "filename": "toast.js" } ],
        "docs":
          { "summary": "ToastAction Object",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "text",
              "type": "string",
              "doc": "Text that appears in the call-to-action." },
            { "name": "uiType",
              "type": "string",
              "doc": "The type of call-to-action. \n\nOptions: `\"button\"`, `\"link\"`\n\nDefault: `\"button\"`",
              "optional": true },
            { "name": "removeToastOnClick",
              "type": "boolean",
              "doc": "Whether to remove the toast after the call-to-action is clicked.\n\nDefault: `true`",
              "optional": true },
            { "name": "onClick",
              "type": "Function",
              "doc": "Callback function to run after the call-to-action is clicked." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ToastConfig",
        "locations":
          [ { "lineno": 35,
              "filename": "toast.js" } ],
        "docs":
          { "summary": "ToastConfig Object",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "message",
              "type": "string",
              "doc": "Text that appears in the toast." },
            { "name": "timeout",
              "type": "string",
              "doc": "Whether the toast removes itself. \n\nOptions:  \n- `\"normal\"`: The toast removes itself after 6 seconds.\n- `\"none\"`: The toast doesn't remove itself.\n\nDefault: `\"normal\"`",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "Toast color and message type. \n\nOptions: \n- `\"standard\"`: Blue toast. \n- `\"success\"`: Green toast.  \n- `\"warning\"`: Yellow warning toast.\n- `\"error\"`: Red error toast.\n\nDefault: `\"standard\"`",
              "optional": true },
            { "name": "priority",
              "type": "string",
              "doc": "Priority of the toast. If several toasts are triggered at the same time, they're displayed in the order of their priority levels. \n\nOptions: `\"low\"`, `\"normal\"`, `\"high\"`\n\nDefault: `\"normal\"`",
              "optional": true },
            { "name": "action",
              "type": "wix-dashboard.ToastAction",
              "doc": "Object representing a call-to-action that's displayed in the toast.",
              "optional": true },
            { "name": "onCloseClick",
              "type": "Function",
              "doc": "Callback function to run when the toast is closed by clicking its close button.",
              "optional": true },
            { "name": "onToastSeen",
              "type": "Function",
              "doc": "Callback function to run when the toast is seen by the user.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ToastReturn",
        "locations":
          [ { "lineno": 80,
              "filename": "toast.js" } ],
        "docs":
          { "summary": "ShowToast Return Object",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "remove",
              "type": "Function",
              "doc": "Removes the displayed toast." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "scopes":
        [ "frontend" ] } }