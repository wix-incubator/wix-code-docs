{ "name": "wix-secrets-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "getSecret.js" },
  "docs":
    { "summary": "The wix-secrets-backend module contains functionality for\nmanaging secrets you safely store in your site's [Secrets Manager](https://support.wix.com/en/article/velo-about-the-secrets-manager).",
      "description":
        [ "The Secrets Manager allows you to store and encrypt API keys and other secrets on your site.",
          "With the Secrets API, you can safely work with secrets in your backend code.",
          "",
          " Follow this general procedure for working with API keys or other secrets using the Secrets Manager:",
          "",
          " 1. Get private information such as an API key from a 3rd-party service.",
          " 1. Store the private information as a new secret in the [Secrets Manager](https://support.wix.com/en/article/velo-working-with-the-secrets-manager) in your site's dashboard or with the `createSecret()` function. Assign a name to the secret.",
          " 1. In your backend code, instead of hardcoding the API key, use the `getSecret()` function with the secret name assigned in the Secrets Manager. When the code runs, the value of the secret is extracted from the Secrets Manager.",
          "",
          "",
          "> **Note:**",
          "> To create and manage secrets with the Secrets API,",
          "> you must add a [Members Area](https://support.wix.com/en/article/adding-a-members-area-to-your-site)",
          "> to your site.",
          "> The Members Area is not required to retrieve secrets with",
          "> [`getSecret()`](wix-secrets-backend/getsecret).",
          "",
          "",
          " To use the Secrets API, import `wixSecretsBackend` from the `wix-secrets-backend` module:",
          "",
          "   ```javascript",
          "   import wixSecretsBackend from 'wix-secrets-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "createSecret",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "secret",
              "type": "wix-secrets-backend.Secret",
              "doc": "The object including the fields of a new secret to be stored." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - The ID of the created secret.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "createSecret.js" } ],
        "docs":
          { "summary": "Creates a new secret.",
            "description":
              [ "The createSecret() function returns a Promise that resolves to the newly created secret's ID when a secret has been created in the [Secrets Manager](https://support.wix.com/en/article/velo-working-with-the-secrets-manager).",
                "Secrets created by this function are available in the Secrets Manager section in your site's dashboard, just like any other secret created using the UI.",
                "",
                "> **Note:** ",
                "> * The secret's name cannot start with `wix` or be identical to an existing secret's name.",
                ">",
                "> * Do not leave private keys in your code! Leaving them in is a security risk. Either delete the keys from the code after running `createSecret()`, or pass the parameters in using the [Functional Testing](https://support.wix.com/en/article/velo-functional-testing-in-the-backend) tool." ],
            "links": [],
            "examples":
              [ { "title": "Create a new secret",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function createNewSecret() {",
                      "  const secret = {",
                      "\t  name: \"s3_secret_key\",",
                      "\t  value: \"Fm8OfflH6bJOwWjenqAtLurLbkiMNvmhQHZV+118\",",
                      "\t  description: \"AWS secret access key\"",
                      "  };",
                      "",
                      "  return wixSecretsBackend.createSecret(secret)",
                      "    .then((id) => {",
                      "      return id;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/*",
                      " * Returns a Promise that resolves to:",
                      " *",
                      " * \"5ec36ffb-2cec-489a-9c0e-d8f53fef5fd1\"",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "deleteSecret",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "The ID of the secret to be deleted." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the secret is deleted from the Secrets Manager.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "deleteSecret.js" } ],
        "docs":
          { "summary": "Deletes an existing secret by ID.",
            "description":
              [ "The `deleteSecret()` function returns a Promise that resolves when a secret from the Secrets Manager is deleted.",
                "You can retrieve the `id` parameter using the [`listSecretInfo()`](#listSecretInfo) function.",
                "Note that the ID used here is the ID retrieved from [`listSecretInfo()`](#listSecretInfo), not the secret name used by [`getSecret()`](#getSecret).",
                "",
                "> **Note:** Deleting a secret is irreversible and will break all code using the secret." ],
            "links": [],
            "examples":
              [ { "title": "Delete an existing secret",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function deleteMySecret() {",
                      "  const id = \"b741766c-eead-46fe-8e7f-fd01ff3d6e21\";",
                      "",
                      "  return wixSecretsBackend.deleteSecret(id)",
                      "    .then(() => {",
                      "      console.log(\"Secret deleted\");",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Retrieve an ID and delete a secret",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function deleteFirstSecret() {",
                      "  return wixSecretsBackend.listSecretInfo()",
                      "    .then((secrets) => {",
                      "      return wixSecretsBackend.deleteSecret(secrets[0].id);",
                      "    })",
                      "    .then(() => {",
                      "      console.log(\"Secret deleted\");",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to delete the first secret stored in the Secrets Manager. First we retrieve the ID of the secret using the listSecretInfo() function. Then we delete the secret using the retrieved ID." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getSecret",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "name",
              "type": "string",
              "doc": "The name of the secret to get the value of." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - The value of the secret with the given name.\nRejected - Error message." },
        "locations":
          [ { "lineno": 32,
              "filename": "getSecret.js" } ],
        "docs":
          { "summary": "Gets a secret by name.",
            "description":
              [ "The `getSecret()` function returns a Promise that resolves to the value of the secret",
                " that was stored in the Secrets Manager with the given name.",
                "",
                "> **Note:** To prevent malicious users from accessing the value of your secret,",
                "don't return the value of the secret to client side. Only use the secret's value in the backend." ],
            "links": [],
            "examples":
              [ { "title": "Get a secret and use it to fetch a JSON from a 3rd-party service",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "import {getJSON} from 'wix-fetch';",
                      "",
                      "export function getSomeJSON() {",
                      "  return wixSecretsBackend.getSecret(\"myApiKeyName\")",
                      "    .then((secret) => {",
                      "      return getJSON(`https://someapi.com/api/someendpoint?apiKey=${secret}`);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "export function getFirstSecretValue() {",
                      "  return wixSecretsBackend.listSecretInfo()",
                      "    .then((secrets) => {",
                      "      return wixSecretsBackend.getSecret(secrets[0].name);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Retrieve a name and get a secret's value",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function getFirstSecretValue() {",
                      "  return wixSecretsBackend.listSecretInfo()",
                      "    .then((secrets) => {",
                      "      return wixSecretsBackend.getSecret(secrets[0].name);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/*",
                      " * Returns a Promise that resolves to:",
                      " *",
                      " * \"Fm8OfflH6bJOwWjenqAtLurLbkiMNvmhQHZV+118\"",
                      " */" ],
                  "extra":
                    { "description": "This example demonstrates how to delete the first secret stored in the Secrets Manager. First we retrieve the ID of the secret using the listSecretInfo() function. Then we get the value of the secret using the retrieved ID." } },
                { "title": "Get an API key and use it to fetch a JSON from a weather service",
                  "body":
                    [ "/************************************",
                      " * Backend code - getWeather.jsw *",
                      " ************************************/",
                      "",
                      "import wixSecretsBackend from 'wix-secrets-backend';",
                      "import { getJSON } from 'wix-fetch';",
                      "",
                      "export async function getWeatherJson() {",
                      "  const secret = await wixSecretsBackend.getSecret(\"openWeatherApiKey\");",
                      "  return getJSON(`https://api.openweathermap.org/data/2.5/weather?q=London&units=metric&APPID=${secret}`);",
                      "}",
                      "",
                      "/********************",
                      " * Client-side code *",
                      " ********************/",
                      "",
                      "import { getWeatherJson } from 'backend/getWeather';",
                      "",
                      "export async function getWeather_click(event) {",
                      "  let json = await getWeatherJson();",
                      "  $w(\"#weather\").text = json.weather[0].description; // \"mist\"",
                      "  $w(\"#temp\").text = json.main.temp; // 9.4 (degrees Celsius)",
                      "}",
                      "" ],
                  "extra":
                    { "description": "In this example, we use the Secrets API to get an API key from the Secrets Manager. We use the key in the backend to fetch a JSON with weather information from a 3rd-party service, and return the JSON to the client side." } },
                { "title": "Get an API key and use it to send an email with the SendGrid npm interface",
                  "body":
                    [ "/************************************",
                      " * Backend code - sendEmail.jsw *",
                      " ************************************/",
                      "",
                      "import wixSecretsBackend from 'wix-secrets-backend';",
                      "import sendGridMail from '@sendgrid/mail';",
                      "",
                      "export async function sendEmail(recipient, sender, subject, body) {",
                      "  const secret = await wixSecretsBackend.getSecret(\"SendGridApiKey\");",
                      "  sendGridMail.setApiKey(secret);",
                      "  const message = {",
                      "    \"to\": recipient,",
                      "    \"from\": sender,",
                      "    \"subject\": subject,",
                      "    \"text\": body",
                      "  };",
                      "  sendGridMail.send(message);",
                      "}",
                      "",
                      "/********************",
                      " * Client-side code *",
                      " ********************/",
                      "",
                      "import { sendEmail } from 'backend/sendEmail';",
                      "",
                      "export function sendEmailButton_click(event) {",
                      "  sendEmail(",
                      "    $w(\"#toEmail\").value,",
                      "    $w(\"#fromEmail\").value,",
                      "    $w(\"#subject\").value,",
                      "    $w(\"#emailContent\").value",
                      "  )",
                      "    .then(() => {",
                      "      console.log(\"Email sent\");",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "}",
                      "" ],
                  "extra":
                    { "description": "In this example, we added the SendGrid package to our site using the Package Manager. We created a backend function that gets an API key from the Secrets Manager, sets it as the SendGrid API key, and sends an email using the SendGrid service. We call the function from the client side when a site visitor submits email information via a form." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listSecretInfo",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-secrets-backend.SecretInfo" ] } ] },
            "doc": "Fulfilled - A list of objects with information about your site secrets.\nRejected - Error message." },
        "locations":
          [ { "lineno": 11,
              "filename": "listSecretInfo.js" } ],
        "docs":
          { "summary": "Gets a list of objects containing information about all secrets stored in the Secrets Manager.",
            "description":
              [ "The `listSecretInfo()` function returns a Promise that resolves to a list containing information about all secrets stored on your site.",
                "The secret's value is omitted for security reasons, and can be retrieved using the [`getSecret()`](wix-secrets-backend.html#getSecret) function for each individual secret.",
                "> **Note:**",
                "> Do not use `listSecretInfo()` in a **.jsw** file with anonymous permissions! This is a serious security risk which exposes your secrets to potential leaks. To prevent this, implement `listSecretInfo()` in a separate **.js** file to block frontend access. If you must include `listSecretInfo()` in a **.jsw** file, make sure the exported function has [permissions set](https://support.wix.com/en/article/velo-about-web-module-permissions) to **Admin**." ],
            "links": [],
            "examples":
              [ { "title": "Get information about your secrets",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function getSecretInfo() {",
                      "  return wixSecretsBackend.listSecretInfo()",
                      "  .then((secrets) => {",
                      "    return secrets;",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });",
                      "}",
                      "",
                      "/* Returns a Promise that resolves to:",
                      " *",
                      " *  [",
                      " *    {",
                      " *      \"id\": \"2eebccce-6c01-469d-a278-433fd96ba111\",",
                      " *      \"createdDate\": \"2020-05-26T06:16:46.000Z\",",
                      " *      \"updatedDate\": \"2020-05-28T12:21:10.000Z\",",
                      " *      \"name\": \"MyFirstSecret\",",
                      " *      \"description\": \"This is my first secret\"",
                      " *    },",
                      " *    {",
                      " *      \"id\": \"ef4b43d4-851d-4b52-a07f-9a500a888371\",",
                      " *      \"createdDate\": \"2020-06-02T08:23:54.000Z\",",
                      " *      \"updatedDate\": \"2020-06-02T08:23:54.000Z\",",
                      " *      \"name\": \"MySecondSecret\",",
                      " *      \"description\": \"This is my second secret\"",
                      " *    }",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Retrieve a name and get a secret's value",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function getFirstSecretValue() {",
                      "  return wixSecretsBackend.listSecretInfo()",
                      "    .then((secrets) => {",
                      "      return wixSecretsBackend.getSecret(secrets[0].name);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}",
                      "",
                      "/*",
                      " * Returns a Promise that resolves to:",
                      " *",
                      " * \"Fm8OfflH6bJOwWjenqAtLurLbkiMNvmhQHZV+118\"",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Retrieve an ID and delete a secret",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function deleteFirstSecret() {",
                      "  return wixSecretsBackend.listSecretInfo()",
                      "    .then((secrets) => {",
                      "      return wixSecretsBackend.deleteSecret(secrets[0].id);",
                      "    })",
                      "    .then(() => {",
                      "      console.log(\"Secret deleted\");",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateSecret",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "id",
              "type": "string",
              "doc": "The ID of the secret to update." },
            { "name": "secret",
              "type": "wix-secrets-backend.Secret",
              "doc": "The information to update the secret with." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the secret is updated.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "updateSecret.js" } ],
        "docs":
          { "summary": "Updates the specified fields of an existing secret by ID.",
            "description":
              [ "The `updateSecret()` function returns a Promise that resolves when the secret is successfully updated.",
                "You can update one or more secret properties. Only the properties passed in the Secret object will be updated.",
                "All other properties will remain the same.",
                "You can retrieve the `id` parameter from the [`listSecretInfo()`](#listSecretInfo) function.",
                "The `id` is not the same as the secret `name` used by the [`getSecret()`](#getSecret) function.",
                "> **Notes:** ",
                "> + Changing a secret's name or value will break all code using the secret.",
                ">",
                "> + You cannot rename the secret with a name that is already in use.",
                "> + Do not leave private keys in your code! Leaving them in is a security risk. Either delete the keys from the code after running `updateSecret()`, or pass the parameters in using the [Functional Testing](https://support.wix.com/en/article/velo-functional-testing-in-the-backend) tool." ],
            "links": [],
            "examples":
              [ { "title": "Update a single property of a secret",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function updateName() {",
                      "  const id = \"b741766c-eead-46fe-8e7f-fd01ff3d6e21\";",
                      "  const secret = {",
                      "    name: \"my_new_secret_name\"",
                      "  };",
                      "",
                      "  return wixSecretsBackend.updateSecret(id, secret)",
                      "    .then(() => {",
                      "      console.log(\"Secret name updated\");",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Update multiple properties of a secret",
                  "body":
                    [ "import wixSecretsBackend from 'wix-secrets-backend';",
                      "",
                      "export function updateMultipleProperties() {",
                      "  const id = \"b741766c-eead-46fe-8e7f-fd01ff3d6e21\";",
                      "  const secret = {",
                      "    name: \"my_new_secret_name\",",
                      "    description: \"New description\",",
                      "    value: \"new.key.44aSQCljxL9FLvTVA.9dKbpwueYoQ8isyQhvun19pOT9gHEdgxam39LJ0Ts70\"",
                      "  };",
                      "",
                      "  return wixSecretsBackend.updateSecret(id, secret)",
                      "  .then(() => {",
                      "    console.log(\"All secret fields updated\");",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Secret",
        "locations":
          [ { "lineno": 1,
              "filename": "secret.js" } ],
        "docs":
          { "summary": "An object representing information for creating or updating a secret.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "A unique, meaningful name used for retrieving the secret at runtime using [`getSecret()`](wix-secrets-backend.html#getSecret). You can use alphanumeric characters and the following special characters: `_+=-#@$#`. Spaces are not supported." },
            { "name": "value",
              "type": "string",
              "doc": "The confidential value to protect, such as an API key." },
            { "name": "description",
              "type": "string",
              "doc": "An optional text describing the secret's purpose or any other notes.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "SecretInfo",
        "locations":
          [ { "lineno": 1,
              "filename": "listSecretInfo.js" } ],
        "docs":
          { "summary": "Information about a secret, not including the protected `value`.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "The secret's ID." },
            { "name": "name",
              "type": "string",
              "doc": "A unique, meaningful name used for retrieving the secret at runtime using [`getSecret()`](wix-secrets-backend.html#getSecret)." },
            { "name": "description",
              "type": "string",
              "doc": "An optional text describing the secret's purpose or any other notes about it." },
            { "name": "createdDate",
              "type": "Date",
              "doc": "The date and time the secret was created." },
            { "name": "updatedDate",
              "type": "Date",
              "doc": "The date and time the secret was last updated." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "scopes":
        [ "backend" ] },
  "menuSections": "APIs",
  "relatedContent":
    [ { "icon": "article",
        "text": "About the Secrets Manager",
        "url": "https://support.wix.com/en/article/velo-about-the-secrets-manager" },
      { "icon": "article",
        "text": "Working with the Secrets Manager",
        "url": "https://support.wix.com/en/article/velo-working-with-the-secrets-manager" },
      { "icon": "example",
        "text": "Detect Image Labels",
        "url": "https://www.wix.com/velo/example/detect-image-labels" },
      { "icon": "example",
        "text": "Secrets Manager",
        "url": "https://www.wix.com/velo/example/secrets-manager" } ] }