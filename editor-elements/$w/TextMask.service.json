{ "name": "TextMask",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.Background",
      "$w.HiddenCollapsedMixin",
      "$w.LinkableMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "TextMask.js" },
  "docs":
    { "summary": "The TextMask element is used for masking media inside text.",
      "description":
        [ "The [TextMask](https://support.wix.com/en/article/wix-editor-adding-and-customizing-text-masks) element allows you to mask images and videos in the background of your text.",
          "",
          "Use the `text` property to set or get the TextMask's plain-text content. ",
          "",
          "Use the `background.src` property to set or get the source of the TextMask's background." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.TextMask.Accessibility",
        "locations":
          [ { "lineno": 88,
              "filename": "TextMask.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myTextMask').accessibility.ariaHidden = false;",
                      "$w('#myTextMask').accessibility.screenReader.prefix = 'Text mask: ';",
                      "$w('#myTextMask').accessibility.screenReader.suffix = 'Masked text content';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myTextMaskAccessibility = $w('#myTextMask').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "background",
        "labels": [],
        "get": true,
        "set": true,
        "type": "$w.Background.BackgroundOptions",
        "locations":
          [ { "lineno": 59,
              "filename": "TextMask.js" },
            { "lineno": 83,
              "filename": "TextMask.js" } ],
        "docs":
          { "summary": "Sets or gets an object containing information about the TextMask's background.\n\nSetting the `src` property sets the source of the TextMask's background. The `src` property can be set to an image or a video. Images can either be from the [Media Manager](https://support.wix.com/en/article/about-the-media-manager) or an external image from any web location. Videos must come from the Media Manager. \n\nThe supported URL formats are:\n+ Images from the Media Manager: `wix:image://v1/<uri>/<filename>#originWidth=<width>&originHeight=<height>[&watermark=<watermark_manifest_string>]`\n+ Videos from the Media Manager: `wix:video://v1/<video_uri>/<filename>#posterUri=<poster_uri>&posterWidth=<width>&posterHeight=<height>`\n+ Images from the web: `http(s)://<image url>`\n\nThe URL for Media Manager images and videos is the `fileUrl` value returned by the [`listFiles()`](https://www.wix.com/velo/reference/wix-media-v2/files/listfiles) function. \n\nGetting the `src` property gets the source of the TextMask's background.",
            "links": [],
            "examples":
              [ { "title": "Get the TextMask's background",
                  "body":
                    [ "const textMaskBackground = $w(\"#textMask1\").background.src; // \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"" ],
                  "extra":
                    {  } },
                { "title": "Set the TextMask's background to be a video from the Media Manager",
                  "body":
                    [ "$w(\"#textMask1\").background.src = \"wix:video://v1/8b7eef_d46e23f9619c4e0a8b96babbf002/file%20(1).mp4#posterUri=8b7eef_d46e23f9619c4e0a8b96babbf002.jpg&posterWidth=1080&posterHeight=1080\";" ],
                  "extra":
                    {  } },
                { "title": "Set the TextMask's background to be an image from the web",
                  "body":
                    [ "$w(\"#textMask1\").background.src = \"http://placehold.it/250x250\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "text",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Current text value set in the UI.",
        "locations":
          [ { "lineno": 24,
              "filename": "TextMask.js" },
            { "lineno": 52,
              "filename": "TextMask.js" } ],
        "docs":
          { "summary": "Sets or gets the plain-text content of a TextMask element.",
            "description":
              [ "Setting the `text` property sets the plain-text content of the TextMask.",
                "",
                " Getting the `text` property returns the plain-text content of the TextMask.",
                "",
                " The `text` property's value can contain multiple lines of text. Note that the text doesn't automatically wrap, as the TextMask element renders text as an SVG, rather than as an HTML element. ",
                " As a result, to set multiple lines of text, you need to add new lines manually using [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) or newline character syntax `\\n`. For an example of both options, see the code examples. ",
                "",
                " Min: 1 character",
                " ",
                " Max: 450 characters" ],
            "links": [],
            "examples":
              [ { "title": "Get the TextMask's text",
                  "body":
                    [ "const myTextValue = $w('#textMask1').text // 'Text Value'" ],
                  "extra":
                    {  } },
                { "title": "Set the TextMask's text",
                  "body":
                    [ "$w('#textMask1').text = 'Text Value';" ],
                  "extra":
                    {  } },
                { "title": "Set the TextMask's text",
                  "body":
                    [ "$w('#textMask1').text = `Text Value Line 1",
                      "Line 2",
                      "Line 3`;",
                      "" ],
                  "extra":
                    { "description": "This example uses template literals to set multiple lines of text." } },
                { "title": "Set TextMask's text",
                  "body":
                    [ "$w('#textMask1').text = 'Text Value Line 1 \\nLine 2 \\nLine 3';",
                      "" ],
                  "extra":
                    { "description": "This example uses newline character syntax to set multiple lines of text." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 118,
              "filename": "TextMask.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaHidden",
              "type": "boolean",
              "doc": "Indicates whether the element is visible to or hidden from site visitors who rely on assistive technologies. Use `ariaHidden` to hide decorative, redundant, or off-screen content from screen readers. When `true`, the element is hidden from assistive technologies but remains visible in the DOM. When `false`, the element is exposed to assistive technologies. If `ariaHidden` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies at all.",
              "optional": true },
            { "name": "screenReader",
              "type": "$w.TextMask.ScreenReader",
              "doc": "Adds extra text before or after a text element for screen readers and other assistive technologies. This property helps provide extra context to text elements on a site page. The added text doesn't affect a site visually but is read aloud by screen readers for those who rely on assistive technology. For example, you can add the prefix \"bold text\" to a bold text element because screen readers don't effectively communicate text styles such as bold, italicize, and strikethrough.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ScreenReader",
        "locations":
          [ { "lineno": 129,
              "filename": "TextMask.js" } ],
        "docs":
          { "summary": "Adds hidden text before or after a text element using the `screenReader.prefix` and `screenReader.suffix` properties. This helps screen readers better understand the content of your text element. For example, screen readers don't effectively communicate text styles such as bold and strikethrough. Use `screenReader` to provide context for the styled text.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "prefix",
              "type": "string",
              "doc": "Extra text added before a text element. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "suffix",
              "type": "string",
              "doc": "Extra text added after a text element.\n\nMax: 1000 characters",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }