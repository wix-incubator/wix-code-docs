{ "name": "DashboardInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedElement",
      "$w.FormElement",
      "$w.DisabledMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "DashboardInput.js" },
  "docs":
    { "summary": "An input element for capturing small amounts of text.",
      "description":
        [ "This element can be used on any page in your regular Wix site or on dashboard pages you create in Wix Blocks.",
          "",
          "[Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is an editor for building Wix apps. It is currently open to a limited number of users." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 39,
              "filename": "DashboardInput.js" },
            { "lineno": 52,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the field label.",
            "description":
              [ "The label appears directly above the input field and tells the user what to input.",
                "It can have a maximum length of 120 characters. To create a field with no label, set `label` to `null`." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let myText = $w(\"#myInput\").label;  // \"Some text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myInput\").label = \"Some text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 96,
              "filename": "DashboardInput.js" },
            { "lineno": 113,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text content.",
            "description":
              [ "The placeholder is the default text that appears in the input field before the user enters a value.",
                "It can have a max length of 1200 characters.",
                "",
                "Set `placeholder` to `null` if you don't want default text inside the field." ],
            "links": [],
            "examples":
              [ { "title": "Get a button's placeholder",
                  "body":
                    [ "let myText = $w(\"#myInput\").placeholder;  // \"Some text\"" ],
                  "extra":
                    {  } },
                { "title": "Set a button's placeholder",
                  "body":
                    [ "$w(\"#myInput\").placeholder = \"Some text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 120,
              "filename": "DashboardInput.js" },
            { "lineno": 135,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the field prefix.",
            "description":
              [ "The prefix appears before the input field. It can be a literal string or",
                "a string containing a valid svg or svg source.",
                "",
                "Set `prefix` to `null` to disable." ],
            "links": [],
            "examples":
              [ { "title": "Get a button prefix",
                  "body":
                    [ "let prefix = $w(\"#myInput\").prefix;" ],
                  "extra":
                    {  } },
                { "title": "Set a button prefix",
                  "body":
                    [ "$w(\"#myInput\").prefix = “$”;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "readOnly",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 58,
              "filename": "DashboardInput.js" },
            { "lineno": 72,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets the input element to read-only or editable.",
            "description":
              [ "By default, `readOnly` is set to false. This allows users to edit the field.",
                "",
                "If `readOnly` is set to true, then the text input field will appear greyed out on your site and users will not be able to modify it." ],
            "links": [],
            "examples":
              [ { "title": "Check if  an input is read-only",
                  "body":
                    [ "let isReadOnly = $w(\"#myWsrInput\").readOnly; // true" ],
                  "extra":
                    {  } },
                { "title": "Set an input to be read-only",
                  "body":
                    [ "$w(\"#myInput\").readOnly = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "suffix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 141,
              "filename": "DashboardInput.js" },
            { "lineno": 155,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the field suffix.",
            "description":
              [ "The suffix defines the text appears after the input field. It can be a string containing literal values",
                "or a valid svg or svg source. Set to `null` to disable." ],
            "links": [],
            "examples":
              [ { "title": "Get a button suffix",
                  "body":
                    [ "let prefix = $w(\"#myInput\").suffix;" ],
                  "extra":
                    {  } },
                { "title": "Set a button suffix",
                  "body":
                    [ "$w(\"#myInput\").suffix = \"$\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 18,
              "filename": "DashboardInput.js" },
            { "lineno": 33,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon.",
                "To hide the tooltip, set it to `null`.",
                "Maximum length is 1200 characters." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"Text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").value = \"Text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 78,
              "filename": "DashboardInput.js" },
            { "lineno": 90,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the value in the input field.",
            "description":
              [ "Setting `value` to `null` will reset the input value. Max character length is 120." ],
            "links": [],
            "examples":
              [ { "title": "Get an input field's value",
                  "body":
                    [ "let myValue = $w(\"#myInput\").value; // \"Text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an input field's value",
                  "body":
                    [ "$w(\"#myInput\").value = \"Text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onKeyPress",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when a key is pressed." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 161,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a key is pressed inside the input field.",
            "description":
              [ "A text input receives a `keyPress` event when a user presses a key on",
                " the keyboard while the cursor is inside the input element. A `keyPress`",
                " event is fired for printable and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                "",
                "> **Notes:**",
                "> + Some browsers do not issue a key press event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was pressed." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w(\"myElement\").onKeyPress( (event) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.target.value;       // string value of text inside \"#myElement\" before the last KeyPress event",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyPress" } },
      { "name": "onKeyRelease",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is clicked." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 192,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the key is released within the input.",
            "description":
              [ "An input element receives a `keyRelease` event when a user releases a key on the keyboard",
                " while the cursor is inside the input element. A `keyRelease` event is fired for printable",
                " and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                " ",
                "![Properties and Events panel](images/properties_and_events.png \"Properties and Events panel\")",
                "",
                " This will automatically add the required code for the selected element and event:",
                "",
                " ```javascript ",
                "    export function input1_keyRelease(event) {",
                "       // This function was added from the Properties & Events panel. To learn more, visit http://wix.to/UcBnC-4",
                "       // Add your code for this event here: ",
                "     }  ",
                "```" ],
            "links": [],
            "examples":
              [ { "title": "Print key released and event type",
                  "body":
                    [ "$w('#myInput').onKeyRelease((event) => {",
                      "\t\tconsole.log(event.key); // Enter",
                      "\t\tconsole.log(event.type); // keyRelease",
                      "\t})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyRelease" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }