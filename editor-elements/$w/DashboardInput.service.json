{ "name": "DashboardInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedElement",
      "$w.ValueMixin",
      "$w.DisabledMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "DashboardInput.js" },
  "docs":
    { "summary": "An input element for capturing small amounts of text on your [dashboard page](https://dev.wix.com/docs/build-apps/developer-tools/cli/wix-cli-for-apps/dashboard-pages).",
      "description":
        [ "Input elements provide a way for site visitors to enter text on your site page. ",
          "",
          "The dashboard input element is intended for use on ",
          "[dashboard pages](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/frontend-code/dashboard-admin-pages/working-with-dashboard-pages) ",
          "in your Wix site or in [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles),",
          "but you may use it on any page." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 255,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "<b>Note: This standard element property is not relevant for this DashboardInput.</b>",
            "description":
              [ "> This property is not yet available to all users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example, ",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "",
                "Custom classes are those that you create on your site, not the predefined global classes",
                "that are provided for each element.  ",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://www.wix.com/velo/reference/$w/styling-elements-with-css) ",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn/CSS)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 45,
              "filename": "DashboardInput.js" },
            { "lineno": 60,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard input's label.\n\nMax: 120 characters",
            "links": [],
            "examples":
              [ { "title": "Get the dashboard input's label",
                  "body":
                    [ "let myLabel = $w('#myElement').label;  // \"Full Name\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input's label",
                  "body":
                    [ "$w('#myElement').label = \"Full Name\";" ],
                  "extra":
                    {  } },
                { "title": "Disable the dashboard input's label",
                  "body":
                    [ "$w('#myElement').label = null; // Disables the element's label" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 109,
              "filename": "DashboardInput.js" },
            { "lineno": 126,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text content.",
            "description":
              [ "Placeholder text is typically used to provide a hint to the user of what to enter into an input element that accepts text.",
                "When the user begins to enter text, the placeholder text disappears. Set `placeholder` to `null` to disable.",
                "",
                "Max: 1200 characters" ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard input's placeholder",
                  "body":
                    [ "let myPlaceholder = $w('#myElement').placeholder;  // \"Email\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input's placeholder",
                  "body":
                    [ "$w('#myElement').placeholder = \"Email\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 133,
              "filename": "DashboardInput.js" },
            { "lineno": 157,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard input prefix.",
            "description":
              [ "You can get or set a prefix for a dashboard input element. For example, you can set a prefix to be a currency, such as `'$'`.",
                "",
                "The following formats are supported:",
                "",
                "+ A string literal, such as `'$'`",
                "+ Vector images from the Media Manager: `wix:vector://v1/<vector_uri>/<filename>`",
                "+ Vector images from the web: `http(s)://<vector image url>`",
                "+ Vector XML strings: `<svg>...</svg>`",
                "",
                "To disable the dashboard input prefix, set the `prefix` property to `null`." ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard input prefix",
                  "body":
                    [ "let prefix = $w('#myInput').prefix; // $" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input prefix to a string literal",
                  "body":
                    [ "$w('#myInput').prefix = \"$\";" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input prefix to a vector image in the Media Manager",
                  "body":
                    [ "$w('#myElement').prefix = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input prefix to a vector XML string",
                  "body":
                    [ "$w('#myElement').prefix = '<svg height=\"10\" width=\"10\"><polygon points=\"0,9 9,9 5,0\" style=\"fill:lime;stroke:purple;stroke-width:1\"/></svg>';" ],
                  "extra":
                    {  } },
                { "title": "Disable the dashboard input prefix",
                  "body":
                    [ "$w('#myElement').prefix = null; // Disable the button's prefix property" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "readOnly",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 66,
              "filename": "DashboardInput.js" },
            { "lineno": 81,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Indicates if the dashboard input element is read-only.",
            "description":
              [ "By default, `readOnly` is set to `false`. This allows site visitors to edit the field.",
                "",
                "If `readOnly` is set to `true`, then the input field appears greyed out on your site and visitors cannot modify it." ],
            "links": [],
            "examples":
              [ { "title": "Check if a dashboard input is read-only",
                  "body":
                    [ "let isReadOnly = $w('#myElement').readOnly; // true" ],
                  "extra":
                    {  } },
                { "title": "Set a dashboard input to be read-only",
                  "body":
                    [ "$w('#myElement').readOnly = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "suffix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 163,
              "filename": "DashboardInput.js" },
            { "lineno": 187,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard input suffix.",
            "description":
              [ "You can set or get a suffix for a dashboard input element. For example, you can set a suffix to be a unit of measurement, such as `'cm'`.",
                "",
                "The following formats are supported:",
                "",
                "+ A string literal, such as `'cm'`",
                "+ Vector images from the Media Manager: `wix:vector://v1/<vector_uri>/<filename>`",
                "+ Vector images from the web: `http(s)://<vector image url>`",
                "+ Vector XML strings: `<svg>...</svg>`",
                "",
                "To disable the dashboard input suffix, set the `suffix` property to `null`." ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard input suffix",
                  "body":
                    [ "let prefix = $w('#myInput').suffix; // %" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input suffix to a string literal",
                  "body":
                    [ "$w('#myInput').suffix = '%';" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input suffix to an vector image in the Media Manager",
                  "body":
                    [ "$w('#myElement').suffix = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input suffix to a vector XML string",
                  "body":
                    [ "$w('#myElement').suffix = '<svg height=\"10\" width=\"10\"><polygon points=\"0,9 9,9 5,0\" style=\"fill:lime;stroke:purple;stroke-width:1\"/></svg>';" ],
                  "extra":
                    {  } },
                { "title": "Disable the dashboard input suffix",
                  "body":
                    [ "$w('#myElement').suffix = null; // Disable the button's suffix property" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 22,
              "filename": "DashboardInput.js" },
            { "lineno": 39,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard input element's tooltip content.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a visitor hovers over an element's ![tooltip-icon](images/tooltip-icon.png) icon.",
                "Set `tooltip` to `null` to disable.",
                "",
                "Max: 1200 characters" ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard input's tooltip",
                  "body":
                    [ "let tooltip = $w('#myElement').tooltip; // \"Submit your information here\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input's tooltip",
                  "body":
                    [ "$w('#myElement').tooltip = \"Submit your information here\";" ],
                  "extra":
                    {  } },
                { "title": "Disable the dashboard input's tooltip",
                  "body":
                    [ "$w('#myElement').tooltip = null; // Disables the tooltip" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 87,
              "filename": "DashboardInput.js" },
            { "lineno": 103,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the value in the dashboard input field.",
            "description":
              [ "To reset the text input and restore any placeholder text, set the value property to `null` or `undefined`.",
                "",
                "> **Note:**",
                "> + Changing a text input's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard input field's value",
                  "body":
                    [ "let myValue = $w('#myInput').value; // \"10 Main Street\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard input field's value",
                  "body":
                    [ "$w('#myInput').value = \"10 Main Street\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onKeyPress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when a key is pressed." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 193,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a key is pressed inside the dashboard input field.",
            "description":
              [ "A text input receives a `keyPress` event when a user presses a key on",
                " the keyboard while the cursor is inside the dashboard input element. A `keyPress`",
                " event is fired for printable and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                "",
                "> **Notes:**",
                "> + Some browsers do not issue a key press event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was pressed." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w('myElement').onKeyPress( (event) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.target.value;       // string value of text inside \"#myElement\" before the last KeyPress event",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyPress" } },
      { "name": "onKeyRelease",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is clicked." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 224,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the key is released within the dashboard input.",
            "description":
              [ "A dashboard input element receives a `keyRelease` event when a user releases a key on the keyboard",
                " while the cursor is inside the input element. A `keyRelease` event is fired for printable",
                " and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                " ",
                "> **Notes:**",
                "> + Some browsers do not issue a key release event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was released." ],
            "links": [],
            "examples":
              [ { "title": "Print key released and event type",
                  "body":
                    [ "$w('#myElement').onKeyRelease((event) => {",
                      "  console.log(event.key); // Enter",
                      "  console.log(event.type); // keyRelease",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyRelease" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }