{ "name": "DashboardInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedElement",
      "$w.FormElement",
      "$w.DisabledMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "DashboardInput.js" },
  "docs":
    { "summary": "An input element for capturing small amounts of text.",
      "description":
        [ "Input elements provide a way for site visitors to enter text on your site page. ",
          "The dashboard input element is intended for the design of dashboard pages on your site and in Wix Blocks, but you may use it on any site page.",
          "",
          "> **Note:**",
          ">[Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is an editor for building Wix apps. It is currently open to a limited number of users." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "label",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 42,
              "filename": "DashboardInput.js" },
            { "lineno": 54,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the element's label.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let myLabel = $w(\"#myElement\").label;  // \"Some text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"Some text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 101,
              "filename": "DashboardInput.js" },
            { "lineno": 118,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text content.",
            "description":
              [ "Placeholder text is typically used to provide a hint to the user of what to enter into a input element that accepts text.",
                "When the user begins to enter text, the placeholder text disappears.",
                "",
                "Max allowed length is 1200 characters. Set `placeholder` to `null` if you don't want default text inside the field." ],
            "links": [],
            "examples":
              [ { "title": "Get a button's placeholder",
                  "body":
                    [ "let myPlaceholder = $w(\"#myElement\").placeholder;  // \"Some text\"" ],
                  "extra":
                    {  } },
                { "title": "Set a button's placeholder",
                  "body":
                    [ "$w(\"#myElement\").placeholder = \"Some text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefix",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 125,
              "filename": "DashboardInput.js" },
            { "lineno": 140,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the field prefix.",
            "description":
              [ "Setting `prefix` defines the text that appears in front of the input field. It can be a literal string or",
                "a string containing a valid svg or svg source.",
                "",
                "Set `prefix` to `null` to disable." ],
            "links": [],
            "examples":
              [ { "title": "Get a button prefix",
                  "body":
                    [ "let prefix = $w(\"#myInput\").prefix;" ],
                  "extra":
                    {  } },
                { "title": "Set a button prefix",
                  "body":
                    [ "$w(\"#myInput\").prefix = “$”;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "readOnly",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 60,
              "filename": "DashboardInput.js" },
            { "lineno": 74,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Indicates if the input element is read-only.",
            "description":
              [ "By default, `readOnly` is set to `false`. This allows site visitors to edit the field.",
                "",
                "If `readOnly` is set to `true`, then the text input field appears greyed out on your site and visitors cannot modify it." ],
            "links": [],
            "examples":
              [ { "title": "Check if an input is read-only",
                  "body":
                    [ "let isReadOnly = $w(\"#myElement\").readOnly; // true" ],
                  "extra":
                    {  } },
                { "title": "Set an input to be read-only",
                  "body":
                    [ "$w(\"#myElement\").readOnly = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "suffix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 146,
              "filename": "DashboardInput.js" },
            { "lineno": 160,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the field suffix.",
            "description":
              [ "The suffix defines the text appears after the input field. It can be a string containing literal values",
                "or a valid svg or svg source. Set to `null` to disable." ],
            "links": [],
            "examples":
              [ { "title": "Get a button suffix",
                  "body":
                    [ "let prefix = $w(\"#myInput\").suffix;" ],
                  "extra":
                    {  } },
                { "title": "Set a button suffix",
                  "body":
                    [ "$w(\"#myInput\").suffix = \"$\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 21,
              "filename": "DashboardInput.js" },
            { "lineno": 36,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon.",
                "To hide the tooltip, set it to `null`.",
                "Maximum length is 1200 characters." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip; // \"Submit your information here\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"Submit your information here\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 80,
              "filename": "DashboardInput.js" },
            { "lineno": 95,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Sets or gets the value in the input field.",
            "description":
              [ "To reset the text input and restore any placeholder text, set the value property to `null` or `undefined`.",
                "",
                "> **Note:**",
                "> + Changing a text input's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an input field's value",
                  "body":
                    [ "let myValue = $w(\"#myInput\").value; // \"Text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an input field's value",
                  "body":
                    [ "$w(\"#myInput\").value = \"Text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onKeyPress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when a key is pressed." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 166,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a key is pressed inside the input field.",
            "description":
              [ "A text input receives a `keyPress` event when a user presses a key on",
                " the keyboard while the cursor is inside the input element. A `keyPress`",
                " event is fired for printable and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                "",
                "> **Notes:**",
                "> + Some browsers do not issue a key press event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was pressed." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w(\"myElement\").onKeyPress( (event) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.target.value;       // string value of text inside \"#myElement\" before the last KeyPress event",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyPress" } },
      { "name": "onKeyRelease",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is clicked." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 197,
              "filename": "DashboardInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the key is released within the input.",
            "description":
              [ "An input element receives a `keyRelease` event when a user releases a key on the keyboard",
                " while the cursor is inside the input element. A `keyRelease` event is fired for printable",
                " and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                " ",
                "* > **Notes:**",
                "> + Some browsers do not issue a key release event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was released." ],
            "links": [],
            "examples":
              [ { "title": "Print key released and event type",
                  "body":
                    [ "$w('#myElement').onKeyRelease((event) => {",
                      "\t\tconsole.log(event.key); // Enter",
                      "\t\tconsole.log(event.type); // keyRelease",
                      "\t})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyRelease" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }