{ "name": "TextParticles",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.LinkableMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "TextParticles.js" },
  "docs":
    { "summary": "The TextParticles element displays a line of text as animated particles that fluidly disperse and regroup.",
      "description":
        [ "> **Note:** This element is only available in Wix Studio.",
          "",
          "The TextParticles element is a text component that turns any line of text into animated particles, adding dynamic motion. You can control the animation programmatically." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "text",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 20,
              "filename": "TextParticles.js" },
            { "lineno": 37,
              "filename": "TextParticles.js" } ],
        "docs":
          { "summary": "Sets or gets the plain-text content of a TextParticles element.",
            "description":
              [ "Getting the `text` property returns the plain-text content of the TextParticles element.",
                " Setting the `text` property sets the plain-text content of the TextParticles element and replaces the current text.",
                "",
                " - Min text length: 1 character",
                " - Max text length: 500 characters" ],
            "links": [],
            "examples":
              [ { "title": "Get the TextParticles's plain-text content",
                  "body":
                    [ "const text = $w(\"#myTextParticles\").text;" ],
                  "extra":
                    {  } },
                { "title": "Set the TextParticles's plain-text content",
                  "body":
                    [ "$w(\"#myTextParticles\").text = \"my text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onPause",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The method to run when the animation is paused." } ],
        "ret":
          { "type": "$w.TextParticles",
            "doc": "The TextParticles element that triggered the event." },
        "locations":
          [ { "lineno": 97,
              "filename": "TextParticles.js" } ],
        "docs":
          { "summary": "Registers an event handler that runs when the text particles animation pauses.",
            "links":
              [ "[pause()](#pause)" ],
            "examples":
              [ { "title": "Handle when the animation pauses",
                  "body":
                    [ "$w(\"#myTextParticles\").onPause((event) => {",
                      "  let targetId = event.target.id; // \"myTextParticles\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onPlay",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The method to run when the animation starts playing." } ],
        "ret":
          { "type": "$w.TextParticles",
            "doc": "The TextParticles element that triggered the event." },
        "locations":
          [ { "lineno": 73,
              "filename": "TextParticles.js" } ],
        "docs":
          { "summary": "Registers an event handler that runs when the text particles animation begins playing.",
            "links":
              [ "[play()](#play)" ],
            "examples":
              [ { "title": "Handle when the animation starts playing",
                  "body":
                    [ "$w(\"#myTextParticles\").onPlay((event) => {",
                      "  let targetId = event.target.id; // \"myTextParticles\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onStop",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The method to run when the animation stops." } ],
        "ret":
          { "type": "$w.TextParticles",
            "doc": "The TextParticles element that triggered the event." },
        "locations":
          [ { "lineno": 85,
              "filename": "TextParticles.js" } ],
        "docs":
          { "summary": "Registers an event handler that runs when the text particles animation stops.",
            "links":
              [ "[stop()](#stop)" ],
            "examples":
              [ { "title": "Handle when the animation stops",
                  "body":
                    [ "$w(\"#myTextParticles\").onStop((event) => {",
                      "  let targetId = event.target.id; // \"myTextParticles\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "pause",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] } },
        "locations":
          [ { "lineno": 63,
              "filename": "TextParticles.js" } ],
        "docs":
          { "summary": "Pauses the currently playing animation.",
            "links": [],
            "examples":
              [ { "title": "Pause the text particles animation",
                  "body":
                    [ "$w(\"#myTextParticles\").pause();" ],
                  "extra":
                    {  } },
                { "title": "Pause the animation and handle when it pauses",
                  "body":
                    [ "$w(\"#myTextParticles\")",
                      "  .pause()",
                      "  .then(() => {",
                      "    console.log(\"Animation paused\");",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "play",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] } },
        "locations":
          [ { "lineno": 43,
              "filename": "TextParticles.js" } ],
        "docs":
          { "summary": "Plays the text particles animation for the beginning or from the point where the animation was paused.",
            "links": [],
            "examples":
              [ { "title": "Play the text particles animation",
                  "body":
                    [ "$w(\"#myTextParticles\").play();" ],
                  "extra":
                    {  } },
                { "title": "Play the animation and handle when it starts",
                  "body":
                    [ "$w(\"#myTextParticles\")",
                      "  .play()",
                      "  .then(() => {",
                      "    console.log(\"Animation started playing\");",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stop",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] } },
        "locations":
          [ { "lineno": 53,
              "filename": "TextParticles.js" } ],
        "docs":
          { "summary": "Stops the currently playing animation and resets it to its initial state.",
            "links": [],
            "examples":
              [ { "title": "Stop the text particles animation",
                  "body":
                    [ "$w(\"#myTextParticles\").stop();" ],
                  "extra":
                    {  } },
                { "title": "Stop the animation and handle when it completes",
                  "body":
                    [ "$w(\"#myTextParticles\")",
                      "  .stop()",
                      "  .then(() => {",
                      "    console.log(\"Animation stopped\");",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }