{ "name": "RichContentViewer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedElement" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "RichContent.js" },
  "docs":
    { "summary": "The Rich Content Viewer is a component that displays rich content created using the\n[Rich Content Editor](https://support.wix.com/en/article/cms-formerly-content-manager-working-with-rich-content-and-adding-it-to-a-dynamic-page)\nwithin the CMS (Content Management System).\nRich content refers to different media types, such as text, images, video, and other content embeds, which encourage user engagement.",
      "description":
        [ "The Rich Content Viewer API provides access to the rich content data stored in a single rich content collection field within the CMS. ",
          "Rich content can be managed using the [Rich Content Editor](https://support.wix.com/en/article/cms-formerly-content-manager-working-with-rich-content-and-adding-it-to-a-dynamic-page).",
          "> **Note:** Data for `nodes` can be viewed in the Rich Content field type in the",
          "[Rich Content Editor](https://support.wix.com/en/article/cms-formerly-content-manager-working-with-rich-content-and-adding-it-to-a-dynamic-page)",
          "through the CMS, and other 3rd-party apps that utilize rich content, such as [Wix Blog](https://www.wix.com/velo/reference/wix-blog-backend/posts)." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "content",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          [ "Object",
            "null" ],
        "locations":
          [ { "lineno": 22,
              "filename": "RichContent.js" },
            { "lineno": 35,
              "filename": "RichContent.js" } ],
        "docs":
          { "summary": "Sets or gets the element's content.",
            "description":
              [ "The `content` property is an object used to set and get the contents of the Rich Content Viewer component.",
                "Assigning `null` to this property resets the content to undefined." ],
            "links": [],
            "examples":
              [ { "title": "Gets an element's content",
                  "body":
                    [ "let richContent = $w(\"#myElement\").content; // { \"nodes\": [...]}" ],
                  "extra":
                    {  } },
                { "title": "Sets an element's content",
                  "body":
                    [ "$w(\"#myElement\").content = { ",
                      "  \"nodes\": [",
                      "    // ...",
                      "  ]",
                      "};" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }