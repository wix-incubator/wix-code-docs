{ "name": "HamburgerMenuContainer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.ClickableMixin",
      "$w.ContainableMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "HamburgerMenuContainer.js" },
  "docs":
    { "summary": "The hamburger menu container is the component that contains the elements of a hamburger menu.\nThese elements include a list of menu items that navigate to sections or pages on your site,\nan full browser screen overlay, and a close button.\n\n You can [attach](https://support.wix.com/en/article/attaching-elements-to-a-box)\n any element to a container box and move the box around, which is a useful\n way to to keep elements together. Some actions performed on a box affect the\n elements it contains. For example, [hiding](#hide) a box also effectively\n hides all the elements in the box, although the values of the\n [hidden](#hidden) properties of the elements contained in the box do not change.\n\n> **Note:** The hamburger menu can replace the traditional [Menu](https://www.wix.com/velo/reference/$w/menu) \n> to save space on smaller screen sizes. Its function is to toggle between a displayed and collapsed menu when triggered.",
      "description":
        [ "A hamburger menu is a hidden navigational menu designed to conserve space on your site.",
          "The menu is represented by an icon, traditionally three horizontal lines, in the corner of a site, ",
          "which implies user interaction will trigger an event.",
          "When the user clicks the icon, the hamburger menu container expands to reveal the hidden menu, which ",
          "typically has a vertical layout.",
          "",
          "The hamburger menu container consists of a list of links that navigate the ",
          "user to sections on your site, a full browser screen overlay, and a close button to ",
          "collapse the menu back to its hidden state." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "opened",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 82,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Indicates if the hamburger menu container is currently open.",
            "description":
              [ "If `opened` is `true`, the container is open.",
                "",
                " If `opened` is `false` the container is hidden." ],
            "links": [],
            "examples":
              [ { "title": "Indicates if the menu container is currently open",
                  "body":
                    [ "if($w(\"#myHamburgerMenu\").opened) {",
                      "    $w(\"#myHamburgerMenu\").close();",
                      "  }",
                      "  else {",
                      "    $w(\"#myHamburgerMenu\").open();",
                      "  }" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "close",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] } },
        "locations":
          [ { "lineno": 49,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Closes the hamburger menu container.",
            "description":
              [ "The `close()` function returns a Promise that is resolved when the",
                "hamburger menu's container has finished closing." ],
            "links":
              [ "[open](#open)" ],
            "examples":
              [ { "title": "Closes the hamburger menu container",
                  "body":
                    [ "$w(\"#myMenuContainer\").close();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onClose",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\nthe function expression to run when the element is clicked." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 71,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the menu container is closed.",
            "description":
              [ "An element receives a `click` event when a user clicks on the element and releases." ],
            "links": [],
            "examples":
              [ { "title": "Adds an event handler that runs when the menu container is closed",
                  "body":
                    [ "$w(\"#myHamburgerMenu\").onClose((event) => {",
                      "  let targetId = event.target.id; // \"myHamburgerMenu\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } },
      { "name": "onOpen",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\nthe function expression to run when the element is clicked." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 60,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the menu container is opened.",
            "description":
              [ "An element receives a `click` event when a user clicks on the element and releases." ],
            "links": [],
            "examples":
              [ { "title": "Adds an event handler that runs when the menu container is opened",
                  "body":
                    [ "$w(\"#myHamburgerMenu\").onOpen((event) => {",
                      "  let targetId = event.target.id; // \"myHamburgerMenu\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } },
      { "name": "open",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] } },
        "locations":
          [ { "lineno": 38,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Opens the hamburger menu container.",
            "description":
              [ "The `open()` function returns a Promise that is resolved when the ",
                "hamburger menu's container has finished opening." ],
            "links":
              [ "[close](#close)" ],
            "examples":
              [ { "title": "Opens the hamburger menu container",
                  "body":
                    [ "$w(\"#myHamburgerContainer\").open();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }