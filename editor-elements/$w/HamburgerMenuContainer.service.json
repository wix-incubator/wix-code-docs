{ "name": "HamburgerMenuContainer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.ClickableMixin",
      "$w.ContainableMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "HamburgerMenuContainer.js" },
  "docs":
    { "summary": "The hamburger menu container contains the hamburger menu elements, including the menu items with links to sections on your site, \nthe menu overlay, the close button, and other navigational items.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "opened",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 63,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Indicates if the hamburger menu container is currently open.",
            "description":
              [ "If `opened` is `true`, the container is open.",
                "",
                " If `opened` is `false` the container is not open." ],
            "links": [],
            "examples":
              [ { "title": "Indicates if the menu container is currently open",
                  "body":
                    [ "if($w(\"#hamburgerMenu1\").opened) {",
                      "    $w(\"#hamburgerMenu1\").close();",
                      "  }",
                      "  else {",
                      "    $w(\"#hamburgerMenu1\").open();",
                      "  }" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "close",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] } },
        "locations":
          [ { "lineno": 27,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Closes the hamburger menu container.",
            "description":
              [ "The `close()` function returns a Promise that is resolved when the",
                "The `close()` function returns a Promise that is resolved when the",
                "custom mobile menu's container has finished closing." ],
            "links":
              [ "[open](#open)" ],
            "examples":
              [ { "title": "Closes the hamburger menu container",
                  "body":
                    [ "$w(\"#customCloseButton\").onClick(() => {",
                      "\t$w(\"#hamburgerMenu1\").close();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onClose",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\nthe function expression to run when the element is clicked." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 51,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the menu container is closed.",
            "description":
              [ "An element receives a `click` event when a user clicks on the element and releases." ],
            "links": [],
            "examples":
              [ { "title": "Adds an event handler that runs when the menu container is closed",
                  "body":
                    [ "$w(\"#hamburgerMenu\").onClose((event) => {",
                      "\tlet targetId = event.target.id; // \"hamburgerMenu\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } },
      { "name": "onOpen",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\nthe function expression to run when the element is clicked." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 39,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the menu container is opened.",
            "description":
              [ "An element receives a `click` event when a user clicks on the element and releases." ],
            "links": [],
            "examples":
              [ { "title": "Adds an event handler that runs when the menu container is opened",
                  "body":
                    [ "$w(\"#hamburgerMenu\").onOpen((event) => {",
                      "\tlet targetId = event.target.id; // \"hamburgerMenu\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } },
      { "name": "open",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] } },
        "locations":
          [ { "lineno": 16,
              "filename": "HamburgerMenuContainer.js" } ],
        "docs":
          { "summary": "Opens the hamburger menu container.",
            "description":
              [ "The `open()` function returns a Promise that is resolved when the ",
                "hamburger menu's container has finished opening." ],
            "links":
              [ "[close](#close)" ],
            "examples":
              [ { "title": "Opens the hamburger menu container",
                  "body":
                    [ "$w(\"#customOpenButton\").onClick(() => {",
                      "\t$w(\"#hamburgerMenu1\").open();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }