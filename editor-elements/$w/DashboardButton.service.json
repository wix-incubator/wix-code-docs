{ "name": "DashboardButton",
  "memberOf": "$w",
  "mixes":
    [ "$w.ClickableMixin",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedElement" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "DashboardButton.js" },
  "docs":
    { "summary": "A dashboard page button.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 197,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "<b>Note: This standard element property is not relevant for this DashboardButton.</b>",
            "description":
              [ "> This property is not yet available to all users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example, ",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "",
                "Custom classes are those that you create on your site, not the predefined global classes",
                "that are provided for each element.  ",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://www.wix.com/velo/reference/$w/styling-elements-with-css) ",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn/CSS)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isLoaderVisible",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 29,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Indicates whether the dashboard button is currently loading.",
            "description":
              [ "This property can be used to indicate whether the button is currently in a loading state. If `true`, the button shows a loading indicator. If `false`, the button does not show a loading indicator. ",
                "> **Note:** Use the `showLoader()` function to show the loader. Similarly, Use the `hideLoader()` function to hide the loader." ],
            "links":
              [ "[showLoader](#showLoader)",
                "[hideLoader](#hideLoader)" ],
            "examples":
              [ { "title": "Get whether the button's loader is showing",
                  "body":
                    [ "let isLoaderVisible = $w(\"#myButton\").isLoaderVisible;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"Button\"",
        "locations":
          [ { "lineno": 11,
              "filename": "DashboardButton.js" },
            { "lineno": 23,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Sets or gets the button's label.",
            "description":
              [ "Sets or gets the button's text. Maximum length is 120 characters." ],
            "links": [],
            "examples":
              [ { "title": "Get the button label",
                  "body":
                    [ "let myLabel = $w(\"#myElement\").label;  // \"Full Name\"" ],
                  "extra":
                    {  } },
                { "title": "Set the button label",
                  "body":
                    [ "$w(\"#myElement\").label = \"Full Name\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "link",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 60,
              "filename": "DashboardButton.js" },
            { "lineno": 103,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard button's link.",
            "description":
              [ "When the dashboard button is clicked, the browser navigates to the `link` location.",
                "",
                " The different types of links you can use are:",
                "",
                " + `/localPageURL`: another page on your site",
                " + `/`: your site's home page",
                " + `http(s)://<url>`: an external web address",
                " + `wix:document://<location>`: a document stored in the Media Manager",
                " + `mailto:<email-address>?subject=<subject>`: an email",
                " + `tel:<phone number>`: a phone number",
                "",
                "",
                " The `link` property attempts to properly encode the URL value that",
                " you set. For example, `.../some page` is encoded to `.../some%20page`.",
                " However, some URLs do not have one unambiguous encoding. In those cases",
                " it is up to you to encode the URL to reflect your intentions. Because of",
                " these situations, it is a best practice to always encode URLs before you",
                " set them as the value of the `link` property. Regardless of how you set",
                " the `link` property, when you get its value, it returns an encoded URL.",
                "",
                " Note that Wix URLs do not contain spaces. A page which has spaces in its",
                " name has its spaces replaced with dashes (`-`). Similarly,",
                " a [dynamic page URL](https://support.wix.com/en/article/creating-a-unique-dynamic-page-url) which ",
                " contains the value of a field in your collection with spaces",
                " has its spaces replaced with dashes (`-`).",
                "",
                "> **Note:** Make sure to set your button link before running (and not inside) the [`onClick()`](https://www.wix.com/velo/reference/$w/button/onclick) event handler." ],
            "links":
              [ "[target](#target)" ],
            "examples":
              [ { "title": "Get a link from the #element.link property",
                  "body":
                    [ "let link = $w(\"#myElement\").link; // https://wix.com" ],
                  "extra":
                    {  } },
                { "title": "Link to a document",
                  "body":
                    [ "$w(\"#myElement\").link = \"wix:document://v1/9bec_52fb06ea/filename.xls\";" ],
                  "extra":
                    {  } },
                { "title": "Set the button to open an external web link in a new browser page when clicked",
                  "body":
                    [ "$w(\"#myElement\").link = \"http://wix.com\";",
                      "$w(\"#myElement\").target = \"_blank\";" ],
                  "extra":
                    {  } },
                { "title": "Send an email when the dashboard button is clicked",
                  "body":
                    [ "$w(\"#myElement\").link = \"mailto:user@example.com?subject=Some%20Topic\";" ],
                  "extra":
                    {  } },
                { "title": "Call a telephone number when the dashboard button is clicked",
                  "body":
                    [ "$w(\"#myElement\").link = \"tel:+1-555-555-5555\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefix",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          [ "string",
            "null" ],
        "locations":
          [ { "lineno": 139,
              "filename": "DashboardButton.js" },
            { "lineno": 163,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard button prefix.",
            "description":
              [ "You can get or set a prefix for a dashboard button. For example, you can set a prefix to be a ",
                "currency, such as `'$'`.  ",
                "",
                "The following formats are supported:",
                "",
                "* A string literal, such as `'$'`.",
                "* Vector images from the Media Manager: `wix:vector://v1/<vector_uri>/<filename>`.",
                "* Vector images from the web: `http(s)://<vector image url>`.",
                "* Vector XML string: `<svg>...</svg>`.",
                "> **Note:** To disable the button's prefix, set the `prefix` property to `null`." ],
            "links": [],
            "examples":
              [ { "title": "Get the button prefix",
                  "body":
                    [ "let prefix = $w(\"#myInput\").prefix; // $" ],
                  "extra":
                    {  } },
                { "title": "Set the button prefix to a string literal",
                  "body":
                    [ "$w(\"#myInput\").prefix = \"$\";" ],
                  "extra":
                    {  } },
                { "title": "Set the button prefix to a vector image in the Media Manager",
                  "body":
                    [ "$w(\"#myElement\").prefix = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';" ],
                  "extra":
                    {  } },
                { "title": "Set the button prefix to a vector XML string",
                  "body":
                    [ "$w(\"#myElement\").prefix = '<svg height=\"10\" width=\"10\"><polygon points=\"0,9 9,9 5,0\" style=\"fill:lime;stroke:purple;stroke-width:1\"/></svg>';" ],
                  "extra":
                    {  } },
                { "title": "Disable the button prefix",
                  "body":
                    [ "$w(\"#myElement\").prefix = null; // Disable the button's prefix property" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "suffix",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          [ "string",
            "null" ],
        "locations":
          [ { "lineno": 169,
              "filename": "DashboardButton.js" },
            { "lineno": 191,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard button suffix.",
            "description":
              [ "You can get or set a suffix for a dashboard text button. For example, you can set a suffix to be a unit of measurement, such as 'cm'.",
                "",
                "The following formats are supported:",
                "",
                "+ A string literal, such as 'cm'",
                "+ Vector images from the Media Manager: `wix:vector://v1/<vector_uri>/<filename>`",
                "+ Vector images from the web: `http(s)://<vector image url>`",
                "+ Vector XML strings: `<svg>...</svg>`",
                "",
                "> **Note:** To disable the button's suffix, set the `suffix` property to `null`." ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard button suffix",
                  "body":
                    [ "let prefix = $w(\"#myInput\").suffix; // %" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard button suffix to string literal",
                  "body":
                    [ "$w(\"#myInput\").suffix = \"%\";" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard button suffix to an vector image in the Media Manager",
                  "body":
                    [ "$w(\"#myElement\").suffix = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard button suffix to a vector XML string",
                  "body":
                    [ "$w(\"#myElement\").suffix = '<svg height=\"10\" width=\"10\"><polygon points=\"0,9 9,9 5,0\" style=\"fill:lime;stroke:purple;stroke-width:1\"/></svg>';" ],
                  "extra":
                    {  } },
                { "title": "Disable the dashboard button suffix",
                  "body":
                    [ "$w(\"#myElement\").suffix = null; // Disable the button's suffix property" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "target",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          [ "string",
            "null" ],
        "defaultValue": "\"_blank\"",
        "locations":
          [ { "lineno": 109,
              "filename": "DashboardButton.js" },
            { "lineno": 133,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Sets or gets the target of the dashboard button's link.",
            "description":
              [ "An element's `target` determines where its [link](#link) opens. The",
                " target can be set so the [link](#link) opens in the current page or",
                " in a new page.",
                "",
                " Supported values are:",
                "",
                " + `\"_blank\"`: The link opens in a new tab or window.",
                " + `\"_self\"`: The link opens in the tab or window.",
                " + `null`: Resets the `target` property to its default value." ],
            "links":
              [ "[target](#target)" ],
            "examples":
              [ { "title": "Get the current target value for the dashboard button",
                  "body":
                    [ "let target = $w(\"#myElement\").target; // \"_blank\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard button's target value to the specified value",
                  "body":
                    [ "$w(\"#myElement\").target = \"_self\";" ],
                  "extra":
                    {  } },
                { "title": "Resets the dashboard button's target property",
                  "body":
                    [ "$w(\"#myElement\").target = null; // Resets the target property to its default value of \"_blank\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "hideLoader",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 51,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Hides the button's loading indicator.",
            "description":
              [ "The `hideLoader()` function hides the button's loading indicator and sets the dashboard button's `isLoaderVisible` property to `false`." ],
            "links": [],
            "examples":
              [ { "title": "Hide the button's loading indicator",
                  "body":
                    [ "$w(\"#myButton\").hideLoader(); //Disables the loading indicator" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showLoader",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 42,
              "filename": "DashboardButton.js" } ],
        "docs":
          { "summary": "Shows the button's loading indicator.",
            "description":
              [ "The `showLoader()` function shows the button's loading indicator and sets the dashboard button's `isLoaderVisible` property to `true`." ],
            "links": [],
            "examples":
              [ { "title": "Show the button's loading indicator",
                  "body":
                    [ "$w(\"#myButton\").showLoader(); //Show the loading indicator" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }