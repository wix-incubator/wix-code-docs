{ "name": "DashboardNumberInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedElement",
      "$w.ValueMixin",
      "$w.DisabledMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "DashboardNumberInput.js" },
  "docs":
    { "summary": "An input element for capturing numbers on your [dashboard page](https://dev.wix.com/docs/build-apps/developer-tools/cli/wix-cli-for-apps/dashboard-pages).",
      "description":
        [ "The dashboard number input element allows visitors to input numerical information into your site page.",
          "",
          "It is intended for use on ",
          "[dashboard pages](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/frontend-code/dashboard-admin-pages/working-with-dashboard-pages) ",
          "in your Wix site or in [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles),",
          "but you may use it on any page." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 229,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "<b>Note: This standard element property is not relevant for this DashboardNumberInput.</b>",
            "description":
              [ "> This property is not yet available to all users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example, ",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "",
                "Custom classes are those that you create on your site, not the predefined global classes",
                "that are provided for each element.  ",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://www.wix.com/velo/reference/$w/styling-elements-with-css) ",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn/CSS)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 44,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 58,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard number input's label.\n\nMax: 1200 characters",
            "links": [],
            "examples":
              [ { "title": "Get the dashboard number input's label",
                  "body":
                    [ "let myLabel = $w('#myElement').label;  // \"Full Name\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard number input's label",
                  "body":
                    [ "$w('#myElement').label = \"Full Name\";" ],
                  "extra":
                    {  } },
                { "title": "Disable the dashboard number input's label",
                  "body":
                    [ "$w('#myElement').label = null; // Disables the element's label" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 148,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 161,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum allowed input value.",
            "description":
              [ "Set to `null` or `undefined` to remove the maximum allowed value." ],
            "links": [],
            "examples":
              [ { "title": "Get max allowed input",
                  "body":
                    [ "let myMax = $w('#myNumberInput').max;  // 50" ],
                  "extra":
                    {  } },
                { "title": "Set max allowed input",
                  "body":
                    [ "$w('#myNumberInput').max = 50;" ],
                  "extra":
                    {  } },
                { "title": "Remove the maximum limit on input",
                  "body":
                    [ "$w('#myInput').max = null; // No maximum" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 129,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 142,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the minimum allowed number value.",
            "description":
              [ "Set to `null` or `undefined` to remove the minimum allowed value." ],
            "links": [],
            "examples":
              [ { "title": "Get the minimum allowed input",
                  "body":
                    [ "let myMin = $w('#myNumberInput').min;  // 10" ],
                  "extra":
                    {  } },
                { "title": "Set the minimum allowed input",
                  "body":
                    [ "$w('#myNumberInput').min = 10;" ],
                  "extra":
                    {  } },
                { "title": "Remove the minimum limit on input",
                  "body":
                    [ "$w('#myInput').min = null; // No minimum" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 106,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 122,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text content.",
            "description":
              [ "Placeholder text is typically used to provide a hint to the user of what to enter into a input element that accepts text.",
                "When the user begins to enter text, the placeholder text disappears. Set `placeholder` to `null` to disable.",
                "",
                "Max: 1200 characters" ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard number input's placeholder",
                  "body":
                    [ "let myPlaceholder = $w('#myElement').placeholder;  // \"Email\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard number input's placeholder",
                  "body":
                    [ "$w('#myElement').placeholder = \"Email\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "readOnly",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 64,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 79,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Indicates if the dashboard number input element is read-only.",
            "description":
              [ "By default, `readOnly` is set to `false`. This allows site visitors to edit the field.",
                "",
                "If `readOnly` is set to `true`, then the input field appears greyed out on your site and visitors cannot modify it." ],
            "links": [],
            "examples":
              [ { "title": "Check if the dashboard number input is read-only",
                  "body":
                    [ "let isReadOnly = $w('#myElement').readOnly; // true" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard number input to be read-only",
                  "body":
                    [ "$w('#myElement').readOnly = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 21,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 38,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the dashboard number input's tooltip content.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a visitor hovers over an element's ![tooltip-icon](images/tooltip-icon.png) icon.",
                "Set `tooltip` to `null` to disable.",
                "",
                "Max: 1200 characters" ],
            "links": [],
            "examples":
              [ { "title": "Get the dashboard number input's tooltip",
                  "body":
                    [ "let tooltip = $w('#myElement').tooltip; // \"Submit your information here\"" ],
                  "extra":
                    {  } },
                { "title": "Set the dashboard number input's tooltip",
                  "body":
                    [ "$w('#myElement').tooltip = \"Submit your information here\";" ],
                  "extra":
                    {  } },
                { "title": "Disable the dashboard number input's tooltip",
                  "body":
                    [ "$w('#myElement').tooltip = null; // Disables the tooltip" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 85,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 100,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the value in the dashboard number input field.",
            "description":
              [ "To reset the element's value, set `value` to `null` or `undefined`.",
                "",
                "> **Note**: Changing an element's value in code does not trigger an onChange event." ],
            "links": [],
            "examples":
              [ { "title": "Get a dashboard number input field's value",
                  "body":
                    [ "let myValue = $w('#myElement').value; // 1" ],
                  "extra":
                    {  } },
                { "title": "Set a dashboard number input field's value",
                  "body":
                    [ "$w('#myElement').value = 1;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onKeyPress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when a key is pressed." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 167,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a key is pressed within\nthe input field.",
            "description":
              [ "A dashboard number input element receives a `keyPress` event when a user presses a key on",
                " the keyboard while the cursor is inside the input element. A `keyPress`",
                " event is fired for printable and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                "",
                "> **Notes:**",
                "> + Some browsers do not issue a key press event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was pressed." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w('myElement').onKeyPress( (event) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.target.value;       // string value of text inside \"#myElement\" before the last KeyPress event",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyPress" } },
      { "name": "onKeyRelease",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is clicked." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 200,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the key is released within an input.",
            "description":
              [ "You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                " This will automatically add the required code for the selected element and event.",
                "",
                "> **Notes:**",
                "> + Some browsers do not issue a key release event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was released." ],
            "links": [],
            "examples":
              [ { "title": "Print key released and event type",
                  "body":
                    [ "$w('#myElement').onKeyRelease((event) => {",
                      "  console.log(event.key); // Enter",
                      "  console.log(event.type); // keyRelease",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyRelease" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }