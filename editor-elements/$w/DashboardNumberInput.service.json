{ "name": "DashboardNumberInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedElement",
      "$w.FormElement",
      "$w.DisabledMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "DashboardNumberInput.js" },
  "docs":
    { "summary": "An input element for capturing numbers.",
      "description":
        [ "You can use the dashboard number input element on any page in your regular site, including dashboard pages. You can also use it on",
          "dashboard pages that you create in [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles)." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 37,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 50,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the field label.",
            "description":
              [ "The label appears directly above the input field and tells the user what to input.",
                "It can have a maximum length of 120 characters. To create a field with no label, set `label` to `null`." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let myText = $w(\"#myInput\").label;  // \"Some text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myInput\").label = \"Some text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 132,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 143,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum allowed input value.",
            "links": [],
            "examples":
              [ { "title": "Get max allowed input",
                  "body":
                    [ "let myMax = $w(\"#myNumberInput\").max;  // 50" ],
                  "extra":
                    {  } },
                { "title": "Set max allowed input",
                  "body":
                    [ "$w(\"#myNumberInput\").max = 50;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 115,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 126,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the minimum allowed number value.",
            "links": [],
            "examples":
              [ { "title": "Get the minimum allowed input",
                  "body":
                    [ "let myMin = $w(\"#myNumberInput\").min;  // 10" ],
                  "extra":
                    {  } },
                { "title": "Set the minimum allowed input",
                  "body":
                    [ "$w(\"#myNumberInput\").min = 10;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 96,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 108,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text content.",
            "description":
              [ "Set `placeholder` to `null` to disable. Max character length is 1200." ],
            "links": [],
            "examples":
              [ { "title": "Get a button's placeholder",
                  "body":
                    [ "let myText = $w(\"#myInput\").placeholder;  // \"Some text\"" ],
                  "extra":
                    {  } },
                { "title": "Set a button's placeholder",
                  "body":
                    [ "$w(\"#myInput\").placeholder = \"Some text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "readOnly",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 56,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 70,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets the input element to read-only or editable.",
            "links": [],
            "examples":
              [ { "title": "Get an input's readOnly value",
                  "body":
                    [ "let isReadOnly = $w(\"#myWsrInput\").readOnly; // true" ],
                  "extra":
                    {  } },
                { "title": "Set an input's readOnly value",
                  "body":
                    [ "$w(\"#myInput\").readOnly = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 17,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 31,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the tooltip text content.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon.",
                "Maximum length is 1200 characters. Set `tooltip` to null to disable." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"Text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").value = \"Text\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 76,
              "filename": "DashboardNumberInput.js" },
            { "lineno": 90,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Sets or gets the value in the input field.",
            "description":
              [ "To reset the element's value, set `value` to `null` or `undefined`.",
                "",
                "> **Note**: Changing an element's value in code does not trigger an onChange event." ],
            "links": [],
            "examples":
              [ { "title": "Get an input field's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // 1" ],
                  "extra":
                    {  } },
                { "title": "Set an input field's value",
                  "body":
                    [ "$w(\"#myElement\").value = 1;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onKeyRelease",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is clicked." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 182,
              "filename": "DashboardNumberInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the key is released within an input.",
            "description":
              [ "You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                " ",
                "![Properties and Events panel](images/properties_and_events.png \"Properties and Events panel\")",
                "",
                " This will automatically add the required code for the selected element and event:",
                "",
                " ```javascript ",
                "    export function input1_keyRelease(event) {",
                "       // This function was added from the Properties & Events panel. To learn more, visit http://wix.to/UcBnC-4",
                "       // Add your code for this event here: ",
                "     }  ",
                "```" ],
            "links": [],
            "examples":
              [ { "title": "Print key released and event type",
                  "body":
                    [ "$w('#myInput').onKeyRelease((event) => {",
                      "\t\tconsole.log(event.key); // Enter",
                      "\t\tconsole.log(event.type); // keyRelease",
                      "\t})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyRelease" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }