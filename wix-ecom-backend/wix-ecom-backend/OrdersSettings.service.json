{
  "name": "OrdersSettings",
  "memberOf": "wix-ecom-backend",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-ecom-backend-orders_settings",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "getOrdersSettings",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.OrdersSettings.GetOrdersSettingsResponse"
                }
              ]
            }
          }
        ],
        "doc": "The requested orders settings.\n"
      },
      "docs": {
        "summary": "Retrieves the sites' order settings.",
        "description": [
          "The `getOrdersSettings()` function returns a Promise that resolves to orders settings."
        ],
        "examples": [
          {
            "title": "Get orders settings without elevated permissions ",
            "body": [
              "import { Permissions, webMethod } from 'wix-web-module';",
              "import { ordersSettings } from 'wix-ecom-backend';",
              "",
              "export const myGetOrdersSettingsFunction = webMethod(Permissions.Anyone, async () => {",
              "  try {",
              "    const settings = await ordersSettings.getOrdersSettings();",
              "    console.log('Success! OrdersSettings:', settings);",
              "    return settings;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "});",
              "",
              "/* Promise resolves to:",
              " * {",
              " *   \"ordersSettings\": {",
              " *     \"inventoryUpdateTrigger\": \"ON_ORDER_PLACED\",",
              " *     \"createInvoice\": false",
              " *   }",
              " * }",
              " */"
            ]
          },
          {
            "title": "Get orders settings with elevated permissions ",
            "body": [
              "import { Permissions, webMethod } from 'wix-web-module';",
              "import { ordersSettings } from 'wix-ecom-backend';",
              "import { elevate } from 'wix-auth';",
              "",
              "export const myGetOrdersSettingsFunction = webMethod(Permissions.Anyone, async () => {",
              "  try {",
              "    const elevatedGetOrdersSettings = elevate(ordersSettings.getOrdersSettings);",
              "    const getOrdersSettings = await elevatedGetOrdersSettings();",
              "    console.log('Success! Orders settings:', getOrdersSettings);",
              "    return getOrdersSettings;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "});",
              "",
              "/*Promise resolves to:",
              " * {",
              " *   \"ordersSettings\": {",
              " *     \"inventoryUpdateTrigger\": \"ON_ORDER_PLACED\",",
              " *     \"createInvoice\": false",
              " *   }",
              " * }",
              " */"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getOrdersSettings"
    },
    {
      "name": "updateOrdersSettings",
      "params": [
        {
          "name": "ordersSettings",
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.OrdersSettings"
            }
          ],
          "doc": "Orders settings to update.",
          "required": true
        }
      ],
      "requiredFields": [
        "ordersSettings"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.OrdersSettings.UpdateOrdersSettingsResponse"
                }
              ]
            }
          }
        ],
        "doc": "The updated orders settings.\n"
      },
      "docs": {
        "summary": "Updates the sites' orders settings.",
        "description": [
          "The `updateOrdersSettings()` function returns a Promise that resolves to the newly updated orders settings."
        ],
        "examples": [
          {
            "title": "Update orders settings (dashboard page code)",
            "body": [
              "import { ordersSettings } from 'wix-ecom-backend';",
              "",
              "/* Sample update value:",
              "{",
              "    \"ordersSettingsInfo\": {",
              "        \"createInvoice\": true",
              "    }",
              "}",
              "*/",
              "",
              "export async function myUpdateOrdersSettingsFunction(ordersSettingsInfo) {",
              "  try {",
              "    const settings = await ordersSettings.updateOrdersSettings(ordersSettingsInfo);",
              "    console.log('Success! Updated orders settings:', settings);",
              "    return settings;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "}",
              "",
              "/*Promise resolves to:",
              "{",
              "  \"ordersSettings\": {",
              "    \"inventoryUpdateTrigger\": \"ON_ORDER_PLACED\",",
              "    \"createInvoice\": true",
              "  }",
              "}",
              "*/",
              ""
            ]
          },
          {
            "title": "Update orders settings (export from backend code)",
            "body": [
              "import { Permissions, webMethod } from 'wix-web-module';",
              "import { ordersSettings } from 'wix-ecom-backend';",
              "import { elevate } from 'wix-auth';",
              "",
              "/* Sample update value:",
              " * {",
              " *   \"ordersSettingsInfo\": {",
              " *     \"createInvoice\": true",
              " *   }",
              " * }",
              " */",
              "",
              "export const myUpdateOrdersSettingsFunction = webMethod(Permissions.Admin, async (ordersSettingsInfo) => {",
              "  try {",
              "    const elevatedUpdateOrdersSettings = elevate(ordersSettings.updateOrdersSettings);",
              "    const settings = await elevatedUpdateOrdersSettings(ordersSettingsInfo);",
              "    console.log('Success! Updated orders settings:', settings);",
              "    return settings;",
              "  } catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "  }",
              "});",
              "",
              "/*Promise resolves to:",
              "{",
              "  \"ordersSettings\": {",
              "    \"inventoryUpdateTrigger\": \"ON_ORDER_PLACED\",",
              "    \"createInvoice\": true",
              "  }",
              "}",
              "*/"
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "updateOrdersSettings",
      "isAdminMethod": true
    }
  ],
  "messages": [
    {
      "name": "ActionEvent",
      "members": [
        {
          "name": "bodyAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteOrdersSettingsRequest",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteOrdersSettingsResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEvent",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Unique event ID.\nAllows clients to ignore duplicate webhooks."
        },
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "entityEventSequence",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A sequence number defining the order of updates to the underlying entity.\nFor example, given that some entity was updated at 16:00 and than again at 16:01,\nit is guaranteed that the sequence number of the second update is strictly higher than the first.\nAs the consumer, you can use this value to ensure that you handle messages in the correct order.\nTo do so, you will need to persist this number on your end, and compare the sequence number from the\nmessage against the one you have stored. Given that the stored number is higher, you should ignore the message."
        },
        {
          "name": "entityFqdn",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Assumes actions are also always typed to an entity_type\nExample: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction"
        },
        {
          "name": "entityId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the entity associated with the event."
        },
        {
          "name": "eventTime",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event timestamp."
        },
        {
          "name": "originatedFrom",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "If present, indicates the action that triggered the event."
        },
        {
          "name": "slug",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\nThis is although the created/updated/deleted notion is duplication of the oneof types\nExample: created/updated/deleted/started/completed/email_opened"
        },
        {
          "name": "triggeredByAnonymizeRequest",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the event was triggered as a result of a privacy regulation application\n(for example, GDPR)."
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfDomainEventBodyOneOf",
            "members": [
              "actionEvent",
              "createdEvent",
              "deletedEvent",
              "updatedEvent"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEventBodyOneOf",
      "members": [
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityCreatedEvent",
      "members": [
        {
          "name": "entityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityDeletedEvent",
      "members": [
        {
          "name": "deletedEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Entity that was deleted"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityUpdatedEvent",
      "members": [
        {
          "name": "currentEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\nThis means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\nWe don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetOrdersSettingsRequest",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetOrdersSettingsResponse",
      "members": [
        {
          "name": "ordersSettings",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.OrdersSettings"
            }
          ],
          "doc": "Orders settings."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "OrdersSettings",
      "members": [
        {
          "name": "createInvoice",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether to automatically create invoices for every new order paid online.\nDefault: `false`"
        },
        {
          "name": "inventoryUpdateTrigger",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Defines when to update the store inventory.\n\n- `ON_ORDER_PAID`: Stock quantities will update only after the payment is approved.\n - `ON_ORDER_PLACED`: Stock quantities will update while the payment is being processed. If the payment did not go through, items will restock.\n\nDefault: `ON_ORDER_PLACED`\n"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateOrdersSettingsOptions",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateOrdersSettingsRequest",
      "members": [
        {
          "name": "ordersSettings",
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.OrdersSettings"
            }
          ],
          "doc": "Orders settings to update."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdateOrdersSettingsResponse",
      "members": [
        {
          "name": "ordersSettings",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.OrdersSettings.OrdersSettings"
            }
          ],
          "doc": "The updated orders settings."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
