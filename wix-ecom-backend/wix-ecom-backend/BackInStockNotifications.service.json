{
  "name": "BackInStockNotifications",
  "memberOf": "wix-ecom-backend",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-ecom-backend-back_in_stock_notification_request",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "createBackInStockNotificationRequest",
      "params": [
        {
          "name": "request",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
            }
          ],
          "doc": "Notification request information.\n\nIncludes details for the out of stock item and the email address\nrequesting to be notified when it's back in stock.",
          "required": true
        },
        {
          "name": "itemDetails",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockItemDetails"
            }
          ],
          "doc": "Item details to include in the notification when the item is back in stock.",
          "required": true
        }
      ],
      "requiredFields": [
        "itemDetails",
        "itemDetails.name",
        "itemDetails.price",
        "request",
        "request.catalogReference",
        "request.catalogReference.appId",
        "request.catalogReference.catalogItemId",
        "request.email"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
                }
              ]
            }
          }
        ],
        "doc": "Created back in stock notification request.\n"
      },
      "docs": {
        "summary": "Creates a back in stock notification request.",
        "description": [
          "If a notification request already exists for the same `catalogReference` and `email`,\nthen a new one isn't created and the existing request is returned."
        ],
        "examples": [
          {
            "title": "createBackInStockNotificationRequest example",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "  ",
              " async function createBackInStockNotificationRequest(request, itemDetails) {",
              "   try {",
              "     const result = await backInStockNotifications.createBackInStockNotificationRequest(request, itemDetails);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "createBackInStockNotificationRequest"
    },
    {
      "name": "deleteBackInStockNotificationRequest",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the notification request to delete.",
          "required": true
        }
      ],
      "requiredFields": [
        "_id"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Deletes a back in stock notification request.",
        "description": [],
        "examples": [
          {
            "title": "deleteBackInStockNotificationRequest example",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "  ",
              " async function deleteBackInStockNotificationRequest(id) {",
              "   try {",
              "     const result = await backInStockNotifications.deleteBackInStockNotificationRequest(id);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "deleteBackInStockNotificationRequest",
      "isAdminMethod": true
    },
    {
      "name": "getBackInStockNotificationRequest",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the notification request to retrieve.",
          "required": true
        }
      ],
      "requiredFields": [
        "_id"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
                }
              ]
            }
          }
        ],
        "doc": "Retrieved back in stock notification request.\n"
      },
      "docs": {
        "summary": "Retrieves a back in stock notification request.",
        "description": [],
        "examples": [
          {
            "title": "getBackInStockNotificationRequest example",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "  ",
              " async function getBackInStockNotificationRequest(id) {",
              "   try {",
              "     const result = await backInStockNotifications.getBackInStockNotificationRequest(id);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getBackInStockNotificationRequest",
      "isAdminMethod": true
    },
    {
      "name": "getBackInStockNotificationRequestsCountByCatalogReferences",
      "params": [
        {
          "name": "catalogReferences",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-ecom-backend.BackInStockNotifications.CatalogReference"
                  }
                ]
              }
            }
          ],
          "doc": "`catalogReference` items to retrieve the notification request for.",
          "required": true
        }
      ],
      "requiredFields": [
        "catalogReferences"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.BackInStockNotifications.GetBackInStockNotificationRequestsCountByCatalogReferencesResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Retrieves the amount of back in stock requests for a given `catalogReference` item.",
        "description": [],
        "examples": [
          {
            "title": "getBackInStockNotificationRequestsCountByCatalogReferences example",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "  ",
              " async function getBackInStockNotificationRequestsCountByCatalogReferences(catalogReferences) {",
              "   try {",
              "     const result = await backInStockNotifications.getBackInStockNotificationRequestsCountByCatalogReferences(catalogReferences);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "getBackInStockNotificationRequestsCountByCatalogReferences",
      "isAdminMethod": true
    },
    {
      "name": "markAsNotificationSent",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the notification request to mark.",
          "required": true
        }
      ],
      "requiredFields": [
        "_id"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.BackInStockNotifications.MarkAsNotificationSentResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Sets `status` of a back in stock request to `NOTIFICATION_SENT`.",
        "description": [
          "Use this function if the notification is sent manually offline. If the notification is sent automatically or with the `reportItemsBackInStock()` function, then `status` updates on its own."
        ],
        "examples": [
          {
            "title": "markAsNotificationSent example",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "  ",
              " async function markAsNotificationSent(id) {",
              "   try {",
              "     const result = await backInStockNotifications.markAsNotificationSent(id);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "markAsNotificationSent",
      "isAdminMethod": true
    },
    {
      "name": "queryBackInStockNotificationRequests",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Creates a query to retrieve a list of back in stock notification requests.  ",
        "description": [
          "",
          "The `queryBackInStockNotificationRequests()` method builds a query to retrieve a list of back in stock notification requests and returns a `RequestsQueryBuilder` object.  ",
          "",
          "The returned object contains the query definition, which is typically used to run the query using the `find()` method.  ",
          "",
          "You can refine the query by chaining `RequestsQueryBuilder` methods onto the query. `RequestsQueryBuilder` methods enable you to sort, filter, and control the results that `queryBackInStockNotificationRequests()` returns.  ",
          "",
          "The following `RequestsQueryBuilder` methods are supported for `queryBackInStockNotificationRequests()`. For a full description of the Requests object, see the object returned for the `items` property in `RequestsQueryResult`.\"",
          "",
          "",
          "|PROPERTY\t|SUPPORTED FILTERS & SORTING\t",
          "|:---:|:---:|",
          "|`_id`|[`eq()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#eq),[`ne()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ne),[`in()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#in),[`startsWith()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#startsWith),[`exists()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#exists),[`ascending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ascending),[`descending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#descending)|",
          "|`contactId`|[`eq()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#eq),[`ne()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ne),[`in()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#in),[`startsWith()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#startsWith),[`exists()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#exists),[`ascending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ascending),[`descending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#descending)|",
          "|`status`|[`eq()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#eq),[`ne()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ne),[`in()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#in),[`exists()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#exists),[`ascending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ascending),[`descending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#descending)|",
          "|`autoNotified`|[`eq()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#eq),[`ne()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ne),[`in()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#in),[`exists()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#exists),[`ascending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ascending),[`descending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#descending)|",
          "|`_createdDate`|[`eq()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#eq),[`ne()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ne),[`in()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#in),[`gt()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#gt),[`ge()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ge),[`lt()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#lt),[`le()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#le),[`exists()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#exists),[`ascending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ascending),[`descending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#descending)|",
          "|`itemUrl`|[`eq()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#eq),[`ne()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ne),[`in()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#in),[`startsWith()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#startsWith),[`exists()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#exists),[`ascending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#ascending),[`descending()`](wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder#descending)|"
        ],
        "examples": [
          {
            "title": "queryBackInStockNotificationRequests example",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "  ",
              " async function queryBackInStockNotificationRequests() {",
              "   const { items } = backInStockNotifications.queryBackInStockNotificationRequests().find();",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "queryBackInStockNotificationRequests",
      "isAdminMethod": true
    },
    {
      "name": "reportItemsBackInStock",
      "params": [
        {
          "name": "itemDetails",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockItemDetails"
            }
          ],
          "doc": "Item details to use in notifications.\n\n`itemDetails` may populate dynamic valyes in the notification template, as follows:\n+ `itemDetails.name` passes to the template as `item.name`\n+ `itemDetails.price` passes to the template as `item.price`\n+ `itemDetails.image.url` passes to the template as `item.image.url`\n\nUse `extraAutomationTemplateParameters` to pass additional dynamic values.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.ReportItemsBackInStockOptions"
            }
          ],
          "doc": "Report options.",
          "required": false
        }
      ],
      "requiredFields": [
        "itemDetails",
        "itemDetails.name",
        "itemDetails.price"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Sends notifications for back in stock requests.",
        "description": [
          "> **Important:**\n> Automations must be turned on in a [site's dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Go%20to%20Back-in-Stock&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https://www.wix.com/dashboard/{{metaSiteId}}/store/back-in-stock) for notifications to send.\n\nThis endpoint triggers notifications for requests in 1 of 2 ways:\n1. For a specific item, with the `catalogReference` information.\n2. For specific requests, with `requestIds`.\n\n`itemDetails` are required and may populate dynamic values in the notification template, as follows:\n+ `itemDetails.name` passes to the template as `item.name`\n+ `itemDetails.price` passes to the template as `item.price`\n+ `itemDetails.image.url` passes to the template as `item.image.url`\n\nIf the notification template doesn't include `item.price`, `item.name`, or `item.image.url`, values should\nbe passed in `extraAutomationTemplateParameters`.\n\nAfter this endpoint is called, the `status` for the request will update to `NOTIFICATION_SENT` if it sends\nsuccessfully, or to `FAILED` if it fails to send."
        ],
        "examples": [
          {
            "title": "reportItemsBackInStock example",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "  ",
              " async function reportItemsBackInStock(itemDetails, options) {",
              "   try {",
              "     const result = await backInStockNotifications.reportItemsBackInStock(itemDetails, options);",
              "",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "  "
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "reportItemsBackInStock",
      "isAdminMethod": true
    }
  ],
  "messages": [
    {
      "name": "ActionEvent",
      "members": [
        {
          "name": "bodyAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "App",
      "members": [
        {
          "name": "appDefId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The AppDefId"
        },
        {
          "name": "instanceId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The instance Id"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BackInStockItemDetails",
      "members": [
        {
          "name": "image",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Item image."
        },
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Item name."
        },
        {
          "name": "price",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Item price."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "BackInStockNotificationRequest",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time the notification request was created."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Request ID."
        },
        {
          "name": "autoNotified",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether a notification was sent automatically.\n\n`autoNotified` is empty when the notification request is created and is not returned until the field has a value. `autoNotified` receives a value when a notification email is sent for this request object.\n\n`autoNotified` sets to `true` if the notification is sent through the site, either automatically or with the `reportItemsBackInStock()` function. If the notification email is sent offline but the `status` is updated with the `markAsNotificationSent()` function, then `autoNotified` sets to `false`."
        },
        {
          "name": "catalogReference",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.CatalogReference"
            }
          ],
          "doc": "Catalog and item reference that the notification request is for.\n\nIncludes IDs for the catalog and item it came from, as well as additional, optional information.\n"
        },
        {
          "name": "contactId",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Contact ID for the contact with this `email`.\n\nIf a contact does not already exist with the email address submitted when creating this request, then a new contact is created.\nFor more information about contacts, see the Contacts API."
        },
        {
          "name": "email",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Email address to send notification to about item being back in stock."
        },
        {
          "name": "itemUrl",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Item URL for this request."
        },
        {
          "name": "status",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Status of the notification.\n\n`status` is set to `RECEIVED` when the notification request is created. The `status` changes once a notification email is sent for this request object:\n+ When a notification email is sent through the site, either automatically or with the `reportItemsBackInStock()` function, then the `status` is briefly set to `PROCESSING` and then set to `NOTIFICATION_SENT` if the email is successul, and `FAILED` if it fails.\n+ When a notification email is sent offline, use the `markAsNotificationSent()` function to set `status` to `NOTIFICATION_SENT`."
        }
      ],
      "docs": {
        "description": [
          "The back in stock notification request allows a customer to receive a notifiction when a specific item\nis available again. The request includes information about the person making the request, the item\nthey want to receive a notification for, and the status of the notification."
        ]
      }
    },
    {
      "name": "BackInStockNotificationRequestsCount",
      "members": [
        {
          "name": "catalogReference",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.CatalogReference"
            }
          ],
          "doc": "Catalog and item reference.\n\nIncludes IDs and additional, optional information related to the item.\n"
        },
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The number of unique back in stock requests for given `catalogReference`."
        }
      ],
      "docs": {
        "description": [
          "Maps each back in stock CatalogReference to the results (the number of unique occurrences)."
        ]
      }
    },
    {
      "name": "CatalogReference",
      "members": [
        {
          "name": "appId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the app providing the catalog. For items from Wix apps, the following values always apply:\n+ Wix Stores: `\"215238eb-22a5-4c36-9e7b-e7c08025e04e\"`\n+ Wix Bookings: `\"13d21c63-b5ec-5912-8397-c3a5ddb27a97\"`"
        },
        {
          "name": "catalogItemId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the item within its Wix or 3rd-party catalog. For example, `productId` for Wix Stores or `bookingId` for Wix Bookings."
        },
        {
          "name": "options",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Additional info in key:value pairs. For example, to specify Wix Stores product options or variants:\n+ `{\"options\": {\"options\": {\"Size\": \"M\", \"Color\": \"Red\"}}}`\n+ `{\"options\": {\"variantId\": \"<VARIANT_ID>\"}}`"
        }
      ],
      "docs": {
        "description": [
          "Used for grouping line items and is sent on add to cart"
        ]
      }
    },
    {
      "name": "CreateBackInStockNotificationRequestRequest",
      "members": [
        {
          "name": "itemDetails",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockItemDetails"
            }
          ],
          "doc": "Item details to include in the notification when the item is back in stock."
        },
        {
          "name": "request",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
            }
          ],
          "doc": "Notification request information.\n\nIncludes details for the out of stock item and the email address\nrequesting to be notified when it's back in stock.\n"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreateBackInStockNotificationRequestResponse",
      "members": [
        {
          "name": "request",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
            }
          ],
          "doc": "Created back in stock notification request."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CursorPaging",
      "members": [
        {
          "name": "cursor",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Pointer to the next or previous page in the list of results.\n\nYou can get the relevant cursor token\nfrom the `pagingMetadata` object in the previous call's response.\nNot relevant for the first request.\n"
        },
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Cursors",
      "members": [
        {
          "name": "next",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to next page in the list of results."
        },
        {
          "name": "prev",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to previous page in the list of results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteBackInStockNotificationRequestRequest",
      "members": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the notification request to delete."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeleteBackInStockNotificationRequestResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEvent",
      "members": [
        {
          "name": "_id",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Unique event ID.\nAllows clients to ignore duplicate webhooks."
        },
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "entityEventSequence",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A sequence number defining the order of updates to the underlying entity.\nFor example, given that some entity was updated at 16:00 and than again at 16:01,\nit is guaranteed that the sequence number of the second update is strictly higher than the first.\nAs the consumer, you can use this value to ensure that you handle messages in the correct order.\nTo do so, you will need to persist this number on your end, and compare the sequence number from the\nmessage against the one you have stored. Given that the stored number is higher, you should ignore the message."
        },
        {
          "name": "entityFqdn",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Assumes actions are also always typed to an entity_type\nExample: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction"
        },
        {
          "name": "entityId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the entity associated with the event."
        },
        {
          "name": "eventTime",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event timestamp."
        },
        {
          "name": "originatedFrom",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "If present, indicates the action that triggered the event."
        },
        {
          "name": "slug",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\nThis is although the created/updated/deleted notion is duplication of the oneof types\nExample: created/updated/deleted/started/completed/email_opened"
        },
        {
          "name": "triggeredByAnonymizeRequest",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether the event was triggered as a result of a privacy regulation application\n(for example, GDPR)."
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfDomainEventBodyOneOf",
            "members": [
              "actionEvent",
              "createdEvent",
              "deletedEvent",
              "updatedEvent"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DomainEventBodyOneOf",
      "members": [
        {
          "name": "actionEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.ActionEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "createdEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.EntityCreatedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "deletedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.EntityDeletedEvent"
            }
          ],
          "doc": ""
        },
        {
          "name": "updatedEvent",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.EntityUpdatedEvent"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Empty",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityCreatedEvent",
      "members": [
        {
          "name": "entityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityDeletedEvent",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EntityUpdatedEvent",
      "members": [
        {
          "name": "currentEntityAsJson",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\nThis means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\nWe don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetBackInStockNotificationRequestRequest",
      "members": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the notification request to retrieve."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetBackInStockNotificationRequestResponse",
      "members": [
        {
          "name": "request",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
            }
          ],
          "doc": "Retrieved back in stock notification request."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetBackInStockNotificationRequestsCountByCatalogReferencesRequest",
      "members": [
        {
          "name": "catalogReferences",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-ecom-backend.BackInStockNotifications.CatalogReference"
                  }
                ]
              }
            }
          ],
          "doc": "`catalogReference` items to retrieve the notification request for."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetBackInStockNotificationRequestsCountByCatalogReferencesResponse",
      "members": [
        {
          "name": "countsPerCatalogReference",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequestsCount"
                  }
                ]
              }
            }
          ],
          "doc": "Amount of back in stock notifications for each of the retrieved `catalogReference` items."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "InvalidateCache",
      "members": [
        {
          "name": "app",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.App"
            }
          ],
          "doc": "Invalidate by App"
        },
        {
          "name": "localDc",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Is local DS"
        },
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "page",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.Page"
            }
          ],
          "doc": "Invalidate by page id"
        },
        {
          "name": "reason",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "tell us why you're invalidating the cache. You don't need to add your app name"
        },
        {
          "name": "siteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "uri",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.URI"
            }
          ],
          "doc": "Invalidate by URI path"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfInvalidateCacheGetByOneOf",
            "members": [
              "app",
              "metaSiteId",
              "page",
              "siteId",
              "uri"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "InvalidateCacheGetByOneOf",
      "members": [
        {
          "name": "app",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.App"
            }
          ],
          "doc": "Invalidate by App"
        },
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "page",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.Page"
            }
          ],
          "doc": "Invalidate by page id"
        },
        {
          "name": "siteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!"
        },
        {
          "name": "uri",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.URI"
            }
          ],
          "doc": "Invalidate by URI path"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkAsNotificationSentRequest",
      "members": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the notification request to mark."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MarkAsNotificationSentResponse",
      "members": [
        {
          "name": "request",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
            }
          ],
          "doc": "Marked back in stock notification request."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Page",
      "members": [
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "the msid the page is on"
        },
        {
          "name": "pageId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Invalidate by Page ID"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PlatformPaging",
      "members": [
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to skip in the current sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PlatformPagingMetadata",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The number of items returned in this response."
        },
        {
          "name": "cursors",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.Cursors"
            }
          ],
          "doc": "Cursors to navigate through result pages. Returned if cursor paging was used."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The offset which was requested. Returned if offset paging was used."
        },
        {
          "name": "total",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The total number of items that match the query. Returned if offset paging was used."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PlatformQuery",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.CursorPaging"
            }
          ],
          "doc": "Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`."
        },
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter object."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.PlatformPaging"
            }
          ],
          "doc": "Pointer to page of results using offset. Cannot be used together with `cursorPaging`."
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-ecom-backend.BackInStockNotifications.Sorting"
                  }
                ]
              }
            }
          ],
          "doc": "Sorting options. For example, `[{\"fieldName\":\"sortField1\"},{\"fieldName\":\"sortField2\",\"direction\":\"DESC\"}]`."
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfPlatformQueryPagingMethodOneOf",
            "members": [
              "cursorPaging",
              "paging"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "PlatformQueryPagingMethodOneOf",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.CursorPaging"
            }
          ],
          "doc": "Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.PlatformPaging"
            }
          ],
          "doc": "Pointer to page of results using offset. Cannot be used together with `cursorPaging`."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryBackInStockNotificationRequestsRequest",
      "members": [
        {
          "name": "query",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.PlatformQuery"
            }
          ],
          "doc": "Query options."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryBackInStockNotificationRequestsResponse",
      "members": [
        {
          "name": "metadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.PlatformPagingMetadata"
            }
          ],
          "doc": "Details on the paged set of results returned."
        },
        {
          "name": "requests",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockNotificationRequest"
                  }
                ]
              }
            }
          ],
          "doc": "Retrieved back in stock requests."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReportItemsBackInStockOptions",
      "members": [
        {
          "name": "catalogReference",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.CatalogReference"
            }
          ],
          "doc": "`catalogReference` item to send notifications for.\n\nCannot be used with `requestIds`.\n"
        },
        {
          "name": "extraAutomationTemplateParameters",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Record",
                "typeParams": [
                  {
                    "nativeType": "string"
                  },
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Additional key-value pairs to pass to the back in stock notification template."
        },
        {
          "name": "requestIds",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "IDs of requests to send notifications for.\n\nCannot be used with `catalogReference`.\n"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReportItemsBackInStockRequest",
      "members": [
        {
          "name": "catalogReference",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.CatalogReference"
            }
          ],
          "doc": "`catalogReference` item to send notifications for.\n\nCannot be used with `requestIds`.\n"
        },
        {
          "name": "extraAutomationTemplateParameters",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Record",
                "typeParams": [
                  {
                    "nativeType": "string"
                  },
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Additional key-value pairs to pass to the back in stock notification template."
        },
        {
          "name": "itemDetails",
          "type": [
            {
              "referenceType": "wix-ecom-backend.BackInStockNotifications.BackInStockItemDetails"
            }
          ],
          "doc": "Item details to use in notifications.\n\n`itemDetails` may populate dynamic valyes in the notification template, as follows:\n+ `itemDetails.name` passes to the template as `item.name`\n+ `itemDetails.price` passes to the template as `item.price`\n+ `itemDetails.image.url` passes to the template as `item.image.url`\n\nUse `extraAutomationTemplateParameters` to pass additional dynamic values.\n"
        },
        {
          "name": "requestIds",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "IDs of requests to send notifications for.\n\nCannot be used with `catalogReference`.\n"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReportItemsBackInStockResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Sorting",
      "members": [
        {
          "name": "fieldName",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Name of the field to sort by."
        },
        {
          "name": "order",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "URI",
      "members": [
        {
          "name": "metaSiteId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "the msid the URI is on"
        },
        {
          "name": "uriPath",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
