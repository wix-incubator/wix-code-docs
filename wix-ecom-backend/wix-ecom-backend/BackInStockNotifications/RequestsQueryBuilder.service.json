{
  "name": "RequestsQueryBuilder",
  "memberOf": "wix-ecom-backend.BackInStockNotifications",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-ecom-backend-back_in_stock_notification_request.back-in-stock-notifications.requests-query-builder",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "find",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.BackInStockNotifications.RequestsQueryResult"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns the query results.",
        "description": [
          "The `find()` function returns a Promise that resolves to the query results and metadata.",
          "The Promise is rejected if `find()` is called with insufficient permissions or if any of the previous functions used to refine the query are invalid."
        ],
        "examples": [
          {
            "title": "Run a query with no filters",
            "body": [
              "const query =",
              "  backInStockNotifications.queryBackInStockNotificationRequests.find();",
              ""
            ]
          },
          {
            "title": "Perform a `find` on a query",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await backInStockNotifications",
              "    .queryBackInStockNotificationRequests()",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "find"
    },
    {
      "name": "limit",
      "params": [
        {
          "name": "limit",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to return, which is also the `pageSize` of the results object.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Limits the number of items the query returns.",
        "description": [
          "The `limit()` function defines the number of results a query returns in each page. Only one page of results is retrieved at a time.",
          "You can use the `next()` and `prev()` functions to navigate the pages of a query result."
        ],
        "examples": [
          {
            "title": "Add a `limit` to a query",
            "body": [
              "const query =",
              "  backInStockNotifications.queryBackInStockNotificationRequests.limit(10);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `limit`, and run it",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await backInStockNotifications",
              "    .queryBackInStockNotificationRequests()",
              "    .limit(10)",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "limit"
    },
    {
      "name": "skipTo",
      "params": [
        {
          "name": "cursor",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A pointer to specific record",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.BackInStockNotifications.RequestsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query that skips to a specific record.",
        "description": [
          "The `skipTo()` function refines a `RequestsQueryBuilder` to return items that appear before or after the item pointed to by the provided cursor. Get the relevant cursor for a specific item from the `cursors` object in previous call's response. Then you can skip to `cursors.prev` to return items before the cursor, or `cursors.next` to return items after the cursor.",
          " ",
          "When using `skipTo()`, the filters and the sorting order of the original query can't be changed. Only the `limit()` property of the query can be changed."
        ],
        "examples": [
          {
            "title": "Perform a query and skip to the next cursor",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await backInStockNotifications",
              "    .queryBackInStockNotificationRequests()",
              "    .find();",
              "",
              "  const nextCursor = results.cursors.next;",
              "  return backInStockNotifications",
              "    .queryBackInStockNotificationRequests()",
              "    .skipTo(nextCursor)",
              "    .find();",
              "}",
              ""
            ]
          },
          {
            "title": "Perform a query and skip to the previous cursor",
            "body": [
              "import { backInStockNotifications } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await backInStockNotifications",
              "    .queryBackInStockNotificationRequests()",
              "    .find();",
              "",
              "  const prevCursor = results.cursors.prev;",
              "  return backInStockNotifications",
              "    .queryBackInStockNotificationRequests()",
              "    .skipTo(prevCursor)",
              "    .find();",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "skipTo"
    }
  ],
  "messages": []
}
