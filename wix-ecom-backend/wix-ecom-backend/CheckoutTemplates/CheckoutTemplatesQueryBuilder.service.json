{
  "name": "CheckoutTemplatesQueryBuilder",
  "memberOf": "wix-ecom-backend.CheckoutTemplates",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-ecom-backend-checkout_template.checkout-templates.checkout-templates-query-builder",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "ascending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
        "description": [
          "The `ascending()` function refines a `CheckoutTemplatesQueryBuilder` to sort by the value of `propertyName` in ascending order.",
          "You can specify multiple properties for sorting in ascending order by passing each property name as an additional argument. `ascending()` sorts the results in the order the properties are passed.",
          "You can sort the following types:",
          "- Number: Sorts numerically.",
          "- Date: Sorts by date and time.",
          "- String: Sorts lexicographically, so `'abc'` comes after `'XYZ'`.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is sorted alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest."
        ],
        "examples": [
          {
            "title": "Add an `ascending` sort to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.ascending('_id');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `ascending` sort, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .ascending('_id')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "ascending"
    },
    {
      "name": "descending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in descending order.",
        "description": [
          "The `descending()` function refines a `CheckoutTemplatesQueryBuilder` to sort by the value of `propertyName` in descending order.",
          "You can specify multiple properties for sorting in descending order by passing each property name as an additional argument. `descending()` sorts the results in the order the properties are passed.",
          "You can sort the following types:",
          "- Number: Sorts numerically.",
          "- Date: Sorts by date and time.",
          "- String: Sorts lexicographically, so `'abc'` comes after `'XYZ'`.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is sorted alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest."
        ],
        "examples": [
          {
            "title": "Add a `descending` sort to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.descending('_id');",
              ""
            ]
          },
          {
            "title": "Create a query, add a `descending` sort, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .descending('_id')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "descending"
    },
    {
      "name": "eq",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property equals the specified value.",
        "description": [
          "The `eq()` function refines a `CheckoutTemplatesQueryBuilder` to match only items where the value of the specified `propertyName` equals the specified `value`.",
          "`eq()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "Matching strings with `eq()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `eq` filter to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.eq('_id', 'some-id');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `eq` filter, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .eq('_id', 'bb19b637-74ce-55d3-ae32-430b588051da')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "eq"
    },
    {
      "name": "exists",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property contains a value.",
        "description": [
          "The `exists()` function refines a `CheckoutTemplatesQueryBuilder` to only match items where the value of the specified `propertyName` doesn't equal null or undefined.",
          " `exists()` checks for either existence or non-existence based on the boolen parameter. Note that `exists()` does match items where the value of the specified `propertyName` is an empty string or an invalid value. `exists()` is only useful for properties which don't contain default values and therefore their values may be unassigned."
        ],
        "examples": [
          {
            "title": "Add an `exists` filter to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.exists(",
              "  'description',",
              "  'some-description'",
              ");",
              ""
            ]
          },
          {
            "title": "Create a query, add an `exists` filter, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .exists('description', 'some-description')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "exists"
    },
    {
      "name": "find",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryResult"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns the query results.",
        "description": [
          "The `find()` function returns a Promise that resolves to the query results and metadata.",
          "The Promise is rejected if `find()` is called with insufficient permissions or if any of the previous functions used to refine the query are invalid."
        ],
        "examples": [
          {
            "title": "Run a query with no filters",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.find();",
              ""
            ]
          },
          {
            "title": "Perform a `find` on a query",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates.queryCheckoutTemplates().find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "find"
    },
    {
      "name": "hasSome",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `values`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "any"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property contains any of the specified values.",
        "description": [
          "The `hasSome()` function refines a `CheckoutTemplatesQueryBuilder` to match only items where the value of the specified `propertyName` equals any of the specified `values`.",
          "Matching strings with `hasSome()` is case-sensitive, so `'text'` isn't equal to `'Text'`.",
          "If the specified property is an array, `hasSome()` matches if any of that array's elements equal any of the specified values."
        ],
        "examples": [
          {
            "title": "Add a `hasSome` filter to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.hasSome('labelIds', [",
              "  'red',",
              "  'blue',",
              "  'purple',",
              "]);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `hasSome` filter, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .hasSome('labelIds', ['red', 'blue', 'purple'])",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "hasSome"
    },
    {
      "name": "in",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to only match items where the specified property conatins any of the values in the provided array of values.",
        "description": [
          "The `in()` function refines a `CheckoutTemplatesQueryBuilder` to match only items where the specified `propertyName` is equal to any of the values in the provided array.",
          "Matching strings with `in()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `in` filter to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.in(",
              "  ['labelIds', 'colors'],",
              "  ['red', 'blue', 'purple']",
              ");",
              ""
            ]
          },
          {
            "title": "Create a query, add an `in` filter, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .in(['labelIds', 'colors'], ['red', 'blue', 'purple'])",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "in"
    },
    {
      "name": "limit",
      "params": [
        {
          "name": "limit",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to return, which is also the `pageSize` of the results object.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Limits the number of items the query returns.",
        "description": [
          "The `limit()` function defines the number of results a query returns in each page. Only one page of results is retrieved at a time.",
          "You can use the `next()` and `prev()` functions to navigate the pages of a query result."
        ],
        "examples": [
          {
            "title": "Add a `limit` to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.limit(10);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `limit`, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .limit(10)",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "limit"
    },
    {
      "name": "ne",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property doesn't equal the specified value.",
        "description": [
          "The `ne()` function refines a `CheckoutTemplatesQueryBuilder` to match only items where the value of the specified `propertyName` doesn't equal the specified `value`.",
          "`ne()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "Matching strings with `ne()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `ne` filter to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.ne(",
              "  '_id',",
              "  'bb19b637-74ce-55d3-ae32-430b588051da'",
              ");",
              ""
            ]
          },
          {
            "title": "Create a query, add an `ne` filter, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates",
              "    .queryCheckoutTemplates()",
              "    .ne('_id', 'bb19b637-74ce-55d3-ae32-430b588051da')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "ne"
    },
    {
      "name": "skipTo",
      "params": [
        {
          "name": "cursor",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A pointer to specific record",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query that skips to a specific record.",
        "description": [
          "The `skipTo()` function refines a `CheckoutTemplatesQueryBuilder` to return items that appear before or after the item pointed to by the provided cursor. Get the relevant cursor for a specific item from the `cursors` object in previous call's response. Then you can skip to `cursors.prev` to return items before the cursor, or `cursors.next` to return items after the cursor.",
          " ",
          "When using `skipTo()`, the filters and the sorting order of the original query can't be changed. Only the `limit()` property of the query can be changed."
        ],
        "examples": [
          {
            "title": "Perform a query and skip to the next cursor",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates.queryCheckoutTemplates().find();",
              "",
              "  const nextCursor = results.cursors.next;",
              "  return checkoutTemplates.queryCheckoutTemplates().skipTo(nextCursor).find();",
              "}",
              ""
            ]
          },
          {
            "title": "Perform a query and skip to the previous cursor",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates.queryCheckoutTemplates().find();",
              "",
              "  const prevCursor = results.cursors.prev;",
              "  return checkoutTemplates.queryCheckoutTemplates().skipTo(prevCursor).find();",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "skipTo"
    },
    {
      "name": "startsWith",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `string`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-ecom-backend.CheckoutTemplates.CheckoutTemplatesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property starts with the specified value.",
        "description": [
          "The `startsWith()` function refines a `CheckoutTemplatesQueryBuilder` to match only items where the value of the specified `propertyName` starts with the specified `string`.",
          "Matching with `startsWith()` is case-sensitive, so `'TEXT'` doesn't start with `'text'`.",
          "You can only use `startsWith()` with a property whose value is a string."
        ],
        "examples": [
          {
            "title": "Add a `startsWith` filter to a query",
            "body": [
              "const query = checkoutTemplates.queryCheckoutTemplates.startsWith('_id', 'L');",
              ""
            ]
          },
          {
            "title": "Create a query, add a `startsWith` filter, and run it",
            "body": [
              "import { checkoutTemplates } from 'wix-ecom-backend';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await checkoutTemplates.queryCheckoutTemplates();",
              "  startsWith('_id', 'L').find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "startsWith"
    }
  ],
  "messages": []
}
