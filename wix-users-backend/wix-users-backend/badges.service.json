{ "name": "badges",
  "memberOf": "wix-users-backend",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "badges.js" },
  "docs":
    { "summary": "The Badges API contains functionality for working with <a href=\"https://support.wix.com/en/article/about-member-badges\" target=\"_blank\">member badges</a> from backend code.",
      "description":
        [ "To use the Badges API, import `wixUsersBackend` from the `wix-users-backend` module:",
          "",
          "   ```javascript",
          "   import wixUsersBackend from 'wix-users-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "assignMembers",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "badgeId",
              "type": "string",
              "doc": "The ID of the badge to assign members to." },
            { "name": "memberIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The IDs of the members to assign to the badge." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "string" ] } ] },
            "doc": "Fulfilled - The IDs of the members assigned to the badge.\nRejected - Error message." },
        "locations":
          [ { "lineno": 12,
              "filename": "badges.js" } ],
        "docs":
          { "summary": "Assigns a badge to site members.",
            "description":
              [ "The `assignMembers()` function returns a Promise that resolves when the",
                " members with the given IDs are assigned as badge holders of the specified badge.",
                "",
                "The `badgeId` parameter must be an ID from your site's Members/Badges collection. ",
                "Typically, you retrieve the ID from from the collection using a query or through a dataset." ],
            "links": [],
            "examples":
              [ { "title": "Assign a badge to members",
                  "body":
                    [ "import wixUsersBackend from 'wix-users-backend';",
                      "",
                      "export function assignMembers(badgeId, memberIds) {",
                      "  return wixUsersBackend.badges.assignMembers(badgeId, memberIds);",
                      "}",
                      "",
                      "// Returns promise that resolves to:",
                      "// [\"3c1234ea-f6cc-678b-b0d1-2eb6b8cea912\", \"e12345e1-f9bd-4eae-6789-864c3602eb7e\"]" ],
                  "extra":
                    {  } },
                { "title": "Assign a badge to forum members with a top post",
                  "body":
                    [ "/*******************************",
                      " * backend code - badges.jsw *",
                      " *******************************/",
                      "",
                      "import wixUsersBackend from 'wix-users-backend';",
                      "",
                      "export function assignMembers(badgeId, memberIds) {",
                      "  return wixUsersBackend.badges.assignMembers(badgeId, memberIds);",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import wixData from 'wix-data';",
                      "import {assignMembers} from 'backend/badges';",
                      "",
                      "// ..",
                      "",
                      "// \"Top Poster\" badge ID from the Members/Badges collection",
                      "const topPosterBadgeId = \"4de76dd9-fe35-1234-807c-3888a58ab4aa\";",
                      "",
                      "wixData.query(\"Forum/Posts\")",
                      "  .gt(\"likeCount\", 50)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length) {",
                      "      const topPosts = results.items;",
                      "      const topPostOwners = topPosts.map(post => post._ownerId);",
                      "      assignMembers(topPosterBadgeId, topPostOwners);",
                      "    } else {",
                      "        console.log(\"No top posts\");",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.log(error);",
                      "  });",
                      "" ],
                  "extra":
                    { "description": "In this example, we query the Forum/Posts collection for all posts with a Like Count greater than 50. We store the member IDs of the post owners in an array, and assign those members a \"Top Poster\" badge." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "removeMembers",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "badgeId",
              "type": "string",
              "doc": "The ID of the badge to remove members from." },
            { "name": "memberIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "IDs of the members to remove from the badge." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the members are removed.\nRejected - Error message." },
        "locations":
          [ { "lineno": 32,
              "filename": "badges.js" } ],
        "docs":
          { "summary": "Removes site members from an assigned badge.",
            "description":
              [ "The `removeMembers()` function returns a Promise that resolves when the",
                " members with the given IDs are removed as badge holders of the specified badge." ],
            "links": [],
            "examples":
              [ { "title": "Remove members from an assigned badge",
                  "body":
                    [ "import wixUsersBackend from 'wix-users-backend';",
                      "",
                      "export function removeMembers(badgeId, memberIds) {",
                      "  return wixUsersBackend.badges.removeMembers(badgeId, memberIds);",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }