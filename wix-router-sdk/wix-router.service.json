{ "name": "wix-router",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "router.js" },
  "docs":
    { "summary": "This module contains the APIs for code routers and data binding router hooks.",
      "description":
        [ "The code for both routers and data binding router hooks is defined in the",
          " **routers.js** file that you [set up](https://support.wix.com/en/article/velo-creating-a-router#add-a-router) in the Code Files' Backend section of the [Velo Sidebar](https://support.wix.com/en/article/velo-working-with-the-site-structure-sidebar).",
          "",
          " > **Note:** You do not create the **routers.js** file manually. When you [set it up](https://support.wix.com/en/article/velo-creating-a-router#add-a-router), it will be",
          " created for you.",
          "",
          " The functions are named with the following convention:",
          "",
          " ``` javascript",
          " export function <router prefix>_<function name>()",
          " ```",
          "",
          " These are not functions that you call in your code, rather they are functions",
          " that you define. They are called when your users browse to a URL that is handled",
          " by a router as described below.",
          "",
          " For example, the following code creates a router on the myRouter [prefix](#prefixes) that",
          " shows a page when the path begins with the word \"good\" and returns a 404 in",
          " all other cases.",
          "",
          " ```javascript",
          " import {ok, notFound} from \"wix-router\";",
          "",
          " export function myRouter_Router(request) {",
          "",
          "   // URL looks like:",
          "   // https://mysite.com/myRouter/good",
          "   // or:",
          "   // https://user.wixsite.com/mysite/myRouter/good",
          "   const status = request.path[0];",
          "",
          "   if(status === \"good\") {",
          "     // Show a page",
          "     return ok(\"myRouter-page\");",
          "   }",
          "   else {",
          "     // Return 404",
          "     return notFound();",
          "   }",
          " }",
          " ```",
          "",
          " ### Code Router",
          " Code your own [`router()`](#router) and [`sitemap()`](#sitemap) functions for a",
          " [router](https://support.wix.com/en/article/routers) that handles all incoming",
          " requests with a specified URL [prefix](#prefixes). Your code decides what actions to",
          " perform, what responses to return, where to route the request, and what data",
          " to pass to pages.",
          "",
          " You might want to use a router to:",
          "",
          " + Display a dynamic page using content from any data source.",
          " + Customize your URLs to make them more meaningful and yield better SEO results.",
          " + Authenticate users and then display content just for them.",
          " + Return custom HTTP response codes.",
          "",
          "",
          " ### Data Binding Router Hooks",
          " When a request comes in for a page that a router handles, either a code router",
          " or a dynamic page, you can add [data binding router hooks](https://support.wix.com/en/article/data-binding-router-hooks)",
          " to intercept the process of the data getting bound to the page at certain",
          " points and insert additional logic.",
          "",
          " The hooks you can use are listed here in the order they are triggered:",
          "",
          " + [`beforeRouter`](wix-router/beforeRouter) - Before the data binding router logic.",
          " + [`customizeQuery`](wix-router/customizeQuery) - As the data binding router prepares a data query.",
          " + [`afterRouter`](wix-router/afterRouter) - After the data binding router completes its logic, but before the page is displayed.",
          " + [`afterSitemap`](wix-router/afterSitemap) - After the data binding sitemap function completes preparing the list of urls.",
          "",
          "",
          " ### Prefixes",
          " When using the `wix-router` API you often need to know the prefix of your code router",
          " or dynamic pages. You can find prefixes as follows:",
          "",
          " + **Code router**:",
          "",
          "   1. Go to  in the Page Code's Router Pages section of the Velo Sidebar.",
          "",
          "   1. Click the ellipsis &nbsp; ![ellipsis](../assets/images/ellipses.png) &nbsp; icon that appears when you hover over the title of the router's grouped router pages.",
          "",
          "   1. Click **Change Router**.",
          "",
          "   The router's prefix is displayed.",
          "",
          "",
          " + **Dynamic pages**:",
          "",
          "   1. Go to  in the Page Code's Dynamic Pages section of the Velo Sidebar.",
          "",
          "   1. Click the ellipsis &nbsp; ![ellipsis](../assets/images/ellipses.png) &nbsp; icon that appears when you hover over the dynamic page.",
          "",
          "   1. Click **Settings**.",
          "",
          "   The **Page Info** tab shows the page URL. The prefix is the",
          "   first editable section of the URL up until the first forward slash (/)." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "wixRouterSitemapEntry",
        "labels": [],
        "get": true,
        "set": false,
        "type": "wix-router.WixRouterSitemapEntry",
        "locations":
          [ { "lineno": 6,
              "filename": "sitemap-entry.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "afterRouter",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "request",
              "type": "wix-router.WixRouterRequest",
              "doc": "The routing request." },
            { "name": "response",
              "type": "wix-router.WixRouterResponse",
              "doc": "The router response." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - A router response, either the response received or a new response." },
        "locations":
          [ { "lineno": 263,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Registers a hook that is called after a router.",
            "description":
              [ "The `afterRouter` hook is a data binding router hook that is triggered",
                "after the router with the specified [prefix](#prefixes) has bound the data, but before",
                "the page is displayed. The router can be a code router or the data binding",
                "router that binds data to a dynamic page.",
                "",
                "The `afterRouter()` function is not a function that you call from your code.",
                "You define the function in a file named **routers.js** in the Code File's Backend section of the [Velo Sidebar](https://support.wix.com/en/article/velo-working-with-the-site-structure-sidebar).",
                "The function is called as described above.",
                "",
                "Use this hook with a code router to change the router's response based on the",
                "data that was retrieved. For example, you can have two versions of a page,",
                "one for portrait oriented images and another for landscape oriented ones.",
                "After the image is pulled from the database, you can show the page that",
                "corresponds to the image's orientation.",
                "",
                "The function receives a [`WixRouterRequest`](wix-router.WixRouterRequest.html)",
                "object containing information about the incoming request and a [`WixRouterResponse`](wix-router.WixRouterResponse.html)",
                "object containing information about the router's response.",
                "",
                "The function returns a [`WixRouterResponse`](wix-router.WixRouterResponse.html)",
                "object that causes the router to respond with a specified page, specified data,",
                "and a success response code, or respond with any other HTTP response code.",
                "The returned response can be either the response received or a new response",
                "that overrides the one received.",
                "",
                "If the function does not return a [`WixRouterResponse`](wix-router.WixRouterResponse.html),",
                "the response received as the `response` parameter acts as the effective router response.",
                "",
                "Typically, the response is created using one of the [`ok()`](#ok),",
                "[`forbidden()`](#forbidden), [`notFound()`](#notFound), [`redirect()`](#redirect),",
                "or [`sendStatus()`](#sendStatus) functions." ],
            "links":
              [ "[ok()](#ok)",
                "[forbidden()](#forbidden)",
                "[notFound()](#notFound)",
                "[redirect()](#redirect)",
                "[sendStatus()](#sendStatus)" ],
            "examples":
              [ { "title": "After router stub",
                  "body":
                    [ "// In routers.js",
                      "",
                      "export function myRouter_afterRouter(request, response) {",
                      "  // after router code ...",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates an after router hook on the `myRouter` prefix." } },
                { "title": "Basic after router hook",
                  "body":
                    [ "// In routers.js",
                      "",
                      "import {ok, forbidden} from 'wix-router';",
                      "",
                      "export function myRouter_afterRouter(request, response) {",
                      "  if (some_condition)",
                      "    return ok(\"different-page\", response.data, response.head);",
                      "  else if (other_condition)",
                      "    return response;",
                      "  else",
                      "    return forbidden();",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates an after router hook on the `myRouter` prefix that possibly\nreroutes the request depending on some conditions." } },
                { "title": "After router hook that reroutes based on response data",
                  "body":
                    [ "// In routers.js",
                      "",
                      "import {ok} from 'wix-router';",
                      "",
                      "export function myRouter_afterRouter(request, response) {",
                      "  if(response.status === 200 && response.page === \"horizontal-pic\") {",
                      "    if(response.data.picture.orientation === \"vertical\")",
                      "      return ok(\"vertical-pic\", response.data, response.head);",
                      "    else",
                      "      return response;",
                      "  }",
                      "",
                      "  return response;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates an after router hook on the `myRouter` prefix that checks\nthe orientation of a picture in the response's data and routes to a page that\nis built for displaying pictures in that orientation." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "afterSitemap",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "request",
              "type": "wix-router.WixRouterSitemapRequest",
              "doc": "The sitemap request." },
            { "name": "sitemapEntries",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-router.WixRouterSitemapEntry" ] },
              "doc": "The generated sitemap entries." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-router.WixRouterSitemapEntry" ] } ] },
            "doc": "Fulfilled - A sitemapEntries array." },
        "locations":
          [ { "lineno": 319,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Registers a hook that is called after a sitemap is created.",
            "description":
              [ "The `afterSitemap` hook is a data binding router hook that is triggered",
                "after a sitemap is created for the specified router.",
                "",
                "The `afterSitemap()` function is not a function that you call from your code.",
                "You define the function in a file named **routers.js** in the Code File's Backend section of the [Velo Sidebar](https://support.wix.com/en/article/velo-working-with-the-site-structure-sidebar).",
                "The function is called as described above.",
                "",
                "Use this hook to revise the list of pages in your",
                "sitemap. For example, you can add a search page's information to your sitemap.",
                "",
                "The function returns an array of [`WixRouterSitemapEntry`](wix-router.WixRouterSitemapEntry.html)",
                "objects. Typically the returned array is a modified version of the one the",
                "function received.",
                "",
                "If the function does not return a [`WixRouterSitemapEntry`](wix-router.WixRouterSitemapEntry.html)",
                "array, the array received as the `sitemapEntries` parameter acts as the router's effective sitemap entries." ],
            "links": [],
            "examples":
              [ { "title": "After sitemap stub",
                  "body":
                    [ "// In routers.js",
                      "",
                      "export function myRouter_afterSitemap(sitemapRequest, sitemapEntries) {",
                      "  // after sitemap code ...",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates an after sitemap hook on the `myRouter` prefix." } },
                { "title": "Add a search page to the sitemap",
                  "body":
                    [ "// In routers.js",
                      "",
                      "import {WixRouterSitemapEntry} from 'wix-router';",
                      "",
                      "export function myRouter_afterSitemap(sitemapRequest, sitemapEntries) {",
                      "  let prefix = sitemapRequest.prefix;",
                      "  let entry = new WixRouterSitemapEntry(`${prefix}/search`);",
                      "  sitemapEntries.push(entry);",
                      "  return sitemapEntries;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates an after sitemap hook on the `myRouter` prefix that adds\na search page to the sitemap. Note that the sitemap function only publishes a\nURL for the search page. To actually implement a page at this URL you can use\na `beforeRouter()` hook to check for the request for the search page URL and\nroute the user to a search page." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "beforeRouter",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "request",
              "type": "wix-router.WixRouterRequest",
              "doc": "The routing request." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - Which page to display, redirect to, or which HTTP status code to respond with." },
        "locations":
          [ { "lineno": 215,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Registers a hook that is called before a router.",
            "description":
              [ "The `beforeRouter` hook is a data binding router hook that is triggered",
                "before the router with the specified [prefix](#prefixes) has bound the data to the page.",
                "The router can be a code router or the data binding router that binds data",
                "to a dynamic page.",
                "",
                "The `beforeRouter()` function is not a function that you call from your code.",
                "You define the function in a file named **routers.js** in the Code File's Backend section of the [Velo Sidebar](https://support.wix.com/en/article/velo-working-with-the-site-structure-sidebar).",
                "The function is called as described above.",
                "",
                "Use this hook with a code router to route requests to a different page or return an error response.",
                "For example, you can check who is requesting the page and then decide based on",
                "the user's role whether to let the router continue to the next step or to return",
                "an error type response code.",
                "",
                "The function receives a [`WixRouterRequest`](wix-router.WixRouterRequest.html)",
                "object containing information about the incoming request.",
                "",
                "The function returns a [`WixRouterResponse`](wix-router.WixRouterResponse.html)",
                "object that causes the router to continue its routing, or respond with an",
                "HTTP response code.",
                "",
                "Typically, the response is created using one of the [`next()`](#next),",
                "[`forbidden()`](#forbidden), [`notFound()`](#notFound), [`redirect()`](#redirect),",
                "or [`sendStatus()`](#sendStatus) functions." ],
            "links":
              [ "[next()](#next)",
                "[forbidden()](#forbidden)",
                "[notFound()](#notFound)",
                "[redirect()](#redirect)",
                "[sendStatus()](#sendStatus)" ],
            "examples":
              [ { "title": "Before router stub",
                  "body":
                    [ "// In routers.js",
                      "",
                      "export function myRouter_beforeRouter(request) {",
                      "  // before router code ...",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a before router hook on the `myRouter` prefix." } },
                { "title": "Basic before router hook",
                  "body":
                    [ "// In routers.js",
                      "",
                      "import {forbidden, next} from 'wix-router';",
                      "",
                      "export function myRouter_beforeRouter(request) {",
                      "  if (some_condition)",
                      "    return next();",
                      "  else",
                      "    return forbidden();",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a before router hook on the `myRouter` prefix that continues\nwith the request if `some_condition` is true and returns a 403 in all other cases." } },
                { "title": "Before router hook that restricts access based on user role",
                  "body":
                    [ "// In routers.js",
                      "",
                      "import {forbidden, next} from 'wix-router';",
                      "",
                      "export function myRouter_beforeRouter(request) {",
                      "  if (request.path.length > 1 && request.path[0] === \"admin\") {",
                      "    if (request.user && request.user.role == \"Admin\")",
                      "      return next();",
                      "    else",
                      "      return forbidden();",
                      "  }",
                      "",
                      "  return next();",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a before router hook on the `myRouter` prefix that continues\nwith the request as long as the path does not begin with `\"admin\"`. If it does,\nthe hook checks to see if the user is the site owner before continuing." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customizeQuery",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "request",
              "type": "wix-router.WixRouterRequest",
              "doc": "The routing request." },
            { "name": "route",
              "type": "string",
              "doc": "The resolved router URL pattern." },
            { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "The wix-data query." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A wix-data query." },
        "locations":
          [ { "lineno": 354,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Registers a hook that is called after a route is resolved by the data binding router, but before the wix-data query is executed.",
            "description":
              [ "The `customizeQuery` hook is a data binding router hook that is triggered",
                "before the data query is executed for the pages in the specified router.",
                "",
                "The `customizeQuery()` function is not a function that you call from your code.",
                "You define the function in a file named **routers.js** in the Code File's Backend section of the [Velo Sidebar](https://support.wix.com/en/article/velo-working-with-the-site-structure-sidebar).",
                "The function is called as described above.",
                "",
                "Use this hook to further refine or",
                "change the query that will determine what data is bound to your page's",
                "dataset. For example, you can filter the query to only return items that have",
                "a `status` field set to `\"active\"`.",
                "",
                "The function returns a [`WixDataQuery`](wix-data.WixDataQuery.html) object.",
                "Typically the returned query is a modified version of the one the",
                "function received.",
                "",
                "The `customizeQuery()` hook is triggered when using dynamic pages, but not",
                "when you code your own router." ],
            "links": [],
            "examples":
              [ { "title": "Customize query stub",
                  "body":
                    [ "// In routers.js",
                      "",
                      "export function myRouter_customizeQuery(request, route, query) {",
                      "  // customize query code ...",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a customize query hook on the `myRouter` prefix." } },
                { "title": "Filter query to return on active users",
                  "body":
                    [ "// In routers.js",
                      "",
                      "export function myRouter_customizeQuery(request, route, query) {",
                      "  if (route === \"/users/{name}\")",
                      "    return query.eq(\"status\", \"active\");",
                      "  else",
                      "    return query;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a customize query hook on the `myRouter` prefix that filters\nthe query for a certain route to only query for active users." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "forbidden",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "message",
              "type": "string",
              "doc": "The message to show.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - A response object with HTTP status code 403." },
        "locations":
          [ { "lineno": 436,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Returns a response with a status code 403 (Forbidden) and instructs the router to show a 403 page.",
            "description":
              [ "The `forbidden()` function is used in the [`router()`](wix-router/router), [`beforeRouter()`](wix-router/beforeRouter),",
                "and [`afterRouter()`](wix-router/afterRouter) hooks to indicate that the requested page",
                "is forbidden. Optionally, you can pass a message that otherwise defaults to",
                "'Forbidden'." ],
            "links":
              [ "[router( )](#router)",
                "[beforeRouter( )](wix-router/beforeRouter)",
                "[afterRouter( )](wix-router/afterRouter)" ],
            "examples":
              [ { "title": "Create a forbidden response",
                  "body":
                    [ "import {forbidden} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return forbidden();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "next",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - The router response." },
        "locations":
          [ { "lineno": 499,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Returns a response that instructs the router to continue.",
            "description":
              [ "The `next()` function is used in the [`beforeRouter()`](#beforeRouter) hook",
                "to indicate the hook has completed and the routing should continue to the",
                "data binding router." ],
            "links":
              [ "[beforeRouter( )](#beforeRouter)" ],
            "examples":
              [ { "title": "Create a response to continue routing",
                  "body":
                    [ "import {next} from 'wix-router';",
                      "",
                      "export function myRouter_beforeRouter(request) {",
                      "",
                      "  return next();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "notFound",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "message",
              "type": "string",
              "doc": "The message to show.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - A response object with HTTP status code 404." },
        "locations":
          [ { "lineno": 417,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Returns a response with a status code 404 (Not Found) and instructs the router to show a 404 page.",
            "description":
              [ "The `notFound()` function is used in the [`router()`](#router), [`beforeRouter()`](#beforeRouter),",
                "and [`afterRouter()`](#afterRouter) hooks to indicate that the requested page",
                "was not found. Optionally, you can pass a message that otherwise defaults to",
                "\"Not Found\"." ],
            "links":
              [ "[router( )](#router)",
                "[beforeRouter( )](#beforeRouter)",
                "[afterRouter( )](#afterRouter)" ],
            "examples":
              [ { "title": "Create a not found response",
                  "body":
                    [ "import {notFound} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return notFound();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ok",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "Page",
              "type":
                [ "string",
                  { "name": "Array",
                    "typeParams":
                      [ "string" ] } ],
              "doc": "A router page or an array of page fallbacks." },
            { "name": "routerReturnedData",
              "type": "Object",
              "doc": "A data object.",
              "optional": true },
            { "name": "head",
              "type": "wix-router.WixRouterResponse.HeadOptions",
              "doc": "HTML head members of the response.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - The router response object." },
        "locations":
          [ { "lineno": 388,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Returns a response with a status code 200 (OK) and instructs the router to show the selected page.",
            "description":
              [ "The `ok()` function is used in the [`router()`](#router) and [`afterRouter()`](#afterRouter)",
                "hooks to continue the routing process to the specified page with a successful",
                "HTTP response code. The specified page must be a page found under the given router",
                "in the [Velo Sidebar](https://support.wix.com/en/article/working-with-the-site-structure-sidebar-1610527#router-pages). For example, if you want to route to **myRouter-page** from",
                "the `myRouter_Router()` function, **myRouter-page** must be in the **MyRouter Pages (Router)**",
                "section of your site's Velo Sidebar.",
                "",
                "Optionally, you can pass a data object to be used by the",
                "page routed to and header options for the page. The page routed to accesses the",
                "data passed to it using the [`getRouterData()`](wix-window.html#getRouterData)",
                "function of [`wix-window`](wix-window.html). with optional data and HTML header." ],
            "links":
              [ "[router( )](#router)",
                "[afterRouter( )](#afterRouter)" ],
            "examples":
              [ { "title": "Create an okay response",
                  "body":
                    [ "import {ok} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return ok(\"router-page\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Create an okay response with data and head options",
                  "body":
                    [ "import {ok} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return ok(\"router-page\", dataObj, headOpts);",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Create an okay response with data and head options",
                  "body":
                    [ "import { ok } from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  let dataObj = {",
                      "    \"field1\": \"value1\",",
                      "    \"field2\": \"value2\"",
                      "  };",
                      "",
                      "  let headOptions = {",
                      "    \"title\": \"A page title\",",
                      "    \"metaTags\": [",
                      "      {",
                      "        \"name\": \"description\",",
                      "        \"content\": \"A page description\"",
                      "      }, {",
                      "        \"name\": \"keywords\",",
                      "        \"content\": \"Velo Example\"",
                      "      }, {",
                      "        \"name\": \"robots\",",
                      "        \"content\": \"noindex\"",
                      "      }, {",
                      "        \"name\": \"og:title\",",
                      "        \"content\": \"The Title\"",
                      "      }, {",
                      "        \"property\": \"og:image\",",
                      "        \"content\": \"wix:image://v1/6...2.jpg/a.jpg#originWidth=970&originHeight=120\"",
                      "      }",
                      "    ],",
                      "    \"links\": [",
                      "      {",
                      "        \"rel\": \"canonical\",",
                      "        \"href\": \"http://mysite.com/somePage.html\"",
                      "      }",
                      "    ],",
                      "    \"structuredData\": [",
                      "      {",
                      "        \"@context\": \"http://schema.org\",",
                      "        \"@type\": \"Organization\",",
                      "        \"name\": \"My Organization Name\",",
                      "        \"url\": \"https://www.myorgdomain.com\"",
                      "      }, {",
                      "        \"@context\": \"http://schema.org\",",
                      "        \"@type\": \"Person\",",
                      "        \"email\": \"mailto:john.doe@somedomain.com\",",
                      "        \"jobTitle\": \"Professor\",",
                      "        \"name\": \"John Doe\",",
                      "        \"telephone\": \"(555) 555-555\"",
                      "      }",
                      "    ]",
                      "  };",
                      "",
                      "  return ok(\"router-page\", dataObj, headOptions);",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "redirect",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "url",
              "type": "string",
              "doc": "The url to redirect to." },
            { "name": "statusCode",
              "type": "string",
              "doc": "The status code to use.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - The redirect response object." },
        "locations":
          [ { "lineno": 455,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Returns a response with a status code of 301 (Moved Permanently) or 302 (Found) and instructs the router to redirect to the given URL.",
            "description":
              [ "The `redirect()` function is used in the [`router()`](#router), [`beforeRouter()`](#beforeRouter),",
                "and [`afterRouter()`](#afterRouter) hooks to redirect to a page that is",
                "not the requested page.",
                "",
                "Optionally, you can pass a status code of `\"301\"` or `\"302\"` using the `statusCode`",
                "parameter. If any other status code is passed or no status code is passed at all,",
                "the status code defaults to `\"302\"`." ],
            "links":
              [ "[router( )](#router)",
                "[beforeRouter( )](#beforeRouter)",
                "[afterRouter( )](#afterRouter)" ],
            "examples":
              [ { "title": "Create a redirect response",
                  "body":
                    [ "import {redirect} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return redirect(\"http://myothersite.com\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Create a redirect response with HTTP code 301",
                  "body":
                    [ "import {redirect} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return redirect(\"http://myothersite.com\", \"301\");",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "router",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "request",
              "type": "wix-router.WixRouterRequest",
              "doc": "The routing request." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - Which page to display, redirect to, or which HTTP status code to respond with." },
        "locations":
          [ { "lineno": 103,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Function containing routing logic for a given URL prefix.",
            "description":
              [ "The `router()` function handles all incoming requests with the specified URL",
                "[prefix](#prefixes). It is responsible for deciding which page to display and what data to",
                "pass to the page, where to redirect to, or which HTTP status code to respond with.",
                "",
                "The `router()` function is not a function that you call from your code. You define",
                "the function in a file named **routers.js** in the Code File's Backend section of the [Velo Sidebar](https://support.wix.com/en/article/velo-working-with-the-site-structure-sidebar). The",
                "function is called when your users browse to a URL that is handled by the router",
                "with the specified prefix.",
                "",
                "The function receives a [`WixRouterRequest`](wix-router.WixRouterRequest.html)",
                "object containing information about the incoming request.",
                "",
                "The function returns a [`WixRouterResponse`](wix-router.WixRouterResponse.html)",
                "object that causes the router to respond with a specified page, specified data,",
                "and a success response code, or respond with any other HTTP response code.",
                "",
                "Typically, the response is created using one of the [`ok()`](#ok),",
                "[`forbidden()`](#forbidden), [`notFound()`](#notFound), [`redirect()`](#redirect),",
                "or [`sendStatus()`](#sendStatus) functions.",
                "",
                "Data that is returned as part of the `WixRouterResponse` is accessed in the",
                "page code of the page that was routed to using the",
                "[`getRouterData()`](wix-window.html#getRouterData) function of",
                "[`wix-window`](wix-window.html).",
                "",
                "You can also set members of the HTML head of the response using the response's",
                "`HeadOptions` parameter.",
                "> **Notes:**",
                "> + The `router()` function also runs when you navigate to a router page in the Editor.",
                ">",
                "> + In a request URL, spaces are replaced with dashes (`-`). For example, a request for `/animals/killer whale` or `/animals/killer%20whale` will be received in the request as `/animals/killer-whale`. Therefore, when searching for the data that matches the incoming request, you need to take special care if the [path](#wixrouterrequest/path) contains dashes (`-`)." ],
            "links":
              [ "[ok()](#ok)",
                "[forbidden()](#forbidden)",
                "[notFound()](#notFound)",
                "[redirect()](#redirect)",
                "[sendStatus()](#sendStatus)" ],
            "examples":
              [ { "title": "Router stub",
                  "body":
                    [ "export function myRouter_Router(request) {",
                      "  // router code ...",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a router on the `myRouter` prefix." } },
                { "title": "Basic router",
                  "body":
                    [ "import {ok, notFound} from \"wix-router\";",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  // URL looks like:",
                      "  // https://mysite.com/myRouter/good",
                      "  // or:",
                      "  // https://user.wixsite.com/mysite/myRouter/good",
                      "  const status = request.path[0];",
                      "",
                      "  if(status === \"good\") {",
                      "    // Show a page",
                      "    return ok(\"myRouter-page\");",
                      "  }",
                      "  else {",
                      "    // Return 404",
                      "    return notFound();",
                      "  }",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a router on the `myRouter` prefix that shows a page when\nthe path begins with the word \"good\" and returns a 404 in all other cases." } },
                { "title": "Router that checks requesting devices form factor",
                  "body":
                    [ "import {ok} from \"wix-router\";",
                      "",
                      "export function myRouter_Router(request) {",
                      "  if(request.formFactor === \"desktop\") {",
                      "    // Show desktop page",
                      "    return ok(\"desktop-page\");",
                      "  }",
                      "  else {",
                      "    // Show mobile page",
                      "    return ok(\"mobile=page\");",
                      "  }",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a router on the `myRouter` prefix that shows a desktop\nversion of a page when the requesting devices form factor is a desktop. If the form\nfactor of the requesting device is not a desktop, the router shows a mobile version of the page." } },
                { "title": "A router with static data",
                  "body":
                    [ "import {ok, notFound} from \"wix-router\";",
                      "",
                      "// Sample data",
                      "const peopleData = {",
                      "   \"Ash\": {",
                      "     title:     \"Ash Stowe\",",
                      "     imageSite: \"https://static.wixstatic.com/media/\",",
                      "     image:     \"b8f383e0fe2b478ea91362b707ef267b.jpg\"",
                      "    },",
                      "   \"Aiden\": {",
                      "    title:      \"Aiden Johnson\",",
                      "    imageSite:  \"https://static.wixstatic.com/media/\",",
                      "    image:      \"ca3c7ac5427e43928aa5f3f443ae2163.jpg\"",
                      "   },",
                      "   \"Jess\": {",
                      "    title:      \"Jess White\",",
                      "    imageSite:  \"https://static.wixstatic.com/media/\",",
                      "    image:      \"147fe6f37fe24e83977b4124e41b6d3d.jpg\"",
                      "   },",
                      "   \"Morgan\": {",
                      "    title:      \"Morgan James\",",
                      "    imageSite:  \"https://static.wixstatic.com/media/\",",
                      "    image:      \"59e1f2f4dbbc4f7c9d6e66e3e125d830.jpg\"",
                      "   }",
                      "};",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  // Get item name from URL request",
                      "  // URL looks like:",
                      "  // https://mysite.com/myRouter/Morgan",
                      "  // or:",
                      "  // https://user.wixsite.com/mysite/myRouter/Morgan",
                      "  const name = request.path[0];",
                      "",
                      "  // Get the item data by name",
                      "  const data = peopleData[name];",
                      "",
                      "  // If the item exists",
                      "  if(data) {",
                      "",
                      "    //Define SEO tags",
                      "    const seoData = {",
                      "      title: data.title,",
                      "      description: `This is a description of ${data.title} page`,",
                      "      noIndex: false,",
                      "      metaTags: {",
                      "        \"og:title\": data.title,",
                      "        \"og:image\": data.imageSite + data.image",
                      "      }",
                      "    };",
                      "",
                      "    // Render item page, passing data and head info",
                      "    return ok(\"myRouter-page\", data, seoData);",
                      "  }",
                      "",
                      "  // Return 404 if the item is not found",
                      "  return notFound();",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a router on the `myRouter` prefix that shows a page when\nthe path begins with a name that is found in a static data object. The appropriate\ndata and HTML head options are also passed in the response. If the requested\nitem does not exist, a 404 \"Not Found\" response is returned." } },
                { "title": "A router with data from a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import {ok, notFound} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  // Empty path - show index page",
                      "  // URL looks like:",
                      "  // https://mysite.com/myRouter",
                      "  // or:",
                      "  // https://user.wixsite.com/mysite/myRouter",
                      "  if (request.path.length < 1) {",
                      "    return ok(\"index-page\");",
                      "  }",
                      "",
                      "  // Path with item - show item page with data from collection",
                      "  // URL looks like:",
                      "  // https://mysite.com/myRouter/itemTitle",
                      "  // or:",
                      "  // https://user.wixsite.com/mysite/myRouter/itemTitle",
                      "  // Retrieve data from collection",
                      "  return wixData.query(\"myCollection\")",
                      "    .eq(\"title\", request.path[0])",
                      "    .find()",
                      "    .then( (queryResult) => {",
                      "      if (queryResult.length > 0) {",
                      "        return ok(\"item-page\", queryResult.items[0]);",
                      "      }",
                      "      return notFound();",
                      "    } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a router on the `myRouter` prefix that shows an index page\nwhen the path is empty. If the path contains an item title, that title is looked\nup in a collection. If the item is found in the collection, it shows an item\npage and passes the item data. If the item is not found in the collection,\na 404 \"Not Found\" response is returned." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sendStatus",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "statusCode",
              "type": "string",
              "doc": "The HTTP status code to return." },
            { "name": "message",
              "type": "string",
              "doc": "The message to write as the HTTP body.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-router.WixRouterResponse" ] },
            "doc": "Fulfilled - A response object with the specified HTTP status." },
        "locations":
          [ { "lineno": 479,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Returns a response with the specified HTTP status code with an optional message.",
            "description":
              [ "The `sendStatus()` function is used in the [`router()`](#router), [`beforeRouter()`](#beforeRouter),",
                "and [`afterRouter()`](#afterRouter) hooks to return a specified response.",
                "Optionally, you can pass a message." ],
            "links":
              [ "[router( )](#router)",
                "[beforeRouter( )](#beforeRouter)",
                "[afterRouter( )](#afterRouter)" ],
            "examples":
              [ { "title": "Create a response with a specified status code",
                  "body":
                    [ "import {sendStatus} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return sendStatus(\"418\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Create a response with a specified status code and message",
                  "body":
                    [ "import {sendStatus} from 'wix-router';",
                      "",
                      "export function myRouter_Router(request) {",
                      "",
                      "  return sendStatus(\"418\", \"Message\");",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sitemap",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "request",
              "type": "wix-router.WixRouterSitemapRequest",
              "doc": "The sitemap request." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-router.WixRouterSitemapEntry" ] } ] },
            "doc": "Fulfilled - An array of sitemap entries." },
        "locations":
          [ { "lineno": 170,
              "filename": "router.js" } ],
        "docs":
          { "summary": "Function containing sitemap logic for a given URL prefix.",
            "description":
              [ "The `sitemap()` function handles sitemap requests for pages with the specified",
                " URL [prefix](#prefixes). Use this function to make sure search engines can find the links",
                " to your router's pages.",
                "",
                " The `sitemap()` function is not a function that you call from your code. You define",
                " the function in a file named **routers.js** in the Code File's Backend section of the [Velo Sidebar](https://support.wix.com/en/article/velo-working-with-the-site-structure-sidebar). The",
                " function is called when a sitemap request is received for the router with the",
                " specified prefix.",
                "",
                " The function receives a [`WixRouterSitemapRequest`](wix-router.WixRouterSitemapRequest.html)",
                " object containing information about the incoming sitemap request.",
                "",
                " The function returns an array of [`WixRouterSitemapEntry`](wix-router.WixRouterSitemapEntry.html)",
                " objects each of which includes information about a page, such as its URL, title, and name.",
                "",
                " To create sitemap entry objects, first import [`WixRouterSitemapEntry`](wix-router.WixRouterSitemapEntry.html)",
                " from [`wix-router`](wix-router.html):",
                "",
                " ```javascript",
                " import {WixRouterSitemapEntry} from \"wix-router\";",
                " ```",
                "",
                " The `sitemap()` function is also used to populate the items preview widget,",
                " allowing you to switch between URLs in preview mode.",
                "",
                "> **Note:** The `sitemap()` function also runs when you navigate to a router page in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Sitemap stub",
                  "body":
                    [ "// In routers.js",
                      "",
                      "export function myRouter_SiteMap(sitemapRequest) {",
                      "  // sitemap code ...",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a sitemap on the `myRouter` prefix." } },
                { "title": "Basic sitemap",
                  "body":
                    [ "// In routers.js",
                      "",
                      "import {WixRouterSitemapEntry} from 'wix-router';",
                      "",
                      "export function myRouter_SiteMap(sitemapRequest) {",
                      "",
                      "\tlet siteMapEntries = [];",
                      "",
                      "  // Create a sitemap entry for each item",
                      "  for (var key in myData) {",
                      "    let entry = new WixRouterSitemapEntry(key);",
                      "    entry.pageName = \"myRouter-page\";",
                      "    entry.url = \"/myRouter/\" + key;",
                      "    entry.title = myData[key].title;",
                      "    siteMapEntries.push(entry);",
                      "  }",
                      "",
                      "  // Return the sitemap entries",
                      "  return siteMapEntries;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a sitemap on the `myRouter` prefix by looping through\na data object and creating a sitemap entry for each object." } },
                { "title": "A sitemap with static data",
                  "body":
                    [ "// In routers.js",
                      "",
                      "import {WixRouterSitemapEntry} from 'wix-router';",
                      "",
                      "// Sample data",
                      "const peopleData = {",
                      "   \"Ash\": {",
                      "     title:     \"Ash Stowe\",",
                      "     imageSite: \"https://static.wixstatic.com/media/\",",
                      "     image:     \"b8f383e0fe2b478ea91362b707ef267b.jpg\"",
                      "    },",
                      "   \"Aiden\": {",
                      "    title:      \"Aiden Johnson\",",
                      "    imageSite:  \"https://static.wixstatic.com/media/\",",
                      "    image:      \"ca3c7ac5427e43928aa5f3f443ae2163.jpg\"",
                      "   },",
                      "   \"Jess\": {",
                      "    title:      \"Jess White\",",
                      "    imageSite:  \"https://static.wixstatic.com/media/\",",
                      "    image:      \"147fe6f37fe24e83977b4124e41b6d3d.jpg\"",
                      "",
                      "   },",
                      "   \"Morgan\": {",
                      "    title:      \"Morgan James\",",
                      "    imageSite:  \"https://static.wixstatic.com/media/\",",
                      "    image:      \"59e1f2f4dbbc4f7c9d6e66e3e125d830.jpg\"",
                      "   }",
                      "};",
                      "",
                      "export function myRouter_SiteMap(sitemapRequest) {",
                      "",
                      "  //Convert the data to sitemap entries",
                      "  const siteMapEntries = Object.keys(peopleData).map( (name) => {",
                      "    const data = peopleData[name];",
                      "    const entry = new WixRouterSitemapEntry(name);",
                      "    entry.pageName = \"myRouter-page\";",
                      "    entry.url = `/myRouter/${name}`;",
                      "    entry.title = data.title;",
                      "    return entry;",
                      "  } );",
                      "",
                      "  // Return the sitemap entries",
                      "  return siteMapEntries;",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example creates a sitemap on the `myRouter` prefix by mapping an object's\nkeys to an array of corresponding sitemap entries." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  },
  "menuSections": "APIs",
  "relatedContent":
    [ { "icon": "article",
        "text": "About Routers",
        "url": "https://support.wix.com/en/article/velo-about-routers" },
      { "icon": "article",
        "text": "Creating a Router",
        "url": "https://support.wix.com/en/article/velo-creating-a-router" },
      { "icon": "article",
        "text": "SEO and Routing",
        "url": "https://support.wix.com/en/article/velo-about-seo-and-routing" },
      { "icon": "example",
        "text": "Stripe Payment Processing",
        "url": "https://www.wix.com/velo/forum/wix-tips-and-updates/example-stripe-payment-processing" } ],
  "FAQs":
    [ { "title": "How do I create a dynamic sitemap?",
        "markdown": "You can use the [`sitemap()`](https://www.wix.com/code/reference/wix-router.html#sitemap) function to create a dynamic sitemap for a given URL prefix. The function handles sitemap requests for pages with the specified URL prefix. Use this function to return a dynamic sitemap to search engines." },
      { "title": "Why is it not working when I try to route to some pages in my site?",
        "markdown": "Each router can only route to the pages in its prefix. You can see which pages are in your router's prefix in the [Site Structure sidebar](https://support.wix.com/en/article/wix-code-working-with-the-site-structure-sidebar)." },
      { "title": "Can routers be used to create a custom 404 page?",
        "markdown": "No. Using routers you can control when a 404 page will be shown, but the page that will be shown is the built-in Wix 404 page." } ] }