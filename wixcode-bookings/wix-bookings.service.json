{ "name": "wix-bookings",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 5,
      "filename": "bookings.js" },
  "docs":
    { "summary": "The wix-bookings module contains functionality for working with\n bookings from client-side code.",
      "description":
        [ "Using the Bookings API, you can build a customized bookings experience.",
          "",
          " To process bookings on your site, first set up your site to accept bookings",
          " as described in <a href=\"https://support.wix.com/en/article/about-wix-bookings\" target=\"_blank\">About Wix Bookings</a>.",
          "",
          " You can checkout bookings for 1-on-1 Sessions (Appointments) from any type of Wix account.",
          " To checkout bookings for Ongoing Sessions (Classes) or a Set of Sessions (Courses) you need to",
          " <a href=\"https://support.wix.com/en/article/upgrading-wix-bookings\" target=\"_blank\">upgrade to a Business Premium Plan</a>.",
          "",
          " <h3 id=\"booking-lifecycle\">Typical Booking Lifecycle</h3>",
          "",
          " The following list outlines the data flow in a typical booking lifecycle:",
          "",
          " 1. Get a list of services from one of:",
          "    + A dataset connected to the **Bookings/Services** collection.",
          "    + A [query](wix-data.html#query) on the **Bookings/Services** collection.",
          " 1. A service is selected.",
          " 1. Get available slots by calling the [`getServiceAvailability()`](#getServiceAvailability) function",
          "    using the selected service's **Service ID** (`_id`) value. (Optionally,",
          "    you can pass a [`AvailabilityOptions`](#AvailabilityOptions)",
          "    object to change the limits on the slots that are returned.)",
          " 1. You can match the returned slots to their related staff member items using",
          "    the **Bookings/Staff** collection.",
          " 1. A slot is selected.",
          " 1. Gather values for the selected service's form fields, if there are any.",
          "    The list of form fields is found in the **form** property of the items",
          "    in the **Bookings/Services** collection.",
          " 1. Get the available payment options for the currently logged-in user and ",
          "    the selected service with the ",
          "    [`getCheckoutOptions()`](#getCheckoutOptions) function.",
          " 1. A payment option is selected (offline, online, paid plan package, or",
          "    paid plan membership).",
          " 1. Call the [`checkoutBooking()`](#checkoutBooking) function. Pass the",
          "    selected slot object, the values for the form fields, and the payment type",
          "    if necessary. Note, the specified payment type must match the service's",
          "    configuration in your site's **Dashboard**. You cannot book a paid service",
          "    as if it were free.",
          "",
          "    + If the service is free, you do not need to pass a [`paymentOptions`](#paymentOptions)",
          "      object.",
          "    + If the service is not free and you pass a [`paymentOptions`](#paymentOptions)",
          "      object indicating the payment should be online, a payment popup is presented",
          "      for the user to enter payment information, such as credit card information.",
          "    + If the service is not free and you pass a [`paymentOptions`](#paymentOptions)",
          "      object indicating the payment should be offline, the payment popup is not",
          "      presented to the user.",
          "",
          "",
          "",
          " To use the Bookings API, import `wixBookings` from the `wix-bookings` module:",
          "",
          "   ```javascript",
          "   import wixBookings from 'wix-bookings';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "checkoutBooking",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "bookingInfo",
              "type": "wix-bookings.BookingInfo",
              "doc": "Information about the slot to be booked." },
            { "name": "options",
              "type": "wix-bookings.PaymentOptions",
              "doc": "Information about the payment method and coupon codes.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings.BookingResult" ] },
            "doc": "Fulfilled - Results of the booking checkout." },
        "locations":
          [ { "lineno": 209,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "Books a service and processes payment for the service.",
            "description":
              [ "The `checkoutBooking()` function returns a Promise that resolves to a",
                " unique booking ID when the service is booked successfully.",
                "",
                " To understand how `checkoutBooking()` is used in a typical booking lifecycle,",
                " see [Typical Booking Lifecycle](#booking-lifecycle).",
                "",
                " Call the `checkoutBooking()` with a [`BookingInfo`](#BookingInfo) object that",
                " contains the slot to book, values for all the form fields, and",
                " the number of spots to book.",
                "",
                " The form fields contain additional information required for the booking.",
                "",
                " If the service being checked out is not a free service, you also need to pass",
                " a [`PaymentOptions`](#PaymentOptions) object containing information about the",
                " method of payment and any coupon codes. If an online method of payment is specified,",
                " a payment popup is presented for the user to input payment information, such",
                " as credit card information. The function's returned Promise resolves after the",
                " user finishes entering the payment information and the service has been successfully",
                " booked. If no payment or an offline method of payment is specified, the payment",
                " popup is not presented and the Promise resolves when the service has been",
                " successfully booked.",
                "",
                " If a service is configured as a paid service in the **Dashboard**, attempting",
                " to perform a checkout as if it is a free service results in an error.",
                "",
                " When a service is booked successfully:",
                "",
                " + A site contact is created with the provided booking information.",
                " + An email is sent to you about the new booking.",
                " + An email is sent to the user confirming that the service was booked." ],
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": \"wixPay_Offline\",",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "A full bookings scenario",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixBookings from 'wix-bookings';",
                      "",
                      "let formFields;   // form fields the selected service requires",
                      "let selectedSlot; // service slot that was selected",
                      "",
                      "// When the page loads, query for all services and use the",
                      "// results to set the service repeater's data.",
                      "$w.onReady(function () {",
                      "  wixData.query(\"Bookings/Services\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w(\"#serviceRepeater\").data = results.items;",
                      "    } );",
                      "});",
                      "",
                      "// When the service repeater's data is set, populate its items",
                      "// with the service data.",
                      "export function serviceRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#serviceName\").text = itemData.serviceName;",
                      "  $item(\"#tagLine\").text = itemData.tagLine;",
                      "  $item(\"#image\").src = itemData.imageURL;",
                      "}",
                      "",
                      "// When a service is selected, store its form fields for later,",
                      "// get the service's available slots, and use the results to set",
                      "// the slot repeater's data.",
                      "export function serviceRepeaterContainer_click(event) {",
                      "  $w(\"#serviceRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    formFields = itemData.form.fields;",
                      "  } );",
                      "",
                      "  wixBookings.getServiceAvailability(event.context.itemId)",
                      "    .then( (availability) => {",
                      "      $w(\"#slotRepeater\").data = availability.slots;",
                      "    } );",
                      "}",
                      "",
                      "// When the slot repeater's data is set, populate its items",
                      "// with the slot data.",
                      "export function slotRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#dateText\").text = itemData.startDateTime.toLocaleDateString();",
                      "  $item(\"#timeText\").text = itemData.startDateTime.toLocaleTimeString();",
                      "}",
                      "",
                      "// When a slot is selected, store it for later, use the stored form",
                      "// fields to set form field repeater's data.",
                      "export function slotRepeateContainer_click(event) {",
                      "  $w(\"#slotRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    selectedSlot = itemData;",
                      "  } );",
                      "",
                      "  $w(\"#formFieldRepeater\").data = formFields;",
                      "}",
                      "",
                      "// When the form field repeater's data is set, populate its items",
                      "// with the form fields.",
                      "export function formFieldRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#fieldInput\").placeholder = itemData.label;",
                      "}",
                      "",
                      "// When the booking button is clicked, grab the form field values,",
                      "// build the bookingInfo object, and perform a booking checkout.",
                      "export function bookButton_click(event) {",
                      "  let formFieldValues = [];",
                      "",
                      "  $w(\"#formFieldRepeater\").forEachItem( ($item, itemData, index) => {",
                      "    formFieldValues.push({",
                      "      \"_id\": itemData._id,",
                      "      \"value\": $item(\"#fieldInput\").value",
                      "    });",
                      "  } );",
                      "",
                      "  let bookingInfo = {",
                      "    \"slot\": selectedSlot,",
                      "    \"formFields\": formFieldValues",
                      "  };",
                      "",
                      "  wixBookings.checkoutBooking(bookingInfo)",
                      "    .then( (results) => {",
                      "      $w(\"#confirmationText\").text = `Booking ID: ${results.bookingId} Status: ${results.status}`;",
                      "    } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates a simple bookings scenario. In the interest of\n simplicity the code does not deal with display considerations or validations\n that would normally be required to make sure users perform the flow as\n intended.\n The code assumes a page with the following elements:\n\n + `serviceRepeater`: Displays the services that can be booked. The\n   elements in the repeater match the information we want to display\n   for each service.\n + `slotRepeater`: Displays the slots that are available for the selected\n   service. The elements in the repeater match the information we want to\n   display for each slot.\n + `formFieldRepeater`: Contains input fields for collecting form field values\n   needed to book the selected service. Each item contains one input element.\n + `bookButton`: Performs a booking checkout after a service and slot are selected\n   and the form fields have been entered." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "You can checkout bookings for 1-on-1 Sessions (Appointments) from any type of Wix account.\n To checkout bookings for Ongoing Sessions (Classes) or a Set of Sessions (Courses) you need to\n <a href=\"https://support.wix.com/en/article/upgrading-wix-bookings\" target=\"_blank\">upgrade to a Business Premium Plan</a>." ] } },
      { "name": "getCheckoutOptions",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "slotId",
              "type": "string",
              "doc": "The slot ID of the service for which to list the possible checkout options." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "wix-bookings.CheckoutOption" ] } ] },
            "doc": "Fulfilled - The available payment options for the service and the logged-in user.\nRejected - Checkout payment options error object." },
        "locations":
          [ { "lineno": 328,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "Gets the valid checkout options for a service's slot.",
            "description":
              [ "The `getCheckoutOptions()` function returns a Promise that resolves to the valid checkout options for the given service's slot.",
                "",
                " To understand how `getCheckoutOptions()` is used in a typical booking lifecycle,",
                " see [Typical Booking Lifecycle](#booking-lifecycle).",
                "",
                " The passed `slotId` must be an ID from your site's **Bookings/Services**",
                " collection. Typically, you retrieve the ID from from the collection using a",
                " query or through a dataset.",
                "",
                " `getCheckoutOptions()` returns only the options available for the currently-logged-in user. For example, if the user has not ",
                " purchased any paid plans, paid plans are not returned even if there are paid plans associated with the service." ],
            "links": [],
            "examples":
              [ { "title": "Get the checkout options for a service that are available to the logged-in user",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let slotId = // get available slot ID for the service",
                      "",
                      "wixBookings.getCheckoutOptions(slotId)",
                      "  .then((checkoutOptions) => {",
                      "     let firstOptionType = checkoutOptions[0].type;",
                      "  });",
                      "",
                      "/* An object containing checkout options:  ",
                      " * {",
                      " *   [",
                      " *    { ",
                      " *      \"type\":\"wixPay_Online\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"wixPay_Offline\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"membership\",",
                      " *      \"planName\":\"Frequent Flier\",",
                      " *      \"planOrderId\":\"b1a75-...-a236\",",
                      " *      \"planExpiration\":\"2021-01-08T11:39:29.218Z\",",
                      " *      \"benefitId\":\"93de9c-...-48e6\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"package\",",
                      " *      \"planName\":\"Repeat Customer\",",
                      " *      \"planOrderId\":\"9551f-...-1b8039\",",
                      " *      \"planExpiration\":\"2020-07-08T11:39:11.340Z\",",
                      " *      \"benefitId\":\"8b11cc-...-67a49e\",",
                      " *      \"remainingCredits\":58,",
                      " *      \"totalCredits\":60",
                      " *    }",
                      " *  ]",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getServiceAvailability",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "serviceId",
              "type": "string",
              "doc": "The ID of the service for which to check slot availability." },
            { "name": "options",
              "type": "wix-bookings.AvailabilityOptions",
              "doc": "Options that refine which slots should be returned.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings.ServiceAvailability" ] },
            "doc": "Fulfilled - A list of available slots.\nRejected - Bookings error object." },
        "locations":
          [ { "lineno": 277,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "Gets the available slots for a specific service.",
            "description":
              [ "The `getServiceAvailability()` function returns a Promise that resolves to a",
                " list of slots from the given service that have open spots, and can therefore",
                " still be booked.",
                "",
                " Service availability means different things for the different <a href=\"https://support.wix.com/en/article/creating-the-right-booking-service-for-your-business\" target=\"_blank\">service types</a>:",
                "",
                " + **1-on-1 Sessions (APPOINTMENT)**: See <a href=\"https://support.wix.com/en/article/setting-availability-for-1-on-1-sessions-in-wix-bookings\" target=\"_blank\">here</a> to",
                "   understand what affects the availability of a 1-on-1 session. A 1-on-1",
                "   session is returned as available if it meets the conditions outlined in the",
                "   article linked above and the session slot's time falls within the time specified by the",
                "   `AvailabilityOptions` or within the default time frame if no options are specified.",
                " + **Ongoing Sessions (CLASS)**: An ongoing session slot is returned as available if the slot's",
                "   time falls within the time specified by the `AvailabilityOptions` or within",
                "   the default time frame if no options are specified.",
                " + **Set of Sessions (COURSE)**: The first session slot from a set of sessions is returned",
                "   as available if the first session slot's time falls within the time specified by the",
                "   `AvailabilityOptions` or within the default time frame if no options are specified.",
                "",
                " To understand how `getServiceAvailability()` is used in a typical booking lifecycle,",
                " see [Typical Booking Lifecycle](#booking-lifecycle).",
                "",
                " The passed `serviceId` must be an ID from your site's **Bookings/Services**",
                " collection. Typically, you retrieve the ID from from the collection using a",
                " query or through a dataset.",
                "",
                " Optionally, you can pass an [`AvailabilityOptions`](#AvailabilityOptions)",
                " object that defines a date range for which slots should be returned. If you",
                " do not pass an an [`AvailabilityOptions`](#AvailabilityOptions) object, the",
                " default date range is from the date and time the function is called until one",
                " week later." ],
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "wixBookings.getServiceAvailability(serviceId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get the available slots for a service for a specific date range",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "let today = new Date();",
                      "let startRange = new Date();",
                      "let endRange = new Date();",
                      "startRange.setDate(today.getDate() + 7);  // one week from now",
                      "endRange.setDate(today.getDate() + 14);   // two weeks from now",
                      "",
                      "let options = {",
                      "  startDateTime: startRange,",
                      "  endDateTime: endRange",
                      "};",
                      "",
                      "wixBookings.getServiceAvailability(serviceId, options)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "A full bookings scenario",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixBookings from 'wix-bookings';",
                      "",
                      "let formFields;   // form fields the selected service requires",
                      "let selectedSlot; // service slot that was selected",
                      "",
                      "// When the page loads, query for all services and use the",
                      "// results to set the service repeater's data.",
                      "$w.onReady(function () {",
                      "  wixData.query(\"Bookings/Services\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w(\"#serviceRepeater\").data = results.items;",
                      "    } );",
                      "});",
                      "",
                      "// When the service repeater's data is set, populate its items",
                      "// with the service data.",
                      "export function serviceRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#serviceName\").text = itemData.serviceName;",
                      "  $item(\"#tagLine\").text = itemData.tagLine;",
                      "  $item(\"#image\").src = itemData.imageURL;",
                      "}",
                      "",
                      "// When a service is selected, store its form fields for later,",
                      "// get the service's available slots, and use the results to set",
                      "// the slot repeater's data.",
                      "export function serviceRepeaterContainer_click(event) {",
                      "  $w(\"#serviceRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    formFields = itemData.form.fields;",
                      "  } );",
                      "",
                      "  wixBookings.getServiceAvailability(event.context.itemId)",
                      "    .then( (availability) => {",
                      "      $w(\"#slotRepeater\").data = availability.slots;",
                      "    } );",
                      "}",
                      "",
                      "// When the slot repeater's data is set, populate its items",
                      "// with the slot data.",
                      "export function slotRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#dateText\").text = itemData.startDateTime.toLocaleDateString();",
                      "  $item(\"#timeText\").text = itemData.startDateTime.toLocaleTimeString();",
                      "}",
                      "",
                      "// When a slot is selected, store it for later, use the stored form",
                      "// fields to set form field repeater's data.",
                      "export function slotRepeateContainer_click(event) {",
                      "  $w(\"#slotRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    selectedSlot = itemData;",
                      "  } );",
                      "",
                      "  $w(\"#formFieldRepeater\").data = formFields;",
                      "}",
                      "",
                      "// When the form field repeater's data is set, populate its items",
                      "// with the form fields.",
                      "export function formFieldRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#fieldInput\").placeholder = itemData.label;",
                      "}",
                      "",
                      "// When the booking button is clicked, grab the form field values,",
                      "// build the bookingInfo object, and perform a booking checkout.",
                      "export function bookButton_click(event) {",
                      "  let formFieldValues = [];",
                      "",
                      "  $w(\"#formFieldRepeater\").forEachItem( ($item, itemData, index) => {",
                      "    formFieldValues.push({",
                      "      \"_id\": itemData._id,",
                      "      \"value\": $item(\"#fieldInput\").value",
                      "    });",
                      "  } );",
                      "",
                      "  let bookingInfo = {",
                      "    \"slot\": selectedSlot,",
                      "    \"formFields\": formFieldValues",
                      "  };",
                      "",
                      "  wixBookings.checkoutBooking(bookingInfo)",
                      "    .then( (results) => {",
                      "      $w(\"#confirmationText\").text = `Booking ID: ${results.bookingId} Status: ${results.status}`;",
                      "    } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This examples demonstrates a simple bookings scenario. In the interest of\n simplicity the code does not deal with display considerations or validations\n that would normally be required to make sure users perform the flow as\n intended.\n The code assumes a page with the following elements:\n\n + `serviceRepeater`: Displays the services that can be booked. The\n   elements in the repeater match the information we want to display\n   for each service.\n + `slotRepeater`: Displays the slots that are available for the selected\n   service. The elements in the repeater match the information we want to\n   display for each slot.\n + `formFieldRepeater`: Contains input fields for collecting form field values\n   needed to book the selected service. Each item contains one input element.\n + `bookButton`: Performs a booking checkout after a service and slot are selected\n   and the form fields have been entered." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "AvailabilityOptions",
        "locations":
          [ { "lineno": 73,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling [`getServiceAvailability()`](#getServiceAvailability)\n containing options for which slots should be returned.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service for a specific date range",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "let today = new Date();",
                      "let startRange = new Date();",
                      "let endRange = new Date();",
                      "startRange.setDate(today.getDate() + 7);  // one week from now",
                      "endRange.setDate(today.getDate() + 14);   // two weeks from now",
                      "",
                      "let options = {",
                      "  startDateTime: startRange,",
                      "  endDateTime: endRange",
                      "};",
                      "",
                      "wixBookings.getServiceAvailability(serviceId, options)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "startDateTime",
              "type": "Date",
              "doc": "Start date and time of the slots\n to be returned. Defaults to the current date and time.",
              "optional": true },
            { "name": "endDateTime",
              "type": "Date",
              "doc": "End date and time of the slots to\n be returned. Defaults to one week from `startDateTime`, which is one week\n from the current date and time if `startDateTime` is also omitted.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BookingInfo",
        "locations":
          [ { "lineno": 108,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling [`checkoutBooking()`](#checkoutBooking)\n containing information about the slot to be booked.",
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "slot",
              "type": "wix-bookings.Slot",
              "doc": "The slot to be booked." },
            { "name": "numberOfSpots",
              "type": "number",
              "doc": "Number of spots to book. Defaults to `1`.",
              "optional": true },
            { "name": "formFields",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-bookings.FormField" ] },
              "doc": "List of form field values required to book the session." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BookingResult",
        "locations":
          [ { "lineno": 175,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object representing the result of a call to [`checkoutBooking()`](#checkoutBooking).",
            "links": [],
            "examples":
              [ { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": \"wixPay_Offline\",",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "status",
              "type": "string",
              "doc": "Status of the booking that was checked out.\n One of:\n\n + `\"Confirmed\"`: Payment was successful or payment is to be done offline.\n + `\"Pending Payment\"`: Payment is pending.\n + `\"Terminated\"`: Payment failed or was cancelled." },
            { "name": "bookingId",
              "type": "string",
              "doc": "ID of the booking that was checked out." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "CheckoutOption",
        "locations":
          [ { "lineno": 148,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object returned after calling [`getCheckoutOptions()`](#getCheckoutOptions)\n containing information about the available payment options for the service and the logged-in user.",
            "links": [],
            "examples":
              [ { "title": "Get the payment options for the service that are available to the logged-in user",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let slotId = // get available slot ID for the service",
                      "",
                      "wixBookings.getCheckoutOptions(slotId)",
                      "  .then((checkoutOptions) => {",
                      "     let firstOptionType = checkoutOptions[0].type;",
                      "  });",
                      "",
                      "/* An object containing checkout options:  ",
                      " * {",
                      " *   [",
                      " *    { ",
                      " *      \"type\":\"wixPay_Online\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"wixPay_Offline\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"membership\",",
                      " *      \"planName\":\"Frequent Flier\",",
                      " *      \"planOrderId\":\"b1a75-...-a236\",",
                      " *      \"planExpiration\":\"2021-01-08T11:39:29.218Z\",",
                      " *      \"benefitId\":\"93de9c-...-48e6\"",
                      " *    },",
                      " *    {",
                      " *      \"type\":\"package\",",
                      " *      \"planName\":\"Repeat Customer\",",
                      " *      \"planOrderId\":\"9551f-...-1b8039\",",
                      " *      \"planExpiration\":\"2020-07-08T11:39:11.340Z\",",
                      " *      \"benefitId\":\"8b11cc-...-67a49e\",",
                      " *      \"remainingCredits\":58,",
                      " *      \"totalCredits\":60",
                      " *    }",
                      " *  ]",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Book a service with the paid plan payment option",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "let serviceId = // get chosen serviceId;",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000001\", // name field ID",
                      "    \"value\": \"Joe Smith\"",
                      "  }, {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000003\", // Phone field ID",
                      "    \"value\": \"0987654321\"",
                      "  },{",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000002\", // email field ID",
                      "    \"value\": \"abc@abc\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "",
                      "  wixBookings.getServiceAvailability(serviceId)",
                      "    .then( (availability) => {\t\t",
                      "      let slots = availability.slots;",
                      "      slot = slots[0];",
                      "\t    let slotId = slot._id; ",
                      "\t  ",
                      "      wixBookings.getCheckoutOptions({slotId})",
                      "        .then( (checkoutOptions) => {",
                      "",
                      "          // Make sure each option object in the array of the repeater's data",
                      "          // has a unique _id. See https://www.wix.com/corvid/reference/$w.Repeater.html#data",
                      "          // for more information.",
                      "",
                      "          checkoutOptions.forEach((option, index) => {",
                      "\t\t\t\t\t\toption._id = index.toString(); ",
                      "\t\t\t\t\t});",
                      "         })",
                      "",
                      "         $w('#myRepeater').data = checkoutOptions;",
                      "       });",
                      "\t} );",
                      "\t",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#title\").text = itemData.type;",
                      "    $item(\"#selectButton\").onClick( (event) => {\t\t\t",
                      "      let paymentOptions = {",
                      "        \"paymentType\": itemData.type",
                      "\t  };",
                      "\t  ",
                      "    if ((itemData.type === \"package\") || (itemData.type === \"membership\")) {",
                      "      paymentOptions.paidPlan = {};",
                      "      paymentOptions.paidPlan.planOrderId = itemData.planOrderId;",
                      "      paymentOptions.paidPlan.benefitId = itemData.benefitId;",
                      "\t};",
                      "\t",
                      "    let bookingInfo = {",
                      "      \"slot\": slot,",
                      "      \"formFields\": formFieldValues",
                      "    };",
                      "",
                      "    wixBookings.checkoutBooking(bookingInfo, paymentOptions)",
                      "      .then( (results) => {",
                      "        let id = results.bookingId;",
                      "        let status = results.status;",
                      "\t  } );",
                      "\t} );",
                      "\t",
                      "  });",
                      "});" ],
                  "extra":
                    { "description": "We find the next available slot for a given service. Using this slot, we display the service's available payment options\n for the logged-in visitor in a repeater. If a paid plan is selected as the payment option, we add the plan's order ID\n and  benefit ID to the payment options to use for the booking." } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Type of the available payment option. Valid options are:\n\n + `\"wixPay_Online\"` for online collections\n + `\"wixPay_Offline\"` for offline collections\n + `\"package\"` for a package-type paid plan \n + `\"membership\"` for a membership-type paid plan" },
            { "name": "planName",
              "type": "string",
              "doc": "Name of the plan package or membership. For booking with paid plans only.",
              "optional": true },
            { "name": "planOrderId",
              "type": "string",
              "doc": "Order ID of the plan package or membership. For booking with paid plans only.",
              "optional": true },
            { "name": "benefitId",
              "type": "string",
              "doc": "ID of the benefit provided by the plan package. For booking with package-type paid plans only.",
              "optional": true },
            { "name": "remainingCredits",
              "type": "number",
              "doc": "Number of sessions remaining in the plan package. For booking with package-type paid plans only.",
              "optional": true },
            { "name": "totalCredits",
              "type": "number",
              "doc": "Number of sessions initially provided with the plan package.  For booking with package-type paid plans only.",
              "optional": true },
            { "name": "planExpiration",
              "type": "Date",
              "doc": "Date by which the plan package or membership expires. For booking with paid plans only.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FormField",
        "locations":
          [ { "lineno": 118,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling [`checkoutBooking()`](#checkoutBooking)\n containing values for form fields required to book the session.",
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "Form field value." },
            { "name": "_id",
              "type": "string",
              "doc": "ID of the form field from the **form** property in the **Booking/Sessions** collection." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaymentOptions",
        "locations":
          [ { "lineno": 127,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object used when calling [`checkoutBooking()`](#checkoutBooking)\n containing information about the payment options.",
            "links": [],
            "examples":
              [ { "title": "Book a service with online or offline payment options",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"_id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"formFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": \"wixPay_Offline\",",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingId;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Book a service with the paid plan payment option",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "let serviceId = // get chosen serviceId;",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000001\", // name field ID",
                      "    \"value\": \"Joe Smith\"",
                      "  }, {",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000003\", // Phone field ID",
                      "    \"value\": \"0987654321\"",
                      "  },{",
                      "    \"_id\": \"00000000-0000-0000-0000-000000000002\", // email field ID",
                      "    \"value\": \"abc@abc\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "",
                      "  wixBookings.getServiceAvailability(serviceId)",
                      "    .then( (availability) => {\t\t",
                      "      let slots = availability.slots;",
                      "      slot = slots[0];",
                      "\t    let slotId = slot._id; ",
                      "\t  ",
                      "      wixBookings.getCheckoutOptions({slotId})",
                      "        .then( (checkoutOptions) => {",
                      "",
                      "          // Make sure each option object in the array of the repeater's data",
                      "          // has a unique _id. See https://www.wix.com/corvid/reference/$w.Repeater.html#data",
                      "          // for more information.",
                      "",
                      "          checkoutOptions.forEach((option, index) => {",
                      "\t\t\t\t\t\toption._id = index.toString(); ",
                      "\t\t\t\t\t});",
                      "         })",
                      "",
                      "         $w('#myRepeater').data = checkoutOptions;",
                      "       });",
                      "\t} );",
                      "\t",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#title\").text = itemData.type;",
                      "    $item(\"#selectButton\").onClick( (event) => {\t\t\t",
                      "      let paymentOptions = {",
                      "        \"paymentType\": itemData.type",
                      "\t  };",
                      "\t  ",
                      "    if ((itemData.type === \"package\") || (itemData.type === \"membership\")) {",
                      "      paymentOptions.paidPlan = {};",
                      "      paymentOptions.paidPlan.planOrderId = itemData.planOrderId;",
                      "      paymentOptions.paidPlan.benefitId = itemData.benefitId;",
                      "\t};",
                      "\t",
                      "    let bookingInfo = {",
                      "      \"slot\": slot,",
                      "      \"formFields\": formFieldValues",
                      "    };",
                      "",
                      "    wixBookings.checkoutBooking(bookingInfo, paymentOptions)",
                      "      .then( (results) => {",
                      "        let id = results.bookingId;",
                      "        let status = results.status;",
                      "\t  } );",
                      "\t} );",
                      "\t",
                      "  });",
                      "});" ],
                  "extra":
                    { "description": "We find the next available slot for a given service. Using this slot, we display the service's available payment options\n for the logged-in visitor in a repeater. If a paid plan is selected as the payment option, we add the plan's order ID\n and benefit ID to the payment options to use for the booking." } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "couponCode",
              "type": "string",
              "doc": "A coupon code to be used with the payment.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "Type of the payment. Valid options are: \n\n  + `\"wixPay_Online\"` for online collections\n  + `\"wixPay_Offline\"` for offline collections\n  + `\"package\"` for a package-type paid plan\n  + `\"membership\"` for a membership-type paid plan" } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ServiceAvailability",
        "locations":
          [ { "lineno": 85,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object returned from [`getServiceAvailability()`](#getServiceAvailability)\n containing the available bookings slots.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "wixBookings.getServiceAvailability(serviceId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "slots",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-bookings.Slot" ] },
              "doc": "List of available slots." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Slot",
        "locations":
          [ { "lineno": 93,
              "filename": "bookings.js" } ],
        "docs":
          { "summary": "An object representing a booking slot.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let serviceId = // get service ID",
                      "",
                      "wixBookings.getServiceAvailability(serviceId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"_id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "startDateTime",
              "type": "Date",
              "doc": "Starting date and time of the slot." },
            { "name": "endDateTime",
              "type": "Date",
              "doc": "Ending date and time of the slot." },
            { "name": "serviceId",
              "type": "string",
              "doc": "ID of the service that the slot belongs to." },
            { "name": "capacity",
              "type": "number",
              "doc": "Maximum number of participants that can book the service for this slot." },
            { "name": "remainingSpots",
              "type": "number",
              "doc": "Number of remaining spots that can be booked for the slot." },
            { "name": "staffMemberId",
              "type": "string",
              "doc": "ID of the slot's staff member." },
            { "name": "_id",
              "type": "string",
              "doc": "Unique slot identifier." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "notes":
        [ "Different terminology is used for the types of services, depending on the context.\n The following list shows the term used in your site's **Dashboard** on the left and\n the term used in the **Bookings/Services** collection on the right:\n\n + 1-on-1 Session: APPOINTMENT\n + Ongoing Session: CLASS\n + Set of Sessions: COURSE" ] },
  "menuSections": "APIs",
  "relatedContent":
    [ { "icon": "article",
        "text": "Ideas for Working with Your Bookings App Collections",
        "url": "https://support.wix.com/en/article/wix-code-ideas-for-working-with-your-bookings-app-collections" },
      { "icon": "article",
        "text": "Creating a Bookings Timetable",
        "url": "https://support.wix.com/en/article/wix-code-how-to-create-a-bookings-timetable" },
      { "icon": "example",
        "text": "Service Page",
        "url": "https://www.wix.com/code/home/example/Service-Page" },
      { "icon": "example",
        "text": "Service List",
        "url": "https://www.wix.com/code/home/example/Service-List" },
      { "icon": "example",
        "text": "Time Table",
        "url": "https://www.wix.com/code/home/example/Time-Table" },
      { "icon": "example",
        "text": "Quick Book & Pending Appointments",
        "url": "https://www.wix.com/code/home/example/Quick-Book-%26-Pending-Appointments" },
      { "icon": "article",
        "text": "Creating a Custom Bookings Experience",
        "url": "https://support.wix.com/en/article/wix-code-creating-a-custom-bookings-experience" } ] }