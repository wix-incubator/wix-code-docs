{ "name": "WixFetchResponse",
  "memberOf": "wix-fetch",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 87,
      "filename": "index.js" },
  "docs":
    { "summary": "An object returned by the `fetch()` function representing\n an HTTP response to a fetch.",
      "description":
        [ "The `WixFetchResponse` object contains information about an HTTP response.",
          "More functionality is available in each of the respective [Fetch API implementations](wix-fetch/introduction)." ],
      "links":
        [ "{@link wix-fetch}" ],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "bodyUsed",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 152,
              "filename": "index.js" } ],
        "docs":
          { "summary": "Indicates whether the body of the response has been used yet.",
            "description":
              [ "The response's body is considered used once it has been read. For example,",
                " after calling the response's [`json()`](#json) function, the value of",
                " `bodyUsed` will be `true`." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the response's body has been used.",
                  "body":
                    [ "let wasBodyUsed = httpResponse.bodyUsed; // false" ],
                  "extra":
                    {  } },
                { "title": "Get a resource and the response information",
                  "body":
                    [ "import {fetch} from 'wix-fetch';",
                      "",
                      "// ...",
                      "",
                      "fetch(\"https://someapi.com/api/someendpoint\", {\"method\": \"get\"})",
                      "  .then( (httpResponse) => {",
                      "    let url = httpResponse.url;",
                      "    let statusCode = httpResponse.status;",
                      "    let statusText = httpResponse.statusText;",
                      "    let headers = httpResponse.headers;",
                      "    let bodyUsed = httpResponse.bodyUsed;",
                      "    if (httpResponse.ok) {",
                      "      return httpResponse.json();",
                      "    }",
                      "    else {",
                      "      return Promise.reject(\"Fetch did not succeed\");",
                      "    }",
                      "  } )",
                      "  .then( (json) => {",
                      "    console.log(json.someKey);",
                      "  } )",
                      "  .catch( (err) => {",
                      "    console.log(err);",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "headers",
        "labels": [],
        "get": true,
        "set": false,
        "type": "Object",
        "locations":
          [ { "lineno": 108,
              "filename": "index.js" } ],
        "docs":
          { "summary": "The response headers.",
            "links": [],
            "examples":
              [ { "title": "Get the response's headers.",
                  "body":
                    [ "let headers = httpResponse.headers;" ],
                  "extra":
                    {  } },
                { "title": "Get a resource and the response information",
                  "body":
                    [ "import {fetch} from 'wix-fetch';",
                      "",
                      "// ...",
                      "",
                      "fetch(\"https://someapi.com/api/someendpoint\", {\"method\": \"get\"})",
                      "  .then( (httpResponse) => {",
                      "    let url = httpResponse.url;",
                      "    let statusCode = httpResponse.status;",
                      "    let statusText = httpResponse.statusText;",
                      "    let headers = httpResponse.headers;",
                      "    let bodyUsed = httpResponse.bodyUsed;",
                      "    if (httpResponse.ok) {",
                      "      return httpResponse.json();",
                      "    }",
                      "    else {",
                      "      return Promise.reject(\"Fetch did not succeed\");",
                      "    }",
                      "  } )",
                      "  .then( (json) => {",
                      "    console.log(json.someKey);",
                      "  } )",
                      "  .catch( (err) => {",
                      "    console.log(err);",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ok",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 97,
              "filename": "index.js" } ],
        "docs":
          { "summary": "Indicates if the request was successful, meaning its `status` is in the range 2xx.",
            "links": [],
            "examples":
              [ { "title": "Get whether a response is ok.",
                  "body":
                    [ "let isOk = httpResponse.ok; // true" ],
                  "extra":
                    {  } },
                { "title": "Get a resource and the response information",
                  "body":
                    [ "import {fetch} from 'wix-fetch';",
                      "",
                      "// ...",
                      "",
                      "fetch(\"https://someapi.com/api/someendpoint\", {\"method\": \"get\"})",
                      "  .then( (httpResponse) => {",
                      "    let url = httpResponse.url;",
                      "    let statusCode = httpResponse.status;",
                      "    let statusText = httpResponse.statusText;",
                      "    let headers = httpResponse.headers;",
                      "    let bodyUsed = httpResponse.bodyUsed;",
                      "    if (httpResponse.ok) {",
                      "      return httpResponse.json();",
                      "    }",
                      "    else {",
                      "      return Promise.reject(\"Fetch did not succeed\");",
                      "    }",
                      "  } )",
                      "  .then( (json) => {",
                      "    console.log(json.someKey);",
                      "  } )",
                      "  .catch( (err) => {",
                      "    console.log(err);",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "status",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 119,
              "filename": "index.js" } ],
        "docs":
          { "summary": "The response [status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).",
            "links": [],
            "examples":
              [ { "title": "Get the response's status code.",
                  "body":
                    [ "let statusCode = httpResponse.status; // 200" ],
                  "extra":
                    {  } },
                { "title": "Get a resource and the response information",
                  "body":
                    [ "import {fetch} from 'wix-fetch';",
                      "",
                      "// ...",
                      "",
                      "fetch(\"https://someapi.com/api/someendpoint\", {\"method\": \"get\"})",
                      "  .then( (httpResponse) => {",
                      "    let url = httpResponse.url;",
                      "    let statusCode = httpResponse.status;",
                      "    let statusText = httpResponse.statusText;",
                      "    let headers = httpResponse.headers;",
                      "    let bodyUsed = httpResponse.bodyUsed;",
                      "    if (httpResponse.ok) {",
                      "      return httpResponse.json();",
                      "    }",
                      "    else {",
                      "      return Promise.reject(\"Fetch did not succeed\");",
                      "    }",
                      "  } )",
                      "  .then( (json) => {",
                      "    console.log(json.someKey);",
                      "  } )",
                      "  .catch( (err) => {",
                      "    console.log(err);",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "statusText",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 130,
              "filename": "index.js" } ],
        "docs":
          { "summary": "The response [status message](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).",
            "links": [],
            "examples":
              [ { "title": "Get the response's status message.",
                  "body":
                    [ "let statusText = httpResponse.statusText; // \"OK\"" ],
                  "extra":
                    {  } },
                { "title": "Get a resource and the response information",
                  "body":
                    [ "import {fetch} from 'wix-fetch';",
                      "",
                      "// ...",
                      "",
                      "fetch(\"https://someapi.com/api/someendpoint\", {\"method\": \"get\"})",
                      "  .then( (httpResponse) => {",
                      "    let url = httpResponse.url;",
                      "    let statusCode = httpResponse.status;",
                      "    let statusText = httpResponse.statusText;",
                      "    let headers = httpResponse.headers;",
                      "    let bodyUsed = httpResponse.bodyUsed;",
                      "    if (httpResponse.ok) {",
                      "      return httpResponse.json();",
                      "    }",
                      "    else {",
                      "      return Promise.reject(\"Fetch did not succeed\");",
                      "    }",
                      "  } )",
                      "  .then( (json) => {",
                      "    console.log(json.someKey);",
                      "  } )",
                      "  .catch( (err) => {",
                      "    console.log(err);",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "url",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 141,
              "filename": "index.js" } ],
        "docs":
          { "summary": "The response URL.",
            "links": [],
            "examples":
              [ { "title": "Get the response's url.",
                  "body":
                    [ "let url = httpResponse.url; // \"https://someapi.com/api/someendpoint\"" ],
                  "extra":
                    {  } },
                { "title": "Get a resource and the response information",
                  "body":
                    [ "import {fetch} from 'wix-fetch';",
                      "",
                      "// ...",
                      "",
                      "fetch(\"https://someapi.com/api/someendpoint\", {\"method\": \"get\"})",
                      "  .then( (httpResponse) => {",
                      "    let url = httpResponse.url;",
                      "    let statusCode = httpResponse.status;",
                      "    let statusText = httpResponse.statusText;",
                      "    let headers = httpResponse.headers;",
                      "    let bodyUsed = httpResponse.bodyUsed;",
                      "    if (httpResponse.ok) {",
                      "      return httpResponse.json();",
                      "    }",
                      "    else {",
                      "      return Promise.reject(\"Fetch did not succeed\");",
                      "    }",
                      "  } )",
                      "  .then( (json) => {",
                      "    console.log(json.someKey);",
                      "  } )",
                      "  .catch( (err) => {",
                      "    console.log(err);",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "json",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The parsed response body as JSON.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 167,
              "filename": "index.js" } ],
        "docs":
          { "summary": "Reads the response body as JSON.",
            "description":
              [ "The `json()` function reads the body response stream to its completion and",
                "parses it as JSON. It returns a Promise that resolves to the response body as",
                "a JSON object." ],
            "links": [],
            "examples":
              [ { "title": "Get the response's body as JSON.",
                  "body":
                    [ "let json = response.json(); // {\"key\": \"some value\"}" ],
                  "extra":
                    {  } },
                { "title": "Get the response's body as JSON and log it to the console.",
                  "body":
                    [ "fetch(url, {\"method\": \"get\"})",
                      "  .then(response => response.json())",
                      "  .then(json => console.log(JSON.stringify(json)));" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "text",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - The response body as a string.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 183,
              "filename": "index.js" } ],
        "docs":
          { "summary": "Reads the response body as a string.",
            "description":
              [ "The `text()` function reads the body response stream to its completion and",
                " formats the data as a string. It returns a Promise that resolves to the",
                " response body as a string." ],
            "links": [],
            "examples":
              [ { "title": "Get the response's body as text.",
                  "body":
                    [ "let text = httpResponse.text(); // {\"key\": \"some value\"}" ],
                  "extra":
                    {  } },
                { "title": "Get the response's body as text and log it to the console.",
                  "body":
                    [ "fetch(url, {method: 'get'})",
                      "  .then(httpResponse => httpResponse.text())",
                      "  .then(text => console.log(text));" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }