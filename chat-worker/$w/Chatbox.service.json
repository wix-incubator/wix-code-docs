{ "name": "Chatbox",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 125,
      "filename": "chatApiPublic.js" },
  "docs":
    { "summary": "An element for sending and receiving chat messages.",
      "description":
        [ "The <a href=\"https://support.wix.com/en/article/about-wix-chat\" target=\"_blank\">Wix Chat</a> application lets you communicate with site visitors via a chatbox.",
          "The chatbox sends messages over a chat channel, which connects 2 or more chat participants.",
          "",
          "Site visitors can participate in the following chat scenarios:",
          "",
          " + Business Chat: Site members and visitors chat with the site owner or contributor, referred to as the \"business.\"",
          " + Social Chat: Site members chat with other site members, privately or in a group chat." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "global",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 220,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Indicates if an element appears on all pages or only on the current page.",
            "description":
              [ "If `global` is `true`, the element appears on all pages.",
                "",
                " If `global` is `false`, the element only appears on the current page." ],
            "links": [],
            "examples":
              [ { "title": "Get whether an element is displayed on all pages",
                  "body":
                    [ "let isGlobal = $w(\"#myChatbox\").global; // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hidden",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 154,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Indicates if the chatbox is visible or hidden.",
            "description":
              [ "If `hidden` is `true`, the chatbox is not displayed on the page.",
                "",
                " If `hidden` is `false`, the chatbox is displayed on the page.",
                "",
                " To set the `hidden` property on the chatbox, use the chatbox's",
                " [`hide()`](#hide) or [`show()`](#show) functions.",
                "",
                " If you select **Hidden on load** in the chatbox's Properties panel",
                " in the Editor, the `hidden` property is set to `true` when the page loads." ],
            "links":
              [ "[hide( )](#hide)",
                "[show( )](#show)" ],
            "examples":
              [ { "title": "Get the chatbox's hidden status",
                  "body":
                    [ "let isHidden = $w(\"#myChatbox\").hidden;  // false" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's hidden state",
                  "body":
                    [ "if( $w(\"#myChatbox\").hidden ) {",
                      "  $w(\"#myChatbox\").show();",
                      "}",
                      "else {",
                      "  $w(\"#myChatbox\").hide();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isVisible",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "defaultValue": "true",
        "locations":
          [ { "lineno": 179,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Indicates if the element is actually visible.",
            "description":
              [ "If `isVisible` is `true`, the element is displayed on the page.",
                "",
                " If `isVisible` is `false`, the element is not displayed on the page." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the chatbox is visible",
                  "body":
                    [ "let isVisible = $w(\"#myChatbox\").isVisible;  // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maximized",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 489,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Indicates if the chatbox is maximized.",
            "description":
              [ "If `maximized` is `true`, the chatbox is expanded. If `maximized` is `false`,",
                " the chatbox is minimized." ],
            "links": [],
            "examples":
              [ { "title": "Get the chatbox's maximized status",
                  "body":
                    [ "let isMaximized = $w(\"#myChatbox\").maximized; // false" ],
                  "extra":
                    {  } },
                { "title": "Toggle a chatbox's maximized state",
                  "body":
                    [ "if($w(\"#myChatbox\").maximized) {",
                      "  $w(\"#myChatbox\").minimize();",
                      "}",
                      "else {",
                      "  $w(\"#myChatbox\").maximize();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "parent",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Node",
        "defaultValue": "null",
        "locations":
          [ { "lineno": 197,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "<b>Note: This standard element property is not relevant for Chatbox.</b>",
            "description":
              [ "Gets the element's parent element.",
                "",
                " Some elements can contain other elements. This occurs when you drag",
                " an element onto a container element. The container is the `parent` of",
                " all the elements it contains.",
                "",
                " [`Page`]($w.Page.html), [`Header`]($w.Header.html), and",
                " [`Footer`]($w.Footer.html) are top-level elements and have no parent." ],
            "links":
              [ "[children]($w.ContainableMixin.html#children)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "focusChannel",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "channelInfo",
              "type": "$w.Chatbox.ChannelInfo",
              "doc": "Channel information specifying which channel to focus on." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the chat box focuses on the channel." },
        "locations":
          [ { "lineno": 436,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Expands the chatbox and focuses it on the specified chat channel.",
            "description":
              [ "The `focusChannel()` function returns a Promise that is resolved when",
                " the chatbox focuses on the specified channel.",
                "",
                " You can focus on a channel by specifying one of the following:",
                "",
                " + Channel ID: Focus on the channel with the specified ID. `type` is ignored.",
                " + Type: Focus on the channel of the specified type. Currently, only type `Business` is supported." ],
            "links": [],
            "examples":
              [ { "title": "Expand the chatbox and focus it on the channel with the specified ID",
                  "body":
                    [ "let channelInfo = {",
                      "  \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").focusChannel(channelInfo)",
                      "  .then(() => {",
                      "    console.log(\"Done maximizing chatbox and focusing channel\");",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Expand the chatbox and focus it on the business channel",
                  "body":
                    [ "let channelInfo = {",
                      "  \"type\": \"Business\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").focusChannel(channelInfo)",
                      "  .then(() => {",
                      "    console.log(\"Done maximizing chatbox and focusing channel\");",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getChannel",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "channelInfo",
              "type": "$w.Chatbox.ChannelInfo",
              "doc": "Channel information specifying which channel to get." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Chatbox.Channel" ] },
            "doc": "Fulfilled - When the information associated with the specific channel has been retrieved." },
        "locations":
          [ { "lineno": 505,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Gets a chatbox channel.",
            "description":
              [ "The `getChannel()` function returns a Promise that resolves to the requested channel.",
                " You can get a channel by specifying one of the following:",
                "",
                " + Channel ID: Gets the channel with the specified ID. `type` is ignored.",
                " + Type: Gets the channel of the specified type:",
                "",
                "    + \"Focused\": Gets the currently focused channel.",
                "    + \"Business\": Gets the business channel." ],
            "links": [],
            "examples":
              [ { "title": "Get information about the channel associated with the specified channel ID",
                  "body":
                    [ "let channelInfo = {",
                      "  \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").getChannel(channelInfo)",
                      "  .then((channel) => {",
                      "    const channelImage = channel.displayData.image;",
                      "    const lastMessageText = channel.messages[0].payload.text;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel object:",
                      " *",
                      " *   {",
                      " *     \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *     \"displayData\": {",
                      " *       \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *       \"name\": \"Our Chat Group\"",
                      " *     },",
                      " *     \"messages\":[",
                      " *       {",
                      " *         \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *         \"type\": \"TEXT\",",
                      " *         \"summary\": \"Hey, how's it going?\",",
                      " *         \"participantId\":\"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *         \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *         \"payload\": {",
                      " *           \"text\": \"Hey, how's it going?\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get information about the currently focused chat channel",
                  "body":
                    [ "let channelInfo = {",
                      "  \"type\": \"Focused\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").getChannel(channelInfo)",
                      "  .then((channel) => {",
                      "    const channelImage = channel.displayData.image;",
                      "    const lastMessageText = channel.messages[0].payload.text;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel object:",
                      " *",
                      " *   {",
                      " *     \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *     \"displayData\": {",
                      " *       \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *       \"name\": \"Our Chat Group\"",
                      " *     },",
                      " *     \"messages\":[",
                      " *       {",
                      " *         \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *         \"type\": \"TEXT\",",
                      " *         \"summary\": \"Hey, how's it going?\",",
                      " *         \"participantId\":\"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *         \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *         \"payload\": {",
                      " *           \"text\": \"Hey, how's it going?\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getChannelList",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "$w.Chatbox.Channel" ] } ] },
            "doc": "Fulfilled - When the list of channels has been retrieved." },
        "locations":
          [ { "lineno": 464,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Gets a list of available chat channels for a site visitor.",
            "description":
              [ "The `getChannelList()` function returns a Promise that resolves to a",
                " list of available channels for the site visitor." ],
            "links": [],
            "examples":
              [ { "title": "Get a list of available chat channels",
                  "body":
                    [ "$w(\"#myChatbox\").getChannelList()",
                      "  .then((channels) => {",
                      "    // Get channel image of first channel in list",
                      "    const firstChannelImage = channels[0].displayData.image;",
                      "    // Get most recent message text of first channel in list",
                      "    const firstChannelText = channels[0].messages[0].payload.text;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel list:",
                      " *",
                      " *   [",
                      " *     {",
                      " *       \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *       \"displayData\": {",
                      " *         \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *         \"name\": \"Our Chat Group\"",
                      " *       },",
                      " *       \"messages\":[",
                      " *         {",
                      " *           \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *           \"type\": \"TEXT\",",
                      " *           \"summary\": \"Hey, how's it going?\",",
                      " *           \"participantId\": \"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *           \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *           \"payload\": {",
                      " *             \"text\": \"Hey, how's it going?\"",
                      " *           }",
                      " *         }",
                      " *       ]",
                      " *    },",
                      " *    {...} // Next channel",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maximize",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the chatbox is maximized." },
        "locations":
          [ { "lineno": 406,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Expands the chatbox and sets its [`maximized`](#maximized) property to `true`.",
            "description":
              [ "The `maximize()` function returns a Promise that is resolved when",
                " the chatbox finishes expanding." ],
            "links": [],
            "examples":
              [ { "title": "Maximize the chatbox",
                  "body":
                    [ "$w(\"#myChatbox\").maximize();" ],
                  "extra":
                    {  } },
                { "title": "Maximize the chatbox and log a message when done",
                  "body":
                    [ "$w(\"#myChatbox\").maximize()",
                      "  .then(() => {",
                      "    console.log(\"Done with maximize\");",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Toggle a chatbox's maximized state",
                  "body":
                    [ "if($w(\"#myChatbox\").maximized) {",
                      "  $w(\"#myChatbox\").minimize();",
                      "}",
                      "else {",
                      "  $w(\"#myChatbox\").maximize();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minimize",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the chatbox is minimized." },
        "locations":
          [ { "lineno": 421,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Collapses the chatbox and sets its [`maximized`](#maximized) property to `false`.",
            "description":
              [ "The `minimize()` function returns a Promise that is resolved when",
                " the chatbox finishes collapsing." ],
            "links": [],
            "examples":
              [ { "title": "Minimize the chatbox",
                  "body":
                    [ "$w(\"#myChatbox\").minimize();" ],
                  "extra":
                    {  } },
                { "title": "Minimize the chatbox and log a message when done",
                  "body":
                    [ "$w(\"#myChatbox\").minimize()",
                      "  .then(() => {",
                      "    console.log(\"Done with minimize\");",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Toggle a chatbox's maximized state",
                  "body":
                    [ "if($w(\"#myChatbox\").maximized) {",
                      "  $w(\"#myChatbox\").minimize();",
                      "}",
                      "else {",
                      "  $w(\"#myChatbox\").maximize();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMaximize",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 371,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An event that fires when the chatbox is maximized.",
            "links": [],
            "examples":
              [ { "title": "Register a callback to run after the chatbox is maximized",
                  "body":
                    [ "$w(\"#myChatbox\").onMaximize(() => {",
                      "  console.log(\"Chatbox maximized\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMessageReceived",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "message",
              "type": "$w.Chatbox.Message",
              "doc": "The message that was received." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 314,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An event that fires when a site visitor receives a chat message.",
            "description":
              [ "The `onMessageReceived()` event handler runs when a chat message is received",
                " by a site visitor. The received `Message`",
                " object contains information about the message that was received." ],
            "links": [],
            "examples":
              [ { "title": "Get message data when a chat message is received",
                  "body":
                    [ "$w(\"#myChatbox\").onMessageReceived((message) => {",
                      "  const channelId = message.channelId;",
                      "  const messageText = message.payload.text;",
                      "});",
                      "",
                      "/*  Example message object:",
                      " *",
                      " *  {",
                      " *    \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *    \"type\": \"TEXT\",",
                      " *    \"summary\": \"Hey, how's it going?\",",
                      " *    \"participantId\": \"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *    \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *    \"payload\": {",
                      " *      \"text\": \"Hey, how's it going?\"",
                      " *    }",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`onMessageReceived()` runs if the message was sent via the chatbox widget. It does not run if the message was sent programatically using [`sendMessage()`](#sendMessage).\n\n `onMessageReceived()` doesn't work when previewing your site." ] } },
      { "name": "onMessageSent",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "message",
              "type": "$w.Chatbox.Message",
              "doc": "The message that was sent." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 342,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An event that fires when a site visitor sends a chat message.",
            "description":
              [ "The `onMessageSent()` event handler runs when a chat message is sent. The sent `Message`",
                " object contains information about the message that was sent." ],
            "links": [],
            "examples":
              [ { "title": "Get message data when a chat message is sent",
                  "body":
                    [ "$w(\"#myChatbox\").onMessageSent((message) => {",
                      "  const channelId = message.channelId;",
                      "  const messageText = message.payload.text;",
                      "});",
                      "",
                      "/*  Example message object:",
                      " *",
                      " *  {",
                      " *    \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *    \"type\": \"TEXT\",",
                      " *    \"summary\": \"Hey, how's it going?\",",
                      " *    \"participantId\": \"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *    \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *    \"payload\": {",
                      " *      \"text\": \"Hey, how's it going?\"",
                      " *    }",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`onMessageSent()` runs if the message was sent via the chatbox widget. It does not run if the message was sent programatically using [`sendMessage()`](#sendMessage).\n\n`onMessageSent()` doesn't work when previewing your site." ] } },
      { "name": "onMinimize",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 361,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An event that fires when the chatbox is minimized.",
            "links": [],
            "examples":
              [ { "title": "Register a callback to run after the chatbox is minimized",
                  "body":
                    [ "$w(\"#myChatbox\").onMinimize(() => {",
                      "  console.log(\"Chatbox minimized\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onViewportEnter",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element enters the viewport." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 259,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "<b>Note: This standard element event is not relevant for Chatbox.</b>",
            "description":
              [ "Adds an event handler that runs when an element is displayed",
                " in the viewable part of the current window.",
                "",
                " An element enters the viewport when the page is scrolled to show any",
                " part of the element. An element also enters the viewport if it was",
                " [hidden]($w.HiddenMixin.html#hidden) or [collapsed]($w.CollapsedMixin.html#collapsed)",
                " and is then shown or expanded in the viewable part of the current window. `onViewportEnter()`",
                " is not fired for [hidden]($w.HiddenMixin.html#hidden) or [collapsed]($w.CollapsedMixin.html#collapsed)",
                " elements even if they are scrolled into view." ],
            "links":
              [ "[onViewportLeave( )](#onViewportLeave)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "**Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "viewportEnter" } },
      { "name": "onViewportLeave",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element leaves the viewport." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 286,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "<b>Note: This standard element event is not relevant for Chatbox.</b>",
            "description":
              [ "Adds an event handler that runs when an element is no longer",
                " displayed in the viewable part of the current window.",
                "",
                " An element leaves the viewport when the page is scrolled so that the",
                " element is completely out of view. An element also leaves the viewport",
                " if it was shown or expanded and is then [hidden]($w.HiddenMixin.html#hidden)",
                " or [collapsed]($w.CollapsedMixin.html#collapsed) from the viewable part",
                " of the current window.  `onViewportLeave()`",
                " is not fired for [hidden]($w.HiddenMixin.html#hidden) or [collapsed]($w.CollapsedMixin.html#collapsed)",
                " elements even if they are scrolled out of view." ],
            "links":
              [ "[onViewportEnter( )](#onViewportEnter)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "**Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "viewportLeave" } },
      { "name": "scrollTo",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the scroll is complete." },
        "locations":
          [ { "lineno": 237,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "<b>Note: This standard element function is not relevant for Chatbox.</b>",
            "description":
              [ "Scrolls the page to the element using an animation.",
                "",
                " The `scrollTo()` function returns a Promise that is resolved when the",
                " animated scroll is complete and the element is now in view.",
                "",
                " To scroll to a specific location on the page, see the `wix-window`",
                " [`scrollTo()`](wix-window.html#scrollTo) function.",
                "",
                " Calling the `scrollTo()` function on an element in a repeated item that",
                " is selected from the [global scope]($w.Repeater.html#global-scope) causes",
                " an error." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sendMessage",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "messageInfo",
              "type": "$w.Chatbox.MessageInfo",
              "doc": "An object representing the message to be sent." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the message is sent." },
        "locations":
          [ { "lineno": 381,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Sends a chat message from a site visitor.",
            "description":
              [ "The `sendMessage()` function returns a Promise that is resolved when",
                " the message is sent.",
                "",
                " Currently only chat messages containing text can be sent programatically." ],
            "links": [],
            "examples":
              [ { "title": "Send a message from a site visitor to the business",
                  "body":
                    [ "let messageInfo = {",
                      "  \"messageText\": \"Hey, how's it going?\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").sendMessage(messageInfo)",
                      "  .then(() => {",
                      "    console.log(\"Done sending message\");",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Send a message from a site visitor over a specific channel",
                  "body":
                    [ "let messageInfo = {",
                      "  \"messageText\": \"Hey, how's it going?\",",
                      "  \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").sendMessage(messageInfo)",
                      "  .then(() => {",
                      "    console.log(\"Done sending message\");",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Chat messages sent programatically by the `sendMessage()` function do not trigger\n the [`onMessageSent()`](#onMessageSent) event handler." ] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Channel",
        "locations":
          [ { "lineno": 92,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object representing a chat channel.",
            "links":
              [ "[`getChannel()`](#getChannel)",
                "[`getChannelList()`](#getChannelList)" ],
            "examples":
              [ { "title": "Use a channel ID to get information about a specific channel",
                  "body":
                    [ "let channelInfo = {",
                      "  \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").getChannel(channelInfo)",
                      "  .then((channel) => {",
                      "    const channelImage = channel.displayData.image;",
                      "    const lastMessageText = channel.messages[0].payload.text;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel object:",
                      " *",
                      " *   {",
                      " *     \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *     \"displayData\": {",
                      " *       \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *       \"name\": \"Our Chat Group\"",
                      " *     },",
                      " *     \"messages\":[",
                      " *       {",
                      " *         \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *         \"type\": \"TEXT\",",
                      " *         \"summary\": \"Hey, how's it going?\",",
                      " *         \"participantId\":\"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *         \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *         \"payload\": {",
                      " *           \"text\": \"Hey, how's it going?\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get a list of available chat channels",
                  "body":
                    [ "$w(\"#myChatbox\").getChannelList()",
                      "  .then((channels) => {",
                      "    // Get channel image of first channel in list",
                      "    const firstChannelImage = channels[0].displayData.image;",
                      "    // Get most recent message text of first channel in list",
                      "    const firstChannelText = channels[0].messages[0].payload.text;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel list:",
                      " *",
                      " *   [",
                      " *     {",
                      " *       \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *       \"displayData\": {",
                      " *         \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *         \"name\": \"Our Chat Group\"",
                      " *       },",
                      " *       \"messages\":[",
                      " *         {",
                      " *           \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *           \"type\": \"TEXT\",",
                      " *           \"summary\": \"Hey, how's it going?\",",
                      " *           \"participantId\": \"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *           \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *           \"payload\": {",
                      " *             \"text\": \"Hey, how's it going?\"",
                      " *           }",
                      " *         }",
                      " *       ]",
                      " *    },",
                      " *    {...} // Next channel",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "ID of the channel." },
            { "name": "displayData",
              "type": "$w.Chatbox.DisplayData",
              "doc": "Display information associated with the channel." },
            { "name": "messages",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "$w.Chatbox.Message" ] },
              "doc": "An array of messages sent over the channel. Currently only the last message is included." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ChannelInfo",
        "locations":
          [ { "lineno": 104,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object containing information about a chat channel.",
            "description":
              [ "The `ChannelInfo` object is used by the [`getChannel()`](#getChannel) and",
                "[`focusChannel()`](#focusChannel) functions to specify which channel to get or focus on." ],
            "links":
              [ "[`getChannel()`](#getChannel)",
                "[`focusChannel()`](#focusChannel)" ],
            "examples":
              [ { "title": "Get information about the channel associated with the specified channel ID",
                  "body":
                    [ "let channelInfo = {",
                      "  \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").getChannel(channelInfo)",
                      "  .then((channel) => {",
                      "    const channelImage = channel.displayData.image;",
                      "    const lastMessageText = channel.messages[0].payload.text;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel object:",
                      " *",
                      " *   {",
                      " *     \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *     \"displayData\": {",
                      " *       \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *       \"name\": \"Our Chat Group\"",
                      " *     },",
                      " *     \"messages\":[",
                      " *       {",
                      " *         \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *         \"type\": \"TEXT\",",
                      " *         \"summary\": \"Hey, how's it going?\",",
                      " *         \"participantId\":\"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *         \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *         \"payload\": {",
                      " *           \"text\": \"Hey, how's it going?\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get information about the currently focused chat channel",
                  "body":
                    [ "let channelInfo = {",
                      "  \"type\": \"Focused\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").getChannel(channelInfo)",
                      "  .then((channel) => {",
                      "    const channelImage = channel.displayData.image;",
                      "    const lastMessageText = channel.messages[0].payload.text;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel object:",
                      " *",
                      " *   {",
                      " *     \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *     \"displayData\": {",
                      " *       \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *       \"name\": \"Our Chat Group\"",
                      " *     },",
                      " *     \"messages\":[",
                      " *       {",
                      " *         \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *         \"type\": \"TEXT\",",
                      " *         \"summary\": \"Hey, how's it going?\",",
                      " *         \"participantId\":\"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *         \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *         \"payload\": {",
                      " *           \"text\": \"Hey, how's it going?\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "channelId",
              "type": "string",
              "doc": "ID of a chat channel.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "Type of chat channel.\n One of the following:\n\n + `\"Focused\"`: Currently focused channel.\n + `\"Business\"`: Business channel.",
              "optional": true } ],
        "extra":
          { "notes":
              [ "At least one of the object properties is required. If `channelId` is passed, `type` is ignored." ] },
        "labels":
          [ "changed" ] },
      { "name": "DisplayData",
        "locations":
          [ { "lineno": 48,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object representing display information associated with a [`Channel`](#channel).",
            "description":
              [ "The data a site visitor sees in the chatbox. The data depends on the current channel type:",
                "",
                "<table style=\"border-collapse: collapse;\">",
                "  <tr>",
                "    <td><b>Channel Type</b></td>",
                "    <td><b>Description</b></td>",
                "    <td><b>Display Data</b></td>",
                "  </tr>",
                "  <tr>",
                "    <td>Business channel</td>",
                "    <td>Connects the current user with the site's business</td>",
                "    <td>Display data of the business</td>",
                "  </tr>",
                "  <tr>",
                "    <td>Private social channel</td>",
                "    <td>Connects the current user with one other member</td>",
                "    <td>Display data of the other member</td>",
                "  </tr>",
                "  <tr>",
                "    <td>Group social channel</td>",
                "    <td>Connects the current user with other members in a chat group</td>",
                "    <td>Display data of the chat group</td>",
                "  </tr>",
                "</table>" ],
            "links":
              [ "[`getChannel()`](#getChannel)",
                "[`getChannelList()`](#getChannelList)" ],
            "examples":
              [ { "title": "Get display data about a specific channel",
                  "body":
                    [ "let channelInfo = {",
                      "  \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").getChannel(channelInfo)",
                      "  .then((channel) => {",
                      "    const displayData = channel.displayData;",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });",
                      "",
                      "/*  Example channel object:",
                      " *",
                      " *   {",
                      " *     \"id\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *     \"displayData\": {",
                      " *       \"image\": \"https://static.wixstatic.com/media/f43338_0f431863800d41f78e515a190c0f9dd7~mv2.png\",",
                      " *       \"name\": \"Our Chat Group\"",
                      " *     },",
                      " *     \"messages\":[",
                      " *       {",
                      " *         \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *         \"type\": \"TEXT\",",
                      " *         \"summary\": \"Hey, how's it going?\",",
                      " *         \"participantId\":\"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *         \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *         \"payload\": {",
                      " *           \"text\": \"Hey, how's it going?\"",
                      " *         }",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "image",
              "type": "string",
              "doc": "The image associated with the channel.\n One of the following:\n\n + For private social channels, the image associated with the site member's account. If there is no image associated with the account, defaults to the avatar image.\n + For group social channels, the image associated with the chat group.\n + For business channels, `image` is not currently supported." },
            { "name": "name",
              "type": "string",
              "doc": "For social channels, the member's name or chat group name. For business channels, the site's [display name](wix-site-backend.generalInfo.html#getSiteDisplayName)." },
            { "name": "initials",
              "type": "string",
              "doc": "Only supported for business channels. Initials of the site's business." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Message",
        "locations":
          [ { "lineno": 20,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object that contains information about a chat message.",
            "links":
              [ "[`onMessageSent()`](#onMessageSent)",
                "[`onMessageReceived()`](#onMessageReceived)" ],
            "examples":
              [ { "title": "Get the channel ID and message text when a chat message is sent",
                  "body":
                    [ "$w(\"#myChatbox\").onMessageSent((message) => {",
                      "  const channelId = message.channelId;",
                      "  const messageText = message.payload.text;",
                      "});",
                      "",
                      "/*  Example message object:",
                      " *",
                      " *  {",
                      " *    \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *    \"type\": \"TEXT\",",
                      " *    \"summary\": \"Hey, how's it going?\",",
                      " *    \"participantId\": \"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *    \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *    \"payload\": {",
                      " *      \"text\": \"Hey, how's it going?\"",
                      " *    }",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get the channel ID and message text when a chat message is received",
                  "body":
                    [ "$w(\"#myChatbox\").onMessageReceived((message) => {",
                      "  const channelId = message.channelId;",
                      "  const messageText = message.payload.text;",
                      "});",
                      "",
                      "/*  Example message object:",
                      " *",
                      " *  {",
                      " *    \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *    \"type\": \"TEXT\",",
                      " *    \"summary\": \"Hey, how's it going?\",",
                      " *    \"participantId\": \"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *    \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *    \"payload\": {",
                      " *      \"text\": \"Hey, how's it going?\"",
                      " *    }",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "channelId",
              "type": "string",
              "doc": "ID of the channel on which the message was sent." },
            { "name": "type",
              "type": "string",
              "doc": "Type of message. Currently only `TEXT` is supported." },
            { "name": "summary",
              "type": "string",
              "doc": "First 250 characters of the chat message. Currently only text is included in the summary." },
            { "name": "participantId",
              "type": "string",
              "doc": "The sender's member ID. For a message sent from the site's business, the site owner's member ID." },
            { "name": "createdAt",
              "type": "Date",
              "doc": "Date and time the message was sent." },
            { "name": "payload",
              "type": "$w.Chatbox.MessagePayload",
              "doc": "Content of the message." },
            { "name": "metadata",
              "type": "Object",
              "doc": "An object representing additional contextual message information included in a chat message. Only relevant for messages sent using the backend [`sendMessage()`](wix-chat-backend.html#sendMessage) function. Site visitors do not see metadata.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "MessageInfo",
        "locations":
          [ { "lineno": 37,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object representing a chat message to be sent.",
            "links":
              [ "[`sendMessage()`](#sendMessage)" ],
            "examples":
              [ { "title": "Send a message from a site visitor to the site's business",
                  "body":
                    [ "let messageInfo = {",
                      "  \"messageText\": \"Hey, how's it going?\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").sendMessage(messageInfo)",
                      "  .then(() => {",
                      "    console.log(\"Done sending message\");",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Send a message from a site visitor over a specific channel",
                  "body":
                    [ "let messageInfo = {",
                      "  \"messageText\": \"Hey, how's it going?\",",
                      "  \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\"",
                      "}",
                      "",
                      "$w(\"#myChatbox\").sendMessage(messageInfo)",
                      "  .then(() => {",
                      "    console.log(\"Done sending message\");",
                      "  })",
                      "  .catch((err) => {",
                      "    console.log(err);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "messageText",
              "type": "string",
              "doc": "The text to be sent in the message." },
            { "name": "channelId",
              "type": "string",
              "doc": "The ID of the channel over which the message is sent. If empty, message is sent to the site's business.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "MessagePayload",
        "locations":
          [ { "lineno": 9,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "The content of a chat message.",
            "description":
              [ "Currently only content of type text is included in the `MessagePayload` object." ],
            "links":
              [ "[`onMessageSent()`](#onMessageSent)",
                "[`onMessageReceived()`](#onMessageReceived)" ],
            "examples":
              [ { "title": "Get the channel ID and message text when a chat message is sent",
                  "body":
                    [ "$w(\"#myChatbox\").onMessageSent((message) => {",
                      "  const channelId = message.channelId;",
                      "  const messageText = message.payload.text;",
                      "});",
                      "",
                      "/*  Example message object:",
                      " *",
                      " *  {",
                      " *    \"channelId\": \"23b345b6-c78d-9012-e3f4-567g89h0i01k\",",
                      " *    \"type\": \"TEXT\",",
                      " *    \"summary\": \"Hey, how's it going?\",",
                      " *    \"participantId\": \"12a345b6-e78f-8011-f3f5-567g89h0i12j\",",
                      " *    \"createdAt\": \"2019-10-27T06:02:12.008Z\",",
                      " *    \"payload\": {",
                      " *      \"text\": \"Hey, how's it going?\"",
                      " *    }",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "text",
              "type": "string",
              "doc": "Text of the chat message." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "notes":
        [ "You cannot use a channel programmatically until it is created. A channel is created the first\n time the business or a visitor sends a message via the chatbox widget to a specific recipient.\n\n You can also send chat messages from the [backend](wix-chat-backend.html) of your site." ] } }