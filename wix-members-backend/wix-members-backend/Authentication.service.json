{ "name": "Authentication",
  "memberOf": "wix-members-backend",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 68,
      "filename": "index.js" },
  "docs":
    { "summary": "The Authentication API contains functionality for authenticating users from backend code.",
      "description":
        [ "To use the Authentication API, import `{authentication}` from the `wix-members-backend` module:",
          "",
          "```javascript",
          "import { authentication } from 'wix-members-backend';",
          "```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "approveByEmail",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email address of the member to approve.\nMust belong to an existing member." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - Session token, which can be applied using the\n[wix-members `applySessionToken()` function](wix-members/authentication/applysessiontoken)\nto log the member in.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "approveByEmail.js" } ],
        "docs":
          { "summary": "Approves a pending member using an email address.",
            "description":
              [ "<!--ONLY:VELO:function:approveByEmail-->",
                "The `approveByEmail()` function returns a Promise that resolves to a session token",
                "when the specified member is approved.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `wix-users-backend.approveByEmail()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions](wix-users-backend/approvebyemail#migration-instructions).",
                "",
                "A new member's status is `\"PENDING\"`",
                "when the site's membership policy is set to manual approval.",
                "To learn more about setting your site's membership approval policy, see",
                "[Editing Your Member Signup Settings](https://support.wix.com/en/article/editing-your-member-signup-settings-for-the-default-form).",
                "<!--END:ONLY:VELO-->" ],
            "links":
              [ "[approveByToken( )](#approveByToken)",
                "[blockByEmail( )](#blockByEmail)" ],
            "examples":
              [ { "title": "Approve a pending member using an email address",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "export function myApproveByEmailFunction(email) {",
                      "",
                      "  return authentication.approveByEmail(email)",
                      "    .then((sessionToken) => {",
                      "      return {",
                      "        sessionToken: sessionToken,",
                      "        approved: true",
                      "      };",
                      "    })",
                      "    .catch((error) => {",
                      "      return {",
                      "        approved: false,",
                      "        reason: error",
                      "      };",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to:",
                      " * \"JWS.eyJraWQiOiJQSXpvZGJiQiIsImFsZyI6IkhTMjU2In0.eyJkYXRhIjoie1wiaWRcIjpcImViNDNhYjk5LTMwNDAtNGNhMC04OTNkLTNjNWZhMzdjNjNhZFwiLFwiY29sbGVjdGlvbklkXCI6XCI5YmVjNThlNi02NDExLTQ5OTEtOGU1ZC0wYWRhOTE4MmI5NWVcIixcIm1ldGFTaXRlSWRcIjpcIjFmZjQ2YTk2LWRlYTYtNDlkYS04M2JhLTUxNjRmYjYyZDgzOVwiLFwib3duZXJcIjpmYWxzZSxcImNyZWF0aW9uVGltZVwiOjE2MjgxMTcwNjU5NDcsXCJleHBpcmVzSW5cIjoxMjA5NjAwMDAwLFwiZXhwaXJhdGlvblRpbWVcIjoxNjI4MTE3MTg1OTQ3LFwibGFzdFJlZnJlc2hlZFwiOjAsXCJhZG1pblwiOmZhbHNlfSIsImlhdCI6MTYyODExNzA2NX0.VGNW1Q26zD8BmSvlljFlP6-OhvYs_Pa2hQidS2tt9No\"",
                      " */" ],
                  "extra":
                    { "description": "This example contains a backend function that approves a pending member\nusing their email address. It returns a session token\nto be used in page code to log in the member who was just approved." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "approveByToken",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "token",
              "type": "string",
              "doc": "Approval token returned by the [`register()`](wix-members-backend/authentication/register) function." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 1,
              "filename": "approveByToken.js" } ],
        "docs":
          { "summary": "Approves a pending member using an approval token.",
            "description":
              [ "<!--ONLY:VELO:function:approveByToken-->",
                "The `approveByToken()` function returns a Promise that resolves to a session token",
                "when the specified member is approved. Tokens must be approved within 30 hours of token creation.",
                "",
                "> **Notes:**",
                ">  - Embedding the `approveByToken()` function in page code may cause email notifications to be sent multiple times, due to the page rendering process on server-side and client-side. To prevent this, use the [wixWindow.rendering.env](https://www.wix.com/velo/reference/wix-window/rendering-obj/env) property to determine where your code is being executed, and only run the code once, either client- or server-side. More details can be found at [Preventing double \"side effects\"](https://www.wix.com/velo/reference/$w/onready#$w_onready_preventing-double-side-effects).",
                "> - This function replaces the deprecated `wix-users-backend.approveByToken()`. The deprecated function will continue to work, but it will not receive updates. To keep any existing code compatible with future changes, see the [migration instructions](wix-users-backend/approvebytoken#migration-instructions).",
                "",
                "A new member's status is `\"PENDING\"`",
                "when the site's membership policy is set to manual approval.",
                "To learn more about setting your site's membership approval policy, see",
                "[Editing Your Member Signup Settings](https://support.wix.com/en/article/editing-your-member-signup-settings-for-the-default-form).",
                "",
                "Use the `approvalToken` parameter returned from the",
                "[`register()`](wix-members-backend/authentication/register)",
                "function when calling `approveByToken()`.",
                "<!--END:ONLY:VELO-->" ],
            "links":
              [ "[approveByEmail( )](#approveByEmail)" ],
            "examples":
              [ { "title": "Approve a pending member using an approval token",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "// Sample token value:",
                      "// 'JWS.eyJraWQiOiJSc012MmV3MiIsImFsZyI6IkhTMjU2In0.eyJkYXRhIjoie1wiaWRcIjpcImEyMWE1MmU4LWViMzUtNDExYS04OTNkLWFlNTgxM2I1YjY2Y1wiLFwiY29sbGVjdGlvbklkXCI6XCI5YmVjNThlNi02NDExLTQ5OTEtOGU1ZC0wYWRhOTE4MmI5NWVcIn0iLCJpYXQiOjE2Mjc3NzkyNjYsImV4cCI6MTYyNzg4NzI2Nn0.53pZSaPInXrAvWpTOxsZxqxBHQIof1j6Gbkqg92l82o'",
                      "",
                      "export function myApproveByTokenFunction(token) {",
                      "",
                      "  return authentication.approveByToken(token)",
                      "    .then((sessionToken) => {",
                      "      return {",
                      "        sessionToken: sessionToken,",
                      "        approved: true",
                      "      };",
                      "    })",
                      "    .catch( (error) => {",
                      "      return {",
                      "        approved: false,",
                      "        reason: error",
                      "      };",
                      "    });",
                      "}",
                      "",
                      "/* Promise resolves to:",
                      " * \"JWS.eyJraWQiOiJQSXpvZGJiQiIsImFsZyI6IkhTMjU2In0.eyJkYXRhIjoie1wiaWRcIjpcImEyMWE1MmU4LWViMzUtNDExYS04OTNkLWFlNTgxM2I1YjY2Y1wiLFwiY29sbGVjdGlvbklkXCI6XCI5YmVjNThlNi02NDExLTQ5OTEtOGU1ZC0wYWRhOTE4MmI5NWVcIixcIm1ldGFTaXRlSWRcIjpcIjFmZjQ2YTk2LWRlYTYtNDlkYS04M2JhLTUxNjRmYjYyZDgzOVwiLFwib3duZXJcIjpmYWxzZSxcImNyZWF0aW9uVGltZVwiOjE2Mjc3Nzk0MTg5NzUsXCJleHBpcmVzSW5cIjoxMjA5NjAwMDAwLFwiZXhwaXJhdGlvblRpbWVcIjoxNjI3Nzc5NTM4OTc1LFwibGFzdFJlZnJlc2hlZFwiOjAsXCJhZG1pblwiOmZhbHNlfSIsImlhdCI6MTYyNzc3OTQxOH0.srXs33K5gT5KaZp4fTZ9xRkVasayOTox6IK2ZG3tKrA\"",
                      " */" ],
                  "extra":
                    { "description": "This example contains a backend function\nthat approves a pending member using an approval token.\nIt returns a session token to be used in page code\nto log in the member who was just approved." } },
                { "title": "Register a member using a 3rd party for approval",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.jsw *",
                      " *******************************/",
                      "import { authentication } from 'wix-members-backend';",
                      "import { approveBy3rdParty } from 'backend/some-backend-module';",
                      "",
                      "export async function doRegistration(email, password, firstName, lastName) {",
                      "",
                      "  // Call a 3rd-party API to check if the member is approved.",
                      "  const isApproved = await approveBy3rdParty(email, password);",
                      "",
                      "  // If member is approved by 3rd party, register and approve with the Wix site",
                      "  if (isApproved === true) {",
                      "    const options = {",
                      "      contactInfo: {",
                      "        firstName: firstName,",
                      "        lastName: lastName",
                      "      }",
                      "    };",
                      "",
                      "    // Register the member",
                      "    const registration = await authentication.register(email, password, options);",
                      "    const approvalToken = registration.approvalToken;",
                      "    console.log('Member is now registered with the site and pending approval');",
                      "",
                      "    // Approve the member and get session token, to be used to log in the member client-side",
                      "    const sessionToken = await authentication.approveByToken(approvalToken);",
                      "    console.log('Member is now approved, but not logged in');",
                      "",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "",
                      "  } else {",
                      "    // If not approved by the 3rd party",
                      "",
                      "    await authentication.blockByEmail(email);",
                      "    console.log('Member not approved by 3rd-party SSO. Blocking from Wix site.');",
                      "",
                      "    return { approved: false };",
                      "  }",
                      "}",
                      "",
                      "",
                      "/*************",
                      " * Page code *",
                      " *************/",
                      "import { authentication } from 'wix-members';",
                      "import { doRegistration } from 'backend/register';",
                      "",
                      "// ...",
                      "",
                      "$w('#register').onClick(() => {",
                      "",
                      "  const email = $w('#email').value;",
                      "  const password = $w('#password').value;",
                      "  const firstName = $w('#firstName').value;",
                      "  const lastName = $w('#lastName').value;",
                      "",
                      "  doRegistration(email, password, firstName, lastName)",
                      "    .then((result) => {",
                      "      if (result.approved) {",
                      "        // Log the member in",
                      "        console.log('Logging in...');",
                      "        authentication.applySessionToken(result.sessionToken);",
                      "      } else {",
                      "        console.log('Not approved!');",
                      "      }",
                      "    });",
                      "});" ],
                  "extra":
                    { "description": "This example demonstrates a common 3rd-party approval flow.\nThe backend code calls a 3rd-party service\nthat determines whether the member will be approved.\nIf approved, the `register()` function is called,\nthe registration is approved programmatically using the `approveByToken()` function,\nand a session token is returned to the calling page code.\nIf rejected, the `blockByEmail()` function is called." } },
                { "title": "Register a user sending an email for confirmation",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.jsw *",
                      " *******************************/",
                      "",
                      "import { authentication } from 'wix-members-backend';",
                      "import { triggeredEmails } from 'wix-crm-backend';",
                      "",
                      "// To be called from the registration page code",
                      "export async function doRegistration(email, password, firstName, lastName) {",
                      "  // Register the member",
                      "  const registrationOptions = {",
                      "    contactInfo: {",
                      "      firstName: firstName,",
                      "      lastName: lastName",
                      "    }",
                      "  };",
                      "  const registration = await authentication.register(email, password, registrationOptions);",
                      "  console.log('Member is now registered with the site and pending approval');",
                      "",
                      "  // Send a registration confirmation email",
                      "  const emailOptions = {",
                      "    variables: {",
                      "      name: firstName,",
                      "      verifyLink: `http://yourdomain.com/post-register?token=${registration.approvalToken}`",
                      "    }",
                      "  };",
                      "  triggeredEmails.emailMember('verifyRegistration', registration.member.id, emailOptions);",
                      "  console.log('Confirmation email sent');",
                      "}",
                      "",
                      "// To be called from the post-registration page code",
                      "export async function doApproval(token) {",
                      "  try {",
                      "    // Approve the member",
                      "    const sessionToken = await authentication.approveByToken(token);",
                      "    console.log('Member approved');",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "  } catch (error) {",
                      "    // If an error is encountered and the member can't be approved",
                      "    console.log('Member not approved');",
                      "    return {",
                      "      approved: false,",
                      "      reason: error",
                      "    };",
                      "  }",
                      "}",
                      "",
                      "/****************************",
                      " * Page code - registration *",
                      " ****************************/",
                      "import { doRegistration } from 'backend/register';",
                      "",
                      "// ...",
                      "",
                      "const email = $w('#email');",
                      "const password = $w('#password');",
                      "const firstName = $w('#firstName');",
                      "const lastName = $w('#lastName');",
                      "",
                      "doRegistration(email, password, firstName, lastName)",
                      "  .then(() => {",
                      "    console.log('Confirmation email sent.');",
                      "  });",
                      "",
                      "/*********************************",
                      " * Page code - post-registration *",
                      " *********************************/",
                      "import wixLocation from 'wix-location';",
                      "import { authentication } from 'wix-members';",
                      "import { doApproval } from 'backend/register';",
                      "",
                      "$w.onReady(async () => {",
                      "  // Get the token from the URL",
                      "  const token = wixLocation.query.token;",
                      "",
                      "  // Send token to backend code",
                      "  const approval = await doApproval(token);",
                      "",
                      "  if (approval.approved === true) {",
                      "    // Log the member in",
                      "    authentication.applySessionToken(approval.sessionToken);",
                      "    console.log('Member approved & logged in');",
                      "  } else {",
                      "    console.log('Member not approved');",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates a common email verification flow.\nA member is initially registered but not yet approved.\nAt registration, a verification email is sent with a link to a verification page.\nWhen a member goes to the verification page,\nthe approval is granted and the member is logged in to the site.\n\nThe code is split between three locations:\n\n- A backend web module named **register.jsw**.\n- The page code for the page where members register.\n- The page code for the page where members confirm their registration." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "blockByEmail",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email address of the member to block." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the member with the specified email is blocked.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "blockByEmail.js" } ],
        "docs":
          { "summary": "Blocks a member from logging in to the site.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `blockByEmail()` function returns a Promise that resolves",
                "when the specified member is blocked.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `wix-users-backend.blockByEmail()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions](wix-users-backend/blockbyemail#migration-instructions).",
                "",
                "To unblock the member and allow them to log in to the site, use",
                "[`approveByEmail()`](wix-members-backend/authentication/approvebyemail).",
                "<!--END:ONLY:VELO-->" ],
            "links":
              [ "[approveByEmail ( )](#approveByEmail)" ],
            "examples":
              [ { "title": "Block a member",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "export function myBlockByEmailFunction(email) {",
                      "  return authentication.blockByEmail(email)",
                      "    .then(() => {",
                      "      console.log('Email blocked from site membership');",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "changeLoginEmail",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "memberId",
              "type": "string",
              "doc": "Member ID." },
            { "name": "newEmail",
              "type": "string",
              "doc": "New login email address." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members-backend.Members.Member" ] },
            "doc": "Fulfilled - Member with the updated login email address.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "changeLoginEmail.js" } ],
        "docs":
          { "summary": "Changes a member's login email address.",
            "description":
              [ "The `changeLoginEmail()` function returns a Promise",
                "that resolves to an updated member object",
                "when the specified member's login email address is changed.",
                "",
                "After running this function, the specified member can log in with the new email address.",
                "If the member uses social login (for example, Google login)",
                "and the member tries to log in with the old email address,",
                "they will be re-registered with the old email address.",
                "",
                "Site contributors can use `changeLoginEmail()`",
                "to change another member's login email.",
                "Members who are not site contributors can use `changeLoginEmail()`",
                "to change their own login email only.",
                "",
                "> **Note:**",
                "> `changeLoginEmail()` cannot be used for site contributors.",
                "> Site contributors can change their login emails from their Wix",
                "> [account settings](https://manage.wix.com/account/account-settings)." ],
            "links": [],
            "examples":
              [ { "title": "Change a member's login email",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "// Sample memberId value:",
                      "// 2f15ad3c-75e4-5df7-8ed4-13fee71433ca",
                      "",
                      "export function myChangeLoginEmailFunction(memberId, newEmail) {",
                      "  return authentication.changeLoginEmail(memberId, newEmail)",
                      "    .then((updatedMember) => {",
                      "      const newLoginEmail = updatedMember.loginEmail;",
                      "      console.log('New login email is', newLoginEmail);",
                      "",
                      "      return updatedMember;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Change the current member's login email",
                  "body":
                    [ "/******************************************",
                      " * Backend code - change-member-email.jsw *",
                      " *****************************************/",
                      "",
                      "import { authentication, currentMember } from 'wix-members-backend';",
                      "",
                      "export async function myChangeLoginEmailFunction(newEmail) {",
                      "",
                      "  // Get the currently logged-in member's ID",
                      "  const thisMember = await currentMember.getMember();",
                      "  const memberId = thisMember._id;",
                      "",
                      "  return await authentication.changeLoginEmail(memberId, newEmail);",
                      "}",
                      "",
                      "/*************",
                      " * Page code *",
                      " ************/",
                      "",
                      "import { changeCurrentMemberLogin } from 'backend/change-member-email';",
                      "",
                      "// ...",
                      "",
                      "$w('#changeEmail').onClick(async () => {",
                      "",
                      "  // If current member is a site contributor, they have the 'Admin' role.",
                      "  // Site contributors can change their login email through their Wix account",
                      "  // settings only.",
                      "  //",
                      "  // You can end the function if the member is also a site contributor.",
                      "  const currentMemberRoles = await currentMember.getRoles();",
                      "  const adminRole = currentMemberRoles.filter((role) => {",
                      "    return role.title === 'Admin';",
                      "  });",
                      "  if (adminRole.length > 0) {",
                      "    console.log('Current member is a site contributor. Login email can\\'t be changed with Velo. Member should change email through their Wix account settings.');",
                      "    return;",
                      "  }",
                      "",
                      "  // If #newEmail Text Input is set to type \"Email\",",
                      "  // you can end the function if the email isn't valid",
                      "  if (!$w('#newEmail').valid) {",
                      "    console.log('Invalid email');",
                      "    return;",
                      "  }",
                      "",
                      "  const newEmail = $w('#newEmail').value;",
                      "",
                      "  try {",
                      "    let updatedMember = await changeCurrentMemberLogin(newEmail);",
                      "    console.log('Email changed. Updated member:', updatedMember);",
                      "  } catch(error) {",
                      "    console.log('Email not changed');",
                      "    console.error(error);",
                      "  }",
                      "});" ],
                  "extra":
                    { "description": "The code in this example first checks that\n(1) the new login email is a valid email address,\nand (2) the member is not also a site contributor.\n\nIf both of these checks pass,\nthe new login email provided by the currently logged-in member\nis passed to a backend function that automatically retrieves the member's ID\nand changes the login email." } },
                { "title": "Change a member's login email from an admin page",
                  "body":
                    [ "/******************************************",
                      " * Backend code - change-member-email.jsw *",
                      " *****************************************/",
                      "",
                      "import {authentication} from 'wix-members-backend';",
                      "",
                      "export async function changeMemberLogin(memberId, newEmail) {",
                      "  try {",
                      "    const updatedMember = await authentication.changeLoginEmail(memberId, newEmail);",
                      "    console.log('Member email changed');",
                      "    return updatedMember;",
                      "  } catch(error) {",
                      "    console.error(error);",
                      "  }",
                      "}",
                      "",
                      "",
                      "/*************",
                      " * Page code *",
                      " ************/",
                      "",
                      "import { adminChangeMemberLogin } from 'backend/change-login-email';",
                      "import wixData from 'wix-data';",
                      "",
                      "$w.onReady(function () {",
                      "  // Only site contributors can load this data",
                      "  wixData.query('Members/PrivateMembersData').find()",
                      "    .then((results) => {",
                      "",
                      "      // Restructure the returned items array so it can be assigned",
                      "      // to the #memberList dropdown.",
                      "      const membersList = results.items.map((member) => {",
                      "        return {",
                      "          label: `${member.firstName} ${member.lastName} (${member.loginEmail})`,",
                      "          value: member._id",
                      "        }",
                      "      });",
                      "",
                      "      // Set the dropdown options",
                      "      $w('#memberList').options = membersList;",
                      "    });",
                      "",
                      "    $w('#changeLoginEmail').onClick(() => {",
                      "      const memberId = $w('#memberList').value;",
                      "      const newEmail = $w('#loginEmail').value;",
                      "",
                      "      adminChangeMemberLogin(memberId, newEmail);",
                      "    });",
                      "",
                      "});" ],
                  "extra":
                    { "description": "The code in this example allows a site contributor with admin permissions\nto change any member's login email.\n\nIt starts by populating the `#memberList` dropdown list\nwith data from the `Members/PrivateMemberData` collection.\nThe site contributor selects the member whose email they want to change,\nthen specifies a new email in the `#loginEmail` text input.\nThe member ID and new email are passed to a backend function\nthat calls `changeLoginEmail()`." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "generateSessionToken",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email address of the member to approve." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - Session token to apply in page code to log the authenticated member in." },
        "locations":
          [ { "lineno": 1,
              "filename": "generateSessionToken.js" } ],
        "docs":
          { "summary": "Creates a session token for a member authenticated by a 3rd party.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `generateSessionToken()` function returns a Promise that resolves to a session token",
                "used to log a member in to your site.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `wix-users-backend.generateSessionToken()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions](wix-users-backend/generatesessiontoken#migration-instructions).",
                "",
                "Use `generateSessionToken()` to bypass Wix member authentication",
                "when using a 3rd-party service to authenticate your members.",
                "For example, you can use `generateSessionToken()`",
                "to provide Single Sign-On (SSO) for members",
                "where they authenticate with a non-Wix entity to log in to your Wix site.",
                "",
                "If the specified email address corresponds to an existing member,",
                "a session token for logging in that member is generated.",
                "",
                "If there is no existing member with the specified email address,",
                "a new member is created and a session token for logging in that member is generated.",
                "The member is created with a random password.",
                "<!--END:ONLY:VELO-->" ],
            "links": [],
            "examples":
              [ { "title": "Generate a session token",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "export function myGenerateSessionTokenFunction(email) {",
                      "",
                      "  return authentication.generateSessionToken(email)",
                      "  .then((sessionToken) => {",
                      "    return sessionToken;",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });",
                      "}",
                      "",
                      "/* Promise resolves to a session token:",
                      " * \"JWS.eyJraWQiOiJQSXpvZGJiQiIsImFsZyI6IkhTMjU2In0.eyJkYXRhIjoie1wiaWRcIjpcImM2OTE2N2FmLTY0ODgtNDYzNS1iYmU3LTg5YzFjZWY2MTEwN1wiLFwiY29sbGVjdGlvbklkXCI6XCI5YmVjNThlNi02NDExLTQ5OTEtOGU1ZC0wYWRhOTE4MmI5NWVcIixcIm1ldGFTaXRlSWRcIjpcIjFmZjQ2YTk2LWRlYTYtNDlkYS04M2JhLTUxNjRmYjYyZDgzOVwiLFwib3duZXJcIjpmYWxzZSxcImNyZWF0aW9uVGltZVwiOjE2MjI0MDMwOTM5MTEsXCJleHBpcmVzSW5cIjoxMjA5NjAwMDAwLFwiZXhwaXJhdGlvblRpbWVcIjoxNjIyNDAzMjEzOTExLFwibGFzdFJlZnJlc2hlZFwiOjAsXCJhZG1pblwiOmZhbHNlfSIsImlhdCI6MTYyMjQwMzA5M30.xDMCeRG2DIDa4YR6_XuTf7KBRgHFb0qW7K6gsVMLXUM\"",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Log a member in after 3rd-party authentication",
                  "body":
                    [ "/****************************",
                      " * Backend code - login.jsw *",
                      " ***************************/",
                      "",
                      " import { authentication } from 'wix-members-backend';",
                      " import { authBy3rdParty } from 'backend/authentications';",
                      "",
                      " export function getLoginToken(email, password) {",
                      "",
                      "   return authBy3rdParty(email, password)",
                      "     .then((isAuthenticated) => {",
                      "",
                      "       // If authenticated, generate and return the session token",
                      "       if (isAuthenticated) {",
                      "         return authentication.generateSessionToken(email)",
                      "           .then((sessionToken) => {",
                      "             return {",
                      "               sessionToken: sessionToken,",
                      "               approved: true",
                      "            };",
                      "           });",
                      "       }",
                      "",
                      "       // If not authenticated, return non-approval",
                      "       return { approved: false };",
                      "     });",
                      " }",
                      "",
                      " /*************",
                      "  * Page code *",
                      "  ************/",
                      "import { getLoginToken } from 'backend/login';",
                      "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "const email = $w('email').value;",
                      "const password = $w('password').value;",
                      "",
                      "// Call the backend function to get the session token",
                      "getLoginToken(email, password)",
                      "  .then((loginResult) => {",
                      "    if (loginResult.approved) {",
                      "      // If approved, log the member in using the returned session token",
                      "      authentication.applySessionToken(loginResult.sessionToken);",
                      "    } else {",
                      "      // If not approved, log a message",
                      "      console.log(\"Member not approved.\");",
                      "    }",
                      "  });",
                      "" ],
                  "extra":
                    { "description": "This example contains a backend function that uses a 3rd-party service to authenticate a member.\nIf the authentication is successful,\na session token is returned to the page and used to log the member in." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "login",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email address." },
            { "name": "password",
              "type": "string",
              "doc": "Member password." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 1,
              "filename": "login.js" } ],
        "docs":
          { "summary": "Logs a registered member in with an email and password.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `login()` function returns a Promise that resolves to a session token",
                "used to log a member in to your site.",
                "",
                "The `login()` function only works with existing members. To register a new member use ",
                "the [`register()` function](#register).",
                "",
                "To complete the login,",
                "the returned session token must be applied using the",
                "[`applySessionToken()`](wix-members/authentication/applysessiontoken)",
                "function (from the wix-members frontend API) in page code.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `wix-users-backend.login()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions](wix-users-backend/login#migration-instructions).",
                "<!--END:ONLY:VELO-->" ],
            "links": [],
            "examples":
              [ { "title": "Generate a session token if a valid email and password are provided",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "export function myLoginFunction(email, password) {",
                      "",
                      "  return authentication.login(email, password)",
                      "  .then((sessionToken) => {",
                      "    return sessionToken;",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });",
                      "}",
                      "",
                      "/* Promise resolves to a session token:",
                      " * \"JWS.eyJraWQiOiJQSXpvZGJiQiIsImFsZyI6IkhTMjU2In0.eyJkYXRhIjoie1wiaWRcIjpcIjg4MzFlZWQ2LTkyOGUtNGY4NS1iODBhLWUxZTQ4ZmI3YzRmZFwiLFwiY29sbGVjdGlvbklkXCI6XCI5YmVjNThlNi02NDExLTQ5OTEtOGU1ZC0wYWRhOTE4MmI5NWVcIixcIm1ldGFTaXRlSWRcIjpcIjFmZjQ2YTk2LWRlYTYtNDlkYS04M2JhLTUxNjRmYjYyZDgzOVwiLFwib3duZXJcIjpmYWxzZSxcImNyZWF0aW9uVGltZVwiOjE2MjI0MTUxMTMyNjYsXCJleHBpcmVzSW5cIjoxMjA5NjAwMDAwLFwiZXhwaXJhdGlvblRpbWVcIjoxNjIyNDE1MjMzMjY2LFwibGFzdFJlZnJlc2hlZFwiOjAsXCJhZG1pblwiOmZhbHNlfSIsImlhdCI6MTYyMjQxNTExM30.CFJTkyDaF6LypH8UuNm74qgZMxTKFgB1ZnzsemhY_KY\"",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Log a member in after they provide an email and password",
                  "body":
                    [ "/****************************",
                      " * Backend code - login.jsw *",
                      " ***************************/",
                      "",
                      "import { authentication } from 'wix-members-backend';",
                      "",
                      "export async function getLoginToken(email, password) {",
                      "",
                      "  let sessionToken;",
                      "",
                      "  try {",
                      "    sessionToken = await authentication.login(email, password);",
                      "",
                      "    // If the promise resolves, the member is authenticated and can be logged in",
                      "    return {",
                      "      sessionToken: sessionToken,",
                      "      approved: true",
                      "    };",
                      "  } catch (error) {",
                      "    // If the promise is rejected, the member is not authenticated",
                      "    // and cannot be logged in",
                      "    console.error(error);",
                      "    return {",
                      "      approved: false,",
                      "      error: error",
                      "    };",
                      "  }",
                      "}",
                      "",
                      "/*************",
                      "* Page code *",
                      "************/",
                      "",
                      "import { getLoginToken } from 'backend/login';",
                      "import { authentication } from 'wix-members';",
                      "",
                      "$w('#login').onClick(async () => {",
                      "  const email = $w('#email').value;",
                      "  const password = $w('#password').value",
                      "",
                      "  // Call the backend function to get the session token",
                      "  const loginResult = await getLoginToken(email, password);",
                      "",
                      "  if (loginResult.approved) {",
                      "    // If approved, log the member in using the returned session token",
                      "    authentication.applySessionToken(loginResult.sessionToken);",
                      "  } else {",
                      "    // If not approved, log a message",
                      "    console.error('Login not approved.');",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example contains a backend function\nthat authenticates a member based on the provided email and password.\nIf the authentication is successful,\na session token is returned to the page\nand used to log the authenticated member in." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "register",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Email address the new member will use to log in." },
            { "name": "password",
              "type": "string",
              "doc": "Password to assign to the new site member.\nMust be 4 to 100 ASCII characters." },
            { "name": "options",
              "type": "wix-members-backend.Authentication.RegistrationOptions",
              "doc": "Registration options.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members-backend.Authentication.RegistrationResult" ] },
            "doc": "Fulfilled - When the member is registered.\nRejected - Error message." },
        "locations":
          [ { "lineno": 68,
              "filename": "register.js" } ],
        "docs":
          { "summary": "Registers a new site member.",
            "description":
              [ "The `register()` function returns a Promise that resolves to a `RegistrationResult`",
                " object when the member is either registered or pending registration.",
                "",
                "> **Notes:**",
                ">  - Embedding the `register()` function in page code may cause email notifications to be sent multiple times, due to the page rendering process on server-side and client-side. To prevent this, use the [wixWindow.rendering.env](https://www.wix.com/velo/reference/wix-window/rendering-obj/env) property to determine where your code is being executed, and only run the code once, either client- or server-side. More details can be found at [Preventing double \"side effects\"](https://www.wix.com/velo/reference/$w/onready#$w_onready_preventing-double-side-effects).",
                "> - This function replaces the deprecated `wix-users-backend.register()`. The deprecated function will continue to work, but it will not receive updates. To keep any existing code compatible with future changes, see the [migration instructions](wix-users-backend/register#migration-instructions).",
                "",
                " The specified `password` must be between 4 and 100 ASCII characters.",
                "",
                "#### Automatic vs. Manual Approval",
                "",
                "The `register()` function behaves differently depending on your site's",
                "[member signup settings](https://support.wix.com/en/article/velo-enabling-custom-site-registration).",
                "Details are outlined in the following table:",
                "",
                "| Signup Setting                                                  | Result                                                                                                                                                                                                                                                                                                                                            |",
                "| --------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |",
                "| **Everyone who signs up** <br /> (automatic approval)           | <ul><li>Member `status` is `\"ACTIVE\"`.</li><li>The member can log in to the site, or you can log the member in by passing the returned `sessionToken` to [`applySessionToken()`](wix-members/authentication/applysessiontoken) from wix-members.</li></ul>                                                                                        |",
                "| **Only people who I approve manually** <br /> (manual approval) | <ul><li>Member `status` is `\"PENDING\"`.</li><li>The member must be approved. You can approve the member by passing the returned `approvalToken` to [`approveByToken()`](wix-members-backend/authentication/approveByToken) or calling [`approveByEmail()`](wix-members-backend/authentication/approvebyemail) from wix-members-backend.</li></ul> |",
                "",
                "When your site's member signup settings are set to automatic approval, calling",
                "[`register()` from wix-members](wix-members/authentication/register)",
                "(in page code) is as secure as calling",
                "`register()` from wix-members-backend in backend code.",
                "However, when registration is set to manual approval,",
                "calling `register()` from wix-members-backend",
                "allows you to build more secure approval flows",
                "by keeping tokens hidden from the frontend." ],
            "links": [],
            "examples":
              [ { "title": "Register a member",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "// Example options value:",
                      "// {",
                      "//    contactInfo: {",
                      "//      firstName: 'Javier',",
                      "//      lastName: 'Doe'",
                      "//    },",
                      "//    privacyStatus: 'PUBLIC'",
                      "// }",
                      "",
                      "export function myRegisterMemberFunction(email, password, options) {",
                      "  return authentication.register(email, password, options)",
                      "    .then((registrationResult) => {",
                      "      return registrationResult;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "}",
                      "",
                      "/* Promise resolves to:",
                      " * {",
                      " *   \"member\": {",
                      " *     \"_id\": \"efaaf13f-934e-4449-b0c2-304030767671\",",
                      " *     \"createdDate\": \"2021-08-01T12:28:42Z\",",
                      " *     \"updatedDate\": \"2021-08-01T12:28:41.847Z\",",
                      " *     \"status\": \"UNKNOWN\",",
                      " *     \"contactId\": \"efaaf13f-934e-4449-b0c2-304030767671\",",
                      " *     \"profile\": {",
                      " *       \"nickname\": \"Javier Doe\",",
                      " *       \"slug\": \"javierdoe\"",
                      " *     },",
                      " *     \"privacyStatus\": \"UNKNOWN\",",
                      " *     \"activityStatus\": \"UNKNOWN\"",
                      " *   },",
                      " *   \"status\": \"PENDING\",",
                      " *   \"approvalToken\": \"JWS.eyJraWQiOiJSc012MmV3MiIsImFsZyI6IkhTMjU2In0.eyJkYXRhIjoie1wiaWRcIjpcImVmYWFmMTNmLTkzNGUtNDQ0OS1iMGMyLTMwNDAzMDc2NzY3MVwiLFwiY29sbGVjdGlvbklkXCI6XCI5YmVjNThlNi02NDExLTQ5OTEtOGU1ZC0wYWRhOTE4MmI5NWVcIn0iLCJpYXQiOjE2Mjc4MjA5MjEsImV4cCI6MTYyNzkyODkyMX0.zOuE8ZXRBQT4tPPFqvseE8xKm6kHrmHG3Lrndz7l7Ng\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Register a member using a 3rd party for approval",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.jsw *",
                      " *******************************/",
                      "import { authentication } from 'wix-members-backend';",
                      "import { approveBy3rdParty } from 'backend/some-backend-module';",
                      "",
                      "export async function doRegistration(email, password, firstName, lastName) {",
                      "",
                      "  // Call a 3rd-party API to check if the member is approved.",
                      "  const isApproved = await approveBy3rdParty(email, password);",
                      "",
                      "  // If member is approved by 3rd party, register and approve with the Wix site",
                      "  if (isApproved === true) {",
                      "    const options = {",
                      "      contactInfo: {",
                      "        firstName: firstName,",
                      "        lastName: lastName",
                      "      }",
                      "    };",
                      "",
                      "    // Register the member",
                      "    const registration = await authentication.register(email, password, options);",
                      "    const approvalToken = registration.approvalToken;",
                      "    console.log('Member is now registered with the site and pending approval');",
                      "",
                      "    // Approve the member and get session token, to be used to log in the member client-side",
                      "    const sessionToken = await authentication.approveByToken(approvalToken);",
                      "    console.log('Member is now approved, but not logged in');",
                      "",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "",
                      "  } else {",
                      "    // If not approved by the 3rd party",
                      "",
                      "    await authentication.blockByEmail(email);",
                      "    console.log('Member not approved by 3rd-party SSO. Blocking from Wix site.');",
                      "",
                      "    return { approved: false };",
                      "  }",
                      "}",
                      "",
                      "",
                      "/*************",
                      " * Page code *",
                      " *************/",
                      "import { authentication } from 'wix-members';",
                      "import { doRegistration } from 'backend/register';",
                      "",
                      "// ...",
                      "",
                      "$w('#register').onClick(() => {",
                      "",
                      "  const email = $w('#email').value;",
                      "  const password = $w('#password').value;",
                      "  const firstName = $w('#firstName').value;",
                      "  const lastName = $w('#lastName').value;",
                      "",
                      "  doRegistration(email, password, firstName, lastName)",
                      "    .then((result) => {",
                      "      if (result.approved) {",
                      "        // Log the member in",
                      "        console.log('Logging in...');",
                      "        authentication.applySessionToken(result.sessionToken);",
                      "      } else {",
                      "        console.log('Not approved!');",
                      "      }",
                      "    });",
                      "});" ],
                  "extra":
                    { "description": "This example demonstrates a common 3rd-party approval flow.\nThe backend code calls a 3rd-party service that determines whether the member is approved.\nIf approved, the `register()` function is called from backend code,\nthe registration is approved,\nand a session token is returned to the calling page code.\nIf rejected, the `blockByEmail()` function is called." } },
                { "title": "Register a member, sending an email for confirmation",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.jsw *",
                      " *******************************/",
                      "",
                      "import { authentication } from 'wix-members-backend';",
                      "import { triggeredEmails } from 'wix-crm-backend';",
                      "",
                      "// To be called from the registration page code",
                      "export async function doRegistration(email, password, firstName, lastName) {",
                      "  // Register the member",
                      "  const registrationOptions = {",
                      "    contactInfo: {",
                      "      firstName: firstName,",
                      "      lastName: lastName",
                      "    }",
                      "  };",
                      "  const registration = await authentication.register(email, password, registrationOptions);",
                      "  console.log('Member is now registered with the site and pending approval');",
                      "",
                      "  // Send a registration confirmation email",
                      "  const emailOptions = {",
                      "    variables: {",
                      "      name: firstName,",
                      "      verifyLink: `http://yourdomain.com/post-register?token=${registration.approvalToken}`",
                      "    }",
                      "  };",
                      "  triggeredEmails.emailMember('verifyRegistration', registration.member.id, emailOptions);",
                      "  console.log('Confirmation email sent');",
                      "}",
                      "",
                      "// To be called from the post-registration page code",
                      "export async function doApproval(token) {",
                      "  try {",
                      "    // Approve the member",
                      "    const sessionToken = await authentication.approveByToken(token);",
                      "    console.log('Member approved');",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "  } catch (error) {",
                      "    // If an error is encountered and the member can't be approved",
                      "    console.log('Member not approved');",
                      "    return {",
                      "      approved: false,",
                      "      reason: error",
                      "    };",
                      "  }",
                      "}",
                      "",
                      "/****************************",
                      " * Page code - registration *",
                      " ****************************/",
                      "import { doRegistration } from 'backend/register';",
                      "",
                      "// ...",
                      "",
                      "const email = $w('#email');",
                      "const password = $w('#password');",
                      "const firstName = $w('#firstName');",
                      "const lastName = $w('#lastName');",
                      "",
                      "doRegistration(email, password, firstName, lastName)",
                      "  .then(() => {",
                      "    console.log('Confirmation email sent.');",
                      "  });",
                      "",
                      "/*********************************",
                      " * Page code - post-registration *",
                      " *********************************/",
                      "import wixLocation from 'wix-location';",
                      "import { authentication } from 'wix-members';",
                      "import { doApproval } from 'backend/register';",
                      "",
                      "$w.onReady(async () => {",
                      "  // Get the token from the URL",
                      "  const token = wixLocation.query.token;",
                      "",
                      "  // Send token to backend code",
                      "  const approval = await doApproval(token);",
                      "",
                      "  if (approval.approved === true) {",
                      "    // Log the member in",
                      "    authentication.applySessionToken(approval.sessionToken);",
                      "    console.log('Member approved & logged in');",
                      "  } else {",
                      "    console.log('Member not approved');",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates a common email verification flow.\nA member is initially registered but not yet approved.\nAt registration, a verification email is sent with a link to a verification page.\nWhen the member goes to the verification page,\nthe approval is granted and the member is logged into the site.\n\n The code is split between three locations:\n\n - A backend web module named **register.jsw**.\n - The page code for the page where members register.\n - The page code for the page where members confirm their registration." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sendSetPasswordEmail",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email of the member whose password will be set." },
            { "name": "options",
              "type": "wix-members-backend.Authentication.SetPasswordEmailOptions",
              "doc": "Email display options.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - If the email is sent.\nRejected - Error message." },
        "locations":
          [ { "lineno": 13,
              "filename": "sendSetPasswordEmail.js" } ],
        "docs":
          { "summary": "Sends a site member an email with a link to set their password.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `sendSetPasswordEmail()` function returns a Promise that resolves",
                "when the set password link is emailed to the member.",
                "<!--END:ONLY:VELO-->",
                "",
                "The set password link is valid for 3 hours,",
                "and it can be used only once.",
                "If the link expires, the original password remains." ],
            "links": [],
            "examples":
              [ { "title": "Email a member with a link to set their password",
                  "body":
                    [ "import { authentication } from 'wix-members-backend';",
                      "",
                      "// Sample options value:",
                      "// {",
                      "//   hideIgnoreMessage: false",
                      "// }",
                      "",
                      "export function mySendSetPasswordEmailFunction(email, options) {",
                      "  return authentication.sendSetPasswordEmail(email, options)",
                      "    .then((status) => {",
                      "      if (status === true) {",
                      "        console.log('Email sent');",
                      "      }",
                      "",
                      "      return status;",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "ContactInfo",
        "locations":
          [ { "lineno": 17,
              "filename": "register.js" } ],
        "docs":
          { "summary": "An object that contains information about a site contact.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "firstName",
              "type": "string",
              "doc": "Contact's first name.",
              "optional": true },
            { "name": "lastName",
              "type": "string",
              "doc": "Contact's last name.",
              "optional": true },
            { "name": "picture",
              "type": "string",
              "doc": "Contact's image source URL.",
              "optional": true },
            { "name": "emails",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of contact's email addresses.\n When creating a contact, if no phone number is\n provided, at least 1 email address must be provided.",
              "optional": true },
            { "name": "phones",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of contact's phone numbers.\n When creating a contact, if no email is\n provided, at least 1 phone number must be provided.",
              "optional": true },
            { "name": "labels",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)\n are used to organize contacts. When setting the `labels` property, you can\n only list labels that already exist in your site's [Contact List](https://support.wix.com/en/article/accessing-your-contact-list).",
              "optional": true },
            { "name": "language",
              "type": "string",
              "doc": "Contact's language.",
              "optional": true },
            { "name": "customFields",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "Any\n number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\n are used to store additional information about your site's contacts. When\n setting a custom field, use key:value pairs where the key matches the names\n defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).\n You can only set values for custom fields that already exist in the Contacts\n application.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "RegistrationOptions",
        "locations":
          [ { "lineno": 1,
              "filename": "register.js" } ],
        "docs":
          { "summary": "An object that contains information about a site registration.",
            "links":
              [ "[register](#register)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "contactInfo",
              "type": "wix-members-backend.Authentication.ContactInfo",
              "doc": "Contact information.",
              "optional": true },
            { "name": "privacyStatus",
              "type": "string",
              "doc": "Sets the [privacy status](https://support.wix.com/en/article/member-privacy-settings-for-groups) of a new member upon registration.\nOne of:\n\n - `\"PUBLIC\"`: Sets the new member status to public. A member whose status is public is a member of the site's community.\n - `\"PRIVATE\"`: Sets the new member status to private. A member whose status is private is not a member of the site's community.\n\nDefaults to `\"PRIVATE\"`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "RegistrationResult",
        "locations":
          [ { "lineno": 43,
              "filename": "register.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "status",
              "type": "string",
              "doc": "Registration status.\n\nOne of:\n\n- `\"PENDING\"`: The member must be approved before they can log in to the site.\n- `\"ACTIVE\"`: The member is approved and can log in to the site." },
            { "name": "sessionToken",
              "type": "string",
              "doc": "Token for logging in the current visitor\n as a site member with the\n[`applySessionToken()`](wix-members/authentication/applySessionToken)\n function from wix-members.\n\nReturned when `status` is `\"ACTIVE\"`.",
              "optional": true },
            { "name": "approvalToken",
              "type": "string",
              "doc": "Token for approving the member\nwith the [`approveByToken()`](wix-members-backend/authentication/approveByToken)\nfunction. `approvalToken` is safe to pass via email or from page code to\nbackend code.\n\nReturned when `status` is `\"PENDING\"`.",
              "optional": true },
            { "name": "member",
              "type": "wix-members-backend.Members.Member",
              "doc": "The registered member." } ],
        "extra":
          { "oneOfGroups":
              [ { "name": "token",
                  "members":
                    [ "sessionToken",
                      "approvalToken" ] } ] },
        "labels": [] },
      { "name": "SetPasswordEmailOptions",
        "locations":
          [ { "lineno": 1,
              "filename": "sendSetPasswordEmail.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "hideIgnoreMessage",
              "type": "boolean",
              "doc": "Whether to hide the \"ignore this email\" message.\n\nIf `false`, the email tells the member\nthey can safely ignore\nif they did not request the password change.\n\nDefaults to `false`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }