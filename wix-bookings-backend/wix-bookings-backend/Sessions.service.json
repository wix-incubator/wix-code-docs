{ "name": "Sessions",
  "memberOf": "wix-bookings-backend",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "sessions.js" },
  "docs":
    { "summary": "The Sessions API provides functionality for creating, managing, and querying sessions.",
      "description":
        [ "A session is one of the following:",
          "+ `\"EVENT\"`: Reserved period of time on any [schedule](wix-bookings-backend.sessions/introduction#schedules). For example, an appointment, class, or course. Events are visible in the Dashboard on the Bookings app's [**Booking Calendar**](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.",
          "+ `\"WORKING_HOURS\"` : Placeholder for available time on a resource’s schedule.",
          "",
          "Sessions belong to a schedule. Schedules are owned by a resource or a service.",
          "",
          "### Recurrence",
          "A session may be an individual session or a recurring session. ",
          "An individual session has a discrete start and end date, while a recurring session defines a series of repeating sessions. A session is a recurring session if the `recurrence` property contains a recurrence rule.  A session is an instance of a recurring session if the `instanceOfRecurrence` property contains a recurrence rule and the `recurrence` property is `null`.",
          "Changing a recurring session will update the future recurrence instances. If the `start` or `end` time has been changed on an instance, updates to `start` or `end` on the recurring session may not be updated on the instance. See [`updateSession()`](wix-bookings-backend.sessions/updatesession) for details.",
          "",
          "The recurrence is defined using a subset of recurrence rules ([RRULEs](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html)).",
          "",
          "The following RRULE parameters are supported:",
          "",
          "|Keyword|Description|Supported values|",
          "|--|--|---|",
          "|`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|",
          "|`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|",
          "|`UNTIL`|The UTC end date and time of the recurrence. Optional.|",
          "|`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|",
          "",
          "For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:",
          "`\"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z\"`",
          "",
          "<!--Expose when services are exposed",
          "A session includes an optional list of `affectedSchedules`. This is a list of linked schedules and the way each schedule's availability is affected. For example, the schedule of an instructor is linked to the session for the class that they instruct. ",
          "END:-->",
          "",
          "### Tags",
          "Sessions have tags that can be used to group sessions. The Wix Bookings app uses the following system tags: ",
          "+ `\"Blocked\"`: Used to create a session that blocks the resource's availability, but is not related to a service. Use this tag to schedule non-working hours where the resource is not available. ",
          "+ `\"google\"`: Used by the app for events created by Google applications. Google events are read-only.",
          "",
          "<!--Expose when services are exposed",
          "### Inheritance",
          "Sessions inherit properties from the schedules that they belong to. You can override inherited properties for each session unless the session is a recurring session. The following lists the session properties that are inherited from the schedule.",
          "",
          "+ `affectedSchedules`, from `Schedule.availability.linkedSchedules`",
          "+ `title`",
          "+ `tags`",
          "+ `location`",
          "+ `capacity`",
          "+ `rate`",
          "END:-->",
          "",
          "### Schedules",
          "A schedule is a collection of [sessions](wix-bookings-backend.sessions/introduction) and the information needed to calculate availability.",
          "A schedule is owned by either a service or a resource. The `scheduleOwnerId` property contains the ID of the owning resource or service.",
          "",
          "<!--Expose when services are exposed",
          "Schedules contain metadata for the following areas:",
          "+ Availability",
          "+ Pricing",
          "+ Location",
          "+ Participants",
          "+ Conference calls",
          "",
          "The Bookings app uses the schedule's `availability` object to calculate availability on the schedule owner's calendar. The availability object contains an array of `linkedSchedules`. This array contains a list of other schedules that impact this schedule’s availability. The `transparency` property defines how this schedules’ availability is affected:",
          "- When `transparency` is set to `”FREE\"`:",
          "  - Availability is calculated for this schedule based on the linked schedule.",
          "  - Bookings made on the linked schedules do not affect this schedule. ",
          "- When `transparency` is set to `”BUSY”`:",
          "  - Availability is calculated for this schedule based on the linked schedule.",
          "  - Bookings made on the linked schedules make this schedule unavailable.",
          "-->",
          "<!--Expose when services are exposed",
          "NEEDS TO BE CLARIFIED . Schedules.LinkedSchedules and Sessions.affectedSchedules. For example, if we have two services, math tutoring and science tutoring, and they are both offered by a tutor called John. John will have both / Both math and science schedules will have John's schedule ID in their linkedSchedules array with a transparency of \"BUSY\".",
          "Both have transparency `”BUSY”`. When the math service is booked between 3 and 4pm, a session is created for John’s schedule for that time. The science service’s schedule is in John’s list of linked schedules. When availability is calculated for the science service, there will be no slots available between 3 and 4pm, because John is teaching math.",
          "",
          "Tags are used for grouping schedules and for specific functions in the Wix Bookings app. ",
          "The Wix Bookings app uses the following predefined tags to set schedule types for services:",
          "`\"INDIVIDUAL\"`, `\"GROUP\"`, and `\"COURSE”` for appointments, classes and courses. Once the schedule type is set using these tags, you cannot update it.",
          "In addition to the app's tags, you can create and update tags for your own use.",
          "",
          "Some data defined in the **Settings** page is inherited by the schedule by default. Inherited fields are:",
          "+ location.businessLocation from the **Business Info** page. ",
          "+ availability.constraints.slotsSplitInterval from the **Appointment Time Slots** section in the **Bookings Policy** page",
          "The `inheritedFields` property lists the fields that were inherited from the **Business Info** page. ",
          "END:-->",
          "",
          "",
          "To use the Sessions API, import `sessions` from the `wix-bookings-backend` module:",
          "",
          "```javascript",
          "import { sessions } from \"wix-bookings-backend\";",
          "```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "createSession",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "sessionInfo",
              "type": "wix-bookings-backend.Sessions.SessionInfo",
              "doc": "Information to use when creating a session.." },
            { "name": "options",
              "type": "wix-bookings-backend.Options",
              "doc": "An object representing the available options for creating a session.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-backend.Sessions.Session" ] },
            "doc": "Fulfilled - Session." },
        "locations":
          [ { "lineno": 106,
              "filename": "sessions.js" } ],
        "docs":
          { "summary": "Creates a session.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `createSession()` function returns a Promise that resolves when a session is created.",
                "<!--END:ONLY:VELO-->",
                "",
                "A session is one of the following:",
                "+ `\"EVENT\"`: Reserved period of time on any [schedule](wix-bookings-backend.sessions/introduction#schedules). For example, an appointment, class, or course. Events are visible in the Dashboard in the Bookings app's [**Booking Calendar**](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page. Set `type` to `\"EVENT\"` when creating sessions that reserve time on a service's schedule, or when creating a blocked time for a resource. ",
                "+ `\"WORKING_HOURS\"`: Placeholder for available time on a resource’s schedule. Set `type` to `\"WORKING_HOURS\"` when creating sessions for resource availability.",
                "",
                "Sessions belong to a schedule. Schedules are owned by a resource or a service.",
                "",
                "A session may be an individual session or a recurring session. ",
                "An individual session has a discrete start and end date, while a recurring session defines a series of repeating sessions. An instance of a recurring session is a specific session in a series of repeating sessions, generated according to the recurrence rule.",
                "The `start` and `end` properties set the time and duration of the session. For non-recurring sessions, you can use either the `timestamp` or `localDateTime` properties. ",
                "For recurring sessions, use the `localDateTime` property only. For recurring sessions, the `start` property sets the date and time of the first recurring session, subject to the recurrence rule. For example, if you set the `start` to Saturday, May 1 and your recurrence rule says every second Monday, then the first session will only be on Monday, May 10. ",
                "",
                "The `year`, `monthOfYear` and `dayOfMonth` properties in the `end` property are used with the `hourOfDay` and `minutesOfHour` properties to set the duration of each session relative to the `start`.",
                "The `UNTIL` keyword in the `recurrence` property sets the date for the last recurring session.",
                "",
                "You can create a session that blocks hours on the resource's calendar, making the resource unavailable.",
                "Create a non-recurring session of type `\"EVENT\"`, and add `\"Blocked\"` to the `tags` array.",
                "",
                "<!--ONLY:VELO-->",
                ">**Notes:**",
                "> + For properties where there is no explicit timezone information, the timezone used is the business’s timezone.",
                "> + Only users with **[Bookings Admin](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin)** permissions can create a session. You can override the permissions by setting the `suppressAuth` option to `true`.",
                "<!--END:ONLY:VELO-->",
                "",
                "<!--ONLY:REST",
                "> **Permissions**",
                "> This endpoint requires the Manage Bookings permissions scope",
                "<!--END:ONLY:REST-->",
                "<!--ONLY:VELO-->" ],
            "links": [],
            "examples":
              [ { "title": "Create a session.",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "export function createNonRecurringSessions(scheduleId) {",
                      "  const sessionInfo = {",
                      "      scheduleId,",
                      "      start: {",
                      "          timestamp: new Date(\"2021-02-15T12:00:00.000-07:00\")",
                      "      },",
                      "      end: {",
                      "          timestamp: new Date(\"2021-02-15T13:00:00.000-07:00\")",
                      "      },",
                      "      type: \"WORKING_HOURS\"",
                      "  };",
                      "",
                      "  const options = { suppressAuth: true };",
                      "",
                      "  return sessions.createSession(sessionInfo, options)",
                      "      .then((session) => {",
                      "          return session;",
                      "      })",
                      "      .catch((error) => {",
                      "          console.error('Failed to create session:', error);",
                      "      });",
                      "}",
                      "",
                      " /*  Returns a Promise that resolves to a session object:",
                      "  *   {",
                      "  *     \"_id\": \"2mmoW0vwKcSFyxtOfCdMhHQCHOQ1j8BjlhonXsthFhhClxedYCD7W67Dzj8Gcsw0EBU60ml88FFboL9qt39lLftLn3tcMtFZoPu9\",",
                      "  *     \"notes\": \"\",",
                      "  *     \"scheduleId\": \"aec380c0-ca2c-43c2-98f4-9aebbd3276f3\",",
                      "  *     \"scheduleOwnerId\": \"2a843db6-cb3f-4c96-90b8-f2f6e0055cae\",",
                      "  *     \"start\": {",
                      "  *       \"timestamp\": \"2021-02-15T19:00:00.000Z\"",
                      "  *     },",
                      "  *     \"end\": {",
                      "  *       \"timestamp\": \"2021-02-15T20:00:00.000Z\"",
                      "  *     },",
                      "  *     \"status\": \"CONFIRMED\",",
                      "  *     \"tags\": [],",
                      "  *     \"type\": \"WORKING_HOURS\"",
                      "  *   }",
                      "  */" ],
                  "extra":
                    {  } },
                { "title": "Create a recurring session for a resource.",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "export function createRecurringSessions(scheduleId) {",
                      "  const recurringSession = {",
                      "      scheduleId,",
                      "      start: {",
                      "          localDateTime: {",
                      "              year: 2021,",
                      "              monthOfYear: 3,",
                      "              dayOfMonth: 1,",
                      "              hourOfDay: 9,",
                      "              minutesOfHour: 0",
                      "          }",
                      "      },",
                      "      end: {",
                      "          localDateTime: {",
                      "              year: 2021,",
                      "              monthOfYear: 3,",
                      "              dayOfMonth: 1,",
                      "              hourOfDay: 17,",
                      "              minutesOfHour: 0",
                      "          }",
                      "      },",
                      "      type: 'WORKING_HOURS',",
                      "      recurrence: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=WE;UNTIL=20220101T000000Z'",
                      "  };",
                      "  const options = { suppressAuth: true };",
                      "",
                      "  return sessions.createSession(recurringSession, options)",
                      "      .then((session) => {",
                      "          return session;",
                      "      })",
                      "      .catch((error) => {",
                      "          console.error('Failed to create session:', error);",
                      "      });",
                      "}",
                      "",
                      " /*  Returns a Promise that resolves to a session object:",
                      "  *   {",
                      "  *     \"_id\": \"aec380c0ca2c43c298f49aebbd3276f3-10c6d84adc9247e7b9cd17e12b01addc\",",
                      "  *     \"notes\": \"\",",
                      "  *     \"recurrence\": \"FREQ=WEEKLY;INTERVAL=1;BYDAY=WE;UNTIL=20220101T000000Z\",",
                      "  *     \"scheduleId\": \"aec380c0-ca2c-43c2-98f4-9aebbd3276f3\",",
                      "  *     \"scheduleOwnerId\": \"2a843db6-cb3f-4c96-90b8-f2f6e0055cae\",",
                      "  *     \"start\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 3,",
                      "  *         \"dayOfMonth\": 1,",
                      "  *         \"hourOfDay\": 9,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       }",
                      "  *     },",
                      "  *      \"end\": {",
                      "  *       \"localDateTime\": {",
                      "  *         \"year\": 2021,",
                      "  *         \"monthOfYear\": 3,",
                      "  *         \"dayOfMonth\": 1,",
                      "  *         \"hourOfDay\": 17,",
                      "  *         \"minutesOfHour\": 0",
                      "  *       }",
                      "  *     },",
                      "  *     \"status\": \"CONFIRMED\",",
                      "  *     \"tags\": [],",
                      "  *     \"type\": \"WORKING_HOURS\"",
                      "  *   }",
                      "  */" ],
                  "extra":
                    { "description": "<!--END:ONLY:VELO-->" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "deleteSession",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "sessionId",
              "type": "string",
              "doc": "ID of the session to delete." },
            { "name": "options",
              "type": "wix-bookings-backend.Sessions.DeleteSessionOptions",
              "doc": "An object representing the available options for deleting a session.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - ID of the deleted session." },
        "locations":
          [ { "lineno": 223,
              "filename": "sessions.js" } ],
        "docs":
          { "summary": "Deletes a session from a schedule.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `deleteSession()` function returns a Promise that resolves to a session ID when the session has been deleted.",
                "<!--END:ONLY:VELO-->",
                "Use the `participantNotification` property to send an email to the participants when the session is deleted.",
                "When deleting a session of type `\"EVENT\"` where a booking exists, the booking's status is updated to `\"CANCELED\"`.",
                "To delete a set of recurring sessions, specify the session's `recurringSessionId` in the `sessionId` property in the parameters. ",
                "When deleting a recurrence, only future instances of the recurrence are deleted.",
                "",
                "<!--ONLY:VELO-->",
                ">**Note:** Only users with **[Bookings Admin](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin)** permissions can delete a session. You can override the permissions by setting the `suppressAuth` option to `true`.",
                "<!--END:ONLY:VELO-->",
                "",
                "<!--ONLY:REST",
                "> **Permissions**",
                "> This endpoint requires the Manage Bookings permissions scope",
                "<!--END:ONLY:REST-->",
                "<!--ONLY:VELO-->" ],
            "links": [],
            "examples":
              [ { "title": "Delete a session.",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "export function myDeleteSession(sessionId) {",
                      "  const deleteSessionOptions = {",
                      "      suppressAuth: true,",
                      "      participantNotification: {",
                      "          notifyParticipants: true",
                      "      }",
                      "  };",
                      "  return sessions.deleteSession(sessionId, deleteSessionOptions)",
                      "      .then((result) => {",
                      "          return result;",
                      "      })",
                      "      .catch((error) => {",
                      "          console.error(\"Delete session failed:\", error);",
                      "      });",
                      "}",
                      "",
                      "/*  Returns a Promise that resolves to a sessionId:",
                      " *",
                      "    \"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg62YOeTGcgvAnGyw6uKEiNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFkTukwrkodDkJBBtH3JaGj18FY3z9vvxDE0COr8D282JjVfq7YMAwQnTq4tYWYJkfPm7PDLI6zoWZREstI4jt6L0rFzLgnygdPd34xwV1XTWy29NYFXkahlmVNGcT28Psi8J35SjuXKVSpBiz8AbGJNwhVjBiZ8mSR1C8AqlOXknDFaYIQ2dd1Bsgub\"",
                      " *",
                      " */" ],
                  "extra":
                    { "description": "<!--END:ONLY:VELO-->" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getSession",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "sessionId",
              "type": "string",
              "doc": "ID of the session to retrieve." },
            { "name": "options",
              "type": "wix-bookings-backend.Options",
              "doc": "An object representing the available options for getting a session.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-backend.Sessions.Session" ] },
            "doc": "Fulfilled - Session." },
        "locations":
          [ { "lineno": 197,
              "filename": "sessions.js" } ],
        "docs":
          { "summary": "Gets a session.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `getSession()` function returns a Promise that resolves to a session with the specified session ID.",
                "",
                "> **Note:** Only users with **[Bookings Admin](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin)** permissions can view participant information in a retrieved session. You can override the permissions by setting the `suppressAuth` options to `true`.",
                "<!--END:ONLY:VELO-->",
                "",
                "<!--ONLY:REST",
                "> **Permissions**",
                "> This endpoint requires the Read Bookings Calendar or the Manage Bookings permission scope.",
                "> With the Read Bookings Calendar permission scope, the session participants are not returned.",
                "<!--END:ONLY:REST-->",
                "<!--ONLY:VELO-->" ],
            "links": [],
            "examples":
              [ { "title": "Gets a session.",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "export function myGetSession(sessionId) {",
                      "  return sessions.getSession(sessionId, { suppressAuth: true })",
                      "    .then((session) => {",
                      "      return session",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(\"Failed to get the session:\", error);",
                      "    });",
                      "}",
                      "",
                      "/* Returns a Promise that resolves to a session object:",
                      " *",
                      " * {",
                      " *   \"_id\":\"193...Jzp\",",
                      " *   \"start\": {",
                      " *    \"localDateTime\": {",
                      " *      \"year\": 2021,",
                      " *      \"monthOfYear\": 1,",
                      " *      \"dayOfMonth\": 1,",
                      " *      \"hourOfDay\": 10,",
                      " *      \"minutesOfHour\": 0",
                      " *    },",
                      " *    \"timestamp\": \"2021-01-01T15:00:00.000Z\"",
                      " *   }, ",
                      " *   \"end\": {",
                      " *    \"localDateTime\": {",
                      " *      \"year\": 2021,",
                      " *      \"monthOfYear\": 1,",
                      " *      \"dayOfMonth\": 1,",
                      " *      \"hourOfDay\": 11,",
                      " *      \"minutesOfHour\": 0",
                      " *    },",
                      " *    \"timestamp\": \"2021-01-01T16:00:00.000Z\"",
                      " *   },",
                      " *   \"notes\": \"\",",
                      " *   \"recurringSessionId\": \"53616b1f0c3c45a1b282675acd248179-44539bfb63ae496693109b6cb3a65a65\",",
                      " *   \"scheduleId\": \"53616b1f-0c3c-45a1-b282-675acd248179\",",
                      " *   \"scheduleOwnerId\": \"b71df756-309f-468e-aec2-f82b9a9a9441\",",
                      " *   \"status\": \"CONFIRMED\",",
                      " *   \"tags\": [",
                      " *     \"GROUP\"",
                      " *   ],",
                      " *   \"type\": \"EVENT\"",
                      " *  }",
                      " */ ",
                      "" ],
                  "extra":
                    { "description": "<!--END:ONLY:VELO-->" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "querySessions",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-bookings-backend.Sessions.SessionQueryBuilder",
            "doc": "A `SessionQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 35,
              "filename": "SessionQueryBuilder.js" } ],
        "docs":
          { "summary": "Retrieves a list of the sessions according to the specified filters and paging.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `querySessions()` function builds a query to retrieve a list of sessions, and returns a [`SessionQueryBuilder`](wix-bookings-backend.sessions/sessionquerybuilder/introduction) object.",
                "The returned object contains the query definition, which is typically used to run the query using the [`find()`](#find) function.",
                "",
                "The `SessionQueryBuilder` functions enable you to run, filter, and control",
                "which results a query returns.",
                "",
                "Typically, you build a query using the session query function,",
                "refine the query by chaining `SessionQueryBuilder` functions, and then execute the",
                "query by chaining the `find()` function.",
                "",
                "The query must include the following `SessionQueryBuilder` functions:",
                " + [ge](wix-bookings-backend.sessions/sessionquerybuilder/ge)(\"end.timestamp\", \"\\<timestamp value\\>\")",
                " + [lt](wix-bookings-backend.sessions/sessionquerybuilder/lt)(\"start.timestamp\", \"\\<timestamp value\\>\")",
                "",
                "Use `start` and `end` to set the range of dates you want to return in your session query. Use `ge(\"end.timestamp\", \"<timestamp value>\")` to set the lower limit of your query range as greater or equal to the `end` date of the earliest session, and `lt(\"start.timestamp\", \"<timestamp value>\")` to set the upper limit as less than the `start` date of the latest session. Sessions that are partially within the requested date range will be included in the returned sessions.",
                "",
                "![query](../assets/images/querysessions.png)",
                "",
                "",
                "The query runs with the following `SessionQueryBuilder` defaults that you can override:",
                "",
                "+ [`skip`](wix-bookings-backend.sessions/sessionqueryresult#skip): `0`",
                "+ [`limit`](wix-bookings-backend.sessions/sessionqueryresult#limit): `50`",
                "+ `ascending`: `start.timestamp`",
                "",
                "By default, recurring sessions, sessions that define recurrence patterns, are not returned in the query. Only instances of the recurring sessions are returned. To query recurring sessions, use `.ne(\"recurrence\",null)` and `.eq(\"scheduleId\", \"<value>\")`. While instances of recurring sessions can be queried for all schedules, recurring sessions can only be queried for a specified schedule ID.",
                "",
                "",
                "The following query builder filters are supported for `querySessions()`.",
                "|Property|Supported Filters&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|",
                "|--|--|",
                "|`scheduleId`|[`eq()`](wix-bookings-backend.sessions/sessionquerybuilder/eq),[`hasSome()`](wix-bookings-backend.sessions/sessionquerybuilder/hasSome)|",
                "|`end`|[`ge()`](wix-bookings-backend.sessions/sessionquerybuilder/ge)|",
                "|`start`|[`lt()`](wix-bookings-backend.sessions/sessionquerybuilder/lt)|",
                "|`tags` | [`eq()`](wix-bookings-backend.sessions/sessionquerybuilder/eq), [`hasSome()`](wix-bookings-backend.sessions/sessionquerybuilder/hasSome)|",
                "|`type` | [`eq()`](wix-bookings-backend.sessions/sessionquerybuilder/eq), [`hasSome()`](wix-bookings-backend.sessions/sessionquerybuilder/hasSome)|",
                "|`recurrence`|  [`ne()`](wix-bookings-backend.sessions/sessionquerybuilder/ne)",
                "",
                "For a full description of the Session object, see the object returned for the [`items`](wix-bookings-backend.sessions/sessionqueryresult/items) property in `SessionQueryResult`.",
                "",
                "",
                "> Notes: ",
                "> + If `timestamp` not specified when creating a session, it is calculated as the UTC date and time using localDateTime and the business's timezone.",
                "> + Sessions that occur as a result of a linked schedule are not returned in a session query. For example, `WORKING_HOURS` sessions for a resource that has the default business hours in its `linkedSchedules` array, will not be returned in a query.",
                "> + Only users with **[Bookings Admin](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin)** permissions can view participant information in a session query. You can override the permissions by setting the `suppressAuth` options to `true`." ],
            "links": [],
            "examples":
              [ { "title": "Create a query, add filters, and run it",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "return sessions.querySessions()",
                      "  .eq(\"scheduleId\", \"9299760d-8a4a-4f89-b348-1fc611f4be17\")",
                      "  .ge(\"end.timestamp\",\"2020-01-01T08:00:00.000Z\")",
                      "  .lt(\"start.timestamp\", \"2021-06-01T08:00:00.000Z\")",
                      "  .limit(5)",
                      "  .find({suppressAuth:true})",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "      return results.items;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });",
                      "",
                      " /* Returns a Promise that resolves to an array of sessions.",
                      "  *",
                      "  *  [",
                      "  *    {",
                      "  *      \"end\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2020,",
                      "  *          \"monthOfYear\": 12,",
                      "  *          \"dayOfMonth\": 31,",
                      "  *          \"hourOfDay\": 18,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2020-12-31T16:00:00.000Z\"",
                      "  *      },",
                      "  *      \"_id\": \"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg62YOeTG",
                      "  *       cgvAnGyw6uKEiNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFlTVokima8xqZJ3K8Mt5W8JtTsJi2KIa3BmFTWVGdkTgSQ0VtgHgVZWUkZS",
                      "  *       JRO9bmwylbZ9RmiJAAXeHMH4peyCBj1KWkxLTM6V5DFXqC9xxWE2e937Uk4dGhLsygwwECBXVCm3dtPgBdoEgmrfEWBOCLZGxoanZBKNamF",
                      "  *       FpYzUy2Anc7LTDAqZtUbN\",",
                      "  *      \"notes\": \"An updated note\",",
                      "  *      \"recurringSessionId\": \"9299760d8a4a4f89b3481fc611f4be17-d0156d516f264989b727b0da13a42662\",",
                      "  *      \"scheduleId\": \"9299760d-8a4a-4f89-b348-1fc611f4be17\",",
                      "  *      \"scheduleOwnerId\": \"e6b6108c-92bc-462b-937c-dab386909fd2\",",
                      "  *      \"start\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2020,",
                      "  *          \"monthOfYear\": 12,",
                      "  *          \"dayOfMonth\": 31,",
                      "  *          \"hourOfDay\": 10,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2020-12-31T08:00:00.000Z\"",
                      "  *      },",
                      "  *      \"status\": \"CONFIRMED\",",
                      "  *      \"tags\": [],",
                      "  *      \"type\": \"EVENT\"",
                      "  *    },",
                      "  *    {",
                      "  *      \"end\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 4,",
                      "  *          \"hourOfDay\": 18,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-04T16:00:00.000Z\"",
                      "  *      },",
                      "  *      \"_id\":  *\"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg62YOeTGcgvAnGyw6uKE",
                      "  *      iNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFlV7u2wmfZmcjnaGKeU15ZlbLQhG2uvyCf0hQuk6tKFmzj3xdqdDjdlKJCrJs2cslMgLxIotwGRWg",
                      "  *      ipZJM2wzo6c2XCSUYjYWHe7FmpcExTyKZ2JUD9iftin96C2Y6nYREYoJMXYFzBBtdmoQprQkm5dXOPg2oUWasimBH1Y2EehSBEWVmKxAmH12IH\",",
                      "  *      \"notes\": \"\",",
                      "  *      \"recurringSessionId\": \"9299760d8a4a4f89b3481fc611f4be17-ecc4a5932acb4b7bb8c27c6ffb57fd49\",",
                      "  *      \"scheduleId\": \"9299760d-8a4a-4f89-b348-1fc611f4be17\",",
                      "  *      \"scheduleOwnerId\": \"e6b6108c-92bc-462b-937c-dab386909fd2\",",
                      "  *      \"start\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 4,",
                      "  *          \"hourOfDay\": 10,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-04T08:00:00.000Z\"",
                      "  *      },",
                      "  *      \"status\": \"CONFIRMED\",",
                      "  *      \"tags\": [],",
                      "  *      \"type\": \"WORKING_HOURS\"",
                      "  *    },",
                      "  *    {",
                      "  *      \"end\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 6,",
                      "  *          \"hourOfDay\": 18,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-06T16:00:00.000Z\"",
                      "  *      },",
                      "  *      \"_id\":  *\"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg62YOeTGcgvAnGyw6uKE",
                      "  *      iNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFkPrsq3Jhjbq8UeqhF4rOEyqzl3ZcVqpQtlI8Yyo6yRlAnbAWq5pradMKsvlkHC4QPrB5AcrYvmfD",
                      "  *      jteuRaWbm5JFSng4LouD3sCED8MUALsTSuUor4yNxYzE8aucYxUDpauUXDmkbSk0bmcpWVUwE6D79ogsY1libzXvGgJLxujpZFokC1fWNiLWwv\",",
                      "  *      \"notes\": \"\",",
                      "  *      \"recurringSessionId\": \"9299760d8a4a4f89b3481fc611f4be17-3d6b38529f544674a4976eca75e584ca\",",
                      "  *      \"scheduleId\": \"9299760d-8a4a-4f89-b348-1fc611f4be17\",",
                      "  *      \"scheduleOwnerId\": \"e6b6108c-92bc-462b-937c-dab386909fd2\",",
                      "  *      \"start\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 6,",
                      "  *          \"hourOfDay\": 10,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-06T08:00:00.000Z\"",
                      "  *      },",
                      "  *      \"status\": \"CONFIRMED\",",
                      "  *      \"tags\": [],",
                      "  *      \"type\": \"WORKING_HOURS\"",
                      "  *    },",
                      "  *    {",
                      "  *      \"end\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 7,",
                      "  *          \"hourOfDay\": 18,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-07T16:00:00.000Z\"",
                      "  *      },",
                      "  *      \"_id\":  *\"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg62YOeTGcgvAnGyw6uKE",
                      "  *      iNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFlTVokima8xqZJ3K8Mt5W8JtTsJi2KIa3BmFTWVGdkTgSQ0VtgHgVZWUkZSJRO9bmwylbZ9RmiJAA",
                      "  *      XeHMH4w0TkFE1ZSlf0MBCfuln4l0G7oKGKuO90Ai25Ud0wzQ6B6APNYOpsUkqppufK8twT7VYGmrozTLrL2zb01cFcL7bbssRdAFCskSZWbDaP\",",
                      "  *      \"notes\": \"An updated note\",",
                      "  *      \"recurringSessionId\": \"9299760d8a4a4f89b3481fc611f4be17-d0156d516f264989b727b0da13a42662\",",
                      "  *      \"scheduleId\": \"9299760d-8a4a-4f89-b348-1fc611f4be17\",",
                      "  *      \"scheduleOwnerId\": \"e6b6108c-92bc-462b-937c-dab386909fd2\",",
                      "  *      \"start\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 7,",
                      "  *          \"hourOfDay\": 10,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-07T08:00:00.000Z\"",
                      "  *      },",
                      "  *      \"status\": \"CONFIRMED\",",
                      "  *      \"tags\": [],",
                      "  *      \"type\": \"EVENT\"",
                      "  *    },",
                      "  *    {",
                      "  *      \"end\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 8,",
                      "  *          \"hourOfDay\": 18,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-08T16:00:00.000Z\"",
                      "  *      },",
                      "  *      \"_id\":  *\"4jOkD28c0FrsNUSgzQzuLRkA2t1rv1FLTwquKmJyctoZm00vdeKFMyH4n9cCLtmQe8wvOVwmsJCUCPWT3LA2geDOBViOg62YOeTGcgvAnGyw6uKE",
                      "  *      iNVqqdHt8QVz4i7qMZu5irOPVjACrV2o5F5SFkTukwrkodDkJBBtH3JaGj18FY3z9vvxDE0COr8D282JjVfq7YMAwQnTq4tYWYJkfPm7PDLI6zoWZ",
                      "  *      REstI4qEbt9u6qB3UHudvTCxqFYL1IOaWl48c2kHaCaEwfB53cbd5ndRAj4yv8JchSIwDa1rgxINU4JITqstE4QJ5FMugAnqVkzBjiH1P502ZB\",",
                      "  *      \"notes\": \"\",",
                      "  *      \"recurringSessionId\": \"9299760d8a4a4f89b3481fc611f4be17-6f9f945736fd4490b4b95fbb4b1326b3\",",
                      "  *      \"scheduleId\": \"9299760d-8a4a-4f89-b348-1fc611f4be17\",",
                      "  *      \"scheduleOwnerId\": \"e6b6108c-92bc-462b-937c-dab386909fd2\",",
                      "  *      \"start\": {",
                      "  *        \"localDateTime\": {",
                      "  *          \"year\": 2021,",
                      "  *          \"monthOfYear\": 1,",
                      "  *          \"dayOfMonth\": 8,",
                      "  *          \"hourOfDay\": 10,",
                      "  *          \"minutesOfHour\": 0",
                      "  *        },",
                      "  *        \"timestamp\": \"2021-01-08T08:00:00.000Z\"",
                      "  *      },",
                      "  *      \"status\": \"CONFIRMED\",",
                      "  *      \"tags\": [],",
                      "  *      \"type\": \"WORKING_HOURS\"",
                      "  *    }",
                      "  *  ]",
                      "  */" ],
                  "extra":
                    { "description": "<!--END:ONLY:VELO-->   \n<!--ONLY:REST\nThis query is optional. If no query is provided than all non-deleted resources are returned.\n\n|Property|Is supported|\n|--|--|\n|filter | supports `resource.id`, `resource.tag`, `resource.status`|\n|paging | supported |\n|fields | supported |\n|paging | not supported |\n|fields | not supported |\n|fieldsets | not supported |\n\n> **Permissions**\n> This endpoint requires the Read Bookings Calendar, Read Bookings - Public Data, Read Bookings - Including Participants or Manage Bookings permission scope.\n<!--END:ONLY:REST-->" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateSession",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "sessionId",
              "type": "string",
              "doc": "ID of the session to update." },
            { "name": "sessionInfo",
              "type": "wix-bookings-backend.Sessions.UpdateSessionInfo",
              "doc": "Information to use when updating a session." },
            { "name": "options",
              "type": "wix-bookings-backend.Options",
              "doc": "An object representing the available options for updating a session.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-backend.Sessions.Session" ] },
            "doc": "Fulfilled - Session." },
        "locations":
          [ { "lineno": 152,
              "filename": "sessions.js" } ],
        "docs":
          { "summary": "Updates a session.",
            "description":
              [ "<!--ONLY:VELO-->",
                "The `updateSession()` function returns a Promise that resolves when the session has been updated.",
                "<!--END:ONLY:VELO-->",
                "The property values specified in the `sessionInfo` object replace the existing values. If a property is not specified in the request it will remain unchanged. Array properties, if specified, overwrite the existing array and all of its elements.",
                "",
                "When you update a recurring session, only the future instances of the recurrence will be updated. Changing an individual instance's `start` or `end` time will change the way updates to `start` and `end` on the recurring session affect the session instance:",
                "|Change made to the instance | Effect of changes made to the recurrence",
                "|--|--|",
                "|Instance `start` time changed.|Changes to the recurring session's `start` or `end` time will not update the instance.|",
                "|Instance `end` time changed, changing the session's duration| Changes made to the recurring session's start time will be updated on the instance while keeping the new duration, but changes to the recurring session's `end` time not be updated on the instance.",
                "|Updating a changed `start` time for an instance back to the recurring session's value.|Future changes to the recurring session `start` and `end` times will update the instance's `starts` and `end` time.",
                "",
                "",
                "Changes to properties on the recurring session, other than `start` and `end`, are always updated on the recurrence instance.",
                "",
                "Use the `options.participantNotification` object to notify participants if the session has been booked.",
                "",
                "<!-- Expose in later phase: The `participants` array cannot be updated.",
                "Use the participantNotification property to send an email to the participants notifying them of the change.",
                "-->",
                "",
                "<!--ONLY:VELO-->",
                ">**Notes:** ",
                "> + Where there is no explicit timezone information, the timezone used is the business’s timezone.",
                "> + Only users with **[Bookings Admin](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin)** permissions can update a session. You can override the permissions by setting the `suppressAuth` option to `true`.",
                "<!--END:ONLY:VELO-->",
                "",
                "<!--ONLY:REST",
                "> **Permissions**",
                "> This endpoint requires the Manage Bookings permissions scope",
                "<!--END:ONLY:REST-->",
                "<!--ONLY:VELO-->" ],
            "links": [],
            "examples":
              [ { "title": "Update a session.",
                  "body":
                    [ "import { sessions } from \"wix-bookings-backend\";",
                      "",
                      "export function myUpdateSession(sessionId) {",
                      " ",
                      "  const sessionInfo = {",
                      "      notes: \"An updated note\"",
                      "  };",
                      "",
                      "  const updateSessionOptions = {",
                      "      suppressAuth: true",
                      "  };",
                      "",
                      "  return sessions.updateSession(sessionId, sessionInfo, updateSessionOptions)",
                      "      .then((updatedSession) => {",
                      "          return updatedSession;",
                      "      })",
                      "      .catch((error) => {",
                      "          console.error(\"Update session failed:\", error);",
                      "      });",
                      "}",
                      " /* Returns a Promise that resolves to a session object:",
                      "  * {",
                      "  *   \"_id\": \"2mmoW0vwKcSFyxtOfCdKNWpXfTMwOG1eDJiG34R4gORBP7dZp75XWXUVtvdEzhzsxfmG3a2lDyh9eqcQi2o6zxLAigrZPso7AQoP\",",
                      "  *   \"scheduleId\": \"4b21a5af-3b69-42ce-a3ba-9cf60d7b4422\",",
                      "  *   \"scheduleOwnerId\": \"49c7fac5-227c-44d0-a4f3-c1a5c511edf1\",",
                      "  *   \"start\": {",
                      "  *     \"timestamp\": \"2020-12-30T15:00:00.000Z\"",
                      "  *   },",
                      "  *   \"end\": {",
                      "  *     \"timestamp\": \"2020-12-30T16:00:00.000Z\"",
                      "  *   },",
                      "  *   \"status\": \"CONFIRMED\",",
                      "  *   \"tags\": [",
                      "  *     \"INDIVIDUAL\"",
                      "  *   ],",
                      "  *     \"type\": \"EVENT\",",
                      "  *     \"notes\": \"An updated note\"",
                      "  * }",
                      "  */" ],
                  "extra":
                    { "description": "<!--END:ONLY:VELO-->" } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "DeleteSessionOptions",
        "locations":
          [ { "lineno": 209,
              "filename": "allTypeDefs.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "participantNotification",
              "type": "wix-bookings-backend.ParticipantNotificationInfo",
              "doc": "Whether to notify participants about the change, and an optional custom message.",
              "optional": true },
            { "name": "suppressAuth",
              "type": "boolean",
              "doc": "When `true`, prevents permission checks from running for the operation. Defaults to `false`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Session",
        "locations":
          [ { "lineno": 105,
              "filename": "allTypeDefs.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Session ID." },
            { "name": "scheduleId",
              "type": "string",
              "doc": "ID of the schedule that the session belongs to." },
            { "name": "scheduleOwnerId",
              "type": "string",
              "doc": "ID of the resource or service that the session's schedule belongs to." },
            { "name": "tags",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Tags for the session.\nThe value is inherited from the schedule and can be overridden unless the session is a recurring session." },
            { "name": "notes",
              "type": "string",
              "doc": "Additional information about the session.\nNotes are not supported for recurring sessions." },
            { "name": "status",
              "type": "string",
              "doc": "Session status.\n<!--ONLY:VELO-->\n One of:\n - `\"CONFIRMED\"` Default value.\n - `\"CANCELLED\"` The session was deleted.\n<!--END:ONLY:VELO-->" },
            { "name": "recurringSessionId",
              "type": "string",
              "doc": "ID of the recurring session if this session is an instance of a recurrence. Use this ID to update the recurrence and all of the instances.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "Session type.\n<!--ONLY:VELO-->\n One of:\n - `\"EVENT\"` Reserved period of time on the schedule. For example, an appointment, class, course, or blocked time. Events are visible in the Dashboard in the Bookings app's [Booking Calendar](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.\n - `\"WORKING_HOURS\"` Placeholder for available time on a resource’s schedule.\n<!--END:ONLY:VELO-->" },
            { "name": "recurrence",
              "type": "string",
              "doc": "String representing a recurrence rule (RRULE) for a recurring session, as defined in [iCalendar RFC 5545](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html).\nIf the session is an instance of a recurrence pattern, the `instanceOfRecurrence` property will contain the recurrence rule and this property will be empty.\nThe RRULE defines a rule for repeating a session.\nSupported parameters are:\n\n|Keyword|Description|Supported values|\n|--|--|---|\n|`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|\n|`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|\n|`UNTIL`|The UTC end date and time of the recurrence. Optional.|\n|`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|\n\n\n For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:\n`\"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z\"`\n\n <!--ORIGINAL COMMENTS:\n  `FREQ` — The frequency with which the session should be repeated (such as DAILY or WEEKLY).  \n Supported `WEEKLY` value is supported.\n  INTERVAL — Works together with FREQ to specify how often the session should be repeated. For example, FREQ=WEEKLY;INTERVAL=2 means once every two weeks. Optional. Default value is 1.\n  COUNT — The number of times this event should be repeated. Not yet supported.\n  UNTIL — The UTC date & time until which the session should be repeated. This parameter is optional. When it is not specified, the event repeats forever.\n          The format is a short ISO date, followed by 'T' and a short time with seconds and without milliseconds, terminated by the UTC designator 'Z'. For example, until Jan. 19th 2018 at 7:00 AM: 'UNTIL=20180119T070000Z'.\n  BYDAY - The days of the week when the event should be repeated. Currently, only a single day is supported. This parameter is mandatory.\n       Possible values are: MO, TU, WE, TH, FR, SA, SU\n       Note that DTSTART and DTEND lines are not allowed in this field; session start and end times are specified in the start and end fields.\n       **Example**: FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20200427T070000Z\nORIGINAL COMMENTS-->",
              "optional": true },
            { "name": "instanceOfRecurrence",
              "type": "string",
              "doc": "String representing a recurrence rule (RRULE) if the session is an instance of a recurrence pattern.\nEmpty when the session is not an instance of a recurrence rule, or if the session defines a recurrence pattern, and `recurrence` is not empty.",
              "optional": true },
            { "name": "start",
              "type": "wix-bookings-backend.CalendarDateTime",
              "doc": "An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`." },
            { "name": "end",
              "type": "wix-bookings-backend.CalendarDateTime",
              "doc": "An object specifying the end date and time of the session. If the session is a recurring session, `end` must contain a `localDateTime`." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "SessionInfo",
        "locations":
          [ { "lineno": 162,
              "filename": "allTypeDefs.js" } ],
        "docs":
          { "summary": "Session.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "scheduleId",
              "type": "string",
              "doc": "ID of the schedule that the session belongs to." },
            { "name": "start",
              "type": "wix-bookings-backend.CalendarDateTimeInfo",
              "doc": "An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`." },
            { "name": "end",
              "type": "wix-bookings-backend.CalendarDateTimeInfo",
              "doc": "An object specifying the end date and time of the session. If the session is a recurring session, `end` must contain a `localDateTime`." },
            { "name": "tags",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Tags for the session.\nThe value is inherited from the schedule and can be overridden unless the session is a recurring session.",
              "optional": true },
            { "name": "notes",
              "type": "string",
              "doc": "Additional information about the session.\nNotes are not supported for recurring sessions.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "Session type.\n<!--ONLY:VELO-->\n One of:\n - `\"EVENT\"` Reserved period of time on the schedule. For example, an appointment, class, course, or blocked time. Events are visible in the Dashboard in the Bookings app's [Booking Calendar](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.\n - `\"WORKING_HOURS\"` Placeholder for available time on a resource’s schedule.\n<!--END:ONLY:VELO-->",
              "optional": true },
            { "name": "recurrence",
              "type": "string",
              "doc": "String representing a recurrence rule (RRULE) for a recurring session, as defined in [iCalendar RFC 5545](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html).\nIf the session is an instance of a recurrence pattern, the `instanceOfRecurrence` property will contain the recurrence rule and this property will be empty.\nThe RRULE defines a rule for repeating a session.\nSupported parameters are:\n\n|Keyword|Description|Supported values|\n|--|--|---|\n|`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|\n|`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|\n|`UNTIL`|The UTC end date and time of the recurrence. Optional.|\n|`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|\n\n\n For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:\n`\"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z\"`\n\n <!--ORIGINAL COMMENTS:\n  `FREQ` — The frequency with which the session should be repeated (such as DAILY or WEEKLY).  \n Supported `WEEKLY` value is supported.\n  INTERVAL — Works together with FREQ to specify how often the session should be repeated. For example, FREQ=WEEKLY;INTERVAL=2 means once every two weeks. Optional. Default value is 1.\n  COUNT — The number of times this event should be repeated. Not yet supported.\n  UNTIL — The UTC date & time until which the session should be repeated. This parameter is optional. When it is not specified, the event repeats forever.\n          The format is a short ISO date, followed by 'T' and a short time with seconds and without milliseconds, terminated by the UTC designator 'Z'. For example, until Jan. 19th 2018 at 7:00 AM: 'UNTIL=20180119T070000Z'.\n  BYDAY - The days of the week when the event should be repeated. Currently, only a single day is supported. This parameter is mandatory.\n       Possible values are: MO, TU, WE, TH, FR, SA, SU\n       Note that DTSTART and DTEND lines are not allowed in this field; session start and end times are specified in the start and end fields.\n       **Example**: FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20200427T070000Z\nORIGINAL COMMENTS-->",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "UpdateSessionInfo",
        "locations":
          [ { "lineno": 273,
              "filename": "allTypeDefs.js" } ],
        "docs":
          { "summary": "Session.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "start",
              "type": "wix-bookings-backend.CalendarDateTimeInfo",
              "doc": "An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.",
              "optional": true },
            { "name": "end",
              "type": "wix-bookings-backend.CalendarDateTimeInfo",
              "doc": "An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.",
              "optional": true },
            { "name": "tags",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "Tags for the session.\nThe value is inherited from the schedule and can be overridden unless the session is a recurring session.",
              "optional": true },
            { "name": "notes",
              "type": "string",
              "doc": "Additional information about the session.\nNotes are not supported for recurring sessions.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "Session type.\n<!--ONLY:VELO-->\n One of:\n - `\"EVENT\"` Reserved period of time on the schedule. For example, an appointment, class, course, or blocked time. Events are visible in the Dashboard in the Bookings app's [Booking Calendar](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.\n - `\"WORKING_HOURS\"` Placeholder for available time on a resource’s schedule.\n<!--END:ONLY:VELO-->",
              "optional": true },
            { "name": "recurrence",
              "type": "string",
              "doc": "String representing a recurrence rule (RRULE) for a recurring session, as defined in [iCalendar RFC 5545](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html).\nIf the session is an instance of a recurrence pattern, the `instanceOfRecurrence` property will contain the recurrence rule and this property will be empty.\nThe RRULE defines a rule for repeating a session.\nSupported parameters are:\n\n|Keyword|Description|Supported values|\n|--|--|---|\n|`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|\n|`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|\n|`UNTIL`|The UTC end date and time of the recurrence. Optional.|\n|`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|\n\n\n For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:\n`\"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z\"`\n\n <!--ORIGINAL COMMENTS:\n  `FREQ` — The frequency with which the session should be repeated (such as DAILY or WEEKLY).  \n Supported `WEEKLY` value is supported.\n  INTERVAL — Works together with FREQ to specify how often the session should be repeated. For example, FREQ=WEEKLY;INTERVAL=2 means once every two weeks. Optional. Default value is 1.\n  COUNT — The number of times this event should be repeated. Not yet supported.\n  UNTIL — The UTC date & time until which the session should be repeated. This parameter is optional. When it is not specified, the event repeats forever.\n          The format is a short ISO date, followed by 'T' and a short time with seconds and without milliseconds, terminated by the UTC designator 'Z'. For example, until Jan. 19th 2018 at 7:00 AM: 'UNTIL=20180119T070000Z'.\n  BYDAY - The days of the week when the event should be repeated. Currently, only a single day is supported. This parameter is mandatory.\n       Possible values are: MO, TU, WE, TH, FR, SA, SU\n       Note that DTSTART and DTEND lines are not allowed in this field; session start and end times are specified in the start and end fields.\n       **Example**: FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20200427T070000Z\nORIGINAL COMMENTS-->",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }