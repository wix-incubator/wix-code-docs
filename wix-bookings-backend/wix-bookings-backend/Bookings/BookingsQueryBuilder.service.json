{ "name": "BookingsQueryBuilder",
  "memberOf": "wix-bookings-backend.Bookings",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "WixBookingsQueryBuilder.js" },
  "docs":
    { "summary": "Contains functionality for refining a Bookings query.",
      "description":
        [ "The `BookingsQueryBuilder` functions enable you to run, sort, filter, and control",
          " which results a query returns.",
          "",
          " Typically, you build a query using the Bookings query function,",
          " refine the query by chaining `BookingsQueryBuilder` functions, and then execute the",
          " query by chaining the [`find()`](wix-bookings-backend.Bookings/bookingsquerybuilder/find) function.",
          "",
          "> **Note:** Only users with **[Bookings Admin](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin)** permissions can retrieve other customers' bookings. You can override the permissions by setting the `suppressAuth` options to `true` in the [`find()`](wix-bookings-backend.Bookings/bookingsquerybuilder/find) function..",
          "",
          " For example, the following code queries all bookings of the customer with the",
          " specified contact ID, and logs the first 5 results to the console, sorted in",
          " ascending order by the sessions' start times:",
          "",
          " ```javascript",
          " import { bookings } from 'wix-bookings-backend';",
          "",
          " bookings.queryBookings",
          "   .eq(\"contactId\", \"2cb1846f-0c7a-4c39-8736-349236cfab40\")",
          "   .ascending(\"startTime\")",
          "   .limit(5)",
          "   .find()",
          "   .then( (results) => {",
          "     console.log(results.items);",
          "   } );",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `startTime`\n+ `_createdDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 231,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `BookingsQueryBuilder` to sort in ascending order of",
                " the specified properties. If you specify more than one property,",
                " `ascending()` sorts the results in ascending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to a query",
                  "body":
                    [ "let query = bookings.queryBookings().ascending(\"startTime\", \"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ascending sort, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .ascending(\"startTime\", \"_createdDate\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `startTime`\n+ `_createdDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 261,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `BookingsQueryBuilder` to sort in descending order of",
                " the specified properties. If you specify more than one property,",
                " `descending()` sorts the results in descending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add a descending sort to a query",
                  "body":
                    [ "let query = bookings.queryBookings().descending(\"startTime\", \"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a descending sort, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .descending(\"startTime\", \"_createdDate\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_id`\n+ `contactId`\n+ `sessionId`\n+ `status`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 50,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `BookingsQueryBuilder` to only",
                " match items where the value of the specified property equals the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "let query = bookings.queryBookings().eq(\"status\", \"CANCELED\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .eq(\"status\", \"CANCELED\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder.QueryOptions",
              "doc": "Options to use when performing a query.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings-backend.Bookings.BookingsQueryResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the query.\nRejected - Error that caused the query to fail." },
        "locations":
          [ { "lineno": 330,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Returns the bookings that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                " by the query and some information about the results. The Promise is",
                " rejected if `find()` is called with incorrect permissions or if any of the",
                " functions used to refine the query are invalid.",
                "",
                " > **Note:** Only users with **[Bookings Admin](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin)** permissions can retrieve other customers' bookings. You can override the permissions by setting the `suppressAuth` options to `true`." ],
            "links": [],
            "examples":
              [ { "title": "Perform a find on a query",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Perform a find on a query using options",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "const options = {",
                      "  \"suppressAuth\": true",
                      "};",
                      "",
                      "bookings.queryBookings()",
                      "  .find(options)",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `startTime`\n+ `_createdDate`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 76,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `BookingsQueryBuilder` to only",
                " match items where the value of the specified property is greater than or",
                " equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),",
                "   but `\"ABC\"` is not greater than or equal to `\"abc\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a query",
                  "body":
                    [ "let query = bookings.queryBookings().ge(\"startTime\", \"2020-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .ge(\"startTime\", \"2020-04-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `endTime`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 111,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `BookingsQueryBuilder` to only match",
                " items where the value of the specified property is greater than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than filter to a query",
                  "body":
                    [ "let query=bookings.queryBookings().gt(\"endTime\",\"2021-04-27T10:00:00.000Z\")" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .gt(\"endTime\", \"2021-04-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose values will be compared with `value`.\n\nSupported properties:\n+ `sessionId`\n+ `status`" },
            { "name": "value",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 209,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property contains any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `BookingsQueryBuilder` to only match items where the value of the specified property equals any of the specified values in the array.",
                "",
                " Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                "You can specify a list of values to match by providing comma-separated String types as the `value` parameters. You can also specify a list of these values by including them in an array and providing the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a hasSome filter to a query",
                  "body":
                    [ "let query = bookings.queryBookings().hasSome(\"status\", [\"PENDING_CHECKOUT\", \"PENDING\", \"PENDING_APPROVAL\"]);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a hasSome filter, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .hasSome(\"status\", [\"PENDING_CHECKOUT\", \"PENDING\", \"PENDING_APPROVAL\"])",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `endTime`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 143,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `BookingsQueryBuilder`to only match",
                " items where the value of the specified property is less than or equal to the",
                " specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),",
                "   but `\"abc\"` is not less than or equal to `\"ABC\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a query",
                  "body":
                    [ "let query = bookings.queryBookings().le(\"endTime\", \"2021-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .le(\"endTime\", \"2021-04-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "The number of items to return, which is also the [`pageSize`](wix-bookings-backend.Bookings/bookingsqueryresult/pageSize) of the results object." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 291,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                " page. Only one page of results is retrieved at a time. The [`next()`](wix-bookings-backend.Bookings/bookingsqueryresult/next)",
                " and [`prev()`](wix-bookings-backend.Bookings/bookingsqueryresult/prev) functions are used to",
                " navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to a query",
                  "body":
                    [ "let query = bookings.queryBookings().limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a limit, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .limit(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `startTime`\n+ `_createdDate`" },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 178,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `BookingsQueryBuilder` to only match",
                " items where the value of the specified property is less than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a query",
                  "body":
                    [ "let query = bookings.queryBookings().lt(\"startTime\", \"2021-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .lt(\"startTime\", \"2021-04-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-bookings-backend.Bookings.BookingsQueryBuilder",
            "doc": "A `BookingsQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 311,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the query",
                " results before returning new query results.",
                "",
                " For example, if you query a collection and 50 items match your query, but",
                " you set `skip` to 10, the results returned will skip the first 10 items",
                " that match and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "let query = bookings.queryBookings().skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import { bookings } from \"wix-bookings-backend\";",
                      "",
                      "// ...",
                      "",
                      "bookings.queryBookings()",
                      "  .skip(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "QueryOptions",
        "locations":
          [ { "lineno": 34,
              "filename": "WixBookingsQueryBuilder.js" } ],
        "docs":
          { "summary": "Options to use when performing a query.",
            "description":
              [ "The `options` parameter is an optional parameter that can be used when",
                " calling the query [`find()`](wix-bookings-backend.Bookings/bookingsquerybuilder/find) functions. To use `options`, pass it a `QueryOptions`",
                " object with the following key:value pair:",
                "",
                " + `\"suppressAuth\"`: `true`/`false`" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "suppressAuth",
              "type": "boolean",
              "doc": "Prevents permission checks from running for the `find()` operation. Defaults to `false`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }