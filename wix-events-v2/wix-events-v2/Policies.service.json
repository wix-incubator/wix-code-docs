{
  "name": "Policies",
  "memberOf": "wix-events-v2",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-events.v2-policy",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "createPolicy",
      "params": [
        {
          "name": "policy",
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Policy"
            }
          ],
          "doc": "Policy info.",
          "required": true
        }
      ],
      "requiredFields": [
        "policy",
        "policy.body",
        "policy.eventId",
        "policy.name"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Policies.Policy"
                }
              ]
            }
          }
        ],
        "doc": "Created policy.\n"
      },
      "docs": {
        "summary": "Creates a policy.",
        "description": [
          ">  Note: This function is restricted and only runs if you elevate permissions using the [wix-auth.elevate()](https://www.wix.com/velo/reference/wix-auth/elevate) function.\n\nThe `createPolicy()` function returns a Promise that resolves to the newly-created policy.\n\nYou can create up to 3 policies per event. If you try to create more than 3, you'll get the \"Maximum number of policies for the event has been reached\" error."
        ],
        "examples": [
          {
            "title": "Create Policy ",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "import * as wixAuth from 'wix-auth';",
              "",
              "//define policy object",
              "const policy = {",
              "  body: \"Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.\",",
              "  eventId: \"9d720f99-1b5a-4141-9877-d32985391e18\",",
              "  name: \"Terms and Conditions Event 1\"",
              "}",
              "",
              "//create policy",
              "async function elevatedCreatePolicyFunction(){",
              "  const elevatedPolicy = wixAuth.elevate(policies.createPolicy);",
              "   try {",
              "     const result = await elevatedPolicy(policy);",
              "     return result;",
              "   } catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "     }",
              " }",
              "",
              "/* Returns a promise that resolves to",
              "   the created policy.",
              "{",
              "  \"_id\": \"0907cf78-5177-4482-a627-b17ef06badec\",",
              "  \"revision\": \"1\",",
              "  \"_createdDate\": \"2023-03-07T12:48:25.917Z\",",
              "  \"_updatedDate\": \"2023-03-07T12:48:25.917Z\",",
              "  \"name\": \"Terms and Conditions Event 1\",",
              "  \"body\": \"Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.\",",
              "  \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"",
              "}",
              "*/"
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "deletePolicy",
      "params": [
        {
          "name": "policyId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the policy to delete.\n",
          "required": true
        }
      ],
      "requiredFields": [
        "policyId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "nativeType": "void"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Permanently deletes a policy.",
        "description": [
          "> Note: This function is restricted and only runs if you elevate permissions using the [wix-auth.elevate()](https://www.wix.com/velo/reference/wix-auth/elevate) function.\n\nThe `deletePolicy()` function returns a Promise that resolves when the specified policy is deleted.\n\nDeleted policies are not returned by the `getPolicy()` or `queryPolicies()` functions."
        ],
        "examples": [
          {
            "title": "Delete Policy ",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "import * as wixAuth from 'wix-auth';",
              "",
              "//define policy ID",
              "const policyId = \"0907cf78-5177-4482-a627-b17ef06badec\"",
              "",
              "//delete policy",
              "async function elevatedDeletePolicyFunction(){",
              "  const elevatedPolicy = wixAuth.elevate(policies.deletePolicy);",
              "   try {",
              "     const result = await elevatedPolicy(policyId);",
              "     return result;",
              "   } ",
              "   catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "     }",
              " }",
              "",
              "// Returns void"
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "getPolicy",
      "params": [
        {
          "name": "policyId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy ID.",
          "required": true
        }
      ],
      "requiredFields": [
        "policyId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Policies.Policy"
                }
              ]
            }
          }
        ],
        "doc": "The requested policy.\n"
      },
      "docs": {
        "summary": "Retrieves a policy by ID.",
        "description": [
          "The `getPolicy()` function returns a Promise that resolves to a policy whose ID matches the given ID."
        ],
        "examples": [
          {
            "title": "Get Policy ",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "// define policy ID",
              "const policyId = \"6933ddf1-26c7-46c3-9924-e78c833d6cca\"",
              "",
              "// get policy",
              "async function getPolicy() {",
              "   try {",
              "     const result = await policies.getPolicy(policyId);",
              "     return result;",
              "   } ",
              "    catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "   }",
              " }",
              "",
              "/* Returns a promise that resolves to",
              "   the policy.",
              "{",
              "  \"_id\": \"6933ddf1-26c7-46c3-9924-e78c833d6cca\",",
              "  \"revision\": \"1\",",
              "  \"_createdDate\": \"2023-03-07T13:18:09.185Z\",",
              "  \"_updatedDate\": \"2023-03-07T13:18:09.185Z\",",
              "  \"name\": \"Terms and Conditions Event 2\",",
              "  \"body\": \"<p>Nobody will be allowed admission to the Event without a valid ticket or pass.</p>\",",
              "  \"eventId\": \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "}",
              "*/"
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "queryPolicies",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Retrieves a list of policies, given the provided paging and filter.  ",
        "description": [
          "",
          "",
          "The `queryPolicies()` function builds a query to retrieve a list of policies and returns a [PoliciesQueryBuilder](https://www.wix.com/velo/reference/wix-events-v2/policies/policiesquerybuilder) object.",
          "",
          "The returned object contains the query definition which is typically used to run the query using the `find()` function.",
          "",
          "You can refine the query by chaining `PoliciesQueryBuilder` functions onto the query. `PoliciesQueryBuilder` functions enable you to sort, filter and control the results that `queryPolicies.find()` returns.",
          "",
          "The query runs with the following `PoliciesQueryBuilder` defaults that you can override:",
          "",
          "[`limit`](https://www.wix.com/velo/reference/wix-events-v2/policies/policiesquerybuilder/limit): `50`  ",
          "[`descending`](https://www.wix.com/velo/reference/wix-events-v2/policies/policiesquerybuilder/descending): `_createdDate`",
          "",
          "The functions that are chained to `queryPolicies()` are applied in the order they are called. For example, if you sort on the `_createdDate` property in ascending order and then on the id property in descending order, the results are sorted by the created date and then, if there are multiple results with the same date, the items are sorted by the id.",
          "",
          "The following `PoliciesQueryBuilder` functions are supported for `queryPolicies()`.",
          "",
          "The table below shows which `PoliciesQueryBuilder` functions are supported for `queryPoliciesGuests()`. You can only use one filter function for each property. If a property is used in more than one filter, only the first filter will work.",
          "|PROPERTY\t|SUPPORTED FILTERS & SORTING\t",
          "|:---:|:---:|",
          "|`id`|[`eq()`](wix-events.v2.Policies.PolicysQueryBuilder#eq),[`ne()`](wix-events.v2.Policies.PolicysQueryBuilder#ne),[`in()`](wix-events.v2.Policies.PolicysQueryBuilder#in),[`exists()`](wix-events.v2.Policies.PolicysQueryBuilder#exists),[`ascending()`](wix-events.v2.Policies.PolicysQueryBuilder#ascending),[`descending()`](wix-events.v2.Policies.PolicysQueryBuilder#descending)|",
          "|`revision`|[`eq()`](wix-events.v2.Policies.PolicysQueryBuilder#eq),[`ne()`](wix-events.v2.Policies.PolicysQueryBuilder#ne),[`in()`](wix-events.v2.Policies.PolicysQueryBuilder#in),[`lt()`](wix-events.v2.Policies.PolicysQueryBuilder#lt),[`le()`](wix-events.v2.Policies.PolicysQueryBuilder#le),[`gt()`](wix-events.v2.Policies.PolicysQueryBuilder#gt),[`ge()`](wix-events.v2.Policies.PolicysQueryBuilder#ge),[`exists()`](wix-events.v2.Policies.PolicysQueryBuilder#exists),[`ascending()`](wix-events.v2.Policies.PolicysQueryBuilder#ascending),[`descending()`](wix-events.v2.Policies.PolicysQueryBuilder#descending)|",
          "|`createdDate`|[`eq()`](wix-events.v2.Policies.PolicysQueryBuilder#eq),[`ne()`](wix-events.v2.Policies.PolicysQueryBuilder#ne),[`in()`](wix-events.v2.Policies.PolicysQueryBuilder#in),[`lt()`](wix-events.v2.Policies.PolicysQueryBuilder#lt),[`le()`](wix-events.v2.Policies.PolicysQueryBuilder#le),[`gt()`](wix-events.v2.Policies.PolicysQueryBuilder#gt),[`exists()`](wix-events.v2.Policies.PolicysQueryBuilder#exists),[`ascending()`](wix-events.v2.Policies.PolicysQueryBuilder#ascending),[`descending()`](wix-events.v2.Policies.PolicysQueryBuilder#descending)|",
          "|`updatedDate`|[`eq()`](wix-events.v2.Policies.PolicysQueryBuilder#eq),[`ne()`](wix-events.v2.Policies.PolicysQueryBuilder#ne),[`in()`](wix-events.v2.Policies.PolicysQueryBuilder#in),[`lt()`](wix-events.v2.Policies.PolicysQueryBuilder#lt),[`le()`](wix-events.v2.Policies.PolicysQueryBuilder#le),[`gt()`](wix-events.v2.Policies.PolicysQueryBuilder#gt),[`exists()`](wix-events.v2.Policies.PolicysQueryBuilder#exists),[`ascending()`](wix-events.v2.Policies.PolicysQueryBuilder#ascending),[`descending()`](wix-events.v2.Policies.PolicysQueryBuilder#descending)|",
          "|`name`|[`eq()`](wix-events.v2.Policies.PolicysQueryBuilder#eq),[`ne()`](wix-events.v2.Policies.PolicysQueryBuilder#ne),[`in()`](wix-events.v2.Policies.PolicysQueryBuilder#in),[`exists()`](wix-events.v2.Policies.PolicysQueryBuilder#exists),[`ascending()`](wix-events.v2.Policies.PolicysQueryBuilder#ascending),[`descending()`](wix-events.v2.Policies.PolicysQueryBuilder#descending)|",
          "|`body`|[`eq()`](wix-events.v2.Policies.PolicysQueryBuilder#eq),[`ne()`](wix-events.v2.Policies.PolicysQueryBuilder#ne),[`in()`](wix-events.v2.Policies.PolicysQueryBuilder#in),[`exists()`](wix-events.v2.Policies.PolicysQueryBuilder#exists),[`ascending()`](wix-events.v2.Policies.PolicysQueryBuilder#ascending),[`descending()`](wix-events.v2.Policies.PolicysQueryBuilder#descending)|",
          "|`eventId`|[`eq()`](wix-events.v2.Policies.PolicysQueryBuilder#eq),[`ne()`](wix-events.v2.Policies.PolicysQueryBuilder#ne),[`in()`](wix-events.v2.Policies.PolicysQueryBuilder#in),[`exists()`](wix-events.v2.Policies.PolicysQueryBuilder#exists),[`ascending()`](wix-events.v2.Policies.PolicysQueryBuilder#ascending),[`descending()`](wix-events.v2.Policies.PolicysQueryBuilder#descending)|"
        ],
        "examples": [
          {
            "title": "Query Policies by eventId and sort by _createdDate in descending order ",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "//query policies",
              "async function queryPolicies() {",
              "   try {",
              "    const items = await policies.queryPolicies()",
              "    .eq(\"eventId\", \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\")",
              "    .ascending(\"_createdDate\")",
              "    .find();",
              "    return items;",
              "  }",
              "  catch (error) {",
              "    console.error(error);",
              "    // Handle the error",
              "   } ",
              " }",
              "",
              "/* Returns all found policies",
              "{",
              "  \"_items\": [",
              "    {",
              "      \"_id\": \"6933ddf1-26c7-46c3-9924-e78c833d6cca\",",
              "      \"revision\": \"1\",",
              "      \"_createdDate\": \"2023-03-07T13:18:09.185Z\",",
              "      \"_updatedDate\": \"2023-03-07T13:18:09.185Z\",",
              "      \"name\": \"Terms and Conditions Event 2\",",
              "      \"body\": \"<p><code>Nobody will be allowed admission to the Event without a valid ticket or pass.</code></p>\",",
              "      \"eventId\": \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "    }",
              "  ],",
              "  \"_originQuery\": {",
              "    \"filterTree\": {",
              "      \"$and\": [",
              "        {",
              "          \"eventId\": \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "        }",
              "      ]",
              "    },",
              "    \"invalidArguments\": [],",
              "    \"encoder\": {},",
              "    \"transformationPaths\": {},",
              "    \"sort\": [",
              "      {",
              "        \"fieldName\": \"createdDate\",",
              "        \"order\": \"ASC\"",
              "      }",
              "    ],",
              "    \"paging\": {},",
              "    \"pagingMethod\": \"CURSOR\",",
              "    \"builderOptions\": {",
              "      \"cursorWithEmptyFilterAndSort\": true",
              "    }",
              "  },",
              "  \"_limit\": 50,",
              "  \"_nextCursor\": \"\",",
              "  \"_prevCursor\": \"\",",
              "  \"cursors\": {",
              "    \"next\": \"\",",
              "    \"prev\": \"\"",
              "  }",
              "}",
              "*/"
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "reorderEventPolicies",
      "params": [
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID.",
          "required": true
        },
        {
          "name": "options",
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.ReorderEventPoliciesOptions"
            }
          ],
          "doc": "Options for Reorder Event Policies function.\n",
          "required": true
        }
      ],
      "requiredFields": [
        "eventId",
        "options",
        "options.policyId"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Policies.ReorderEventPoliciesResponse"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Changes policy order in an event dashboard and agreement checkbox on the checkout form.",
        "description": [
          ">  Note: This function is restricted and only runs if you elevate permissions using the [wix-auth.elevate()](https://www.wix.com/velo/reference/wix-auth/elevate) function.\n\nThe `reorderEventPolicies()` function returns a Promise that resolves to the newly-reordered policy."
        ],
        "examples": [
          {
            "title": "Reorder Policies ",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "// define event ID and policies to reorder",
              "const eventId = \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "const options = {",
              "  policyId: \"52f15c5c-ea06-44f4-866a-b1cfa6f4f790\",",
              "  beforePolicyId: \"6933ddf1-26c7-46c3-9924-e78c833d6cca\"",
              "}",
              "",
              "// reorder policies",
              "async function elevatedReorderPoliciesFunction(){",
              "  const elevatedPolicy = wixAuth.elevate(policies.reorderEventPolicies);",
              "   try {",
              "     const result = await elevatedPolicy(eventId, options);",
              "     return result;",
              "   } ",
              "   catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "     }",
              " }",
              "",
              "/* Returns a promise that resolves to",
              " the reordered policies.",
              "{",
              "  \"policies\": [",
              "    {",
              "      \"_id\": \"52f15c5c-ea06-44f4-866a-b1cfa6f4f790\",",
              "      \"revision\": \"2\",",
              "      \"_createdDate\": \"2023-03-07T14:15:44.312Z\",",
              "      \"_updatedDate\": \"2023-03-07T14:33:00.876Z\",",
              "      \"name\": \"Terms and Conditions Event 1\",",
              "      \"body\": \"<p><code>Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.</code></p>\",",
              "      \"eventId\": \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "    },",
              "    {",
              "      \"_id\": \"6933ddf1-26c7-46c3-9924-e78c833d6cca\",",
              "      \"revision\": \"2\",",
              "      \"_createdDate\": \"2023-03-07T13:18:09.185Z\",",
              "      \"_updatedDate\": \"2023-03-07T14:33:01.072Z\",",
              "      \"name\": \"Terms and Conditions Event 2\",",
              "      \"body\": \"<p><code>Nobody will be allowed admission to the Event without a valid ticket or pass.</code></p>\",",
              "      \"eventId\": \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "    },",
              "    {",
              "      \"_id\": \"b9d5f876-f961-497a-9f30-9edae95d8f87\",",
              "      \"revision\": \"1\",",
              "      \"_createdDate\": \"2023-03-07T14:16:25.452Z\",",
              "      \"_updatedDate\": \"2023-03-07T14:16:25.452Z\",",
              "      \"name\": \"Terms and Conditions Event 3\",",
              "      \"body\": \"<p><code>All tickets or passes should be checked on purchase, as mistakes cannot always be rectified.</code></p>\",",
              "      \"eventId\": \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "    }",
              "  ]",
              "}",
              "*/"
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "updatePolicy",
      "params": [
        {
          "name": "_id",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy ID.",
          "required": true
        },
        {
          "name": "policy",
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.UpdatePolicy"
            }
          ],
          "doc": "Policy to update.",
          "required": true
        }
      ],
      "requiredFields": [
        "_id",
        "policy",
        "policy.body",
        "policy.eventId",
        "policy.name",
        "policy.revision"
      ],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Policies.Policy"
                }
              ]
            }
          }
        ],
        "doc": "The updated policy.\n"
      },
      "docs": {
        "summary": "Updates a policy.",
        "description": [
          "> Note: This function is restricted and only runs if you elevate permissions using the [wix-auth.elevate()](https://www.wix.com/velo/reference/wix-auth/elevate) function.\n\nThe `updatePolicy()` function returns a Promise that resolves to the newly-updated policy.\n\nEach time the policy is updated, `revision` increments by 1. The existing `revision` must be included when updating the policy. This ensures you're working with the latest policy and prevents unintended overwrites."
        ],
        "examples": [
          {
            "title": "Update Policy ",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "// define policy ID and policy object to update",
              "const id = \"52f15c5c-ea06-44f4-866a-b1cfa6f4f790\";",
              "const policy = {",
              "   name: \"Terms and Conditions Event 1\",",
              "   body: \"If the Event is rescheduled, changed, moved or cancelled the Organiser cannot be held responsible for any resulting costs you may incur for travel, accommodation and other related goods, services or compensation.\",",
              "   revision: \"2\",",
              "   eventId: \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              " }",
              "",
              "// update policy",
              "async function elevatedUpdatePolicyFunction(){",
              "  const elevatedPolicy = wixAuth.elevate(policies.updatePolicy);",
              "   try {",
              "     const result = await elevatedPolicy(id, policy);",
              "     return result;",
              "   } ",
              "   catch (error) {",
              "     console.error(error);",
              "     // Handle the error",
              "     }",
              " }",
              "",
              "/* Returns a promise that resolves to",
              "   the updated policy.",
              "{",
              "  \"_id\": \"52f15c5c-ea06-44f4-866a-b1cfa6f4f790\",",
              "  \"revision\": \"3\",",
              "  \"_createdDate\": \"2023-03-07T14:15:44.312Z\",",
              "  \"_updatedDate\": \"2023-03-07T14:51:52.994Z\",",
              "  \"name\": \"Terms and Conditions Event 1\",",
              "  \"body\": \"If the Event is rescheduled, changed, moved or cancelled the Organiser cannot be held responsible for any resulting costs you may incur for travel, accommodation and other related goods, services or compensation.\",",
              "  \"eventId\": \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"",
              "}",
              "*/"
            ]
          }
        ]
      },
      "isVeloEvent": false
    }
  ],
  "messages": [
    {
      "name": "Address",
      "members": [
        {
          "name": "addressLine",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Main address line (usually street and number) as free text"
        },
        {
          "name": "addressLine1",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Main address line (usually street and number) as free text"
        },
        {
          "name": "addressLine2",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Free text providing more detailed address info. Usually contains Apt, Suite, Floor"
        },
        {
          "name": "city",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "city name"
        },
        {
          "name": "country",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "country code"
        },
        {
          "name": "postalCode",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "zip/postal code"
        },
        {
          "name": "streetAddress",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.StreetAddress"
            }
          ],
          "doc": "a break down of the street to number and street name"
        },
        {
          "name": "subdivision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "subdivision (usually state or region) code according to ISO 3166-2"
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfAddressStreetOneOf",
            "members": [
              "addressLine",
              "streetAddress"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          "Physical address"
        ]
      }
    },
    {
      "name": "AddressLocation",
      "members": [
        {
          "name": "latitude",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": ""
        },
        {
          "name": "longitude",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "AddressStreetOneOf",
      "members": [
        {
          "name": "addressLine",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Main address line (usually street and number) as free text"
        },
        {
          "name": "streetAddress",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.StreetAddress"
            }
          ],
          "doc": "a break down of the street to number and street name"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CommonCursorPaging",
      "members": [
        {
          "name": "cursor",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Pointer to the next or previous page in the list of results.\nYou can get the relevant cursor token\nfrom the `pagingMetadata` object in the previous call's response.\nNot relevant for the first request."
        },
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load per page."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CommonCursors",
      "members": [
        {
          "name": "next",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to next page in the list of results."
        },
        {
          "name": "prev",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Cursor pointing to previous page in the list of results."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CommonPaging",
      "members": [
        {
          "name": "limit",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to load per page."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to skip in the current sort order."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CommonPagingMetadataV2",
      "members": [
        {
          "name": "count",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items returned in the response."
        },
        {
          "name": "cursors",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.CommonCursors"
            }
          ],
          "doc": "Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used."
        },
        {
          "name": "offset",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Offset that was requested."
        },
        {
          "name": "tooManyToCount",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Flag that indicates the server failed to calculate the `total` field."
        },
        {
          "name": "total",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CommonQueryV2",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.CommonCursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        },
        {
          "name": "filter",
          "optional": true,
          "type": [
            {
              "nativeType": "Object"
            }
          ],
          "doc": "Filter object in the following format: <br/> `\"filter\" : { \"fieldName1\": \"value1\", \"fieldName2\":{\"$operator\":\"value2\"} }`. <br/> <br/> **Example:** <br/> `\"filter\" : { \"id\": \"2224a9d1-79e6-4549-a5c5-bf7ce5aac1a5\", \"revision\": {\"$ne\":\"1\"} }` <br/> <br/> See [supported fields and operators](https://dev.wix.com/api/rest/wix-events/policy-v2/filter-and-sort) for more information."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.CommonPaging"
            }
          ],
          "doc": "Pagination options."
        },
        {
          "name": "sort",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Policies.CommonSorting"
                  }
                ]
              }
            }
          ],
          "doc": "Sort object in the following format: <br/> `[{\"fieldName\":\"sortField1\"},{\"fieldName\":\"sortField2\",\"direction\":\"DESC\"}]` <br/> <br/> **Example:** <br/> `[{\"fieldName\":\"createdDate\",\"direction\":\"DESC\"}]` <br/> <br/> See [supported fields](https://dev.wix.com/api/rest/wix-events/policy-v2/filter-and-sort) for more information."
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfCommonQueryV2PagingMethodOneOf",
            "members": [
              "cursorPaging",
              "paging"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CommonQueryV2PagingMethodOneOf",
      "members": [
        {
          "name": "cursorPaging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.CommonCursorPaging"
            }
          ],
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`."
        },
        {
          "name": "paging",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.CommonPaging"
            }
          ],
          "doc": "Pagination options."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CommonSorting",
      "members": [
        {
          "name": "fieldName",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Name of the field to sort by."
        },
        {
          "name": "order",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Sort order (ASC/DESC). Defaults to ASC"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreatePolicyRequest",
      "members": [
        {
          "name": "policy",
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Policy"
            }
          ],
          "doc": "Policy info."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "CreatePolicyResponse",
      "members": [
        {
          "name": "policy",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Policy"
            }
          ],
          "doc": "Created policy."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeletePolicyRequest",
      "members": [
        {
          "name": "policyId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "ID of the policy to delete."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "DeletePolicyResponse",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Empty",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "EventCopied",
      "members": [
        {
          "name": "derivedFromEventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID. Indicates the original event which current event was derived from."
        },
        {
          "name": "derivedFromInstanceId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Instance ID. Indicates the original app instance which current event was derived from."
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID."
        },
        {
          "name": "location",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Location"
            }
          ],
          "doc": "Event location."
        },
        {
          "name": "scheduleConfig",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.ScheduleConfig"
            }
          ],
          "doc": "Event schedule configuration."
        },
        {
          "name": "status",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event status."
        },
        {
          "name": "ticketDefinitions",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Record",
                "typeParams": [
                  {
                    "nativeType": "string"
                  },
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Map of copied ticket definitions from original event.\nKey represents ticket def id in the original event.\nValue represents ticket def id in the newly created event."
        },
        {
          "name": "timestamp",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event created timestamp in ISO UTC format."
        },
        {
          "name": "title",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event title."
        },
        {
          "name": "userId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event creator user ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetPolicyRequest",
      "members": [
        {
          "name": "policyId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "GetPolicyResponse",
      "members": [
        {
          "name": "policy",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Policy"
            }
          ],
          "doc": "The requested policy."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Location",
      "members": [
        {
          "name": "address",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Single line address representation."
        },
        {
          "name": "coordinates",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.MapCoordinates"
            }
          ],
          "doc": "Location map coordinates."
        },
        {
          "name": "fullAddress",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Address"
            }
          ],
          "doc": "Full address derived from formatted single line `address`.\nWhen `full_address` is used to create or update the event, deprecated `address` and `coordinates` are ignored.\nIf provided `full_address` has empty `formatted_address` or `coordinates`, it will be auto-completed using Atlas service.\n\nMigration notes:\n- `full_address.formatted_address` is equivalent to `address`.\n- `full_address.geocode` is equivalent to `coordinates`.\n"
        },
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Location name."
        },
        {
          "name": "tbd",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Defines event location as TBD (To Be Determined).\nWhen event location is not yet defined, `name` is displayed instead of location address.\n`coordinates`, `address`, `type` and `full_address` are not required when location is TBD."
        },
        {
          "name": "type",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Location type."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "MapCoordinates",
      "members": [
        {
          "name": "lat",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Latitude."
        },
        {
          "name": "lng",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Longitude."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Occurrence",
      "members": [
        {
          "name": "endDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event end timestamp."
        },
        {
          "name": "showTimeZone",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether time zone is displayed in formatted schedule."
        },
        {
          "name": "startDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event start timestamp."
        },
        {
          "name": "timeZoneId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event time zone ID in TZ database format, e.g., `EST`, `America/Los_Angeles`."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Policy",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time when the policy was created in `yyyy-mm-ddThh:mm:sssZ` format."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy ID."
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time of the policy's latest update in `yyyy-mm-ddThh:mm:sssZ` format."
        },
        {
          "name": "body",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy body. Here you can enter various terms and conditions.\n\nMin: 1 character\n\nMax: 50000 characters\n"
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID to which the policy belongs."
        },
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy name.\n\nMin: 1 character\n\nMax: 40 characters\n"
        },
        {
          "name": "revision",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Revision number, which increments by 1 each time the policy is updated. To prevent conflicting changes, the existing revision must be used when updating a policy."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryPoliciesRequest",
      "members": [
        {
          "name": "query",
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.CommonQueryV2"
            }
          ],
          "doc": "Query options. See [API Query Langauge](https://dev.wix.com/api/rest/getting-started/api-query-language) for more details."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "QueryPoliciesResponse",
      "members": [
        {
          "name": "metadata",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.CommonPagingMetadataV2"
            }
          ],
          "doc": "Query result's metadata."
        },
        {
          "name": "policies",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Policies.Policy"
                  }
                ]
              }
            }
          ],
          "doc": "Event policies."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Recurrences",
      "members": [
        {
          "name": "categoryId",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Recurring event category ID."
        },
        {
          "name": "occurrences",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Policies.Occurrence"
                  }
                ]
              }
            }
          ],
          "doc": "Event occurrences."
        },
        {
          "name": "status",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Recurrence status."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderEventPoliciesOptions",
      "members": [
        {
          "name": "afterPolicyId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the given policyId after the referenced policy."
        },
        {
          "name": "beforePolicyId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the given policyId before the referenced policy."
        },
        {
          "name": "policyId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event policy ID."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderEventPoliciesRequest",
      "members": [
        {
          "name": "afterPolicyId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the given policyId after the referenced policy."
        },
        {
          "name": "beforePolicyId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the given policyId before the referenced policy."
        },
        {
          "name": "eventId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID."
        },
        {
          "name": "policyId",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event policy ID."
        }
      ],
      "extra": {
        "oneOfGroups": [
          {
            "name": "oneOfReorderEventPoliciesRequestReferencePolicyOneOf",
            "members": [
              "afterPolicyId",
              "beforePolicyId"
            ]
          }
        ]
      },
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderEventPoliciesRequestReferencePolicyOneOf",
      "members": [
        {
          "name": "afterPolicyId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Move the given policyId after the referenced policy."
        },
        {
          "name": "beforePolicyId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": ""
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ReorderEventPoliciesResponse",
      "members": [
        {
          "name": "policies",
          "optional": true,
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "referenceType": "wix-events-v2.Policies.Policy"
                  }
                ]
              }
            }
          ],
          "doc": "Ordered event policies."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "ScheduleConfig",
      "members": [
        {
          "name": "endDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event end timestamp."
        },
        {
          "name": "endDateHidden",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether end date is hidden in the formatted schedule."
        },
        {
          "name": "recurrences",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Recurrences"
            }
          ],
          "doc": "Event recurrences."
        },
        {
          "name": "scheduleTbd",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Defines event as TBD (To Be Determined) schedule.\nWhen event time is not yet defined, TBD message is displayed instead of event start and end times.\n`startDate`, `endDate` and `timeZoneId` are not required when schedule is TBD."
        },
        {
          "name": "scheduleTbdMessage",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "TBD message."
        },
        {
          "name": "showTimeZone",
          "optional": true,
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "Whether time zone is displayed in formatted schedule."
        },
        {
          "name": "startDate",
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Event start timestamp."
        },
        {
          "name": "timeZoneId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event time zone ID in TZ database format, e.g., `EST`, `America/Los_Angeles`."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "StreetAddress",
      "members": [
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "street name"
        },
        {
          "name": "number",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "street number"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "Subdivision",
      "members": [
        {
          "name": "code",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "subdivision short code"
        },
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "subdivision full-name"
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePolicy",
      "members": [
        {
          "name": "_createdDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date policy was created."
        },
        {
          "name": "_id",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy ID."
        },
        {
          "name": "_updatedDate",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "Date"
            }
          ],
          "doc": "Date and time of the policy's latest update in `yyyy-mm-ddThh:mm:sssZ` format."
        },
        {
          "name": "body",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy body. Here you can enter various terms and conditions.\n\nMin: 1 character\n\nMax: 50000 characters\n"
        },
        {
          "name": "eventId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Event ID to which the policy belongs."
        },
        {
          "name": "name",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy name.\n\nMin: 1 character\n\nMax: 40 characters\n"
        },
        {
          "name": "revision",
          "readOnly": true,
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Revision number, which increments by 1 each time the policy is updated. To prevent conflicting changes, the existing revision must be used when updating a policy."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePolicyOptions",
      "members": [],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePolicyRequest",
      "members": [
        {
          "name": "policy",
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Policy"
            }
          ],
          "doc": "Policy to update."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePolicyResponse",
      "members": [
        {
          "name": "policy",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Policy"
            }
          ],
          "doc": "The updated policy."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePolicySortIndexRequest",
      "members": [
        {
          "name": "policyId",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Policy's ID"
        },
        {
          "name": "revision",
          "optional": true,
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "The revision of the event policy."
        },
        {
          "name": "sortIndex",
          "optional": true,
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "The sort index of a policy to set."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    },
    {
      "name": "UpdatePolicySortIndexResponse",
      "members": [
        {
          "name": "policy",
          "optional": true,
          "type": [
            {
              "referenceType": "wix-events-v2.Policies.Policy"
            }
          ],
          "doc": "The updated event policy."
        }
      ],
      "docs": {
        "description": [
          ""
        ]
      }
    }
  ]
}
