{
  "name": "PoliciesQueryBuilder",
  "memberOf": "wix-events-v2.Policies",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-events.v2-policy.policies.policies-query-builder",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "ascending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
        "description": [
          "The `ascending()` function refines a `PolicysQueryBuilder` to sort by the value of `propertyName` in ascending order.",
          "You can specify multiple properties for sorting in ascending order by passing each property name as an additional argument. `ascending()` sorts the results in the order the properties are passed.",
          "You can sort the following types:",
          "- Number: Sorts numerically.",
          "- Date: Sorts by date and time.",
          "- String: Sorts lexicographically, so `'abc'` comes after `'XYZ'`.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is sorted alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest."
        ],
        "examples": [
          {
            "title": "Add an `ascending` sort to a query",
            "body": [
              "const query = policies.queryPolicies.ascending('_id');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `ascending` sort, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies().ascending('_id').find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "descending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in descending order.",
        "description": [
          "The `descending()` function refines a `PolicysQueryBuilder` to sort by the value of `propertyName` in descending order.",
          "You can specify multiple properties for sorting in descending order by passing each property name as an additional argument. `descending()` sorts the results in the order the properties are passed.",
          "You can sort the following types:",
          "- Number: Sorts numerically.",
          "- Date: Sorts by date and time.",
          "- String: Sorts lexicographically, so `'abc'` comes after `'XYZ'`.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is sorted alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest."
        ],
        "examples": [
          {
            "title": "Add a `descending` sort to a query",
            "body": [
              "const query = policies.queryPolicies.descending('_id');",
              ""
            ]
          },
          {
            "title": "Create a query, add a `descending` sort, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies().descending('_id').find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "eq",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.\n",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property equals the specified value.",
        "description": [
          "The `eq()` function refines a `PolicysQueryBuilder` to match only items where the value of the specified `propertyName` equals the specified `value`.",
          "`eq()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "Matching strings with `eq()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `eq` filter to a query",
            "body": [
              "const query = policies.queryPolicies.eq('_id', '\"some-id\"');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `eq` filter, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies().eq('_id', '\"some-id\"').find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "exists",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": []
      },
      "isVeloEvent": false
    },
    {
      "name": "find",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-events-v2.Policies.PoliciesQueryResult"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns the filtered query results.",
        "description": [
          "The `find()` function returns a Promise that resolves to the query results and metadata.",
          "The Promise is rejected if `find()` is called with insufficient permissions or if any of the previous functions used to refine the query are invalid."
        ],
        "examples": [
          {
            "title": "Run a query with no filters",
            "body": [
              "const query = policies.queryPolicies.find();",
              ""
            ]
          },
          {
            "title": "Perform a `find` on a query",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies().find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "ge",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.\n",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property is greater than or equal to the specified value.",
        "description": [
          "The `ge()` function refines a `PolicysQueryBuilder` to match only items where the value of the specified `propertyName` is greater than or equal to the specified `value`.",
          "`ge()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is compared alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest.",
          "The following types of properties can be compared:",
          "- Number: Compares numerically.",
          "- Date: Compares JavaScript Date objects. ",
          "- String: Compares lexicographically, so `'abc'` is greater than `'ABC'`."
        ],
        "examples": [
          {
            "title": "Add a `ge` filter to a query",
            "body": [
              "const query = policies.queryPolicies.ge('revision', '');",
              ""
            ]
          },
          {
            "title": "Create a query, add a `ge` filter, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies().ge('revision', '').find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "gt",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.\n",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property is greater than the specified value.",
        "description": [
          "The `gt()` function refines a `PolicysQueryBuilder` to match only items where the value of the specified `propertyName` is greater than the specified `value`.",
          "`gt()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is compared alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest.",
          "The following types of properties can be compared:",
          "- Number: Compares numerically.",
          "- Date: Compares JavaScript Date objects. ",
          "- String: Compares lexicographically, so `'abc'` is greater than `'ABC'`."
        ],
        "examples": [
          {
            "title": "Add a `gt` filter to a query",
            "body": [
              "const query = policies.queryPolicies.gt('_createdDate', '2021-03-01');",
              ""
            ]
          },
          {
            "title": "Create a query, add a `gt` filter, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies",
              "    .queryPolicies()",
              "    .gt('_createdDate', '2021-03-01')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "in",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": []
      },
      "isVeloEvent": false
    },
    {
      "name": "le",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.\n",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property is less than or equal to the specified value.",
        "description": [
          "The `le()` function refines a `PolicysQueryBuilder` to match only items where the value of the specified `propertyName` is less than or equal to the specified `value`.",
          "`le()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is compared alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest.",
          "The following types of properties can be compared:",
          "- Number: Compares numerically.",
          "- Date: Compares JavaScript Date objects. ",
          "- String: Compares lexicographically, so `'ABC'` is less than `'abc'`."
        ],
        "examples": [
          {
            "title": "Add an `le` filter to a query",
            "body": [
              "const query = policies.queryPolicies.le('_createdDate', '2021-03-01');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `le` filter, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies",
              "    .queryPolicies()",
              "    .le('_createdDate', '2021-03-01')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "limit",
      "params": [
        {
          "name": "limit",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to return, which is also the `pageSize` of the results object.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Limits the number of items the query returns.",
        "description": [
          "The `limit()` function defines the number of results a query returns in each page. Only one page of results is retrieved at a time.",
          "You can use the `next()` and `prev()` functions to navigate the pages of a query result."
        ],
        "examples": [
          {
            "title": "Add a `limit` to a query",
            "body": [
              "const query = policies.queryPolicies.limit(10);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `limit`, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies().limit(10).find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "lt",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.\n",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property is less than the specified value.",
        "description": [
          "The `le()` function refines a `PolicysQueryBuilder` to match only items where the value of the specified `propertyName` is less than the specified `value`.",
          "`le()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "If a property contains a number stored as a string (for example, `'0'`), that value is compared alphabetically and not numerically. If a property doesn't have a value, that value is ranked lowest.",
          "The following types of properties can be compared:",
          "- Number: Compares numerically.",
          "- Date: Compares JavaScript Date objects. ",
          "- String: Compares lexicographically, so `'ABC'` is less than `'abc'`."
        ],
        "examples": [
          {
            "title": "Add an `lt` filter to a query",
            "body": [
              "const query = policies.queryPolicies.lt('_createdDate', '2021-03-01');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `lt` filter, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies",
              "    .queryPolicies()",
              "    .lt('_createdDate', '2021-03-01')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "ne",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.\n",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property doesn't equal the specified value.",
        "description": [
          "The `ne()` function refines a `PolicysQueryBuilder` to match only items where the value of the specified `propertyName` doesn't equal the specified `value`.",
          "`ne()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "Matching strings with `ne()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `ne` filter to a query",
            "body": [
              "const query = policies.queryPolicies.ne('_id', '\"some-id\"');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `ne` filter, and run it",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies().ne('_id', '\"some-id\"').find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    },
    {
      "name": "skipTo",
      "params": [
        {
          "name": "cursor",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "A pointer to specific record",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-events-v2.Policies.PoliciesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query that skips to a specific record",
        "description": [
          "The `skipTo()` function refines a `PolicysQueryBuilder` that point to a specific record. You can get the relevant cursor token from `cursors` object in previous call's response.",
          "Not relevant fot the first request.",
          "Following requests use the cursor token and not a filter property"
        ],
        "examples": [
          {
            "title": "Perform a query and skip to next cursor",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies();",
              "  const nextCursor = results.cursors.next;",
              "  return policies.queryPolicies().skipTo(nextCursor).find();",
              "}",
              ""
            ]
          },
          {
            "title": "Perform a query and get `prev` from the result",
            "body": [
              "import { policies } from 'wix-events.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await policies.queryPolicies();",
              "  const prevCursor = results.cursors.prev;",
              "  return policies.queryPolicies().skipTo(prev).find();",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false
    }
  ],
  "messages": []
}
