{ "name": "PanelSlider",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin",
      "$w.Element",
      "$w.DisabledMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "PanelSlider.js" },
  "docs":
    { "summary": "Panel sliders allow site creators to select a number from a given range.",
      "description":
        [ "Panel sliders offer site creators a way to input a number by sliding a \"handle\" one way or the other along a track. You can set the range of values for the slider and also its default value.",
          "",
          "> **Important**:  ",
          "> This element is available only in [custom panels built in Blocks](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons).  ",
          "> [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is a workspace for building Wix apps. It is currently a Beta version, open to a limited number of users." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 102,
              "filename": "PanelSlider.js" },
            { "lineno": 118,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"LONG\"`",
                "* `\"SHORT\"`",
                "* `\"NONE\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's divider type",
                  "body":
                    [ "let divider = $w(\"#myElement\").divider;  // \"none\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's divider type",
                  "body":
                    [ "$w(\"#myElement\").divider = \"NONE\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 60,
              "filename": "PanelSlider.js" },
            { "lineno": 71,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the label of an element. Maximum length is 120 characters.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myElement\").label;  // \"My element's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 168,
              "filename": "PanelSlider.js" },
            { "lineno": 179,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the slider's maximum value.",
            "links": [],
            "examples":
              [ { "title": "Get a slider's maximum value",
                  "body":
                    [ "let sliderMax = $w(\"#mySlider\").max; // 10" ],
                  "extra":
                    {  } },
                { "title": "Set a slider's maximum value",
                  "body":
                    [ "$w(\"#mySlider\").max = 10;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 151,
              "filename": "PanelSlider.js" },
            { "lineno": 162,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the slider's minimum value.",
            "links": [],
            "examples":
              [ { "title": "Get a slider's minimum value",
                  "body":
                    [ "let sliderMin = $w(\"#mySlider\").min; // 0" ],
                  "extra":
                    {  } },
                { "title": "Set a slider's minimum value",
                  "body":
                    [ "$w(\"#mySlider\").min = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "step",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 185,
              "filename": "PanelSlider.js" },
            { "lineno": 196,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the slider's step value.",
            "links": [],
            "examples":
              [ { "title": "Get a slider's step value",
                  "body":
                    [ "let sliderStep = $w(\"#mySlider\").step; // 5" ],
                  "extra":
                    {  } },
                { "title": "Set a slider's step value",
                  "body":
                    [ "$w(\"#mySlider\").step = 5;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 41,
              "filename": "PanelSlider.js" },
            { "lineno": 54,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip. Maximum length is 1200 characters.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "unit",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 77,
              "filename": "PanelSlider.js" },
            { "lineno": 94,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the unit of a slider's numeric input.",
            "description":
              [ "A panel slider can only have one of the following `unit` values:",
                "* `\"NUMBER\"`",
                "* `\"PERCENTAGE\"`",
                "* `\"PIXELS\"`",
                "* `\"ANGLE\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let unit = $w(\"#myPanelSlider\").unit;  // \"NUMBER\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").unit = \"PIXELS\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 20,
              "filename": "PanelSlider.js" },
            { "lineno": 35,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the value of the slider.",
            "description":
              [ "Sets or gets the value of the slider. `value` is not bound by the [`min`](#min) or",
                "[`max`](#max) values set for the slider.",
                "> **Note**: Changing an element's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get a slider's value",
                  "body":
                    [ "let sliderValue = $w(\"#mySlider\").value; // 46" ],
                  "extra":
                    {  } },
                { "title": "Set a slider's value",
                  "body":
                    [ "$w(\"#mySlider\").value = 46;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 124,
              "filename": "PanelSlider.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onChange()`",
                " because the property at this point contains values prior to the `onChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }