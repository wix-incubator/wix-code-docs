{ "name": "PanelColorPicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.PanelElementMixin",
      "$w.HiddenCollapsedMixin",
      "$w.Element",
      "$w.DisabledMixin",
      "$w.PanelElementMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "PanelColorPicker.js" },
  "docs":
    { "summary": "Panel color picker elements are used in the Wix Blocks panel builder for selecting colors.",
      "description":
        [ "Panel color picker is a custom panel element that is added to the Wix Editor for site creators to select colors to use on their site.",
          "",
          "> **Important**:  ",
          "> This element is available only in [custom panels built in Blocks](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons).  ",
          "> [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is an editor for building Wix apps." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 42,
              "filename": "PanelColorPicker.js" },
            { "lineno": 59,
              "filename": "PanelColorPicker.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"LONG\"`",
                "* `\"SHORT\"`",
                "* `\"NONE\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's divider type",
                  "body":
                    [ "let divider = $w(\"#myElement\").divider;  // \"LONG\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's divider type",
                  "body":
                    [ "$w(\"#myElement\").divider = \"SHORT\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 21,
              "filename": "PanelColorPicker.js" },
            { "lineno": 36,
              "filename": "PanelColorPicker.js" } ],
        "docs":
          { "summary": "Sets or gets an element's color value.",
            "description":
              [ "The `value` property supports basic [named colors](https://developer.mozilla.org/en-US/docs/Web/CSS/named-color#standard_colors), RGB, and hexadecimal code formats.",
                "> **Note**: Changing an element's `value` in code does not trigger an `onChange()` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let value = $w(\"#myColorPicker\").value;  // \"red\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value (RGB)",
                  "body":
                    [ "$w(\"#myColorPicker\").value = \"rgb(225,0,0)\";" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value (Hexadecimal)",
                  "body":
                    [ "$w(\"#myColorPicker\").value = \"#FF00FF\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 65,
              "filename": "PanelColorPicker.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a site visitor changes the value",
                " of an element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an `if` statement that checks the `valid` property in `onChange()`",
                " because the property at this point contains values prior to the `onChange()` event.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "    let newValue = event.target.value;  // \"#0057E1\"",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }