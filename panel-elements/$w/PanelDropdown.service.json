{ "name": "PanelDropdown",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin",
      "$w.Element",
      "$w.DisabledMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "PanelDropdown.js" },
  "docs":
    { "summary": "Panel dropdowns are used in the Blocks panel builder for selecting one of a number of options.",
      "description":
        [ "Dropdowns consist of a list of options. Each option contains a label, which is what the user sees, and a value, which is what is used in code.",
          "",
          "> **Important**:  ",
          "> This element is available only in [custom panels](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons) built in Wix Blocks. [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is an editor for building Wix apps." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 97,
              "filename": "PanelDropdown.js" },
            { "lineno": 113,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"LONG\"`",
                "* `\"SHORT\"`",
                "* `\"NONE\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's divider type",
                  "body":
                    [ "let divider = $w(\"#myElement\").divider;  // \"NONE\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's divider type",
                  "body":
                    [ "$w(\"#myElement\").divider = \"NONE\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 60,
              "filename": "PanelDropdown.js" },
            { "lineno": 71,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the label of an element. Maximum length is 120 characters.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myElement\").label;  // \"My element's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.PanelDropdown.option" ] },
        "locations":
          [ { "lineno": 119,
              "filename": "PanelDropdown.js" },
            { "lineno": 133,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the options in the dropdown.",
            "description":
              [ "`options` is an array of objects, each representing an option available to a user." ],
            "links": [],
            "examples":
              [ { "title": "Get the list of options and the first option's label and value from a dropdown",
                  "body":
                    [ "let dropdownOptions = $w(\"#myDropdown\").options;",
                      "",
                      "let firstLabel = dropdownOptions[0].label;  // \"First Label\"",
                      "let firstValue = dropdownOptions[0].value;  // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the list of options for a dropdown",
                  "body":
                    [ "$w(\"#myDropdown\").options = [",
                      "  {\"label\": \"Who's on first!\", \"value\": \"first\"},",
                      "  {\"label\": \"What's on second\", \"value\": \"second\"},",
                      "  {\"label\": \"I Don't Know is on third\", \"value\": \"third\"}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an option to a dropdown",
                  "body":
                    [ "let opts = $w(\"#myDropdown\").options;",
                      "opts.push({\"label\": \"New Label\", \"value\": \"New Value\"});",
                      "$w(\"#myDropdown\").options = opts;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 77,
              "filename": "PanelDropdown.js" },
            { "lineno": 91,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text of an element.",
            "description":
              [ "The placeholder text is displayed only when no dropdown option is selected.  ",
                "Maximum length is 120 characters." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's placeholder",
                  "body":
                    [ "let label = $w(\"#myElement\").placeholder;  // \"Type your name\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's placeholder",
                  "body":
                    [ "$w(\"#myElement\").placeholder = \"New Placeholder\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectedIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 149,
              "filename": "PanelDropdown.js" },
            { "lineno": 173,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Sets or gets the index of the selected option.",
            "description":
              [ "Setting the `selectedIndex` property sets the option at",
                " that index to be the selected option. To set one of the options to be",
                " selected, set the `selectedIndex` property to an index between `0` and",
                " `options.length - 1`.",
                "",
                " To reset the dropdown to have no option",
                " selected, set the `selectedIndex` property to `undefined`.",
                "",
                " Getting the `selectedIndex` property returns the index of",
                " the currently selected option. If no value is selected, the",
                " `selectedIndex` property returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the index of the selected option",
                  "body":
                    [ "let mySelIndex = $w(\"#mySelectorElement\").selectedIndex; // 3" ],
                  "extra":
                    {  } },
                { "title": "Select the first option by index",
                  "body":
                    [ "$w(\"#mySelectorElement\").selectedIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 40,
              "filename": "PanelDropdown.js" },
            { "lineno": 54,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Maximum length is 1200 characters.  ",
                "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 19,
              "filename": "PanelDropdown.js" },
            { "lineno": 34,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Sets or gets an element's value.",
            "description":
              [ "Maximum length is 120 characters.  ",
                "To reset the element, set the value property to `null` or `undefined`.  ",
                "Changing an element's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"option-1\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"option-1\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 180,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onChange()`",
                " because the property at this point contains values prior to the `onChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "option",
        "locations":
          [ { "lineno": 139,
              "filename": "PanelDropdown.js" } ],
        "docs":
          { "summary": "An object representing a dropdown option.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "label",
              "type": "string",
              "doc": "The label of the dropdown option. This is what a user sees." },
            { "name": "value",
              "type": "string",
              "doc": "The value of the dropdown option. This is what you use in code." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }