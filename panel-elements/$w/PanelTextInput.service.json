{ "name": "PanelTextInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.HiddenCollapsedMixin",
      "$w.Element",
      "$w.DisabledMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "PanelTextInput.js" },
  "docs":
    { "summary": "A [PanelTextInput](https://support.wix.com/en/article/wix-blocks-velo-api-reference-for-panel-elements#panel-text-input) \nelement is used in a Blocks panel to capture small amounts of text.",
      "description":
        [ "A panel text input is an input field that receives strings.",
          "",
          "> **Important**:  ",
          "> This element is available only in [custom panels built in Blocks](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons).  ",
          "> [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is a workspace for building Wix apps. It is currently a Beta version, open to a limited number of users." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "divider",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 99,
              "filename": "PanelTextInput.js" },
            { "lineno": 115,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the type of divider displayed under the element.",
            "description":
              [ "The divider type can be:",
                "* `\"LONG\"`",
                "* `\"SHORT\"`",
                "* `\"NONE\"`" ],
            "links": [],
            "examples":
              [ { "title": "Get an element's divider type",
                  "body":
                    [ "let divider = $w(\"#myElement\").divider;  // \"none\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's divider type",
                  "body":
                    [ "$w(\"#myElement\").divider = \"NONE\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 64,
              "filename": "PanelTextInput.js" },
            { "lineno": 75,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the label of an element. Maximum length is 120 characters.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myElement\").label;  // \"My element's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myElement\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxLength",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 138,
              "filename": "PanelTextInput.js" },
            { "lineno": 149,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum number of characters in the input text.",
            "links": [],
            "examples":
              [ { "title": "Get a text input's maximum length",
                  "body":
                    [ "let myLength = $w(\"#myTextInput\").maxLength;  // 20" ],
                  "extra":
                    {  } },
                { "title": "Set a text input's maximum length",
                  "body":
                    [ "$w(\"#myTextInput\").maxLength = 20;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 82,
              "filename": "PanelTextInput.js" },
            { "lineno": 93,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the placeholder text of an element.",
            "links": [],
            "examples":
              [ { "title": "Get an element's placeholder",
                  "body":
                    [ "let label = $w(\"#myElement\").placeholder;  // \"Type your name\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's placeholder",
                  "body":
                    [ "$w(\"#myElement\").placeholder = \"New Placeholder\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "readOnly",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 121,
              "filename": "PanelTextInput.js" },
            { "lineno": 132,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets whether the value of the input element is read-only (cannot be modified by users).",
            "links": [],
            "examples":
              [ { "title": "Get whether the value of the input element is read-only",
                  "body":
                    [ "let isReadOnly = $w(\"#myTextInput\").readOnly;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set the value of the input element to be read-only",
                  "body":
                    [ "$w(\"#myTextInput\").readOnly = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 44,
              "filename": "PanelTextInput.js" },
            { "lineno": 58,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon.",
                "Maximum length is 1200 characters." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 21,
              "filename": "PanelTextInput.js" },
            { "lineno": 37,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Sets or gets an element's value.\n Maximum length is 120 characters. \n To reset the element, restoring any placeholder text, set the value\n property to `null` or `undefined`.\n\n> **Note**: Changing an element's `value` in code does not trigger an `onChange` event.",
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"option-1\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"option-1\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 155,
              "filename": "PanelTextInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onChange()`",
                " because the property at this point contains values prior to the `onChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }