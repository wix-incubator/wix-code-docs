{ "name": "PanelFontAndColorPicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.PanelElementMixin",
      "$w.HiddenCollapsedMixin",
      "$w.Element",
      "$w.DisabledMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "PanelFontAndColorPicker.js" },
  "docs":
    { "summary": "An element in the Blocks panel for selecting fonts and colors.",
      "description":
        [ "> This API is only relevant for building [custom panels](https://support.wix.com/en/article/wix-blocks-designing-custom-panels-for-your-widgets-action-bar-buttons) in Wix Blocks.",
          "",
          "`PanelFontAndColorPicker` is a custom panel element that is added to the Wix Editor for site creators to select fonts and colors to use on their site." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "color",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 187,
              "filename": "PanelFontAndColorPicker.js" },
            { "lineno": 201,
              "filename": "PanelFontAndColorPicker.js" } ],
        "docs":
          { "summary": "Sets or gets an element's color.",
            "description":
              [ "Retrieve or update the displayed color in the panel elements color picker section.",
                "The `color` property supports basic color names, RGB, and hexadecimal code formats.",
                "> **Note**: Changing an element's `color` in code triggers an `onColorChange()` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's color value",
                  "body":
                    [ "let color = $w(\"#myElement\").color; // \"#008000\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's color value",
                  "body":
                    [ "$w(\"#myElemet\").color = \"rgb(0,128,0)\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "fontFamily",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 19,
              "filename": "PanelFontAndColorPicker.js" },
            { "lineno": 181,
              "filename": "PanelFontAndColorPicker.js" } ],
        "docs":
          { "summary": "Sets or gets an element's font.",
            "description":
              [ "Read or update the panel element's font.",
                "<details>",
                "  <summary>See the supported font family values</summary>",
                "",
                "  - `amatic sc`",
                "  - `american typewriter`",
                "  - `anton`",
                "  - `arial`",
                "  - `arial black`",
                "  - `assistant light`",
                "  - `assistant semi bold`",
                "  - `avenida`",
                "  - `avenir`",
                "  - `avenir light`",
                "  - `bai jamjuree`",
                "  - `barlow extra light`",
                "  - `barlow medium`",
                "  - `basic`",
                "  - `belinda`",
                "  - `bodoni poster`",
                "  - `braggadocio`",
                "  - `brandon grotesque`",
                "  - `bree`",
                "  - `caudex`",
                "  - `caveat`",
                "  - `chelsea market`",
                "  - `cinzel`",
                "  - `clarendon lt`",
                "  - `comic sans ms`",
                "  - `cookie`",
                "  - `coquette`",
                "  - `corben`",
                "  - `cormorant garamond light`",
                "  - `cormorant garamond semi bold`",
                "  - `courier new`",
                "  - `din neuzeit grotesk`",
                "  - `din next light`",
                "  - `damion`",
                "  - `dancing script regular`",
                "  - `droid serif`",
                "  - `eb garamond`",
                "  - `enriqueta`",
                "  - `fahkwang`",
                "  - `forum`",
                "  - `fraunces`",
                "  - `fraunces 120 light`",
                "  - `fraunces 120 semi bold`",
                "  - `fredericka the great`",
                "  - `futura`",
                "  - `futura light`",
                "  - `georgia`",
                "  - `geotica four open`",
                "  - `heebo light`",
                "  - `heebo medium`",
                "  - `helvetica`",
                "  - `helvetica bold`",
                "  - `helvetica light`",
                "  - `itc arecibo`",
                "  - `impact`",
                "  - `inknut antiqua`",
                "  - `jockey one`",
                "  - `josefin slab`",
                "  - `jura`",
                "  - `k2d`",
                "  - `kanit`",
                "  - `karantina light`",
                "  - `kelly slab`",
                "  - `kepler`",
                "  - `kodchasan`",
                "  - `lato light`",
                "  - `libre baskerville`",
                "  - `linotype didot`",
                "  - `lobster`",
                "  - `lucida console`",
                "  - `lucida sans unicode`",
                "  - `lulo clean`",
                "  - `maitree`",
                "  - `marck script`",
                "  - `marmelad`",
                "  - `marzo`",
                "  - `mitr`",
                "  - `monoton`",
                "  - `monotype baskerville`",
                "  - `montserrat`",
                "  - `mr de haviland`",
                "  - `museo`",
                "  - `museo slab`",
                "  - `niconne`",
                "  - `nimbus sans`",
                "  - `nobile`",
                "  - `noticia text`",
                "  - `open sans`",
                "  - `open sans condensed`",
                "  - `oswald extra light`",
                "  - `oswald medium`",
                "  - `overlock`",
                "  - `pacifica condensed`",
                "  - `palatino linotype`",
                "  - `patrick hand`",
                "  - `peaches & cream`",
                "  - `play`",
                "  - `playfair display`",
                "  - `playfair display bold`",
                "  - `poppins extra light`",
                "  - `poppins semi bold`",
                "  - `pridi`",
                "  - `prompt`",
                "  - `proxima nova`",
                "  - `questrial`",
                "  - `quicksand`",
                "  - `raleway`",
                "  - `raleway semi bold`",
                "  - `reklame script`",
                "  - `roboto bold`",
                "  - `roboto thin`",
                "  - `rosewood`",
                "  - `rozha one`",
                "  - `rubik light`",
                "  - `rubik medium`",
                "  - `sacramento`",
                "  - `sail`",
                "  - `sarabun`",
                "  - `sarina`",
                "  - `secular one`",
                "  - `signika`",
                "  - `snell roundhand`",
                "  - `soho condensed`",
                "  - `space grotesk`",
                "  - `spinnaker`",
                "  - `sriracha`",
                "  - `stencil`",
                "  - `suez one`",
                "  - `syne`",
                "  - `tahoma`",
                "  - `times new roman`",
                "  - `trend`",
                "  - `trirong`",
                "  - `varela round`",
                "  - `verdana`",
                "  - `wix madefor display`",
                "  - `wix madefor display bold`",
                "  - `wix madefor display xbold`",
                "  - `wix madefor text`",
                "  - `wix madefor text bold`",
                "  - `wix madefor text medium`",
                "  - `wix madefor text xbold`",
                "  - `work sans extra light`",
                "  - `work sans semi bold`",
                "",
                "</details>",
                "> **Note**: Changing an element's `fontFamily` in code triggers an `onFontChange()` event." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's font value",
                  "body":
                    [ "let font = $w(\"#myElement\").fontFamily; // \"helvetica\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's font value",
                  "body":
                    [ "$w(\"#myElement\").fontFamily = \"arial\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tooltip",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 207,
              "filename": "PanelFontAndColorPicker.js" },
            { "lineno": 221,
              "filename": "PanelFontAndColorPicker.js" } ],
        "docs":
          { "summary": "Sets or gets an element's tooltip.",
            "description":
              [ "Setting the `tooltip` property defines the text that is displayed when a user hovers on an element's ![tooltip-icon](images/tooltip-icon.png) icon.",
                "Maximum length is 1200 characters." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's tooltip",
                  "body":
                    [ "let tooltip = $w(\"#myElement\").tooltip;  // \"Tooltip text\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's tooltip",
                  "body":
                    [ "$w(\"#myElement\").tooltip = \"New tooltip\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onColorChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 254,
              "filename": "PanelFontAndColorPicker.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element's color value\n is changed.",
            "description":
              [ "An element triggers a change event when a user changes the color value",
                " in the panel element.",
                "",
                " A change event is not triggered when you change an element's color value using",
                " the element's [`color`](#color) property in code.",
                "",
                " Because `onColorChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onColorChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onColorChange()`",
                " because the property at this point contains values prior to the `onColorChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange((event) => {",
                      "    let newColor = event.target.color; // #FF4040",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } },
      { "name": "onFontChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 227,
              "filename": "PanelFontAndColorPicker.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element's font value\n is changed.",
            "description":
              [ "An element triggers a change event when a user changes the font value",
                " in the panel element.",
                "",
                " A change event is not triggered when you change an element's font value using",
                " the element's [`fontFamily`](#fontFamily) property in code.",
                "",
                " Because `onFontChange()` is fired before validations are performed, do not check",
                " any of the validation properties in the `onFontChange()` event handler. For example,",
                " do not code an if statement that checks the `valid` property in the `onFontChange()`",
                " because the property at this point contains values prior to the `onFontChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onFontChange((event) => {",
                      "    let newFontValue = event.target.fontFamily; // \"arial black\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }