{ "name": "wix-captcha-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 23,
      "filename": "authorise-token.js" },
  "docs":
    { "summary": "The wix-captcha-backend module contains functionality for working with the reCAPTCHA element from backend code.",
      "description":
        [ "The reCAPTCHA element allows you to present a challenge-response test",
          " to site visitors to determine whether they are human or a bot. Use the reCAPTCHA",
          " element to verify that site visitors are human before allowing them perform",
          " restricted operations.",
          "",
          " For more information on working with your reCAPTCHA element, click <a href=\"https://support.wix.com/en/article/corvid-tutorial-using-captcha-to-protect-data-submission\" target=\"_blank\">here</a>.",
          "",
          " To use the Captcha API, import `wixCaptcha` from the `wix-captcha-backend` module:",
          "",
          "   ```javascript",
          "   import wixCaptchaBackend from 'wix-captcha-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "authorize",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "token",
              "type": "string",
              "doc": "The CAPTCHA token to authorize." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-captcha-backend.SuccessReport" ] },
            "doc": "Fulfilled - A success message.\nRejected - An error message." },
        "locations":
          [ { "lineno": 60,
              "filename": "authorise-token.js" } ],
        "docs":
          { "summary": "Authorizes the CAPTCHA token.",
            "description":
              [ "Following CAPTCHA verification on the client side, you must authorize",
                " the generated CAPTCHA token in the backend. `authorize()` checks if the token",
                " is valid, making sure it was not tampered with or timed out.",
                "",
                " The `authorize()` function returns a Promise that resolves to a `Success`",
                " object when the token is authorized and to an `Error`",
                " object when authorization fails.",
                "",
                " To understand how `authorize()` is used in a typical CAPTCHA validation lifecycle,",
                " click [`here`]($w.Captcha.html#captcha-lifecycle).",
                "",
                " If CAPTCHA token authorization fails, an error message containing a status",
                " code is returned. The following table lists",
                " the possible HTTP error status codes, based on <a href=\"https://tools.ietf.org/html/rfc2616#section-10\" target=\"_blank\">RFC 2616</a>:",
                "",
                "<table style=\"border-collapse: collapse;\">",
                "  <tr>",
                "    <td><b>Status Code</b></td>",
                "    <td><b>Name</b></td>",
                "    <td><b>Description</b></td>",
                "  </tr>",
                "  <tr>",
                "    <td>400</td>",
                "    <td>Bad Request</td>",
                "    <td>The request could not be understood by the server. This could occur for a number of reasons, such as:",
                "    <p>",
                "    <ul>",
                "    <li>The request was sent without a token.</li>",
                "    <li>The token is invalid.</li>",
                "    <li>The token has timed out.</li>",
                "    </ul>",
                "    </td>",
                "  </tr>",
                "  <tr>",
                "    <td>401</td>",
                "    <td>Unauthenticated</td>",
                "    <td>No user identity found in passed request.</td>",
                "  </tr>",
                "  <tr>",
                "    <td>500</td>",
                "    <td>Internal Server Error</td>",
                "    <td>The server encountered an unexpected condition, such as a missing or invalid private CAPTCHA key.</td>",
                "  </tr>",
                "  <tr>",
                "    <td>503</td>",
                "    <td>Unavailable</td>",
                "    <td>The service is unavailable due to one of the following:",
                "    <p>",
                "    <ul>",
                "    <li>Throttled error: Server overload due to more than the allowed requests in a given time frame.</li>",
                "    <li>Request failed: No response following 10 retries with a 1-second interval.</li>",
                "    </ul>",
                "    </td>",
                "  </tr>",
                "</table>" ],
            "links":
              [ "[Captcha( )]($w.Captcha.html)" ],
            "examples":
              [ { "title": "Full CAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptchaBackend from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptchaBackend.authorize(submitRequestData.token)",
                      "    .then( () => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data)",
                      "        .then( () => ({\"type\": \"success\"}))",
                      "        .catch( (error) => ({\"type\": \"insertion error\", \"message\": \"Error: collection insertion failed: \" + error}));",
                      "    })",
                      "    .catch( (error) => ({\"type\": \"authorization error\", \"message\": \"Error: CAPTCHA authorization failed: \" + error}));",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() => {",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( (response) => {",
                      "        // Display a different message depending on response from backend function",
                      "        switch(response.type){",
                      "          case \"success\":",
                      "            $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "            break;",
                      "          case \"authorization error\":",
                      "            $w(\"#messageText\").text = \"CAPTCHA authorization failed. Redo the CAPTCHA challenge.\";",
                      "            break;",
                      "          case \"insertion error\":",
                      "            $w(\"#messageText\").text = \"Database error. Redo the CAPTCHA challenge.\";",
                      "            break;",
                      "        }",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").show();",
                      "      });",
                      "  });",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"The reCAPTCHA element lost connection with the CAPTCHA provider. Try again later.\";",
                      "    $w(\"#messageText\").show()",
                      "    .then(() => {",
                      "      $w(\"#messageText\").hide(\"fade\", {\"delay\": 10000});",
                      "    } );",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "    $w(\"#messageText\").text = \"The CAPTCHA has timed out. Please redo the CAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the CAPTCHA is verified and a token is\n generated. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "ErrorReport",
        "locations":
          [ { "lineno": 51,
              "filename": "authorise-token.js" } ],
        "docs":
          { "summary": "An object representing a CAPTCHA authorization error message.",
            "links":
              [ "[authorize( )](wix-captcha-backend.html#authorize)" ],
            "examples":
              [ { "title": "Authorization fails and returns an error",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptchaBackend from 'wix-captcha-backend';",
                      "",
                      "export function captchaAuthorize(token) {",
                      "  return wixCaptchaBackend.authorize(token);",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {captchaAuthorize} from 'backend/submitHandler';",
                      "",
                      "export function myButton_click(event, $w) {",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "",
                      "  captchaAuthorize(myToken)",
                      "    .then( (result) => {",
                      "      console.log (result);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log (error); // Request failed with status code 400",
                      "      $w(\"#myCaptcha\").reset();",
                      "      $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "      $w(\"#messageText\").show();",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "error",
              "type": "string",
              "doc": "Error message." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "SuccessReport",
        "locations":
          [ { "lineno": 42,
              "filename": "authorise-token.js" } ],
        "docs":
          { "summary": "An object representing a CAPTCHA authorization success message.",
            "links":
              [ "[authorize( )](wix-captcha-backend.html#authorize)" ],
            "examples":
              [ { "title": "Authorize CAPTCHA token and show result",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptchaBackend from 'wix-captcha-backend';",
                      "",
                      "export function captchaAuthorize(token) {",
                      "  return wixCaptchaBackend.authorize(token);",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {captchaAuthorize} from 'backend/submitHandler';",
                      "",
                      "export function myButton_click(event, $w) {",
                      "  let myToken = $w(\"#myCaptcha\").token",
                      "",
                      "  captchaAuthorize(myToken)",
                      "    .then( (result) => {",
                      "      console.log (result); // {success: true}",
                      "    })",
                      "    .catch(() => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "      $w(\"#messageText\").show();",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "success",
              "type": "boolean",
              "doc": "Value is `true` when authorization is successful." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }