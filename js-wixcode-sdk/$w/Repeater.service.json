{ "name": "Repeater",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.EffectsMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Repeater.js" },
  "docs":
    { "description":
        [ "Repeaters provide a way for you to add repeating content to a page.",
          " Repeaters consist of repeating items, each with the same layout",
          " but different data.",
          "",
          " For example, the repeater below contains 3 items, each with the same",
          " layout. There's 1 image on the left and 2 text elements on the right.",
          " However, the data in each item is different. That is, the actual images and",
          " text values are different in each repeated item.",
          "",
          " ![Repeater example](images/repeater.png \"Repeater example\")",
          "",
          " Populate your repeater with data using one of the following:",
          "",
          " + Connect each element contained within a [repeater's items](https://dev.wix.com/docs/velo/velo-only-apis/$w/repeater/create-and-access-repeated-item-data) to a",
          "   dataset in the editor. Click `Connect to CMS` and select",
          "   your dataset. You only need to connect the elements in the first",
          "   item and the connection automatically applies to all repeated items.",
          " + Use the [`data`](#data) property to pass an array of items to the repeater.",
          "   This data comes from your Wix site's collections or a third-party database.",
          "   Then use [`forEachItem()`](#forEachItem), [`forItems()`](#forItems), ",
          "   and [`onItemReady()`](#onItemReady) methods to display the data in each",
          "   repeated item.",
          "",
          " Get hands-on experience with repeaters on our [Hello Repeaters](https://www.wix.com/velo/example/hello-repeaters) example page.",
          "",
          "> Learn more about repeaters in [Getting Started](/getting-started/working-with-repeaters) and on [Wix Learn](https://www.wix.com/learn/online-course/coding-with-velo/velo-repeaters)." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "customClassList",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 348,
              "filename": "Repeater.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "The `customClassList` property allows you to manipulate the CSS classes of an element. Use it to add, remove, or check for CSS classes that were defined in the Wix Studio Styles panel." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "data",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Object" ] },
        "locations":
          [ { "lineno": 42,
              "filename": "Repeater.js" },
            { "lineno": 148,
              "filename": "Repeater.js" } ],
        "docs":
          { "summary": "Sets or gets the repeater data.",
            "description":
              [ "A repeater's data is stored as an array of objects. Each object in the array",
                " must contain a unique `_id` property which is used to match the object's",
                " data to the individual repeated items of the repeater as described below.",
                " The value of the `_id` property must be a string and can only contain alphanumeric",
                " characters (A-Z, a-z, 0-9) and hyphens (`-`). Other than `_id`, the objects in the",
                " repeater's data array can contain anything you want.",
                "",
                " For example, a simple array of repeater data may look like this:",
                "",
                " ```javascript",
                " [",
                "   {",
                "     \"_id\": \"1\",",
                "     \"firstName\": \"John\",",
                "     \"lastName\": \"Doe\",",
                "     \"image\": \"http://someImageUrl/john.jpg\"",
                "   },",
                "   {",
                "     \"_id\": \"2\",",
                "     \"firstName\": \"Jane\",",
                "     \"lastName\": \"Doe\",",
                "     \"image\": \"http://someImageUrl/jane.jpg\"",
                "   }",
                " ]",
                " ```",
                "",
                " Repeater data is not automatically applied to the elements in the repeated",
                " items. You choose how to use the repeater's data in the [`onItemReady()`](#onItemReady),",
                " [`onItemRemoved()`](#onItemRemoved), [`forItems()`](#forItems), and",
                " [`forEachItem()`](#forEachItem) callback functions. Most often, you",
                " apply the data of a repeated item to the properties and functions",
                " of the repeated elements contained in that repeated item. ",
                "",
                " Typically, you use the [`onItemReady()`](#onItemReady) function to set a callback",
                " that populates the repeater's elements with the item data from the `data` array.",
                " The callback is triggered for each new item in the `data` array as described below.",
                " Then, you might use the [`forItems()`](#forItems) and [`forEachItem()`](#forEachItem)",
                " functions to modify repeater elements at some point after the `data` is originally set.",
                "",
                " Because setting a repeater's `data` property triggers the `onItemReady()`",
                " callback to run, make sure you call `onItemReady()` before you set the",
                " `data` property. Failing to do so will mean that your callbacks are not",
                " triggered when you set the `data` property.",
                "",
                " You cannot modify the data array in-place. To add, change, or remove",
                " objects from the repeater's data array:",
                "",
                "   1. Store the value of the `data` property in a variable.",
                "   1. Make changes to the objects of the data array.",
                "   1. Reset the `data` property with the modified array.",
                "",
                "",
                " When the repeater's `data` property is set:",
                "",
                "   1. New repeated items are created for each object that has an `_id` value",
                "      that is not already present in the current array of data objects. The elements",
                "      in the new items are first populated with the data of the repeater's",
                "      [item template](#repeated-item-template). Then the [`onItemReady()`](#onItemReady)",
                "      event handler is triggered for each of the new items. Usually, you",
                "      overwrite some or all of the data populated from the item template",
                "      in the [`onItemReady()`](#onItemReady) event handler with the data for",
                "      that specific item. When all of the [`onItemReady()`](#onItemReady)",
                "      event handlers have finished running, the new items are displayed.",
                "   1. Repeated items are removed if their IDs are no longer in the array of",
                "      data objects. The [`onItemRemoved()`](#onItemRemoved) event handler is",
                "      triggered for each of the removed items.",
                "   1. Nothing occurs to repeated items whose IDs were already in the array",
                "      of data objects, even if other data in the object has changed. To update",
                "      repeated items with the new data, use the [`forEachItem()`](#forEachItem)",
                "      or [`forItems()`](#forItems) functions.",
                "",
                "",
                " Getting the `data` property returns the repeater's current data. If you",
                " have not yet explicitly set the repeater's `data`, getting the `data`",
                " property returns only the IDs of the current repeated items that were",
                " set in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Get a repeater's data",
                  "body":
                    [ "let repeaterData = $w(\"#myRepeater\").data;" ],
                  "extra":
                    {  } },
                { "title": "Set a repeater's data",
                  "body":
                    [ "const bikeData = [",
                      "  {",
                      "    \"_id\":\"bike1\",",
                      "    \"img\":\"wix:image://v1/6875c086ef453f5727c2b5932b3b3be4.png/Red Bike#originWidth=550&originHeight=300\",",
                      "    \"kind\":\"Red Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike2\",",
                      "    \"img\":\"wix:image://v1/703b4af24578ada6f1e11725a468096e.png/Speed Bike#originWidth=550&originHeight=300\",",
                      "    \"kind\":\"Black Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike3\",",
                      "    \"img\":\"wix:image://v1/2bb3219153c347daf475067d763be40d.png/Neon Bike#originWidth=550&originHeight=300\",",
                      "    \"kind\":\"Green Bike\"",
                      "  }",
                      "];",
                      "",
                      "$w(\"#myRepeater\").data = bikeData;" ],
                  "extra":
                    {  } },
                { "title": "Modify a repeater's data",
                  "body":
                    [ "// get current data array",
                      "let dataArray = $w(\"#myRepeater\").data;",
                      "",
                      "// change something in the data array",
                      "dataArray[0].somefield = \"New value\";",
                      "",
                      "// reset repeater data",
                      "$w(\"#myRepeater\").data = dataArray;" ],
                  "extra":
                    {  } },
                { "title": "Populate a repeater using data from a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "$w.onReady(async function () {",
                      "  // Define how to set up each new repeater item",
                      "  $w('#helloRepeater').forEachItem( ($item, itemData, index) => {",
                      "    $item('#languageText').text = itemData.language;",
                      "    $item('#helloText').text = itemData.greeting;",
                      "    $item('#indexText').text = (index + 1).toString();",
                      "",
                      "    $item('#itemContainer').onMouseIn( () => {",
                      "      $item('#languageText').show();",
                      "    });",
                      "",
                      "    $item('#itemContainer').onMouseOut( () => {",
                      "      $item('#languageText').hide();",
                      "    });",
                      "  } );",
                      "",
                      "  // Get data from a database collection",
                      "  const {items: collectionData} = await wixData.query('Greetings').find();",
                      "  console.log(collectionData);",
                      "",
                      "  // Set the data to associate with the repeater",
                      "  $w('#helloRepeater').data = collectionData;",
                      "});",
                      "" ],
                  "extra":
                    { "description": "In this example, we demonstrate how to populate repeaters using data from a collection. You can test out the code in our [example template](https://manage.wix.com/edit-template/from?originTemplateId=59b5a96e-455c-4c7a-bd31-a872c7608814&templateId=f34e91fa-119e-4a2d-a254-2249b979a095&autoDevMode=true)." } },
                { "title": "Populate a repeater using static data",
                  "body":
                    [ "// Static array of objects, each containing a unique `_id` value",
                      "const staticData = [",
                      "  {_id: '1', language: 'English', greeting: 'Hello World!'},",
                      "  {_id: '2', language: 'French', greeting: 'Bonjour monde!'},",
                      "  {_id: '3', language: 'Japanese', greeting: 'こんにちは世界！'},",
                      "  {_id: '4', language: 'Portuguese', greeting: 'Olá Mundo!'},",
                      "  {_id: '5', language: 'Spanish', greeting: '¡Hola Mundo!'},",
                      "  {_id: '6', language: 'Ukrainian', greeting: 'Привіт Світ!'}",
                      "];",
                      "",
                      "$w.onReady(async function () {",
                      "  // Define how to set up each new repeater item",
                      "  $w('#helloRepeater').forEachItem( ($item, itemData, index) => {",
                      "    $item('#languageText').text = itemData.language;",
                      "    $item('#helloText').text = itemData.greeting;",
                      "    $item('#indexText').text = (index + 1).toString();",
                      "",
                      "    $item('#itemContainer').onMouseIn( () => {",
                      "      $item('#languageText').show();",
                      "    });",
                      "",
                      "    $item('#itemContainer').onMouseOut( () => {",
                      "      $item('#languageText').hide();",
                      "    });",
                      "  } );",
                      "",
                      "  console.log(staticData);",
                      "",
                      "  // Set the data to associate with the repeater",
                      "  $w('#helloRepeater').data = staticData;",
                      "});",
                      "" ],
                  "extra":
                    { "description": "In this example, we demonstrate how to populate repeaters using static data. You can test out the code in our [example template](https://manage.wix.com/edit-template/from?originTemplateId=59b5a96e-455c-4c7a-bd31-a872c7608814&templateId=f34e91fa-119e-4a2d-a254-2249b979a095&autoDevMode=true)." } },
                { "title": "Populate a repeater using data from an external source",
                  "body":
                    [ "// Static array of objects, each containing a unique `_id` value",
                      "const staticData = [",
                      "  {_id: '1', language: 'English', greeting: 'Hello World!'},",
                      "  {_id: '2', language: 'French', greeting: 'Bonjour monde!'},",
                      "  {_id: '3', language: 'Japanese', greeting: 'こんにちは世界！'},",
                      "  {_id: '4', language: 'Portuguese', greeting: 'Olá Mundo!'},",
                      "  {_id: '5', language: 'Spanish', greeting: '¡Hola Mundo!'},",
                      "  {_id: '6', language: 'Ukrainian', greeting: 'Привіт Світ!'}",
                      "];",
                      "",
                      "$w.onReady(async function () {",
                      "  // Define how to set up each new repeater item",
                      "  $w('#helloRepeater').forEachItem( ($item, itemData, index) => {",
                      "    $item('#languageText').text = itemData.language;",
                      "    $item('#helloText').text = itemData.greeting;",
                      "    $item('#indexText').text = (index + 1).toString();",
                      "",
                      "    $item('#itemContainer').onMouseIn( () => {",
                      "      $item('#languageText').show();",
                      "    });",
                      "",
                      "    $item('#itemContainer').onMouseOut( () => {",
                      "      $item('#languageText').hide();",
                      "    });",
                      "  } );",
                      "",
                      "  console.log(staticData);",
                      "",
                      "  // Set the data to associate with the repeater",
                      "  $w('#helloRepeater').data = staticData;",
                      "});",
                      "" ],
                  "extra":
                    { "description": "In this example, we demonstrate how to populate repeaters using data from an external source. You can test out the code in our [example template](https://manage.wix.com/edit-template/from?originTemplateId=59b5a96e-455c-4c7a-bd31-a872c7608814&templateId=f34e91fa-119e-4a2d-a254-2249b979a095&autoDevMode=true)." } },
                { "title": "Set a repeater's data and add new data on a button click",
                  "body":
                    [ "// static repeater data part 1",
                      "const bikeData1 = [",
                      "  {",
                      "    \"_id\":\"bike1\",",
                      "    \"img\":\"wix:image://v1/6875c086ef453f5727c2b5932b3b3be4.png/Red Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Red Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike2\",",
                      "    \"img\":\"wix:image://v1/703b4af24578ada6f1e11725a468096e.png/Speed Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Black Bike\"",
                      "  }",
                      "];",
                      "",
                      "// static repeater data part 2",
                      "const bikeData2 = [",
                      "  {",
                      "    \"_id\":\"bike3\",",
                      "    \"img\":\"wix:image://v1/2bb3219153c347daf475067d763be40d.png/Neon Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Green Bike\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "  // handle creation of new repeated items",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#image1\").src = itemData.img;",
                      "    $item(\"#text1\").text = itemData.description;",
                      "",
                      "    $item(\"#image1\").onClick( (event) => {",
                      "      $item(\"#text1\").text = \"Selected\";",
                      "    } );",
                      "  } );",
                      "",
                      "  // set the repeater data to be the first part of the static data,",
                      "  // triggering the creation of new items",
                      "  $w(\"#myRepeater\").data = bikeData1;",
                      "",
                      "  // add a handler for the \"add\" button that resets the repeater data",
                      "  // to be both parts of the static data, triggering the creation of",
                      "  // a new item",
                      "  $w(\"#addButton\").onClick( () => {",
                      "    let tempData = $w(\"#myRepeater\").data;",
                      "    $w(\"#myRepeater\").data = tempData.concat(bikeData2);",
                      "  } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example defines an event handler to handle the creation of new items\n and sets a repeater's data. It also adds an event handler to an\n \"addButton\" that is not part of the repeater. Clicking the button resets\n the repeater's data, adding another item." } },
                { "title": "Set the a repeater's data and remove some data on a button click",
                  "body":
                    [ "// static repeater data",
                      "const bikeData = [",
                      "  {",
                      "    \"_id\":\"bike1\",",
                      "    \"img\":\"wix:image://v1/6875c086ef453f5727c2b5932b3b3be4.png/Red Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Red Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike2\",",
                      "    \"img\":\"wix:image://v1/703b4af24578ada6f1e11725a468096e.png/Speed Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Black Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike3\",",
                      "    \"img\":\"wix:image://v1/2bb3219153c347daf475067d763be40d.png/Neon Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Green Bike\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "  // handle creation of new repeated items",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#image1\").src = itemData.img;",
                      "    $item(\"#text1\").text = itemData.description;",
                      "",
                      "    $item(\"#image1\").onClick( (event) => {",
                      "      $item(\"#text1\").text = \"Selected\";",
                      "    } );",
                      "  } );",
                      "",
                      "  // handle removal of new repeated items",
                      "  $w(\"#myRepeater\").onItemRemoved( (itemData) => {",
                      "    console.log(`Removed: ${JSON.stringify(itemData)}`);",
                      "  } );",
                      "",
                      "  // set the repeater data to be the first part of the static data,",
                      "  // triggering the creation of new items",
                      "  $w(\"#myRepeater\").data = bikeData;",
                      "",
                      "  // add a handler for the \"remove\" button that resets the repeater data",
                      "  // with the middle object removed, triggering the removal of the middle",
                      "  // repeated item",
                      "  $w(\"#removeButton\").onClick( () => {",
                      "    let tempData = $w(\"#myRepeater\").data;",
                      "    tempData.splice(1,1);",
                      "    $w(\"#myRepeater\").data = tempData;",
                      "  } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example defines event handlers to handle the creation of new items\n and the removal of existing items. Then it sets a repeater's data.\n Lastly, it adds an event handler to a \"removeButton\" that is not part of\n the repeater. Clicking the button resets the repeater's data, removing\n one of the items." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "forEachItem",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "callback",
              "type": "$w.ForItemCallback",
              "doc": "The name of the function to run for each repeated item." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 260,
              "filename": "Repeater.js" } ],
        "docs":
          { "summary": "Runs a function for each repeated item.",
            "description":
              [ "Use the `forEachItem()` function to run a function on all of a repeater's",
                " repeated items. You can use the callback function to update or pull",
                " information from all of the repeater's repeated items.",
                "",
                " When you set a repeater's [`data`](#data) property with data that changes",
                " items with existing IDs, those changes are not automatically reflected",
                " in the elements contained in the repeater. That is because you are",
                " responsible for applying a repeater's data to its repeated items.",
                "",
                " To apply the data to items with new IDs, you can use the [`onItemReady()`](#onItemReady)",
                " event handler.",
                "",
                " To update items with existing IDs, you can use the `forEachItem()` or",
                " [`forItems()`](#forItems) functions.",
                "",
                " Usually, when updating repeated items you:",
                "",
                " + Apply the repeated item's `itemData` to the properties and functions",
                "   of the repeated elements contained in the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`src`]($w.Image.html#src)",
                "   property of an image in the repeater to an image source found in the `itemData`",
                "   object and then [`show()`]($w.Image.html#show) the image.",
                " + Add event handlers to the repeated elements contained in",
                "   the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`onClick()`](/$w/button/on-click)",
                "   event handler of a button in the repeater.",
                "> **Note:** When a page loads, datasets load after repeaters. To use `forEachItem()` with repeater data populated by a dataset, ",
                "   make sure to call it within the dataset's [`onReady()`](https://www.wix.com/velo/reference/wix-dataset/dynamicdataset/onready?branch=forEachItem-note) function." ],
            "links": [],
            "examples":
              [ { "title": "Loop through all of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forEachItem( ($item, itemData, index) => {",
                      "  let repeatedElement = $item(\"#repeatedElement\");",
                      "  let nonRepeatedElement = $w(\"#nonRepeatedElement\");",
                      "  let itemDataValue = itemData.someProperty;",
                      "  let isEvenItem = index % 2 === 0;",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Update data in all of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forEachItem( ($item, itemData, index) => {",
                      "  $item(\"#repeatedImage\").src = itemData.img;",
                      "  $item(\"#repeatedText\").text = itemData.description;",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Update data in all of a repeater's repeated items",
                  "body":
                    [ "$w.onReady(function () {",
                      "  $w(\"#myDataset\").onReady( () => {",
                      "    $w(\"#myRepeater\").forEachItem( ($item, itemData, index) => {",
                      "      if(itemData.boolField){",
                      "        $item(\"#myText\").text = \"Yes Ma'am!\";",
                      "      }",
                      "      else {",
                      "        $item(\"#myText\").text = \"No way!\";",
                      "      }",
                      "    } );",
                      "  } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example uses a `forEachItem()` to override some of the data populated\n into a repeater that is connected to a dataset. Here we want a text element\n to contain text that changes based on the value of a certain boolean field.\n When a page loads, the dataset loads after the repeater. So we wait for the\n dataset's [`onReady()`](wix-dataset.html#onReady) to call a `forEachItem()`\n that sets the desired values." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "forItems",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The IDs of the items on which to run the callback function." },
            { "name": "callback",
              "type": "$w.ForItemCallback",
              "doc": "The name of the function to run for each repeated item." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 308,
              "filename": "Repeater.js" } ],
        "docs":
          { "summary": "Runs a function for each repeated item with the given IDs.",
            "description":
              [ "Use the `forItems()` function to run a function on a specified list of",
                " repeated items. You can use the callback function to update or pull",
                " information from the specified repeated items.",
                "",
                " When you set a repeater's [`data`](#data) property with data that changes",
                " items with existing IDs, those changes are not automatically reflected",
                " in the elements contained in the repeater. That is because you are",
                " responsible for applying a repeater's data to its repeated items.",
                "",
                " To apply the data to items with new IDs, you can use the [`onItemReady()`](#onItemReady)",
                " event handler.",
                "",
                " To update items with existing IDs, you can use the `forEachItem()` or",
                " `forItems()` functions.",
                "",
                " Usually, when updating repeated items you:",
                "",
                " + Apply the repeated item's `itemData` to the properties and functions",
                "   of the repeated elements contained in the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`src`]($w.Image.html#src)",
                "   property of an image in the repeater to an image source found in the `itemData`",
                "   object and then [`show()`]($w.Image.html#show) the image.",
                " + Add event handlers to the repeated elements contained in",
                "   the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`onClick()`](/$w/button/on-click)",
                "   event handler of a button in the repeater." ],
            "links": [],
            "examples":
              [ { "title": "Loop through some of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forItems( [\"item1\", \"item4\"], ($item, itemData, index) => {",
                      "  let repeatedElement = $item(\"#repeatedElement\");",
                      "  let nonRepeatedElement = $item(\"#nonRepeatedElement\");",
                      "  let itemDataValue = itemData.someProperty;",
                      "  let isEvenItem = index % 2 == 0;",
                      "} ) ;" ],
                  "extra":
                    {  } },
                { "title": "Update data in some of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forItems( [\"item1\", \"item4\"], ($item, itemData, index) => {",
                      "  $item(\"#repeatedImage\").src = itemData.img;",
                      "  $item(\"#repeatedText\").text = itemData.description;",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onItemReady",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ItemReadyEventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.Repeater",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 164,
              "filename": "Repeater.js" } ],
        "docs":
          { "summary": "Sets the function that runs when a new repeated item is created.",
            "description":
              [ "Use the `onItemReady()` function for code you want to run before new",
                " repeated items are rendered. ",
                "",
                " The `onItemReady()` function can be added as a static event handler using the Properties & Events Panel, or as a dynamic event handler using the `$w` selector. ",
                "",
                "> **Note:** When calling this function, make sure to call it only once, and only in the page's `onReady()` function.",
                "",
                " The callback is triggered when you add new items by setting the",
                " [`data`](#data) property or when new items are created based on a",
                " dataset that is connected to the repeater. It is not triggered for",
                " existing items that are updated when you set the [`data`](#data)",
                " property. (For more information about when new items are created, see",
                " the `data` property.) To run code after updating existing items, use",
                " the [`forEachItem`](#forEachItem) or [`forItems`](#forItems) functions",
                " instead.",
                "",
                " Because setting a repeater's `data` property triggers the `onItemReady()`",
                " callback to run, make sure you call `onItemReady()` before you set the",
                " `data` property. Failing to do so will mean that your callbacks are not",
                " triggered when you set the `data` property.",
                "",
                " Usually, you use `onItemReady()` to:",
                "",
                " + Apply the repeated item's `itemData` to the properties and functions",
                "   of the repeated elements contained in the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`src`]($w.Image.html#src)",
                "   property of an image in the repeater to an image source found in the `itemData`",
                "   object and then [`show()`]($w.Image.html#show) the image.",
                " + Add event handlers to the repeated elements contained in",
                "   the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`onClick()`](/$w/button/on-click)",
                "   event handler of a button in the repeater.",
                "",
                "> **Note:** When using a dataset to populate the contents of your repeated items,",
                "  the `onItemReady()` callback function is triggered before the dataset",
                "  populates the values of your page elements. Therefore, element values",
                "  that you set using `onItemReady()` may be overridden when the dataset is",
                "  ready. To change the values set by the dataset, use [`forEachItem`](#forEachItem)",
                "  inside the dataset's [`onReady()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/on-ready). For more",
                "  information, see the [`forEachItem`](#forEachItem) examples." ],
            "links": [],
            "examples":
              [ { "title": "Set up new repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "  let repeatedElement = $item(\"#repeatedElement\");",
                      "  let nonRepeatedElement = $w(\"#nonRepeatedElement\");",
                      "  let itemDataValue = itemData.someProperty;",
                      "  let isEvenItem = index % 2 === 0;",
                      "});" ],
                  "extra":
                    {  } },
                { "title": "Populate a repeater using static data",
                  "body":
                    [ "// Static array of objects, each containing a unique `_id` value",
                      "const staticData = [",
                      "  {_id: '1', language: 'English', greeting: 'Hello World!'},",
                      "  {_id: '2', language: 'French', greeting: 'Bonjour monde!'},",
                      "  {_id: '3', language: 'Japanese', greeting: 'こんにちは世界！'},",
                      "  {_id: '4', language: 'Portuguese', greeting: 'Olá Mundo!'},",
                      "  {_id: '5', language: 'Spanish', greeting: '¡Hola Mundo!'},",
                      "  {_id: '6', language: 'Ukrainian', greeting: 'Привіт Світ!'}",
                      "];",
                      "",
                      "$w.onReady(async function () {",
                      "  // Define how to set up each new repeater item",
                      "  $w('#helloRepeater').forEachItem( ($item, itemData, index) => {",
                      "    $item('#languageText').text = itemData.language;",
                      "    $item('#helloText').text = itemData.greeting;",
                      "    $item('#indexText').text = (index + 1).toString();",
                      "",
                      "    $item('#itemContainer').onMouseIn( () => {",
                      "      $item('#languageText').show();",
                      "    });",
                      "",
                      "    $item('#itemContainer').onMouseOut( () => {",
                      "      $item('#languageText').hide();",
                      "    });",
                      "  } );",
                      "",
                      "  console.log(staticData);",
                      "",
                      "  // Set the data to associate with the repeater",
                      "  $w('#helloRepeater').data = staticData;",
                      "});",
                      "" ],
                  "extra":
                    { "description": "In this example, we demonstrate how to populate repeaters using static data. You can test out the code in our [example template](https://manage.wix.com/edit-template/from?originTemplateId=59b5a96e-455c-4c7a-bd31-a872c7608814&templateId=f34e91fa-119e-4a2d-a254-2249b979a095&autoDevMode=true)." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "itemReady" } },
      { "name": "onItemRemoved",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ItemRemovedEventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is removed." } ],
        "ret":
          { "type": "$w.Repeater",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 229,
              "filename": "Repeater.js" } ],
        "docs":
          { "summary": "Sets the function that runs when a repeated item is removed.",
            "description":
              [ "Use the `onItemRemoved()` function for code you want to run when",
                " repeated items are removed. The callback is triggered when you remove",
                " items by setting the value of the [`data`](#data) property to an array",
                " in which some of the existing item IDs are no longer present or when items",
                " are removed based on a dataset that is connected to the repeater.",
                "",
                "> **Note:** The `onItemRemoved()` callback function is not called when the static",
                " repeated items that were set in the Editor are removed." ],
            "links": [],
            "examples":
              [ { "title": "Get data from items being removed",
                  "body":
                    [ "$w(\"#myRepeater\").onItemRemoved( (itemData) => {",
                      "  let itemDataValue = itemData.someProperty;",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "itemRemoved" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./repeater/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Hello Repeaters (Getting Started)",
        "url": "https://www.wix.com/velo/example/hello-repeaters" },
      { "icon": "example",
        "text": "Input Repeaters",
        "url": "https://www.wix.com/velo/forum/wix-tips-and-updates/example-input-repeaters" },
      { "icon": "example",
        "text": "Mega Menu",
        "url": "https://www.wix.com/velo/example/mega-menu" },
      { "icon": "example",
        "text": "Create a Weather Widget",
        "url": "https://www.wix.com/velo/example/create-a-weather-widget" },
      { "icon": "example",
        "text": "Quick Booking & Pending Appointments",
        "url": "https://www.wix.com/velo/example/quick-book-and-pending-appointments" } ],
  "FAQs":
    [ { "title": "What is a repeater?",
        "markdown": "A [repeater](https://www.wix.com/velo/reference/$w.Repeater.html) is an element that displays multiple items using the same layout. You create the layout you like, and then each repeater item (section) uses that same layout to display different content.\n\nRepeaters are great for displaying database content. Each repeater item displays content from a single item (row) in your database collection." },
      { "title": "How do I populate a repeater with new data?",
        "markdown": "The most common way to populate a repeater is as follows:\n\n1. Set the repeater's data using the [`data`](https://www.wix.com/velo/reference/$w.Repeater.html#data) property. This triggers the second step for all items in the data array with a new ID.\n2. Populate the repeater with data from the new items using the [`onItemReady()`](https://www.wix.com/velo/reference/$w.Repeater.html#onItemReady) function." },
      { "title": "When should I use 'onItemReady' vs. 'forEachItem'?",
        "markdown": "*   To apply data to repeater items with new IDs, you can use the [`onItemReady()`](https://www.wix.com/velo/reference/$w.Repeater.html#onItemReady) event handler.\n*   To update repeater items with existing IDs, you can use the [`forEachItem()`](https://www.wix.com/velo/reference/$w.Repeater.html#forEachItem) or [`forItems()`](https://www.wix.com/velo/reference/$w.Repeater.html#forItems) functions. [`forEachItem()`](https://www.wix.com/velo/reference/$w.Repeater.html#forEachItem) updates each repeated item, and [`forItems()`](https://www.wix.com/velo/reference/$w.Repeater.html#forItems) updates only repeated items with the given IDs. " } ] }