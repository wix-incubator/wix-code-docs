{ "name": "Button",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.LinkableMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.LabelMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Button.js" },
  "docs":
    { "summary": "A button on your site. \n\nButtons can contain text, icons, or both. Changing a button's content will update its layout according to the follwing rules:\n|Button Label| Button Icon| Button Layout|\n|------------|------------|--------------|\n|Set to a value| Set to a value| **Text and icon**|\n|Set to a value| Set to `null`| **Text only**|\n|Set to `null`| Set to a value| **Icon only**|\n|Set to `null`| Set to `null`| **Nothing**|",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "icon",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 181,
              "filename": "Button.js" },
            { "lineno": 210,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Sets or gets the icon image displayed on the button.",
            "description":
              [ "The `icon` property defines the vector image used as the button’s icon.",
                "",
                "Setting `icon` changes the button icon to the image indicated by the new value.",
                "Getting the `icon` property returns the location of the icon image file.",
                "To delete a button's icon set `icon` to `null`, `undefined`, or an empty string.",
                "",
                "The following formats are supported:",
                " + Vector images from the Media Manager: `wix:vector://v1/<vector_uri>/<filename>`",
                " + Vector images from the web: `http(s)://<vector image url>`",
                " + Vector XML string: `<svg>...</svg>`",
                "",
                ">**Note:** [Image Buttons](https://support.wix.com/en/article/wix-editor-adding-and-setting-up-an-image-button) don't support this property." ],
            "links":
              [ "[iconCollapsed](#iconCollapsed), [expandIcon](#expandIcon), [collapseIcon](#collapseIcon)" ],
            "examples":
              [ { "title": "Set a button's icon to a Media Manager image",
                  "body":
                    [ "$w('#myButton').icon = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';" ],
                  "extra":
                    {  } },
                { "title": "Set a button's icon to an XML string",
                  "body":
                    [ "$w('#myButton').icon = '<svg height=\"10\" width=\"10\"><polygon points=\"0,9 9,9 5,0\" style=\"fill:lime;stroke:purple;stroke-width:1\"/></svg>';" ],
                  "extra":
                    {  } },
                { "title": "Delete a button's icon",
                  "body":
                    [ "$w('#myButton').icon = '';" ],
                  "extra":
                    {  } },
                { "title": "Get a button's icon",
                  "body":
                    [ "let iconLocation = $w('#myButton').icon;",
                      "// 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg'" ],
                  "extra":
                    {  } },
                { "title": "Change a button's icon when a site visitor clicks the button",
                  "body":
                    [ "$w('#myButton').onClick((event) => {",
                      "    $w('#myButton').icon = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "iconCollapsed",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 217,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Indicates if the button’s icon is collapsed or expanded.",
            "description":
              [ "If `iconCollapsed` is `true`, the icon isn't displayed in the button under any circumstances. ",
                "",
                "If `iconCollapsed` is `false`, the icon is displayed unless the icon's button is hidden or collapsed.",
                "",
                "To set the iconCollapsed property on an element, use the element's [collapseIcon()](#collapseIcon) and [expandIcon()](#expandIcon) functions.",
                "",
                "> **Note:** ",
                "> * A collapsed icon doesn't take up any space in the button.",
                "> * If you delete a button's icon, `iconCollapsed` retains the deleted icon's final state." ],
            "links":
              [ "[icon](#icon), [expandIcon](#expandIcon), [collapseIcon](#collapseIcon)" ],
            "examples":
              [ { "title": "Check if a button's icon is collapsed",
                  "body":
                    [ "let iconStatus = $w('#myButton').iconCollapsed; // true" ],
                  "extra":
                    {  } },
                { "title": "Expand a button's icon if it's collapsed",
                  "body":
                    [ "if ($w('#myButton').iconCollapsed) {",
                      "   $w('#myButton').expandIcon();",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Display tooltip text when hovering over a button if its icon is displayed",
                  "body":
                    [ "$w('#myButton').onMouseIn( (event) => {",
                      "    // check if an icon exists and is displayed",
                      "    if($w('#myButton').icon && !$w('#myButton').iconCollapsed){",
                      "        // display a text box with tooltip instructions relating to the icon",
                      "        $w('#tooltipText').expand();",
                      "    }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 66,
              "filename": "Button.js" },
            { "lineno": 82,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Sets or gets a button's label.",
            "links": [],
            "examples":
              [ { "title": "Get a button's label",
                  "body":
                    [ "let buttonLabel = $w(\"#myButton\").label;  // \"Submit\"" ],
                  "extra":
                    {  } },
                { "title": "Set a button's label",
                  "body":
                    [ "$w(\"#myButton\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "link",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "An empty string",
        "locations":
          [ { "lineno": 89,
              "filename": "Button.js" },
            { "lineno": 139,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Sets or gets the button's link.",
            "description":
              [ "When the button is clicked, the browser navigates to the `link` location.",
                "",
                " The different types of links you can use are:",
                "",
                " + `/localPageURL`: another page on your site",
                " + `/`: your site's home page",
                " + `http(s)://<url>`: an external web address",
                " + `wix:document://<location>`: a document stored in the Media Manager",
                " + `mailto:<email-address>?subject=<subject>`: an email",
                " + `tel:<phone number>`: a phone number",
                "",
                "",
                " The `link` property attempts to properly encode the URL value that",
                " you set. For example, `.../some page` is encoded to `.../some%20page`.",
                " However, some URLs do not have one unambiguous encoding. In those cases",
                " it is up to you to encode the URL to reflect your intentions. Because of",
                " these situations, it is a best practice to always encode URLs before you",
                " set them as the value of the `link` property. Regardless of how you set",
                " the `link` property, when you get its value, it returns an encoded URL.",
                "",
                " Note that Wix URLs do not contain spaces. A page which has spaces in its",
                " name has its spaces replaced with dashes (`-`). Similarly,",
                " a [dynamic page URL](https://support.wix.com/en/article/creating-a-unique-dynamic-page-url) which ",
                " contains the value of a field in your collection with spaces",
                " has its spaces replaced with dashes (`-`).",
                "",
                "> **Note:** Make sure to set your button link before running (and not inside) the [`onClick()`](https://www.wix.com/velo/reference/$w/button/onclick) event handler." ],
            "links":
              [ "[target](#target)" ],
            "examples":
              [ { "title": "Get the link URL from an element",
                  "body":
                    [ "let url = $w(\"#myElement\").link;   // \"http://mysite.com\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element to open a local link",
                  "body":
                    [ "$w(\"#myElement\").link = \"/about-me\";" ],
                  "extra":
                    {  } },
                { "title": "Set an element to open an external web link",
                  "body":
                    [ "$w(\"#myElement\").link = \"http://wix.com\";" ],
                  "extra":
                    {  } },
                { "title": "Set an element to open an external web link in a new browser page when clicked",
                  "body":
                    [ "$w(\"#myElement\").link = \"http://wix.com\";",
                      "$w(\"#myElement\").target = \"_blank\";" ],
                  "extra":
                    {  } },
                { "title": "Set an element to open a new email window when clicked",
                  "body":
                    [ "$w(\"#myElement\").link = \"mailto:a@b.com?subject=Something%20Interesting\";" ],
                  "extra":
                    {  } },
                { "title": "Set an element to open a document",
                  "body":
                    [ "$w(\"#myElement\").link = \"wix:document://v1/9bec_52fb06ea/filename.xls\";" ],
                  "extra":
                    {  } },
                { "title": "Set an element to make a phone call when clicked",
                  "body":
                    [ "$w(\"#myElement\").link = \"tel:+1-555-555-5555\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 32,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the button's styles.",
            "description":
              [ "The following styles can be used with buttons:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a button's styles, gets or sets the styles of the",
                " button's regular state. It does not set the styles of the button's hover",
                " or disabled states.",
                "",
                " > **Note:** Not all styles can be used on all button designs. To determine which styles",
                " work with a specific button design, go to the **Button Design** panel in",
                " the Editor, choose a design, and click **Customize Design**. The design",
                " options that you see in the **Button Design** panel for your particular",
                " button are the styles you can use in your code." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "collapseIcon",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the element's `iconCollapsed` property is set to `true`." },
        "locations":
          [ { "lineno": 252,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Collapses the button’s icon and sets its `iconCollapsed` property to `true`.",
            "description":
              [ "The `collapseIcon()` function returns a Promise that resolves when the element's `iconCollapsed` property is set to `true`." ],
            "links":
              [ "[icon](#icon), [iconCollapsed](#iconCollapsed), [expandIcon](#expandIcon)" ],
            "examples":
              [ { "title": "Collapse a button's icon",
                  "body":
                    [ "$w('#myButton').collapseIcon();" ],
                  "extra":
                    {  } },
                { "title": "Collapse a button's icon when a site visitor stops hovering over the button",
                  "body":
                    [ "$w('#myButton').onMouseOut( (event) => {",
                      "\t$w(\"#myButton\").collapseIcon();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "expandIcon",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the element's `iconCollapsed` property is set to `false`." },
        "locations":
          [ { "lineno": 240,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Expands the button’s icon and sets its `iconCollapsed` property to `false`.",
            "description":
              [ "The `expandIcon()` function returns a Promise that resolves when the element's `iconCollapsed` property is set to `false`." ],
            "links":
              [ "[icon](#icon), [iconCollapsed](#iconCollapsed), [collapseIcon](#collapseIcon)" ],
            "examples":
              [ { "title": "Expand a button's icon",
                  "body":
                    [ "$w('#myButton').expandIcon();" ],
                  "extra":
                    {  } },
                { "title": "Expand a button's icon when a site visitor hovers over the button",
                  "body":
                    [ "$w('#myButton').onMouseIn((event) => {",
                      "    $w(\"#myButton\").expandIcon();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved onto the\n element." } ],
        "ret":
          { "type": "$w.Button",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 146,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n onto the element.\n\n You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse enters an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseIn( (event) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Change the button style when the mouse eneters the button element",
                  "body":
                    [ "$w('#myButton').onMouseIn((event) => {",
                      "  $w('#myButton').style.backgroundColor = 'blue';",
                      "  $w('#myButton').style.color = 'white';",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMouseOut",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved off of\n the element." } ],
        "ret":
          { "type": "$w.Button",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 164,
              "filename": "Button.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n off of the element.\n\n You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse exits an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseOut( (event) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Change the button style when the mouse exits the button element",
                  "body":
                    [ "$w('myButton').onMouseOut((event) => {",
                      "  $w('#myButton').style.backgroundColor = 'white';",
                      "  $w('#myButton').style.color = 'blue';",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "article",
        "text": "Adding Custom Interactivity with Events",
        "url": "https://support.wix.com/en/article/velo-tutorial-adding-custom-interactivity-with-events" },
      { "icon": "article",
        "text": "Reacting to User Actions Using Events",
        "url": "https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events" },
      { "icon": "article",
        "text": "Creating a Show More Link",
        "url": "https://support.wix.com/en/article/velo-tutorial-expand-text-with-a-read-more-link" },
      { "icon": "article",
        "text": "Importing and Exporting Collection Data with Code",
        "url": "https://support.wix.com/en/article/velo-tutorial-importing-and-exporting-collection-data-with-code" },
      { "icon": "example",
        "text": "Change Layout",
        "url": "https://www.wix.com/velo/example/change-layout" },
      { "icon": "example",
        "text": "Change Site Content",
        "url": "https://www.wix.com/velo/example/change-site-content" },
      { "icon": "example",
        "text": "State Toggle",
        "url": "https://www.wix.com/velo/example/state-toggle" } ],
  "FAQs":
    [ { "title": "What style attributes can I control from code?",
        "markdown": "You can control the following style attributes using the button's [`style`](https://www.wix.com/velo/reference/$w.Button.html#style) property:\n\n*   [`backgroundColor`](https://www.wix.com/velo/reference/$w.Style.html#backgroundColor)\n*   [`borderColor`](https://www.wix.com/velo/reference/$w.Style.html#borderColor)\n*   [`borderRadius`](https://www.wix.com/velo/reference/$w.Style.html#borderRadius)\n*   [`borderWidth`](https://www.wix.com/velo/reference/$w.Style.html#borderWidth)\n*   [`color`](https://www.wix.com/velo/reference/$w.Style.html#color)" },
      { "title": "How do I prevent a button from being clicked multiple times?",
        "markdown": "You can call the [`disable()`](https://www.wix.com/velo/reference/$w.Button.html#disable) function inside the button's [`onClick()`](https://www.wix.com/velo/reference/$w.Button.html#onClick) event handler. Subsequent clicks on the button will not be registered and the buttons [`onClick()`](https://www.wix.com/velo/reference/$w.Button.html#onClick) event handler will not be called. You can call the [`enable()`](https://www.wix.com/velo/reference/$w.Button.html#enable) function to allow the button to be clicked again." },
      { "title": "Is the 'onClick()' event handler called even when a button is disabled?",
        "markdown": "No. You can call the [`enable()`](https://www.wix.com/velo/reference/$w.Button.html#enable) function to allow the button to be clicked again." },
      { "title": "How do I change the label of the button after it is clicked?",
        "markdown": "In the button's [onClick](https://www.wix.com/velo/reference/$w.Button.html#onClick) event handler, reset the button's text using the [`label`](https://www.wix.com/velo/reference/$w.Button.html#label) property.\n\n```javascript\n\n$w(\"myButton\").onClick( () => {\n\n  $w(\"myButton\").label = \"New Text\";\n\n} );\n\n```" } ] }