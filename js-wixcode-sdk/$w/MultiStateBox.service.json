{ "name": "MultiStateBox",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin" ],
  "labels": [],
  "location":
    { "lineno": 68,
      "filename": "MultiStateBox.es6" },
  "docs":
    { "summary": "Multi-state boxes are containers for states.",
      "description":
        [ "A <a href=\"https://support.wix.com/en/article/corvid-about-multi-state-boxes\" target=\"_blank\">multi-state box</a> contains",
          "multiple states, each with different content. A multi-state box displays one state at a time.",
          "",
          "For a tutorial on working with your multi-state box and Corvid, click <a href=\"https://support.wix.com/en/article/corvid-working-with-multi-state-boxes-and-code\" target=\"_blank\">here</a>." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentState",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.State",
        "locations":
          [ { "lineno": 126,
              "filename": "MultiStateBox.es6" } ],
        "docs":
          { "summary": "Gets the multi-state box's current state.",
            "links": [],
            "examples":
              [ { "title": "Get the current state and its ID",
                  "body":
                    [ "let state = $w(\"#myStatebox\").currentState;",
                      "",
                      "let stateId = state.id; // \"state1\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "states",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.State" ] },
        "locations":
          [ { "lineno": 208,
              "filename": "MultiStateBox.es6" } ],
        "docs":
          { "summary": "Gets a list of all the states contained in the multi-state box.",
            "links": [],
            "examples":
              [ { "title": "Get a multi-state box's states",
                  "body":
                    [ "let myStates = $w(\"#myStatebox\").states;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "changeState",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "stateReference",
              "type":
                [ "string",
                  "$w.State" ],
              "doc": "The state to move to. Either the [`id`]($w.State.html#id) of the state or a [`State`](#w.State.html) object from the multi-state box." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.State" ] },
            "doc": "Fulfilled - The state that the multi-state box changed to.\nRejected - Error message: If no argument was provided or the argument is not a string or an existing state." },
        "locations":
          [ { "lineno": 151,
              "filename": "MultiStateBox.es6" } ],
        "docs":
          { "summary": "Change the multi-state box's current state to a specific state.",
            "description":
              [ "The `changeState()` function returns a Promise that is resolved when",
                " the multi-state box finishes moving from the current state to the state",
                " referred to by `stateReference`. `stateReference` can be a state object or",
                " a state [`id`]($w.State.html#id).",
                "",
                " You can retrieve [`State`]($w.State.html) objects to pass to the",
                " `stateReference` parameter from your multi-state box using the",
                " [`currentState`](#currentState) or [`states`](#states) properties." ],
            "links": [],
            "examples":
              [ { "title": "Move to a new state using an id",
                  "body":
                    [ "$w(\"#myStatebox\").changeState(\"state2\");" ],
                  "extra":
                    {  } },
                { "title": "Move to a new state using a [`State`]($w.State.html) object",
                  "body":
                    [ "$w(\"#myStatebox\").changeState(state);",
                      "" ],
                  "extra":
                    { "description": "This example moves to the state that is stored in the `state` variable." } },
                { "title": "Move to a new state and log a message when the move is finished",
                  "body":
                    [ "$w(\"#myStatebox\").changeState(\"state2\")",
                      "  .then( (newState) => {",
                      "    console.log(`Done moving to ${newState.id}`);",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Switch between 2 states",
                  "body":
                    [ "$w(\"#buttonState1\").onClick(() => {",
                      "  $w('#myStatebox').changeState(\"state2\");",
                      "} );",
                      "",
                      "$w(\"#buttonState2\").onClick(() => {",
                      "  $w('#myStatebox').changeState(\"state1\");",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to switch back and forth between 2 states. The multi-state box has 2 states, with IDs `state1` and `state2`. Each state has a button. When a site visitor clicks the button, the multi-state box moves to the other state." } },
                { "title": "State per Status",
                  "body":
                    [ "wixLocation.onChange(() => {",
                      "  // Get all info on the current product",
                      "  $w('#myProductPage').getProduct()",
                      "    .then( (product) => {",
                      "      if (!product.inStock) {",
                      "        $w('#badgeStatebox').changeState(\"outOfStock\");",
                      "      }",
                      "      // If the price is different than the discount price, indicating a sale",
                      "      else if (product.price !== product.discountedPrice) {",
                      "        $w('#badgeStatebox').changeState(\"onSale\");",
                      "      }",
                      "      else {",
                      "        $w('#badgeStatebox').changeState(\"checkMeOut\");",
                      "      }",
                      "    } )",
                      "    .catch( (error) => {",
                      "      console.log(error);",
                      "    } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to display different product badges for products on a Wix Stores product page. When a site visitor navigates to a product, we check the product's status (out of stock, on sale) and change the state to display the appropriate badge." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the multi-state box moves to a new state." } ],
        "ret":
          { "type": "$w.MultiStateBox",
            "doc": "The multi-state box on which the event is now registered." },
        "locations":
          [ { "lineno": 89,
              "filename": "MultiStateBox.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the multi-state box moves to a new state.",
            "description":
              [ "`onChange` is fired when the multi-state box moves to a new state. This occurs",
                " when the [`changeState()`](#changeState) function is called." ],
            "links":
              [ "[`changeState( )`](#changeState)" ],
            "examples":
              [ { "title": "Get the ID of the state to which the multi-state box moved",
                  "body":
                    [ "$w(\"#myStatebox\").onChange( (event) => {",
                      "  let currentState = event.target.currentState.id; // \"state2\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }