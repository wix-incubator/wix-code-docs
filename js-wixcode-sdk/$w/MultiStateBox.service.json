{ "name": "MultiStateBox",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "MultiStateBox.js" },
  "docs":
    { "summary": "[Multi-state boxes](https://support.wix.com/en/article/velo-about-multi-state-boxes) are containers for states.",
      "description":
        [ "A Multi-state box is a container that holds multiple states, each with different content. A multi-state box displays one state at a time. You can use code to create conditions for each state to appear automatically, or allow site visitors to navigate through the states on their own. ",
          "",
          "It's important to ensure that your multi-state boxes are accessible to all visitors. For example, by [focusing](https://dev.wix.com/docs/velo/velo-only-apis/$w/button/focus) on a button within the multi-state box after a state changes. This allows visitors to directly access elements in the multi-state box with keyboard navigation, provides a visible indication of which element is currently selected, and enables screen readers to read the context, helping visitors see, hear, and understand what content is displayed and what actions are available. ",
          "",
          "For a tutorial on working with your multi-state box and Velo, click [here](https://support.wix.com/en/article/velo-tutorial-working-with-multi-state-boxes-and-code).",
          "",
          "Get hands-on experience with multi-state box on our [Hello Multi-state Boxes](https://www.wix.com/velo/example/hello-multi-state-boxes) example page. ",
          "",
          "> **Note:** Google's crawlers access only the content that would be initially displayed in the multi-state boxes. This may impact SEO if important information is hidden within these boxes." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels":
          [ "removed" ],
        "get": true,
        "set": false,
        "type": "$w.MultiStateBox.Accessibility",
        "locations":
          [ { "lineno": 112,
              "filename": "MultiStateBox.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) of the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. Set the accessibility properties to design your elements to be more inclusive and usable to users with visual, auditory, motor, and or cognitive disabilities. The accessibility object only affects how assistive technologies read and present site content to users. It doesn't affect the appearance, functionality, or SEO of your site. ",
                "",
                ">**Note:** Incorrect use of ARIA can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Get the accessibility properties of a multi-state box",
                  "body":
                    [ "const multiStateBoxAccessibility = $w('#myMultiStateBox').accessibility;" ],
                  "extra":
                    {  } },
                { "title": "Set the accessibility properties of a multi-state box",
                  "body":
                    [ "$w('#myMultiStateBox').accessibility.ariaCurrent = false;",
                      "$w('#myMultiStateBox').accessibility.ariaDescribedBy = $w('#multiStateBoxDescriptionText');",
                      "$w('#myMultiStateBox').accessibility.ariaHidden = true;",
                      "$w('#myMultiStateBox').accessibility.ariaLabel = 'multi-state box content';",
                      "$w('#myMultiStateBox').accessibility.ariaLabelledBy = $w('#multiStateBoxLabelText');",
                      "$w('#myMultiStateBox').accessibility.role = 'group';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "currentState",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.State",
        "locations":
          [ { "lineno": 51,
              "filename": "MultiStateBox.js" } ],
        "docs":
          { "summary": "Gets the multi-state box's current state.",
            "links": [],
            "examples":
              [ { "title": "Get the current state and its ID",
                  "body":
                    [ "let state = $w(\"#myStatebox\").currentState;",
                      "",
                      "let stateId = state.id; // \"state1\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "states",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.State" ] },
        "locations":
          [ { "lineno": 103,
              "filename": "MultiStateBox.js" } ],
        "docs":
          { "summary": "Gets a list of all the states contained in the multi-state box.",
            "links": [],
            "examples":
              [ { "title": "Get a multi-state box's states",
                  "body":
                    [ "let myStates = $w(\"#myStatebox\").states;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels":
          [ "removed" ],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 172,
              "filename": "MultiStateBox.js" },
            { "lineno": 188,
              "filename": "MultiStateBox.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of a multi-state box on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard focus order.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } },
                { "title": "Get the tab index of an element",
                  "body":
                    [ "let myElement = $w(\"#myElement\").tabIndex; //0" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "changeState",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "stateReference",
              "type":
                [ "string",
                  "$w.State" ],
              "doc": "The state to move to. Either the [`id`]($w.State.html#id) of the state or a [`State`]($w.State.html) object from the multi-state box." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.State" ] },
            "doc": "Fulfilled - The state that the multi-state box changed to.\nRejected - Error message: If no argument was provided or the argument is not a string or an existing state." },
        "locations":
          [ { "lineno": 65,
              "filename": "MultiStateBox.js" } ],
        "docs":
          { "summary": "Change the multi-state box's current state to a specific state.",
            "description":
              [ "The `changeState()` function returns a Promise that is resolved when",
                " the multi-state box finishes moving from the current state to the state",
                " referred to by `stateReference`. `stateReference` can be a state object or",
                " a state [`id`]($w.State.html#id).",
                "",
                " You can retrieve [`State`]($w.State.html) objects to pass to the",
                " `stateReference` parameter from your multi-state box using the",
                " [`currentState`](#currentState) or [`states`](#states) properties.",
                " ",
                " > **Note:**  ",
                " > If you call `changeState()` on a child multi-state box, it doesn't run until the parent box moves to the state where the child box is displayed." ],
            "links": [],
            "examples":
              [ { "title": "Move to a new state using an id",
                  "body":
                    [ "$w(\"#myStatebox\").changeState(\"state2\");" ],
                  "extra":
                    {  } },
                { "title": "Move to a new state using a [`State`]($w.State.html) object",
                  "body":
                    [ "$w(\"#myStatebox\").changeState(state);",
                      "" ],
                  "extra":
                    { "description": "This example moves to the state that is stored in the `state` variable." } },
                { "title": "Move to a new state and log a message when the move is finished",
                  "body":
                    [ "$w(\"#myStatebox\").changeState(\"state2\")",
                      "  .then( (newState) => {",
                      "    console.log(`Done moving to ${newState.id}`);",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Switch between 2 states",
                  "body":
                    [ "$w(\"#buttonState1\").onClick(() => {",
                      "  $w('#myStatebox').changeState(\"state2\");",
                      "} );",
                      "",
                      "$w(\"#buttonState2\").onClick(() => {",
                      "  $w('#myStatebox').changeState(\"state1\");",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to switch back and forth between 2 states. The multi-state box has 2 states, with IDs `state1` and `state2`. Each state has a button. When a site visitor clicks the button, the multi-state box moves to the other state." } },
                { "title": "Switch between 3 states",
                  "body":
                    [ "$w.onReady(() => {",
                      "  $w('#newYorkButton').onClick(() => {",
                      "    $w('#statebox').changeState('newYork');",
                      "  });",
                      "",
                      "  $w('#texasButton').onClick(() => {",
                      "    $w('#statebox').changeState('texas');",
                      "  });",
                      "",
                      "  $w('#californiaButton').onClick(() => {",
                      "    $w('#statebox').changeState('california');",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example shows how to change between states in multi-state boxes using code. \n You can test out the code in our [example template](https://manage.wix.com/edit-template/from?originTemplateId=65aa0783-be71-42bc-ac6b-c21b454748f5&templateId=d87fbeb3-300c-49da-b93a-a2a5b4e620c6&autoDevMode=true)." } },
                { "title": "State per Status",
                  "body":
                    [ "wixLocationFrontend.onChange(() => {",
                      "  // Get all info on the current product",
                      "  $w('#myProductPage').getProduct()",
                      "    .then( (product) => {",
                      "      if (!product.inStock) {",
                      "        $w('#badgeStatebox').changeState(\"outOfStock\");",
                      "      }",
                      "      // If the price is different than the discount price, indicating a sale",
                      "      else if (product.price !== product.discountedPrice) {",
                      "        $w('#badgeStatebox').changeState(\"onSale\");",
                      "      }",
                      "      else {",
                      "        $w('#badgeStatebox').changeState(\"checkMeOut\");",
                      "      }",
                      "    } )",
                      "    .catch( (error) => {",
                      "      console.log(error);",
                      "    } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to display different product badges for products on a Wix Stores product page. When a site visitor navigates to a product, we check the product's status (out of stock, on sale) and change the state to display the appropriate badge." } },
                { "title": "Focus on the button element in a multi-state box after switching states",
                  "body":
                    [ "  $w(\"#buttonState1\").onClick(() => {",
                      "    $w(\"#myStateBox\").changeState(\"state2\");",
                      "\t  $w(\"#buttonState2\").focus()",
                      "  });",
                      "  $w(\"#buttonState2\").onClick(() => {",
                      "    $w(\"#myStateBox\").changeState(\"state1\");",
                      "\t  $w(\"#buttonState1\").focus()",
                      "  });" ],
                  "extra":
                    { "description": "This example demonstrates how to make your multi-state box more accessible. When a site visitor changes the state, we focus on an element inside the state to enhance accessibility." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the multi-state box moves to a new state." } ],
        "ret":
          { "type": "$w.MultiStateBox",
            "doc": "The multi-state box on which the event is now registered." },
        "locations":
          [ { "lineno": 29,
              "filename": "MultiStateBox.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the multi-state box moves to a new state.",
            "description":
              [ "`onChange` is fired when the multi-state box moves to a new state. This occurs",
                " when the [`changeState()`](#changeState) function is called." ],
            "links":
              [ "[`changeState( )`](#changeState)" ],
            "examples":
              [ { "title": "Get the ID of the state to which the multi-state box moved",
                  "body":
                    [ "$w(\"#myStatebox\").onChange( (event) => {",
                      "  let currentState = event.target.currentState.id; // \"state2\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 139,
              "filename": "MultiStateBox.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "role",
              "type": "string",
              "doc": "Defines the role of the element, helping assistive technologies understand the element's purpose and how it should be interacted with. When set to `undefined` or `null`, the role is removed from the element and isn't read by assistive technologies. Learn more about [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles). \n\nSupported values: `'alert'`, `'application'`, `'button'`, `'checkbox'`, `'complementary'`, `'group'`, `'heading'`, `'link'`, `'list'`, `'listBox'`, `'listItem'`, `'navigation'`, `'none'`, `'option'`, `'radio'`, `'radioGroup'`, `'range'`, `'region'`, `'tab'`, `'tabList'`, `'tabPanel'`, `'status'`, `null`, `undefined`. \n\nDefault: `undefined`",
              "optional": true },
            { "name": "ariaHidden",
              "type": "boolean",
              "doc": "Indicates whether the element is visible to or hidden from users that rely on assistive technologies. Use `ariaHidden` to hide decorative, redundant, or off-screen content from screen readers. When `true`, the element is hidden from assistive technologies but remains visible in the DOM. When `false`, the element is exposed to assistive technologies. If `ariaHidden` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaCurrent",
              "type": "string",
              "doc": "Indicates whether the element is currently active or selected in a set of related items. This allows assistive technologies to relay to site visitors which element in a set is currently in focus. \nOnly 1 element in a set should have a value other than `'false'` at any time to ensure that assistive technologies correctly identify which element is currently in focus or active.\n\nSupported values: \n- `'true'`: Represents the current element in an unordered set of related elements.\n- `'false'`: Indicates that the element in a set isn't currently active or selected.\n- `'page'`: Represents the current page in a multi-page site.\n- `'step'`: Marks the currently active step in a multi-step process such as a checkout flow.\n- `'date'`: Represents the currently selected date in a calendar.\n\nIf `ariaCurrent` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "changed",
            "removed" ] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./multistatebox/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Hello Multi-state Boxes (Getting Started)",
        "url": "https://www.wix.com/velo/example/hello-multi-state-boxes" },
      { "icon": "example",
        "text": "State Toggle",
        "url": "https://www.wix.com/velo/example/state-toggle" },
      { "icon": "article",
        "text": "About Multi-State Boxes",
        "url": "https://support.wix.com/en/article/velo-about-multi-state-boxes" },
      { "icon": "article",
        "text": "Working with Multi-State Boxes and Code",
        "url": "https://support.wix.com/en/article/velo-tutorial-working-with-multi-state-boxes-and-code" } ] }