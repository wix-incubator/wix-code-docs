{ "name": "AppointmentField",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "AppointmentField.js" },
  "docs":
    { "summary": "Use an `AppointmentField` to select dates, times, and timezones for scheduling appointments.",
      "description":
        [ "An appointment field contains a date picker, time picker, and a timezone dropdown.",
          "Use an appointment field to schedule appointments by setting the [`dateTimeRanges`]($w/appointmentfield/dateTimeRanges)property for times when appointments are available, or just use it as a date and time picker.  Set days of the week that are not selectable for appointments by using [`disabledDaysOfWeek`]($w/appointmentfield/disabledDaysOfWeek) and set the earliest and latest dates that you can select using [`minDate`]($w/appointmentfield/minDate) and [`maxDate`]($w/appointmentfield/maxDate).",
          "",
          "Use the time zone dropdown to display the dates and times in the selected time zone. The default time zone that is used when setting the [`dateTimeRanges`]($w/appointmentfield/dateTimeRanges) property is the site's time zone, set in the [Language & Region](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fsettings/language-and-region/) settings page.",
          "The time zone for the [`value`]($w/appointmentfield/value) property is according to the browser's locale and timezone.",
          "",
          "![Appointment Field](images/appointmentField.png 'Appointment Field')" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "dateTimeRanges",
        "labels": [],
        "get": true,
        "set": true,
        "type": "$w.AppointmentField.dateTimeRangeInfo",
        "locations":
          [ { "lineno": 290,
              "filename": "AppointmentField.js" },
            { "lineno": 308,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets a list of dates and times that a site visitor can select.",
            "description":
              [ "Setting the `dateTimeRanges` property sets a list of dates and times that can be selected from the appointment field's date and time picker elements. Times can be specified for any timezone and are displayed according to the value in the timezone dropdown.",
                "",
                "Getting the `dateTimeRanges` property returns the list of dates and times that were set for the appointment field. The returned dates and times are according to the browser's locale and timezone.",
                "",
                ">**Note:** Setting `dateTimeRanges` overrides the settings panel in the editor for enabled times and enabled date ranges. Dates that have been disabled in the editor are not overridden." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's time ranges",
                  "body":
                    [ "let myDateTimeRanges = $w('#myAppointmentField').dateTimeRanges",
                      "",
                      "/* myDateTimeRanges:",
                      " *",
                      " * {",
                      " *   \"type\": \"enabledRanges\",",
                      " *   \"payload\": [",
                      " *     {",
                      " *       \"startDateTime\": \"Tue Mar 29 2022 10:00:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Tue Mar 29 2022 11:00:00 GMT+0900 (Japan Standard Time)\"",
                      " *     },",
                      " *     {",
                      " *       \"startDateTime\": \"Wed Mar 30 2022 10:00:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Wed Mar 30 2022 11:00:00 GMT+0900 (Japan Standard Time)\"",
                      " *     },",
                      " *     {",
                      " *       \"startDateTime\": \"Thu Mar 31 2022 03:30:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Thu Mar 31 2022 05:27:00 GMT+0900 (Japan Standard Time)\"",
                      " *     },",
                      " *     {",
                      " *       \"startDateTime\": \"Thu Mar 31 2022 10:15:00 GMT+0900 (Japan Standard Time)\",",
                      " *       \"endDateTime\": \"Thu Mar 31 2022 12:00:00 GMT+0900 (Japan Standard Time)\"",
                      " *     }",
                      " *   ]",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's time ranges",
                  "body":
                    [ "const myEnabledDates = [",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-28T20:00-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-28T21:00-0500\")",
                      "  },",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-29T20:00-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-29T21:00-0500\")",
                      "  },",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-30T13:30-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-30T15:27-0500\")",
                      "  },",
                      "  {",
                      "    \"startDateTime\": new Date(\"2022-03-30T20:15-0500\"),",
                      "    \"endDateTime\": new Date(\"2022-03-30T22:00-0500\")",
                      "  }",
                      "];",
                      "",
                      "$w('#myAppointmentField').dateTimeRanges = {",
                      "  type: 'enabledRanges',",
                      "  payload: myEnabledDates",
                      "};" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDaysOfWeek",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 243,
              "filename": "AppointmentField.js" },
            { "lineno": 265,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets a list of days in the week that are not selectable.",
            "description":
              [ "Setting the `disabledDaysOfWeek` property sets a list of days of the week that can't be selected in the appointment field's date element.",
                "Weekdays are numbered 0 to 6 with Sunday = 0.",
                "Setting `disabledDaysOfWeek` to `[]` clears the list and enables all days of the week.  ",
                "",
                "Getting the `disabledDaysOfWeek` property returns the list of disabled days of the week set in the Editor or API.  ",
                "",
                ">**Note:** Setting `disabledDaysOfWeek` overrides any settings made in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's disabledDaysOfWeek property",
                  "body":
                    [ "let disabledDays = $w('#myAppointmentField').disabledDaysOfWeek; // [0, 2]" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's disabledDaysOfWeek property",
                  "body":
                    [ "$w('#myAppointmentField').disabledDaysOfWeek = [0, 2];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 107,
              "filename": "AppointmentField.js" },
            { "lineno": 129,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the latest date that a site visitor can select.",
            "description":
              [ "Setting the `maxDate` property prevents site visitors from selecting",
                "dates later than the specified maximum date.",
                "",
                "Set `maxDate` to `undefined` to remove the current maximum date limitation.",
                "",
                "Getting the `maxDate` property returns the current maximum",
                "date that a site visitor can select." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get an appointment field's maximum date",
                  "body":
                    [ "let appointmentMaxDate = $w('#myAppointmentField').maxDate;",
                      "",
                      "let maxStr = appointmentMaxDate.toDateString(); // 'Fri Feb 11 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's maximum date to today",
                  "body":
                    [ "$w('#myAppointmentField').maxDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 136,
              "filename": "AppointmentField.js" },
            { "lineno": 159,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the earliest date that a site visitor can select.",
            "description":
              [ "Setting the `minDate` property prevents site visitors from selecting",
                "dates before the specified minimum date.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting the `minDate` property returns the current minimum",
                "date that a site visitor can select." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get an appointment field's minimum date",
                  "body":
                    [ "let appointmentMinDate = $w('#myAppointmentField').minDate;",
                      "",
                      "let minStr = appointmentMinDate.toDateString(); // \"Fri Jan 07 2022\"" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's minimum date to today",
                  "body":
                    [ "$w('#myAppointmentField').minDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "schedulingNotice",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "0",
        "locations":
          [ { "lineno": 191,
              "filename": "AppointmentField.js" },
            { "lineno": 211,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the minimum amount of time before an appointment starts that a time slot is displayed.",
            "description":
              [ "Setting the `schedulingNotice` property sets the minimum number of hours before an appointment starts that it is displayed in the date and time elements. For example, by setting `schedulingNotice` to 12, only appointments that start 12 hours from now are displayed.",
                "",
                "Getting the `schedulingNotice` property returns the minimum number of hours before an appointment that its time slot is displayed.",
                "",
                "`schedulingNotice` can be set from 0 to 240 hours. Setting `schedulingNotice` to 0 displays all appointments." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's schedulingNotice property",
                  "body":
                    [ "const schedulingNoticeHours = $w('#myAppointmentField').schedulingNotice; // 24" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's schedulingNotice property",
                  "body":
                    [ "$w('#myAppointmentField').schedulingNotice = 24;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "timeIncrements",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "15",
        "locations":
          [ { "lineno": 165,
              "filename": "AppointmentField.js" },
            { "lineno": 185,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets  or gets the interval between the times displayed in the time picker.",
            "description":
              [ "Setting the `timeIncrements` property sets the interval between the times displayed in the appointment field's time picker. For example setting `timeIncrements` to 15, displays selectable times with 15 minute intervals between them.",
                "",
                "Getting the `timeIncrements` property returns the interval between the times displayed in the appointment field's time picker.",
                "",
                "Increments can be set from 1 to 60." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's timeIncrements",
                  "body":
                    [ "const myIntervals = $w('#myAppointmentField').timeIncrements; // 30" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's timeIncrements",
                  "body":
                    [ "$w('#myAppointmentField').timeIncrements = 30;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "title",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 26,
              "filename": "AppointmentField.js" },
            { "lineno": 37,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the title of an appointment field.",
            "description":
              [ "An appointment field has a title that appears at the top of the field. Setting the `title` property sets the text that appears in the top section of the appointment field. Getting the `title` property gets the text that was set using the Editor or API." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's title property",
                  "body":
                    [ "const appointmentFieldTitle = $w('#myAppointmentField').title;" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's title property",
                  "body":
                    [ "$w('#myAppointmentField').title = 'Select an appointment';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "useAmPmFormat",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "defaultValue": "true",
        "locations":
          [ { "lineno": 217,
              "filename": "AppointmentField.js" },
            { "lineno": 235,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the time format.",
            "description":
              [ "Setting the `useAmPmFormat` property to `true` sets the appointment field's time picker to a 12-hour format. Setting `useAmPmFormat` to `false` sets the time picker to a 24-hour format.",
                "",
                "Getting the `useAmPmFormat` property returns the current format for displaying the time." ],
            "links": [],
            "examples":
              [ { "title": "Get an appointment field's schedulingNotice property",
                  "body":
                    [ "const appointmentMinDate = $w('#myAppointmentField').useAmPmFormat;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's schedulingNotice property",
                  "body":
                    [ "$w('#myAppointmentField').useAmPmFormat = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "locations":
          [ { "lineno": 43,
              "filename": "AppointmentField.js" },
            { "lineno": 75,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the date and time value of the appointment field.",
            "description":
              [ "Setting the `value` property sets the date and time displayed in the appointment field. ",
                " Getting the `value` property gets the  appointment field's date and time according to the browser's locale and timezone.",
                " ",
                " Set and get the timezone using the [`visitorTimeZone`](#visitorTimeZone) property.",
                "",
                "> **Notes:**",
                " > + Changing an appointment field's `value` in code doesn't trigger an `onChange` event.",
                ">",
                ">",
                "> + If an appointment field is connected to a dataset, setting the appointment field's `value`",
                ">   in code doesn't set the value of the connected field in the dataset.",
                ">   That means if you use the dataset to perform a submit, the value changed",
                ">   in code isn't reflected in the submitted item.",
                ">",
                ">",
                "> + To submit the new value using a dataset, set the field's value using the",
                ">   [`setFieldValue()`](wix-dataset.html#setFieldValue) function before",
                ">   performing the submit." ],
            "links":
              [ "[visitorTimeZone](#visitorTimeZone)" ],
            "examples":
              [ { "title": "Get an appointment field's date amd time value and format it",
                  "body":
                    [ "const dateValue = $w('#myAppointmentField').value; // Thu Mar 31 2022 12:45:00 GMT-0500 (Eastern Standard Time)",
                      "",
                      "const localeValue = dateValue.toLocaleDateString('en-US'); // 3/31/2022",
                      "const stringValue = dateValue.toDateString(); // Thu Mar 31 2022",
                      "const myTime = `${dateValue.getHours()}:${dateValue.getMinutes()}`;// 12:45",
                      "const displayTimezone= dateValue.visitorTimeZone; // Asia/Tokyo" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's date and time value",
                  "body":
                    [ "$w('#myAppointmentField').value = new Date(\"2022-04-13T15:30-0500\");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "visitorTimeZone",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 81,
              "filename": "AppointmentField.js" },
            { "lineno": 100,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Sets or gets the timezone dropdown value.",
            "description":
              [ "Setting the `visitorTimeZone` property sets the value in the timezone dropdown and updates the times in the time picker for the specified timezone. Use an [IANA timezone string ](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) to set the `visitorTimeZone` property. ",
                "",
                " Getting the `visitorTimeZone` property returns the currently selected timezone from the timezone dropdown.",
                "",
                "> **Note:** The [`value`](#value) property always returns the date and time value according to the browser's timezone." ],
            "links":
              [ "[value](#value)" ],
            "examples":
              [ { "title": "Get an appointment field's visitorTimeZone property",
                  "body":
                    [ "let timeZone = $w('#myAppointmentField').visitorTimeZone;  // \"Pacific/Auckland\"" ],
                  "extra":
                    {  } },
                { "title": "Set an appointment field's visitorTimeZone property",
                  "body":
                    [ "$w('#myAppointmentField').visitorTimeZone = 'Pacific/Auckland';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onViewChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ViewChangeEventHandler",
              "doc": "Name of the function or\n the function expression that is called when the appointment field's month or year changes." },
            { "name": "operation",
              "type": "$w.ViewChangeOperation",
              "doc": "Name of an async function that is called when an appointment field's month or year changes. The operation result is passed to the handler in the event's `options.operationResult` object.",
              "optional": true },
            { "name": "timeout",
              "type": "number",
              "doc": "Number of milliseconds to wait for the operation to return. If the operation doesn't resolve before the timeout, an error is returned. Defaults to 10,000.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 326,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Adds an event handler that triggers when the appointment field's year or month changes.",
            "description":
              [ "When a site visitor views a new month or year in the appointment field's date picker, the operation function is called. When the operation function returns, the returned object is passed to the event handler in the `options.operationResult` object. ",
                " Each time a site visitor enters the date picker, the `onViewChange` event is triggered.",
                " Selecting a day in the displayed month does not trigger the event handler.   ",
                "",
                ">**Note:** The operation function is called each time the month or year changes and the onViewChange event is triggered. ",
                "If the operation function takes time to return there can be more than 1 instance of the function running when a site visitor clicks multiple times on the next month arrow. In these cases, only the last triggered operation is returned to the event handler and the handler only runs once." ],
            "links": [],
            "examples":
              [ { "title": "Set the dateTimeRanges property using slots retrieved for a bookings service ID, when the month or year changes in the appointment field",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "$w.onReady(function () {",
                      "  $w('#myAppointmentField').onViewChange(viewChangeHandler, viewChangeOperation, 3);",
                      "});",
                      "",
                      "async function viewChangeOperation({ options }) {",
                      "  const myBookingsServiceId = 'b420ff55-87b7-419f-8b90-9a09a650c19f';",
                      "  const { startDate, endDate } = options;",
                      "  const slots = await wixBookings.getServiceAvailability(myBookingsServiceId, { startDateTime: startDate, endDateTime: endDate });",
                      "  return slots;",
                      "}",
                      "",
                      "async function viewChangeHandler(event) {",
                      "  const { options } = event;",
                      "  const slots = options.operationResult.slots;",
                      "  const formattedSlots = slots.map(slot => ({",
                      "    startDateTime: slot.startDateTime,",
                      "    endDateTime: slot.endDateTime",
                      "  }));",
                      "",
                      "  $w('#myAppointmentField').dateTimeRanges = {",
                      "    type: 'enabledRanges',",
                      "    payload: formattedSlots",
                      "  };",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onViewChange" } },
      { "name": "reset",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 314,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "summary": "Resets the appointment field to its original values.",
            "description":
              [ "The `reset()` function sets the date, time, and timezone fields to their original values." ],
            "links": [],
            "examples":
              [ { "title": "Reset the values in an appointment field",
                  "body":
                    [ "$w('#myAppointmentField').reset();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "OperationOptions",
        "locations":
          [ { "lineno": 354,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "description":
              [ "An object passed to the Operations callback of an appointment field." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "startDate",
              "type": "Date",
              "doc": "Start date of the currently displayed month." },
            { "name": "endDate",
              "type": "Date",
              "doc": "End date of the currently displayed month." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "dateTimeRange",
        "locations":
          [ { "lineno": 272,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "description":
              [ "An object for setting and getting an appointment field's time ranges." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "startDateTime",
              "type": "Date",
              "doc": "Date and time of the start of the range." },
            { "name": "endDateTime",
              "type": "Date",
              "doc": "Date and time of the end of the range." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "dateTimeRangeInfo",
        "locations":
          [ { "lineno": 281,
              "filename": "AppointmentField.js" } ],
        "docs":
          { "description":
              [ "An object for setting and getting an appointment field's time ranges." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Date range type. Valid values: `'enabledRanges'`" },
            { "name": "payload",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "$w.AppointmentField.dateTimeRange" ] },
              "doc": "Array of dateTimeRange objects." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }