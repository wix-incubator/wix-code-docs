{ "name": "MenuContainer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "MenuContainer.js" },
  "docs":
    { "summary": "A menu container holds the elements in a\n mobile menu that are used for navigating between mobile site pages.",
      "description":
        [ "You can add elements to or remove elements from the container to customize your site's mobile menu. ",
          " The menu container helps mobile site visitors navigate from page to page on a mobile site and ",
          " only appears in the mobile version of your site. Use [Menu](https://www.wix.com/velo/reference/$w/menu) to make changes to your regular site.",
          "",
          " With Velo, you can customize mobile menu items by changing their labels, links, ",
          " where the item opens, and if an item displays as selected. This includes using Velo ",
          " to modify mobile site menus in real time during the visitor's stay on the site.",
          "",
          " Learn more about [adding a mobile menu container](https://support.wix.com/en/article/wix-editor-about-the-mobile-menu) to your site." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "menuItems",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.MenuContainer.MenuItem" ] },
        "defaultValue": "An array of mobile menu items defined using the Editor.",
        "locations":
          [ { "lineno": 106,
              "filename": "MenuContainer.js" },
            { "lineno": 138,
              "filename": "MenuContainer.js" } ],
        "docs":
          { "summary": "Sets or gets mobile menu items.",
            "description":
              [ "Setting the `menuItems` property sets the items",
                " for a menu element.",
                "",
                " Getting the `menuItems` property returns a `menuItems` array of menu items that have been set using code. If no",
                " items have been set using code, the array defaults to the items defined using the Editor.",
                "",
                " You can't modify the `menuItems` array in-place. To add, change, or remove",
                " individual mobile menu items:",
                "",
                "   1. Store the value of the `menuItems` property in a variable.",
                "   1. Make changes to the variable's array of items.",
                "   1. Reset the `menuItems` property with the variable's modified array." ],
            "links": [],
            "examples":
              [ { "title": "Get mobile menu items",
                  "body":
                    [ "let menuItems = $w('#myMobileMenu').menuItems;",
                      "",
                      "/* Sample array of menu items: ",
                      " *",
                      " * [",
                      " *   {",
                      " *     \"link\": \"https://myairlines.com\",",
                      " *     \"target\": \"_self\",",
                      " *     \"label\": \"Home\",",
                      " *     \"selected\": true,",
                      " *     \"menuItems\": []",
                      " *   },",
                      " *   {",
                      " *     \"link\": \"https://myairlines.com/reservations\",",
                      " *     \"target\": \"_self\",",
                      " *     \"label\": \"Book a Flight\",",
                      " *     \"selected\": false,",
                      " *     \"menuItems\": []",
                      " *   },",
                      " *   {",
                      " *     \"link\": \"https://myairlines.com/frequentflier\",",
                      " *     \"target\": \"_self\",",
                      " *     \"label\": \"Mileage Program\",",
                      " *     \"selected\": false,",
                      " *     \"menuItems\": [",
                      " *       {",
                      " *         \"link\": \"https://myairlines.com//frequentflier/join\",",
                      " *         \"target\": \"_self\",",
                      " *         \"label\": \"Join\",",
                      " *         \"selected\": false,",
                      " *         \"menuItems\": []",
                      " *       },",
                      " *       {",
                      " *         \"link\": \"https://myairlines.com/frequentflier/check\",",
                      " *         \"target\": \"_self\",",
                      " *         \"label\": \"Check Miles\",",
                      " *         \"selected\": false,",
                      " *         \"menuItems\": []",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Set mobile menu items for a mobile menu with a submenu",
                  "body":
                    [ "$w('#myMobileMenu').menuItems = [",
                      "  {label: 'Home', link: '/', selected: true},",
                      "  {label: 'For Rent', link: '/rentals', menuItems: [",
                      "    {label: 'Long Term', link: '/rentals/long'},",
                      "    {label: 'Short Term', link: '/rentals/short'}",
                      "  ]},",
                      "  {label: 'For Sale', link: '/purchases'},",
                      "  {label: 'Mortgage calculator', link: 'https://www.mortgagecalculator.org/', target: '_blank'},",
                      "  {label: 'About Us', link: '/about'}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Set items for a mobile menu that changes dynamically based on a visitor's role",
                  "body":
                    [ "import { currentMember } from 'wix-members';",
                      "",
                      "$w.onReady(async function  () {",
                      "  $w('#myMobileMenu').menuItems = [",
                      "    {label: 'Home', link: '/', selected: false},",
                      "    {label: 'For Rent', link: '/rentals'},",
                      "    {label: 'For Sale', link: '/purchases'}",
                      "  ]",
                      "  try {",
                      "    const roles = await currentMember.getRoles();",
                      "    const foundRole = roles.some(role => role.title === 'Realtor');",
                      "    if (foundRole) {",
                      "      let items = $w('#myMobileMenu').menuItems;",
                      "      items.push({",
                      "        label: 'Realtors Only',",
                      "        link: '/realtors'",
                      "      });",
                      "      $w('#myMobileMenu').menuItems = items;",
                      "    }",
                      "  } catch (error) {",
                      "    // Handle the error",
                      "    console.error(error);",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example assumes that roles have been defined for the site and checks the visitor's role. If the visitor is a realtor, the visitor\n sees an additional mobile menu item for a hidden \"For Realtors Only\" page." } },
                { "title": "Add a new mobile menu item to an existing mobile menu",
                  "body":
                    [ "let menuItems = $w('#myMobileMenu').menuItems;",
                      "menuItems.push({label: 'My New Label', link: '/mynewlink'});",
                      "$w('#myMobileMenu').menuItems = menuItems;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the mobile menu items, adds a new\n item, and then overwrites the old items." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "close",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the mobile menu has finished closing." },
        "locations":
          [ { "lineno": 38,
              "filename": "MenuContainer.js" } ],
        "docs":
          { "summary": "Closes a mobile menu.",
            "description":
              [ "The `close()` function returns a Promise that is resolved when the",
                " custom mobile menu's container has finished closing." ],
            "links":
              [ "[open( )](#open)" ],
            "examples":
              [ { "title": "Close a custom mobile menu",
                  "body":
                    [ "$w(\"#myMenuContainer\").close();" ],
                  "extra":
                    {  } },
                { "title": "Close a custom mobile menu and log a message when done",
                  "body":
                    [ "$w(\"#myMenuContainer\").close()",
                      "  .then( () => {",
                      "    console.log(\"Menu is closed\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onItemClick",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mobile menu item is clicked." } ],
        "ret":
          { "type": "$w.Menu.MenuItem",
            "doc": "The mobile menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 91,
              "filename": "MenuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user clicks a mobile menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the mobile menu item that was clicked",
                  "body":
                    [ "$w('#myMenu').onItemClick( (event) => {",
                      "  let label = event.item.label;  // \"Home\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseClick" } },
      { "name": "onItemDblClick",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mobile menu item is double clicked." } ],
        "ret":
          { "type": "$w.Menu.MenuItem",
            "doc": "The mobile menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 115,
              "filename": "MenuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user double clicks a mobile menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the mobile menu item that was double clicked",
                  "body":
                    [ "$w('#myMenu').onItemDblClick( (event) => {",
                      "  let label = event.item.label;  // \"Book a Flight\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/reservations\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseDblClick" } },
      { "name": "onItemMouseIn",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mobile menu item is hovered over." } ],
        "ret":
          { "type": "$w.MenuContainer.MenuItem",
            "doc": "The mobile menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 33,
              "filename": "MenuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user hovers over a mobile menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the mobile menu item that the mouse hovered over",
                  "body":
                    [ "$w('#myMenu').onItemMouseIn( (event) => {",
                      "  let label = event.item.label;  // \"Mileage Program\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/frequentflier\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Show/hide text if hovering over a mobile menu item",
                  "body":
                    [ "$w('#myMenu').onItemMouseIn(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').show();   // \"You are about to leave the Wix site\"",
                      "  }",
                      "});",
                      "",
                      "$w('#myMenu').onItemMouseOut(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').hide();",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to show a message if the mouse hovers over a mobile menu \n item that links to an external site." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseIn" } },
      { "name": "onItemMouseOut",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mobile menu item is not hovered over." } ],
        "ret":
          { "type": "$w.MenuContainer.MenuItem",
            "doc": "The mobile menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 64,
              "filename": "MenuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user stops hovering over a mobile menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the mobile menu item that the mouse stops hovering over",
                  "body":
                    [ "$w('#myMenu').onItemMouseOut( (event) => {",
                      "  let label = event.item.label;  // \"Mileage Program\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/frequentflier\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Show/hide text if hovering over a mobile menu item",
                  "body":
                    [ "$w('#myMenu').onItemMouseIn(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').show();   // \"You are about to leave the Wix site\"",
                      "  }",
                      "});",
                      "",
                      "$w('#myMenu').onItemMouseOut(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').hide();",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to hide a message if the mouse stops hovering over a mobile menu \n item that links to an external site." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseOut" } },
      { "name": "open",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the mobile menu has finished opening." },
        "locations":
          [ { "lineno": 25,
              "filename": "MenuContainer.js" } ],
        "docs":
          { "summary": "Opens a mobile menu.",
            "description":
              [ "The `open()` function returns a Promise that is resolved when the",
                " mobile menu's container has finished opening." ],
            "links":
              [ "[close( )](#close)" ],
            "examples":
              [ { "title": "Open a custom mobile menu",
                  "body":
                    [ "$w(\"#myMenuContainer\").open();" ],
                  "extra":
                    {  } },
                { "title": "Open a custom mobile menu and log a message when done",
                  "body":
                    [ "$w(\"#myMenuContainer\").open()",
                      "  .then( () => {",
                      "    console.log(\"Menu is open\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "MenuItem",
        "locations":
          [ { "lineno": 53,
              "filename": "MenuContainer.js" } ],
        "docs":
          { "summary": "An object that contains the attributes of a mobile menu item.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "label",
              "type": "string",
              "doc": "The label of the mobile menu item. This is text that the site visitor sees in the mobile menu and can click to navigate. \n  \n If not specified, and the page that the link property references is: \n + An external page or an empty string: The mobile menu defaults to the mobile menu items based on site pages only, as defined in the Editor, and an error is logged to the console. \n + A page nested under a folder: The specific mobile menu item label defaults to the name of the corresponding page as defined in the Editor.\n + A regular, non-nested, site page: The `label` for the mobile menu item gets its value from the name of the page that the `link` property references.\n \n Min: 1 character\n\n Max: 40 characters",
              "optional": true },
            { "name": "selected",
              "type": "boolean",
              "doc": "Setting `selected` to `true` for a mobile menu item causes the item to appear highlighted and to expand any of its sub-items in the menu container. \n You can use this property to indicate which page is currently being displayed. \n \n >**Note:** The value of `selected` isn't validated against which page is actually displayed. For example, you can write code that misleadingly sets `selected` to `true` for multiple menu items. \n  \n When not defined explicitly using the `selected` property, the `selected` value is derived from the currently-active page in the site's _main_ mobile menu \n (as defined when managing the mobile menu in the Editor) and not derived from a currently-active page in a _custom_ mobile menu.\n\n Default: `false`",
              "optional": true },
            { "name": "link",
              "type": "string",
              "doc": "Optional link for the mobile menu item. The different types of links you can use are:\n\n + `/localPageURL`: Another page on your site, such as `/about` or `/rentals/shortterm`.\n + `/`: Your site's home page.\n + `http(s)://<url>`: An external web address, such as `https://www.mortgagecalculator.org/`.\n + `wix:document://<location>`: A document stored in the Media Manager, such as `wix:document://v1/9bec_52fb06ea/filename.xls`.\n + `mailto:<email-address>?subject=<subject>`: An email, such as `mailto:michael@example.com?subject=Coming%20Soon`.\n + `tel:<phone number>`: A phone number, such as `tel:+1-555-555-5555`.\n \n If `link` isn't specified, the corresponding label isn't clickable. \n \n Specifying an empty string is not supported. The mobile menu defaults to the mobile menu items as defined in the Editor and an error is logged to the console.\n\n Min: 1 character\n\n Max: 40 characters",
              "optional": true },
            { "name": "target",
              "type": "string",
              "doc": "Whether the link opens in the same window/tab or in a new window/tab.\n + `_self`. The page opens in the same window/tab.\n + `_blank`. The page opens in a new window/tab.\n \n > **Note:** `target` doesn't work when previewing your site.\n\n\n Default: `_self`",
              "optional": true },
            { "name": "menuItems",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "$w.MenuContainer.MenuItem" ] },
              "doc": "Menus can have 1 additional level of submenus.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }