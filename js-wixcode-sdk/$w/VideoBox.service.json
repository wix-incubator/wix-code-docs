{ "name": "VideoBox",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin" ],
  "labels": [],
  "location":
    { "lineno": 19,
      "filename": "VideoBox.es6" },
  "docs":
    { "summary": "An element for displaying videos with creative frames and graphic overlays.",
      "description":
        [ "A VideoBox is an element that allows you to showcase your videos in beautifully-designed video containers. ",
          " Unlike the [`VideoPlayer`](https://www.wix.com/corvid/reference/$w/videoplayer) element, video boxes do ",
          " not have controls, text descriptions, titles or the ability to display in full screen mode. This ",
          " ensures a nice, clean look.",
          "",
          " A video box allows you to present video from the following, using creative frames and graphic overlays:",
          "",
          " + Videos uploaded to your site",
          " + Transparent videos uploaded to your site",
          " + Videos from the Wix Media library",
          " + Transparent videos from the Wix Media library" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentTime",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 115,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Gets the current play time from the beginning of the current video, in seconds.",
            "links": [],
            "examples":
              [ { "title": "Get the current play time",
                  "body":
                    [ "let currentTime = $w(\"#myVideoBox\").currentTime // 137" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "duration",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 135,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Gets the total play time of the current video, in seconds.",
            "links": [],
            "examples":
              [ { "title": "Get the current video's duration",
                  "body":
                    [ "let duration = $w(\"#myVideoBox\").duration // 198" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isMuted",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 210,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Indicates if the volume is currently muted.",
            "description":
              [ "To set the `isMuted` property, use the [`mute()`](#mute)",
                " and [`unmute()`](#unmute) functions." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the volume is muted",
                  "body":
                    [ "let isMuted = $w(\"#myVideoBox\").isMuted // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isPlaying",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 90,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Indicates if a video is currently playing.",
            "description":
              [ "To set the `isPlaying` property, use the [`play()`](#play),",
                " [`pause()`](#pause), and [`stop()`](#stop) functions." ],
            "links": [],
            "examples":
              [ { "title": "Get whether a video is playing",
                  "body":
                    [ "let isPlaying = $w(\"#myVideoBox\").isPlaying // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "src",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 599,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Sets or gets the file location of the current video.",
            "description":
              [ "Setting the `src` property changes the displayed video to",
                " the video found at the new `src` value.",
                "",
                " Getting the `src` property returns the location of the",
                " current video file.",
                "",
                " The video file is a video from the <a href=\"https://support.wix.com/en/article/about-the-media-manager\" target=\"_blank\">Media Manager</a>.",
                " URL Format: `wix:video://v1/<video_uri>/<filename>#posterUri=<poster_uri>&posterWidth=<width>&posterHeight=<height>` or a ",
                " video uploaded to your site. ",
                "",
                " Transparent videos are also supported." ],
            "links": [],
            "examples":
              [ { "title": "Get the current video's location",
                  "body":
                    [ "let videoSrc = $w(\"#myVideoBox\").src;",
                      "// \"wix:video://v1/80c05f_be1c421575e34915ad257571c4055ee4/SampleVideo_1280x720_10mb.mp4#posterUri=80c05f_be1c421575e34915ad257571c4055ee4f001.jpg&posterWidth=1280&posterHeight=720\"" ],
                  "extra":
                    {  } },
                { "title": "Set the current video to a video uploaded to your site",
                  "body":
                    [ "$w(\"#myVideoBox\").src = \"wix:video://v1/80c05f_be1c421575e34915ad257571c4055ee4/SampleVideo_1280x720_10mb.mp4#posterUri=80c05f_be1c421575e34915ad257571c4055ee4f001.jpg&posterWidth=1280&posterHeight=720\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "volume",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 164,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Sets or gets the video box volume.",
            "description":
              [ "Setting the `volume` property sets the video box's percentage of total",
                " volume. Set the value to a number between `0` and `100`.",
                "",
                " Getting the `volume` property returns the video box's current",
                " percentage of total volume." ],
            "links": [],
            "examples":
              [ { "title": "Get a video box's volume",
                  "body":
                    [ "let volume = $w(\"#myVideoBox\").volume // 42" ],
                  "extra":
                    {  } },
                { "title": "Set a video box's volume",
                  "body":
                    [ "$w(\"#myVideoBox\").volume = 42;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The actual volume heard by a site visitor depends on the value of the\n `volume` property and the volume settings on the visitor's device." ] } } ],
  "operations":
    [ { "name": "mute",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been muted." },
        "locations":
          [ { "lineno": 346,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Mutes video box volume.",
            "links": [],
            "examples":
              [ { "title": "Mute volume",
                  "body":
                    [ "$w(\"#myVideoBox\").mute();" ],
                  "extra":
                    {  } },
                { "title": "Mute volume and log a message when done",
                  "body":
                    [ "$w(\"#myVideoBox\").mute()",
                      "  .then( () => {",
                      "    console.log(\"Done with mute\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onEnded",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video has ended." } ],
        "ret":
          { "type": "$w.VideoBox",
            "doc": "The video box that triggered the event." },
        "locations":
          [ { "lineno": 506,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback has ended.",
            "description":
              [ "A video ends when playback reaches the [`duration`](#duration) of the video.",
                "",
                " If the video is set to play in a loop, this event handler is never triggered." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the video box whose video has ended",
                  "body":
                    [ "$w(\"#myVideoBox\").onEnded( (event) => {",
                      "  let targetId = event.target.id; // \"myVideoBox\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onEnded" } },
      { "name": "onMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved onto the\n element." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 45,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "**Note: This standard element property is not relevant for VideoBox.**",
            "description":
              [ "Adds an event handler that runs when the mouse pointer is moved",
                " onto the element.",
                "",
                "> **Deprecation note:** The $w parameter of event handlers is being deprecated. To get",
                " a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function",
                " and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see",
                " [here](https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "mouseenter" } },
      { "name": "onMouseOut",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved off of\n the element." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 68,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "**Note: This standard element property is not relevant for VideoBox.**",
            "description":
              [ "Adds an event handler that runs when the mouse pointer is moved",
                " off of the element.",
                "",
                " > **Deprecation note:** The $w parameter of event handlers is being deprecated. To get",
                " a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function",
                " and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see",
                " [here](https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "mouseleave" } },
      { "name": "onPause",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video is paused." } ],
        "ret":
          { "type": "$w.VideoBox",
            "doc": "The video box that triggered the event." },
        "locations":
          [ { "lineno": 459,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is paused.",
            "description":
              [ "A video can be paused by a user clicking the video box's",
                " pause button or by calling its [`pause()`](#pause) or [`stop()`](#stop) functions." ],
            "links":
              [ "[pause( )](#pause)" ],
            "examples":
              [ { "title": "Get the ID of the video box that has been paused",
                  "body":
                    [ "$w(\"#myVideoBox\").onPause( (event) => {",
                      "  let targetId = event.target.id; // \"myVideoBox\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPause" } },
      { "name": "onPlay",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video in the video box is played." } ],
        "ret":
          { "type": "$w.VideoBox",
            "doc": "The video box that triggered the event." },
        "locations":
          [ { "lineno": 418,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is started or restarted.",
            "description":
              [ "A video in a video box can be played by a user clicking the video box's",
                " play button or by calling its [`play()`](#play) function." ],
            "links":
              [ "[play( )](#play)" ],
            "examples":
              [ { "title": "Get the ID of the video box that is playing",
                  "body":
                    [ "$w(\"#myVideoBox\").onPlay( (event) => {",
                      "  let targetId = event.target.id; // \"myVideoBox\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPlay" } },
      { "name": "onProgress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video progresses." } ],
        "ret":
          { "type": "$w.VideoBox" },
        "locations":
          [ { "lineno": 552,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback progresses.",
            "description":
              [ "A video continually progresses as the video plays." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the video box that is progressing",
                  "body":
                    [ "$w(\"#myVideoBox\").onProgress( (event) => {",
                      "  let targetId = event.target.id; // \"myVideoBox\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onProgress" } },
      { "name": "pause",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been paused." },
        "locations":
          [ { "lineno": 260,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "The `pause()` function pauses the current video and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the video box by the [onPause( )](#onPause)",
                " function or in the Editor are called." ],
            "links": [],
            "examples":
              [ { "title": "Pause playback",
                  "body":
                    [ "$w(\"#myVideoBox\").pause();" ],
                  "extra":
                    {  } },
                { "title": "Pause playback and log a message when done",
                  "body":
                    [ "$w(\"#myVideoBox\").pause()",
                      "  .then( () => {",
                      "    console.log(\"Done with pause\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "play",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback begins or resumes." },
        "locations":
          [ { "lineno": 233,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Begins or resumes playback.",
            "description":
              [ "The `play()` function plays the current video and fires a `play` event.",
                "",
                " The `play` event handlers that are set on the video box either by the [onPlay( )](#onPlay)",
                " function or in the Editor are called." ],
            "links": [],
            "examples":
              [ { "title": "Begin or resume playback",
                  "body":
                    [ "$w(\"#myVideoBox\").play();" ],
                  "extra":
                    {  } },
                { "title": "Begin or resume playback and log a message when done",
                  "body":
                    [ "$w(\"#myVideoBox\").play()",
                      "  .then( () => {",
                      "    console.log(\"Done with play\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stop",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been stopped." },
        "locations":
          [ { "lineno": 287,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "The `stop()` function stops the current playback,",
                " moves to the beginning of the video, and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the video box by the [onPause( )](#onPause)",
                " function or in the Editor are called." ],
            "links": [],
            "examples":
              [ { "title": "Stop playback",
                  "body":
                    [ "$w(\"#myVideoBox\").stop();" ],
                  "extra":
                    {  } },
                { "title": "Stop playback and log a message when done",
                  "body":
                    [ "$w(\"#myVideoBox\").stop()",
                      "  .then( () => {",
                      "    console.log(\"Done with stop\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "togglePlay",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been toggled." },
        "locations":
          [ { "lineno": 315,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Toggles playback.",
            "description":
              [ "The `togglePlay()` function either pauses or plays the current video based",
                " on its current state:",
                "",
                " + If the video is paused, it plays and a `play` event is fired. The",
                "   `play` event handlers set on the video box by the [onPlay( )](#onPlay)",
                "   function or in the Editor are called.",
                " + If the video is playing, it is paused and a `pause` event is fired. The",
                "   `pause` event handlers set on the video box by the [onPause( )](#onPause)",
                "   function or in the Editor are called." ],
            "links": [],
            "examples":
              [ { "title": "Toggle playback",
                  "body":
                    [ "$w(\"#myVideoBox\").togglePlay();" ],
                  "extra":
                    {  } },
                { "title": "Toggle playback and log a message when done",
                  "body":
                    [ "$w(\"#myVideoBox\").togglePlay()",
                      "  .then( () => {",
                      "    console.log(\"Done with toggle play\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "unmute",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been unmuted." },
        "locations":
          [ { "lineno": 368,
              "filename": "VideoBox.es6" } ],
        "docs":
          { "summary": "Unmutes video volume.",
            "links": [],
            "examples":
              [ { "title": "Unmute volume",
                  "body":
                    [ "$w(\"#myVideoBox\").unmute();" ],
                  "extra":
                    {  } },
                { "title": "Unmute volume and log a message when done",
                  "body":
                    [ "$w(\"#myVideoBox\").unmute()",
                      "  .then( () => {",
                      "    console.log(\"Done with unmute\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }