{ "name": "Style",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "StyleMixin.js" },
  "docs":
    { "summary": "An object representing an element's styles.",
      "description":
        [ "Only elements that expose a [`style`](#style) property can be styled programmatically.",
          "",
          "The following elements expose the `style` property:",
          "",
          " + [`Box`]($w.Box.html)",
          " + [`Button`]($w.Button.html)",
          " + [`Checkbox`]($w.Checkbox.html)",
          " + [`CheckboxGroup`]($w.CheckboxGroup.html)",
          " + [`Dropdown`]($w.Dropdown.html)",
          " + [`Footer`]($w.Footer.html)",
          " + [`Form`]($w.Form.html)",
          " + [`Header`]($w.Header.html)",
          " + [`ProgressBar`]($w.ProgressBar.html)",
          " + [`QuickActionBar`]($w.QuickActionBar.html)",
          " + [`RadioButtonGroup`]($w.RadioButtonGroup.html)",
          " + [`Section`]($w.Section.html)",
          " + [`Text`]($w.Text.html)",
          " + [`TextBox`]($w.TextBox.html)",
          " + [`TextInput`]($w.TextInput.html)",
          " + [`UploadButton`]($w.UploadButton.html)" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "backgroundColor",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 1,
              "filename": "BackgroundColorMixin.js" },
            { "lineno": 8,
              "filename": "BackgroundColorMixin.js" } ],
        "docs":
          { "summary": "Sets or gets the background color of an element.",
            "description":
              [ "The background color value is a string representing an rgba color in one",
                " of the following formats:",
                "",
                " + `\"red\"`: One of [140 predefined color names](https://www.w3schools.com/colors/colors_names.asp).",
                " + `\"#FF0000\"`: A hexadecimal rgb color value.",
                " + `\"rgb(255,0,0)\"`: An rgb() function color value.",
                " + `\"#FF000000\"`: A hexadecimal rgba color value.",
                " + `\"rgba(255,0,0,1.0)\"`: An rgba() function color value.",
                "",
                "This style can be used with the following elements:",
                "",
                " + [`Box`]($w.Box.html)",
                " + [`Button`]($w.Button.html)",
                " + [`Checkbox`]($w.Checkbox.html)",
                " + [`CheckboxGroup`]($w.CheckboxGroup.html)",
                " + [`Dropdown`]($w.Dropdown.html)",
                " + [`Footer`]($w.Footer.html)",
                " + [`Form`]($w.Form.html)",
                " + [`Header`]($w.Header.html)",
                " + [`ProgressBar`]($w.ProgressBar.html)",
                " + [`RadioButtonGroup`]($w.RadioButtonGroup.html)",
                " + [`Section`]($w.Section.html)",
                " + [`SignatureInput`]($w.SignatureInput.html)",
                " + [`TextBox`]($w.TextBox.html)",
                " + [`TextInput`]($w.TextInput.html)",
                " + [`UploadButton`]($w.UploadButton.html)" ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "borderColor",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 1,
              "filename": "BorderColorMixin.js" },
            { "lineno": 8,
              "filename": "BorderColorMixin.js" } ],
        "docs":
          { "summary": "Sets or gets the border color of an element.",
            "description":
              [ "The border color value is a string representing an rgba color in one of",
                " the following formats:",
                "",
                " + `\"red\"`: One of [140 predefined color names](https://www.w3schools.com/colors/colors_names.asp).",
                " + `\"#FF0000\"`: A hexadecimal rgb color value.",
                " + `\"rgb(255,0,0)\"`: An rgb() function color value.",
                " + `\"#FF000000\"`: A hexadecimal rgba color value.",
                " + `\"rgba(255,0,0,1.0)\"`: An rgba() function color value.",
                "",
                "This style can be used with the following elements:",
                "",
                " + [`Box`]($w.Box.html)",
                " + [`Button`]($w.Button.html)",
                " + [`Checkbox`]($w.Checkbox.html)",
                " + [`CheckboxGroup`]($w.CheckboxGroup.html)",
                " + [`Dropdown`]($w.Dropdown.html)",
                " + [`Footer`]($w.Footer.html)",
                " + [`Form`]($w.Form.html)",
                " + [`Header`]($w.Header.html)",
                " + [`ProgressBar`]($w.ProgressBar.html)",
                " + [`RadioButtonGroup`]($w.RadioButtonGroup.html)",
                " + [`SignatureInput`]($w.SignatureInput.html)",
                " + [`TextBox`]($w.TextBox.html)",
                " + [`TextInput`]($w.TextInput.html)",
                " + [`UploadButton`]($w.UploadButton.html)" ],
            "links": [],
            "examples":
              [ { "title": "Set the border color",
                  "body":
                    [ "$w(\"#myElement\").style.borderColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the border color",
                  "body":
                    [ "let borderColor = $w(\"#myElement\").style.borderColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "borderRadius",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 1,
              "filename": "BorderRadiusMixin.js" },
            { "lineno": 8,
              "filename": "BorderRadiusMixin.js" } ],
        "docs":
          { "summary": "Sets or gets the border radius of an element.",
            "description":
              [ "The [border radius](https://www.w3schools.com/cssref/css3_pr_border-radius.asp)",
                " value is a string representing the element's border radius in pixels.",
                " For example, `\"1px\"`.",
                "",
                "This style can be used with the following elements: ",
                "",
                " + [`Button`]($w.Button.html)",
                " + [`Checkbox`]($w.Checkbox.html)",
                " + [`Dropdown`]($w.Dropdown.html)",
                " + [`TextBox`]($w.TextBox.html)",
                " + [`TextInput`]($w.TextInput.html) ",
                " + [`UploadButton`]($w.UploadButton.html)" ],
            "links": [],
            "examples":
              [ { "title": "Set the border radius",
                  "body":
                    [ "$w(\"#myElement\").style.borderRadius = \"1px\";" ],
                  "extra":
                    {  } },
                { "title": "Get the border radius",
                  "body":
                    [ "let borderRadius = $w(\"#myElement\").style.borderRadius; // \"1px\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "borderWidth",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 1,
              "filename": "BorderWidthMixin.js" },
            { "lineno": 8,
              "filename": "BorderWidthMixin.js" } ],
        "docs":
          { "summary": "Sets or gets the border width of an element.",
            "description":
              [ "The border width value is a string representing the element's border",
                " width in pixels. For example, `\"1px\"`.",
                "",
                "This style can be used with the following elements:",
                "",
                " + [`Button`]($w.Button.html)",
                " + [`Checkbox`]($w.Checkbox.html)",
                " + [`Dropdown`]($w.Dropdown.html)",
                " + [`Form`]($w.Form.html)",
                " + [`ProgressBar`]($w.ProgressBar.html)",
                " + [`SignatureInput`]($w.SignatureInput.html)",
                " + [`TextBox`]($w.TextBox.html)",
                " + [`TextInput`]($w.TextInput.html)",
                " + [`UploadButton`]($w.UploadButton.html)" ],
            "links": [],
            "examples":
              [ { "title": "Set the border width",
                  "body":
                    [ "$w(\"#myElement\").style.borderWidth = \"1px\";" ],
                  "extra":
                    {  } },
                { "title": "Get the border width",
                  "body":
                    [ "let borderWidth = $w(\"#myElement\").style.borderWidth; // \"1px\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "color",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 1,
              "filename": "TextColorMixin.js" },
            { "lineno": 8,
              "filename": "TextColorMixin.js" } ],
        "docs":
          { "summary": "Sets or gets the text color of an element.",
            "description":
              [ "The text color value is a string representing an rgb color in one",
                " of the following formats:",
                "",
                " + `\"red\"`: One of [140 predefined color names](https://www.w3schools.com/colors/colors_names.asp).",
                " + `\"#FF0000\"`: A hexadecimal rgb color value.",
                " + `\"rgb(255,0,0)\"`: An rgb() function color value.",
                "",
                "This style can be used with the following elements: ",
                "",
                " + [`Button`]($w.Button.html)",
                " + [`CheckboxGroup`]($w.CheckboxGroup.html)",
                " + [`Dropdown`]($w.Dropdown.html)",
                " + [`RadioButtonGroup`]($w.RadioButtonGroup.html)",
                " + [`Text`]($w.Text.html)",
                " + [`TextBox`]($w.TextBox.html)",
                " + [`TextInput`]($w.TextInput.html) ",
                " + [`UploadButton`]($w.UploadButton.html)" ],
            "links": [],
            "examples":
              [ { "title": "Set the text color",
                  "body":
                    [ "$w(\"#myElement\").style.color = \"rgb(255,0,0)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the text color",
                  "body":
                    [ "let color = $w(\"#myElement\").style.color;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabled",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.Disabled",
        "locations":
          [ { "lineno": 30,
              "filename": "StyleDisabledState.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the element's styles in the disabled state.",
            "links": [],
            "examples":
              [ { "title": "Set the disabled state background color",
                  "body":
                    [ "$w(\"#myElement\").style.disabled.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the disabled state background color",
                  "body":
                    [ "let disabledBgColor = $w(\"#myElement\").style.disabled.backgroundColor;" ],
                  "extra":
                    {  } },
                { "title": "Set the disabled state border color",
                  "body":
                    [ "$w(\"#myElement\").style.disabled.borderColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the disabled state border color",
                  "body":
                    [ "let borderColor = $w(\"#myElement\").style.disabled.borderColor;" ],
                  "extra":
                    {  } },
                { "title": "Set the disabled state text color",
                  "body":
                    [ "$w(\"#myElement\").style.disabled.color = \"rgb(255,0,0)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the disabled state text color",
                  "body":
                    [ "let color = $w(\"#myElement\").style.disabled.color;" ],
                  "extra":
                    {  } },
                { "title": "Set the disabled state icon color",
                  "body":
                    [ "$w(\"#myElement\").style.disabled.iconColor = \"rgb(255,0,0)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the disabled state icon color",
                  "body":
                    [ "let iconColor = $w(\"#myElement\").style.disabled.iconColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "foregroundColor",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 1,
              "filename": "ForegroundColorMixin.js" },
            { "lineno": 8,
              "filename": "ForegroundColorMixin.js" } ],
        "docs":
          { "summary": "Sets or gets the foreground color of an element.",
            "description":
              [ "The foreground color value is a string representing an rgba color in one",
                " of the following formats:",
                "",
                " + `\"red\"`: One of [140 predefined color names](https://www.w3schools.com/colors/colors_names.asp).",
                " + `\"#FF0000\"`: A hexadecimal rgb color value.",
                " + `\"rgb(255,0,0)\"`: An rgb() function color value.",
                " + `\"#FF000000\"`: A hexadecimal rgba color value.",
                " + `\"rgba(255,0,0,1.0)\"`: An rgba() function color value.",
                "",
                "This style can be used with the following elements: ",
                "",
                " + [`ProgressBar`]($w.ProgressBar.html)" ],
            "links": [],
            "examples":
              [ { "title": "Set the foreground color",
                  "body":
                    [ "$w(\"#myElement\").style.foregroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the foreground color",
                  "body":
                    [ "let foregroundColor = $w(\"#myElement\").style.foregroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hover",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.Hover",
        "locations":
          [ { "lineno": 30,
              "filename": "StyleHoverState.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the element's styles in their hover state.",
            "links": [],
            "examples":
              [ { "title": "Set the hover state background color",
                  "body":
                    [ "$w(\"#myElement\").style.hover.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the hover state background color",
                  "body":
                    [ "let hoverBgColor = $w(\"#myElement\").style.hover.backgroundColor;" ],
                  "extra":
                    {  } },
                { "title": "Set the hover state border color",
                  "body":
                    [ "$w(\"#myElement\").style.hover.borderColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the hover state border color",
                  "body":
                    [ "let borderColor = $w(\"#myElement\").style.hover.borderColor;" ],
                  "extra":
                    {  } },
                { "title": "Set the hover state text color",
                  "body":
                    [ "$w(\"#myElement\").style.hover.color = \"rgb(255,0,0)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the hover state text color",
                  "body":
                    [ "let color = $w(\"#myElement\").style.hover.color;" ],
                  "extra":
                    {  } },
                { "title": "Set the hover state icon color",
                  "body":
                    [ "$w(\"#myElement\").style.hover.iconColor = \"rgb(255,0,0)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the hover state icon color",
                  "body":
                    [ "let iconColor = $w(\"#myElement\").style.hover.iconColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "iconColor",
        "labels":
          [ "new" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 1,
              "filename": "IconColorMixin.js" },
            { "lineno": 8,
              "filename": "IconColorMixin.js" } ],
        "docs":
          { "summary": "Sets or gets the icon color of an element.",
            "description":
              [ "The icon color value is a string representing an rgb color in one",
                " of the following formats:",
                "",
                " + `\"red\"`: One of [140 predefined color names](https://www.w3schools.com/colors/colors_names.asp).",
                " + `\"#FF0000\"`: A hexadecimal rgb color value.",
                " + `\"rgb(255,0,0)\"`: An rgb() function color value.",
                "",
                "This style can only be used with the [`Button`]($w.Button.html) element.",
                "",
                ">**Note:**",
                "> The `iconColor` style only works with Styled Buttons." ],
            "links": [],
            "examples":
              [ { "title": "Set the icon color",
                  "body":
                    [ "$w(\"#myElement\").style.iconColor = \"rgb(255,0,0)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the icon color",
                  "body":
                    [ "let iconColor = $w(\"#myElement\").style.iconColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }