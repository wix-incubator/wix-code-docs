{ "name": "TextBox",
  "memberOf": "$w",
  "mixes":
    [ "$w.LabelMixin",
      "$w.FormElement",
      "$w.DisabledMixin",
      "$w.TextInputMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "TextBox.js" },
  "docs":
    { "summary": "An input element for capturing large amounts of text.",
      "description":
        [ "`TextBox` input elements let visitors enter large amounts of text. ",
          "",
          " > **Note**: To add a text element for displaying only, see [`Text`]($w/text)." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 100,
              "filename": "TextBox.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the text box's styles.",
            "description":
              [ "The following styles can be used with text boxes:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a text box's styles, gets or sets the styles of the",
                " text box's regular state. It does not set the styles of the text box's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 27,
              "filename": "TextBox.js" },
            { "lineno": 59,
              "filename": "TextBox.js" } ],
        "docs":
          { "summary": "Sets or gets a text input's value.",
            "description":
              [ "To reset the text box, restoring any placeholder text, set the `value`",
                " property to `null` or `undefined`.",
                "",
                "> **Notes:**",
                "> + Changing a text box's `value` in code does not trigger an `onChange` event.",
                ">",
                ">",
                "> + If an element is connected to a dataset, setting the element's `value`",
                ">   in code does not set the value of the connected field in the dataset.",
                ">   That means if you use the dataset to perform a submit, the value changed",
                ">   in code is not reflected in the submitted item.",
                ">",
                ">",
                "> + To submit the new value using a dataset, set the field's value using the",
                ">   [`setFieldValue()`](wix-dataset.Dataset.html#setFieldValue) function before",
                ">   performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "wrap",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"soft\"",
        "locations":
          [ { "lineno": 66,
              "filename": "TextBox.js" },
            { "lineno": 93,
              "filename": "TextBox.js" } ],
        "docs":
          { "summary": "Determines if the text contains line breaks when its value is read.",
            "description":
              [ "Setting the `wrap` property sets how the text box's contents",
                " are returned when its value is read. Setting `wrap` to `\"hard\"`",
                " means line breaks are automatically inserted into the text. The width of",
                " the text box determines where the line breaks are placed. Setting `wrap`",
                " to `\"soft\"` means line breaks are not inserted when the value of the",
                " text box is read.",
                "",
                " Getting the `wrap` property gets how the text box's contents",
                " are returned when its value is read." ],
            "links": [],
            "examples":
              [ { "title": "Get a text box's wrapping",
                  "body":
                    [ "let wrapping = $w(\"#textBox\").wrap // \"soft\"" ],
                  "extra":
                    {  } },
                { "title": "Set a text box's wrapping",
                  "body":
                    [ "$w(\"#textBox\").wrap = \"hard\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.TextBoxValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 128,
              "filename": "TextBox.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "article",
        "text": "Importing and Exporting Collection Data with Code",
        "url": "https://support.wix.com/en/article/wix-code-tutorial-importing-and-exporting-collection-data-with-code" } ],
  "FAQs":
    [ { "title": "What's the difference between a text input, text box, and rich text box?",
        "markdown": "All 3 elements are used for entering and editing text. So what's the difference between them?\n\n*   **Text Input: **\n    *   For entering or editing small amounts of text or numbers.\n    *   Connect to Text and Number fields in a collection.\n*   **Text Box: **\n    *   For entering or editing large amounts of text, including multiline text.\n    *   Connect to Text and Number fields in a collection.\n*   **Rich Text Box:** \n    *   For entering, editing, and formatting rich text. Rich text boxes supports bold, underline, and italics character styling, 2 heading levels, paragraph style, text alignment, and bulleted and numbered lists.\n    *   Connect to Rich Text fields in a collection." },
      { "title": "How do I control whether the text in my text box contains line breaks?",
        "markdown": "Use the [`wrap`](https://www.wix.com/code/reference/$w.TextBox.html#wrap) property. Setting [`wrap`](https://www.wix.com/code/reference/$w.TextBox.html#wrap) to `\"hard\"` means line breaks are automatically inserted into the text. Setting [`wrap`](https://www.wix.com/code/reference/$w.TextBox.html#wrap) to `\"soft\"` means line breaks are not inserted." },
      { "title": "What styles are available for styling my text box?",
        "markdown": "You can set the following text box styles:\n\n*   [Background color](https://www.wix.com/code/reference/$w.Style.html#backgroundColor)\n*   [Border color](https://www.wix.com/code/reference/$w.Style.html#borderColor)\n*   [Border radius](https://www.wix.com/code/reference/$w.Style.html#borderRadius)\n*   [Border width](https://www.wix.com/code/reference/$w.Style.html#borderWidth)\n*   [Color](https://www.wix.com/code/reference/$w.Style.html#color)\n\nNote that the [`style`](https://www.wix.com/code/reference/$w.TextBox.html#style) property gets or sets the styles of the text box's regular state. You can change styles for a text box's hover, focus, error, or disabled states using the design button in the UI. " } ] }