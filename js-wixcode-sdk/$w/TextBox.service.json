{ "name": "TextBox",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.DisabledMixin",
      "$w.TextInputMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 14,
      "filename": "TextBox.es6" },
  "docs":
    { "summary": "An input element for capturing large amounts of text.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 126,
              "filename": "TextBox.es6" } ],
        "docs":
          { "summary": "Gets an object containing information about the text box's styles.",
            "description":
              [ "The following styles can be used with text boxes:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a text box's styles, gets or sets the styles of the",
                " text box's regular state. It does not set the styles of the text box's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 34,
              "filename": "TextBox.es6" },
            { "lineno": 63,
              "filename": "TextBox.es6" } ],
        "docs":
          { "summary": "Sets or gets a text input's value.",
            "description":
              [ "To reset the text box, restoring any placeholder text, set the `value`",
                " property to `null` or `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Changing a text box's `value` in code does not trigger an `onChange` event.\n\n If an element is connected to a dataset, setting the element's `value`\n in code does not set the value of the connected field in the dataset.\n That means if you use the dataset to perform a submit, the value changed\n in code is not reflected in the submitted item.\n\n To submit the new value using a dataset, set the field's value using the\n [`setFieldValue()`](wix-dataset.html#setFieldValue) function before\n performing the submit." ] } },
      { "name": "wrap",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "\"soft\"",
        "locations":
          [ { "lineno": 70,
              "filename": "TextBox.es6" },
            { "lineno": 101,
              "filename": "TextBox.es6" } ],
        "docs":
          { "summary": "Determines if the text contains line breaks when its value is read.",
            "description":
              [ "Setting the `wrap` property sets how the text box's contents",
                " are returned when its value is read. Setting `wrap` to `\"hard\"`",
                " means line breaks are automatically inserted into the text. The width of",
                " the text box determines where the line breaks are placed. Setting `wrap`",
                " to `\"soft\"` means line breaks are not inserted when the value of the",
                " text box is read.",
                "",
                " Getting the `wrap` property gets how the text box's contents",
                " are returned when its value is read." ],
            "links": [],
            "examples":
              [ { "title": "Get a text box's wrapping",
                  "body":
                    [ "let wrapping = $w(\"#textBox\").wrap // \"soft\"" ],
                  "extra":
                    {  } },
                { "title": "Set a text box's wrapping",
                  "body":
                    [ "$w(\"#textBox\").wrap = \"hard\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "article",
        "text": "Importing and Exporting Collection Data with Code",
        "url": "https://support.wix.com/en/article/wix-code-tutorial-importing-and-exporting-collection-data-with-code" } ],
  "FAQs":
    [ { "title": "What's the difference between a text input, text box, and rich text box?",
        "markdown": "All 3 elements are used for entering and editing text. So what's the difference between them?\n\n*   **Text Input: **\n    *   For entering or editing small amounts of text or numbers.\n    *   Connect to Text and Number fields in a collection.\n*   **Text Box: **\n    *   For entering or editing large amounts of text, including multiline text.\n    *   Connect to Text and Number fields in a collection.\n*   **Rich Text Box:** \n    *   For entering, editing, and formatting rich text. Rich text boxes supports bold, underline, and italics character styling, 2 heading levels, paragraph style, text alignment, and bulleted and numbered lists.\n    *   Connect to Rich Text fields in a collection." },
      { "title": "How do I control whether the text in my text box contains line breaks?",
        "markdown": "Use the [`wrap`](https://www.wix.com/code/reference/$w.TextBox.html#wrap) property. Setting [`wrap`](https://www.wix.com/code/reference/$w.TextBox.html#wrap) to `\"hard\"` means line breaks are automatically inserted into the text. Setting [`wrap`](https://www.wix.com/code/reference/$w.TextBox.html#wrap) to `\"soft\"` means line breaks are not inserted." },
      { "title": "What styles are available for styling my text box?",
        "markdown": "You can set the following text box styles:\n\n*   [Background color](https://www.wix.com/code/reference/$w.Style.html#backgroundColor)\n*   [Border color](https://www.wix.com/code/reference/$w.Style.html#borderColor)\n*   [Border radius](https://www.wix.com/code/reference/$w.Style.html#borderRadius)\n*   [Border width](https://www.wix.com/code/reference/$w.Style.html#borderWidth)\n*   [Color](https://www.wix.com/code/reference/$w.Style.html#color)\n\nNote that the [`style`](https://www.wix.com/code/reference/$w.TextBox.html#style) property gets or sets the styles of the text box's regular state. You can change styles for a text box's hover, focus, error, or disabled states using the design button in the UI. " } ] }