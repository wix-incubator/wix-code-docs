{ "name": "PlayableMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 8,
      "filename": "PlayableMixin.es6" },
  "docs":
    { "summary": "Provides functionality for elements that can be played.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "isPlaying",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 49,
              "filename": "PlayableMixin.es6" } ],
        "docs":
          { "summary": "Indicates if the element is currently playing.",
            "description":
              [ "To set the `isPlaying` property on an element, use the element's",
                " [`play()`](#play) and [`pause()`](#pause) functions.",
                "",
                " If you select **Autoplays on loading** in the element's Settings panel",
                " in the Editor, the `isPlaying` property is set to `true` when the page loads." ],
            "links":
              [ "[play( )](#play)",
                "[pause( )](#pause)" ],
            "examples":
              [ { "title": "Get an element's current playing status",
                  "body":
                    [ "let isPlaying = $w(\"#myElement\").isPlaying; // false" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's current playing state",
                  "body":
                    [ "if( $w(\"#myElement\").isPlaying ) {",
                      "  $w(\"#myElement\").pause();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").play();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "next",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Element" ] },
            "doc": "Fulfilled - The newly displayed image or slide." },
        "locations":
          [ { "lineno": 247,
              "filename": "PlayableMixin.es6" } ],
        "docs":
          { "summary": "Moves to the next item.",
            "description":
              [ "The `next()` function returns a Promise that is resolved when the next",
                " item is completely rendered. Calling `next()` when on the last item",
                " moves to the first item.",
                "",
                "> **Notes:**",
                "> + When using `next()` on a [gallery]($w.Gallery.html), make sure the",
                " [gallery]($w.Gallery.html) is one where the `isPlayable`",
                " [capability]($w/gallery/gallerycapabilities) is `true`.",
                ">",
                ">",
                "> + If you [change a gallery's type](https://www.wix.com/support/html5/article/changing-the-gallery-type)",
                " to one that doesn't support `next()`, your code may no longer function correctly." ],
            "links":
              [ "[previous( )](#previous)",
                "[play( )](#play)",
                "[pause( )](#pause)" ],
            "examples":
              [ { "title": "Move to the next item",
                  "body":
                    [ "$w(\"#myElement\").next();" ],
                  "extra":
                    {  } },
                { "title": "Move to the next item and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").next()",
                      "  .then( () => {",
                      "    console.log(\"Finished moving to the next item\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onPause",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is paused." } ],
        "ret":
          { "type":
              [ "$w.Gallery",
                "$w.Slideshow" ],
            "doc": "The gallery or slideshow that triggered the event." },
        "locations":
          [ { "lineno": 79,
              "filename": "PlayableMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is paused.",
            "description":
              [ "An element can be paused by a user clicking the gallery or slideshow's",
                " pause button or by calling its [`pause()`](#pause) function",
                "",
                "> **Notes:**",
                "> + When using `onPause()` on a [gallery]($w.Gallery.html), make sure the",
                " [gallery]($w.Gallery.html) is one where the `isPlayable`",
                " [capability]($w/gallery/gallerycapabilities) is `true`.",
                ">",
                ">",
                "> + If you [change a gallery's type](https://www.wix.com/support/html5/article/changing-the-gallery-type)",
                " to one that doesn't support `onPause()`, your code may no longer function correctly.",
                ">",
                ">",
                "> + **Deprecation note:** The $w parameter of event handlers is being deprecated. To get",
                " a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function",
                " and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see",
                " [here](https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers)." ],
            "links":
              [ "[pause( )](#pause)" ],
            "examples":
              [ { "title": "Get the ID of the element that has been paused",
                  "body":
                    [ "$w(\"#myElement\").onPause( (event) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "autoplayOff" } },
      { "name": "onPlay",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element is played." } ],
        "ret":
          { "type":
              [ "$w.Gallery",
                "$w.Slideshow" ],
            "doc": "The gallery or slideshow that triggered the event." },
        "locations":
          [ { "lineno": 131,
              "filename": "PlayableMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is started or restarted.",
            "description":
              [ "An element can be played by a user clicking the gallery or slideshow's",
                " play button or by calling its [`play()`](#play) function.",
                "",
                "> **Notes:**",
                "> + When using `onPlay()` on a [gallery]($w.Gallery.html), make sure the",
                " [gallery]($w.Gallery.html) is one where the `isPlayable`",
                " [capability]($w/gallery/gallerycapabilities) is `true`.",
                ">",
                ">",
                "> + If you [change a gallery's type](https://www.wix.com/support/html5/article/changing-the-gallery-type)",
                " to one that doesn't support `onPlay()`, your code may no longer function correctly.",
                ">",
                ">",
                "> + **Deprecation note:** The $w parameter of event handlers is being deprecated. To get",
                " a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function",
                " and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see",
                " [here](https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers)." ],
            "links":
              [ "[play( )](#play)" ],
            "examples":
              [ { "title": "Get the ID of the element that is playing",
                  "body":
                    [ "$w(\"#myElement\").onPlay( (event) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "autoplayOn" } },
      { "name": "pause",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 183,
              "filename": "PlayableMixin.es6" } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "The `pause()` function pauses a slideshow or playable gallery and fires a `pause` event.",
                "",
                " The `pause` event handlers set on this element by the [onPause( )](#onPause)",
                " function or in the Editor are called.",
                "",
                "> **Notes:**",
                "> + When using `pause()` on a [gallery]($w.Gallery.html), make sure the",
                " [gallery]($w.Gallery.html) is one where the `isPlayable`",
                " [capability]($w/gallery/gallerycapabilities) is `true`.",
                ">",
                ">",
                "> + If you [change a gallery's type](https://www.wix.com/support/html5/article/changing-the-gallery-type)",
                " to one that doesn't support `pause()`, your code may no longer function correctly." ],
            "links":
              [ "[play( )](#play)",
                "[onPause( )](#onPause)" ],
            "examples":
              [ { "title": "Pauses playback",
                  "body":
                    [ "$w(\"#myElement\").pause();" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's current playing state",
                  "body":
                    [ "if( $w(\"#myElement\").isPlaying ) {",
                      "  $w(\"#myElement\").pause();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").play();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "play",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 215,
              "filename": "PlayableMixin.es6" } ],
        "docs":
          { "summary": "Begins or resumes playback.",
            "description":
              [ "The `play()` function plays a slideshow or playable gallery and fires a `play` event.",
                "",
                " The `play` event handlers set on this element by the [onPlay( )](#onPlay)",
                " function or in the Editor are called.",
                "",
                "> **Notes:**",
                "> + When using `play()` on a [gallery]($w.Gallery.html), make sure the",
                " [gallery]($w.Gallery.html) is one where the `isPlayable`",
                " [capability]($w/gallery/gallerycapabilities) is `true`.",
                ">",
                ">",
                "> + If you [change a gallery's type](https://www.wix.com/support/html5/article/changing-the-gallery-type)",
                " to one that doesn't support `play()`, your code may no longer function correctly." ],
            "links":
              [ "[pause( )](#pause)",
                "[onPlay( )](#onPlay)" ],
            "examples":
              [ { "title": "Begins or resumes playback",
                  "body":
                    [ "$w(\"#myElement\").play();" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's current playing state",
                  "body":
                    [ "if( $w(\"#myElement\").isPlaying ) {",
                      "  $w(\"#myElement\").pause();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").play();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previous",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Element" ] },
            "doc": "Fulfilled - The newly displayed image or slide." },
        "locations":
          [ { "lineno": 287,
              "filename": "PlayableMixin.es6" } ],
        "docs":
          { "summary": "Moves to the previous image or slide.",
            "description":
              [ "The `previous()` function returns a Promise that is resolved when the previous",
                " image or slide is completely rendered. Calling `previous()` when on the first item",
                " moves to the last item.",
                "",
                "> **Notes:**",
                "> + When using `previous()` on a [gallery]($w.Gallery.html), make sure the",
                " [gallery]($w.Gallery.html) is one where the `isPlayable`",
                " [capability]($w/gallery/gallerycapabilities) is `true`.",
                ">",
                ">",
                "> + If you [change a gallery's type](https://www.wix.com/support/html5/article/changing-the-gallery-type)",
                " to one that doesn't support `previous()`, your code may no longer function correctly." ],
            "links":
              [ "[next( )](#next)" ],
            "examples":
              [ { "title": "Move to the previous item",
                  "body":
                    [ "$w(\"#myElement\").previous();" ],
                  "extra":
                    {  } },
                { "title": "Move to the previous item and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").previous()",
                      "  .then( () => {",
                      "    console.log(\"Finished moving to the previous item\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }