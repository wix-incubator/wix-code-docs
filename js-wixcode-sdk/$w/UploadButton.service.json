{ "name": "UploadButton",
  "memberOf": "$w",
  "mixes":
    [ "$w.LabelMixin",
      "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 57,
      "filename": "UploadButton.js" },
  "docs":
    { "summary": "An upload button enables site visitors to upload files to your site.",
      "description":
        [ "> **Important:** The upload button was recently updated. You can see updates to the upload button [here](#updates-to-the-upload-button).",
          "",
          " When adding an upload button to your site, you generally also add a regular button. The upload button allows a site visitor to add the files they want to upload, and the regular button triggers the actual upload of the files to the site.",
          " The following describes the flow for a typcial file upload scenario:",
          "",
          " ### Typical File Upload Scenario",
          "",
          " 1. The site visitor clicks the upload button, and chooses which files to upload by selecting the files in a native file chooser dialog. ",
          " 1. At that point, the selected files are stored in the upload button's `value` property as an array of `File` objects. ",
          " 1. The [`onChange()`]($w.Uploadbutton/onchange) event is triggered.",
          " 1. Validations on the files are performed, following which the [`valid`]($w.Uploadbutton/valid), [`validity`]($w.Uploadbutton/validity), and [`validationMessage`]($w.Uploadbutton/validationMessage) properties are updated. Because `onChange()` is fired before validations are performed, do not check any of the validation properties in the code of the `onChange()` event handler. For example, do not code an `if` statement that checks the `valid` property in the `onChange()` because the property at this point contains values prior to the `onChange()`.",
          " 1. The site visitor clicks the regular button. ",
          " 1. The regular button's [`onClick()`](https://www.wix.com/velo/reference/$w/clickablemixin/onclick) event handler calls the [`uploadFiles()`]($w.Uploadbutton/uploadFiles) function. This function triggers the actual upload of the files stored in the upload button's [`value`]($w.Uploadbutton/value) property. ",
          " 1. The upload either succeeds and returns an `UploadedFile` object, or fails and returns an `UploadError` object.",
          "",
          " See the code example in the [`uploadFiles()`]($w.Uploadbutton/uploadFiles) function for the typical file upload scenario. ",
          "",
          "> **Note:** ",
          "> The `onChange()` event is triggered before validation. As a result, consider the following points if you intend",
          "  to call the `uploadFiles` function inside the `onChange()` event handler: ",
          "> + `uploadFiles()` returns promptly with an `UploadError` object if the `fileSizeExceedsLimit`or `fileTypeNotAllowed` validity property is true. ",
          "> + If the validation fails for one of these reasons, causing an error to be returned, the `uploadFiles()` function doesn't attempt the upload.",
          "",
          "",
          " ### Updates to the Upload Button",
          "  + The [`startUpload()`]($w.Uploadbutton/startUpload) function, which allows you to upload one file at a time, is deprecated. The function will continue to work, but a new and updated [`uploadFiles()`]($w.Uploadbutton/uploadFiles) function is available instead. With `uploadFiles()`, you can upload multiple files at the same time.",
          "  + The `value` property returns 2 additional parameters, `valid` and `validationMessage`. ",
          "  + The `fileType` property has an additional `Gallery` value that accepts both images and videos at the same time. ",
          "  + The `validity` property has an additional `exceedsFileLimit` validity message in the `ValidityState` object.",
          "  + The upload button has an additional `.fileLimit` property that gets/sets the maximum amount of files a site vistor can upload at a time." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "buttonLabel",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 109,
              "filename": "UploadButton.js" },
            { "lineno": 121,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Sets or gets the label on the upload button.",
            "links": [],
            "examples":
              [ { "title": "Get an upload button's label",
                  "body":
                    [ "let label = $w(\"#myUploadButton\").buttonLabel;  // \"Choose File\"" ],
                  "extra":
                    {  } },
                { "title": "Set an upload button's label",
                  "body":
                    [ "$w(\"#myUploadButton\").buttonLabel = \"Choose File\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "fileLimit",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 128,
              "filename": "UploadButton.js" },
            { "lineno": 149,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum amount of files a site visitor can upload at a time.",
            "description":
              [ "Setting the `fileLimit` property sets the maximum amount of image, video, or gallery files that",
                " a site visitor can upload at a time. The value of `fileLimit` defaults to 1. It can be set to a number from 1 to 10. ",
                "",
                " Note that this property isn't yet supported for audio and document files, and the value of `fileLimit` is restricted to 1. ",
                "",
                " Getting the `fileLimit` property returns the number of",
                " files that a site visitor can upload at a time." ],
            "links": [],
            "examples":
              [ { "title": "Gets the maximum amount of files a site visitor can upload at a time",
                  "body":
                    [ "let fileLimit = $w(\"#myUploadButton\").fileLimit;" ],
                  "extra":
                    {  } },
                { "title": "Sets the maximum amount files a site visitor can upload at a time",
                  "body":
                    [ "$w(\"#myUploadButton\").fileLimit = 3;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "fileType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 156,
              "filename": "UploadButton.js" },
            { "lineno": 196,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Sets or gets the type of file a site visitor can upload.",
            "description":
              [ "Setting the `fileType` property sets the type of file",
                " a site visitor can upload. You can set the value of `fileType` to one of the following:",
                " + `'Image'`",
                " + `'Document'`",
                " + `'Video'`",
                " + `'Audio'`",
                " + `'Gallery'` (both images and videos)",
                "",
                " If you don't set the value of the `fileType` property, the value defaults to `Image`.",
                " You can also set the `fileType` by using the upload button's Settings panel in the Editor.",
                "",
                " Getting the `fileType` property returns the current type of",
                " file a site visitor can upload.",
                "",
                " #### The following file types can be uploaded: ",
                "",
                "+ **Image:**",
                "  BMP, GIF, HEIC, HEIF, JFIF, JPE, JPEG, JPG, PNG, TIF, TIFF, WEBP  ",
                "",
                "+ **Document:**",
                "  AI, CDR, CSV, DOC, DOCX, DOT, DOTX, DWG, EPS, EPUB, FLA, GPX, INDD, IPYNB, KEY, KML, KMZ, MOBI, NUMBERS, ODG, ODP, ODS, ODT, OTP, OTS, OTT, OXPS, PAGES, PDF, PKG, POT, POTX, PPS, PPSX, PPT, PPTX, PSD, PUB, RTF, TXT, VCF, XCF, XLS, XLSX, XLT, XLTX, XPS",
                " ",
                "+ **Video:**",
                "  AVI, DIVX, FLV, MKV, MOV, MPE, MPEG, MPG, MP4, MXF, M2TS, M4V, OGV, VOB, WEBM, WMV, XVID, 3GP",
                "",
                "+ **Audio:**",
                "  AAC, AIF, AIFF, FLAC, MP3, M4A, WAV, WMA" ],
            "links": [],
            "examples":
              [ { "title": "Get an upload button's type",
                  "body":
                    [ "let fileType = $w(\"#myUploadButton\").fileType;" ],
                  "extra":
                    {  } },
                { "title": "Set an upload button's type",
                  "body":
                    [ "$w(\"#myUploadButton\").fileType = \"Document\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 321,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the upload button's styles.",
            "description":
              [ "The following styles can be used with upload buttons:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting an upload button's styles, gets or sets the styles of the",
                " upload button's regular state. It does not set the styles of the upload button's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "valid",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 347,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Indicates if a required file was selected, and if the file is valid for upload to the Media Manager.",
            "description":
              [ "The `valid` property indicates if the validation passed. `valid` is `false` if, for example:",
                "",
                "",
                " + A file was not selected, or was selected but not uploaded, in cases where the file is required.",
                " + A file's type is not supported.",
                " + A file's size is not within the allowed limit.",
                " + There was a failed attempt to upload a file that passed input validation checks to the Media Manager with `uploadFiles()`. This could happen, for example, if the Internet connection is not stable. In this case, the `fileNotUploaded` `validity` property is also set to false." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the file is valid for upload",
                  "body":
                    [ "let isValid = $w(\"#myFile\").valid; // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validationMessage",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 371,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Gets a message indicating why the file is invalid or could not be uploaded. Contains\n empty string if the file is valid and successfully uploaded.",
            "description":
              [ "Set the value of the `validationMessage` property using the",
                " [`reject()`](#reject) function of the [`onCustomValidation()`](#onCustomValidation)",
                " event handler.",
                "",
                " The message indicates why a file was not valid, or why a file could not be uploaded to the Media Manager. (This could happen, for example, if the Internet connection is not stable.)" ],
            "links":
              [ "[validity](#validity)" ],
            "examples":
              [ { "title": "Get the validation message",
                  "body":
                    [ "let msg = $w(\"#myElement\").validationMessage; // \"value missing\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validity",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.UploadButton.ValidityState",
        "locations":
          [ { "lineno": 391,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Gets a ValidityState object that contains\n detailed information about the validity states of the file to upload.",
            "links":
              [ "[validationMessage](#validationMessage)" ],
            "examples":
              [ { "title": "Log ValidityState info",
                  "body":
                    [ "let validityObj = $w(\"#myUploadFile\").validity;",
                      "",
                      "let customError = validityObj.customError;                   // true",
                      "let valid = validityObj.valid;                               // false ",
                      "let fileNotUploaded = validityObj.fileNotUploaded;           // false",
                      "let fileSizeExceedsLimit = validityObj.fileSizeExceedsLimit; // false",
                      "let fileTypeNotAllowed = validityObj.fileTypeNotAllowed;     // false",
                      "let valueMissing = validityObj.valueMissing;                 // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.UploadButton.File" ] },
        "locations":
          [ { "lineno": 203,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Returns a list of files that are pending upload.",
            "description":
              [ "Returns a list of `File` objects that a site visitor has selected to",
                " upload after clicking the upload button.",
                "",
                " See how `value` is used in the typical file upload scenario code example." ],
            "links": [],
            "examples":
              [ { "title": "Get the files pending upload",
                  "body":
                    [ "let files = $w(\"#myUploadButton\").value;",
                      "let fileName = files[0].name; // \"mypic.jpg\"",
                      "let fileSize = files[0].size; // 45941",
                      "let fileValidity = files[0].valid; // true",
                      "let fileValidationMsg = files[0].validationMessage; // \"\"" ],
                  "extra":
                    {  } },
                { "title": "Typical file upload scenario",
                  "body":
                    [ "$w(\"#myUploadButton\").fileType = \"Image\"; // Site visitor can choose an image ",
                      "$w('#myButton').onClick( () => {                 ",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // Site visitor chose a file",
                      "    console.log(\"Uploading the following files:\")",
                      "    $w(\"#myUploadButton\").uploadFiles()",
                      "      .then( (uploadedFiles) => {",
                      "        uploadedFiles.forEach(uploadedFile => {",
                      "        console.log(\"File url:\" + uploadedFile.fileUrl);",
                      "        })",
                      "      console.log(\"Upload successful.\");",
                      "      } )",
                      "      .catch( (uploadError) => {",
                      "      console.log(\"File upload error: \" + uploadError.errorCode);",
                      "      console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // Site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example uploads multiple files when the site visitor clicks a button. First it sets \n the type of file a site visitor can choose (in this case, an image). Then the example\n checks to see if the site visitor chose files using the upload button. If files were chosen, it\n triggers the `uploadFiles()` function and logs the status of the file upload when it completes\n successfully or with an error." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "reset",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 310,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Clears the files that are pending upload.",
            "description":
              [ "The [`value`](#value) of the upload button contains a list of files that have been",
                " selected to upload. The `reset()` function clears the files in `value`." ],
            "links": [],
            "examples":
              [ { "title": "Clears the files pending upload",
                  "body":
                    [ "let files = $w(\"#myUploadButton\").value;",
                      "let fileName = files[0].name; // \"myPic.jpg\"",
                      "let fileSize = files[0].size; // 45941",
                      "",
                      "if(fileSize > '40000') {",
                      "    $w(\"#myUploadButton\").reset();",
                      "    files = $w(\"#myUploadButton\").value;",
                      "    $w(\"#text1\").text = \"Please choose a smaller file to upload.\";",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startUpload",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.UploadButton.UploadFile" ] },
            "doc": "Fulfilled - Resolves when the file upload is completed and returns an `UploadFile` object.\nRejected - Rejects if the file upload fails and returns an `UploadError` object, which contains the error code and description." },
        "locations":
          [ { "lineno": 264,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "**Deprecated.** This function will continue to work, but a newer version is available. Use the \n[`uploadFiles()`](#uploadFiles) function instead.",
            "description":
              [ "Uploads the file that the site visitor has chosen.",
                "",
                " The `startUpload()` function triggers the upload of the file in the",
                " upload button's [value](#value) property.",
                "",
                "> #### Migration Instructions",
                ">",
                "> If this function is already in your code, it will continue to work.",
                "> To stay compatible with future changes, migrate to the new",
                "> [`uploadFiles()`](#uploadFiles) function:",
                ">  1. Update your code based on the new code example.",
                ">  1. Test your changes to make sure your code behaves as expected.",
                "> ",
                "> Note the following differences between the new `uploadFiles()` function and the deprecated `startUpload()` function:",
                "> + `uploadFiles()` triggers the upload of multiple files instead of a single file. ",
                "> + `uploadFiles()` returns an array of `UploadedFile` objects instead of a single `UploadFile` object. ",
                "> + The new `UploadedFile` object contains different properties than the deprecated `UploadFile` object. ",
                "> ",
                "> Note the following returns mapped to the `uploadFiles()` function returns as follows:",
                "> + `url` and `mediaId` --> `fileUrl`",
                "> + `title` --> `originalFileName`" ],
            "links": [],
            "examples":
              [ { "title": "Start a file upload",
                  "body":
                    [ "",
                      "$w(\"#myUploadButton\").startUpload()",
                      "  .then( (uploadedFile) => {",
                      "    let url = uploadedFile.url;  // \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"",
                      "  } )",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "  } );",
                      "",
                      "",
                      "",
                      "" ],
                  "extra":
                    { "description": "<span style=\"color:#FF5252;\">This example uses a deprecated function.</span>" } },
                { "title": "Typical file upload scenario",
                  "body":
                    [ "",
                      "$w(\"#myUploadButton\").fileType = \"Image\"; // Site visitor can choose an image ",
                      "$w('#myButton').onClick( () => {",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // Site visitor chose a file",
                      "    console.log(\"Uploading \" + $w(\"#myUploadButton\").value[0].name  + \"- Please wait.\");",
                      "    $w(\"#myUploadButton\").startUpload()",
                      "      .then( (uploadedFile) => {",
                      "        console.log(\"Upload successful. File is available here:\");",
                      "        console.log(uploadedFile.url);",
                      "      } )",
                      "      .catch( (uploadError) => {",
                      "        console.log(\"File upload error: \" + uploadError.errorCode);",
                      "        console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // Site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "<span style=\"color:#FF5252;\">This example uses a deprecated function.</span>\n\n This example uploads multiple files when the site visitor clicks a button. First it sets \n the type of file a site visitor can choose (in this case, an image). Then the example\n checks to see if the site visitor chose files using the upload button. If files were chosen, it\n triggers the `uploadFiles()` function and logs the status of the file upload when it completes\n successfully or with an error." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "uploadFiles",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "$w.UploadButton.UploadedFile" ] } ] },
            "doc": "Fulfilled - Resolves when the file upload is completed and returns an array of `UploadedFile` objects.\nRejected - Rejects if the file upload fails and returns an `UploadError` object, which contains the error code and description." },
        "locations":
          [ { "lineno": 226,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Uploads the files that the site visitor has chosen.",
            "description":
              [ "The `uploadFiles()` function triggers the upload of the files in the",
                " upload button's [value](#value) property.",
                "",
                " The `uploadFiles()` function allows you to upload image, video, audio, document, and gallery (both images and video) files. You can upload multiple image, video, and gallery files at a time. ",
                " Use the `fileLimit` property to set the number of files you can upload at a time. ",
                "",
                " Note that this function does not yet support multiple audio and document file uploads. You can only upload audio and document files one at a time, and the `fileLimit` property is restricted to 1. ",
                "",
                " The upload button does not accept files larger than certain sizes, depending on the file type. Maximum allowed file sizes are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes).",
                "",
                " `uploadFiles()` returns promptly (meaning, it does not attempt to contact the upload server) with `UploadError` when either the `validityState`'s `fileSizeExceedsLimit` or `fileTypeNotAllowed` property is `true`.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `startUpload()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions]($w/uploadbutton/startupload#migration-instructions)." ],
            "links": [],
            "examples":
              [ { "title": "Start a file upload",
                  "body":
                    [ "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('File url:', uploadedFile.fileUrl);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Typical file upload scenario",
                  "body":
                    [ "$w(\"#myUploadButton\").fileType = \"Image\"; // Site visitor can choose an image ",
                      "$w('#myButton').onClick( () => {                 ",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // Site visitor chose a file",
                      "    console.log(\"Uploading the following files:\")",
                      "    $w(\"#myUploadButton\").uploadFiles()",
                      "      .then( (uploadedFiles) => {",
                      "        uploadedFiles.forEach(uploadedFile => {",
                      "        console.log(\"File url:\" + uploadedFile.fileUrl);",
                      "        })",
                      "      console.log(\"Upload successful.\");",
                      "      } )",
                      "      .catch( (uploadError) => {",
                      "      console.log(\"File upload error: \" + uploadError.errorCode);",
                      "      console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // Site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "",
                      "" ],
                  "extra":
                    { "description": "This example uploads multiple files when the site visitor clicks a button. First it sets \n the type of file a site visitor can choose (in this case, an image). Then the example\n checks to see if the site visitor chose files using the upload button. If files were chosen, it\n triggers the `uploadFiles()` function and logs the status of the file upload when it completes\n successfully or with an error." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "File",
        "locations":
          [ { "lineno": 1,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "The object used by the [`value`](#value) property that represents files ready for upload.",
            "links":
              [ "[value](#value)" ],
            "examples":
              [ { "title": "Get the files pending upload",
                  "body":
                    [ "let files = $w(\"#myUploadButton\").value;",
                      "let fileName = files[0].name; // \"mypic.jpg\"",
                      "let fileSize = files[0].size; // 45941",
                      "let fileValidity = files[0].valid; // true",
                      "let fileValidationMsg = files[0].validationMessage; // \"\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "File name." },
            { "name": "size",
              "type": "number",
              "doc": "File size in bytes." },
            { "name": "valid",
              "type": "boolean",
              "doc": "`true` if the file is valid for upload to the Media Manager." },
            { "name": "validationMessage",
              "type": "string",
              "doc": "Message indicating why the file is invalid. Empty if the file is valid." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "UploadError",
        "locations":
          [ { "lineno": 47,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "The error message object returned when the `uploadFiles()`'s Promise is rejected.",
            "links":
              [ "[uploadFiles](#uploadFiles)" ],
            "examples":
              [ { "title": "Get upload error information",
                  "body":
                    [ "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('File url:', uploadedFile.fileUrl);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "errorCode",
              "type": "string",
              "doc": "The error's code." },
            { "name": "errorDescription",
              "type": "string",
              "doc": "The error's description." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "UploadFile",
        "locations":
          [ { "lineno": 13,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Object returned by the `startUpload()`'s Promise.",
            "links":
              [ "[startUpload](#startUpload)" ],
            "examples":
              [ { "title": "Get uploaded file information",
                  "body":
                    [ "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('File url:', uploadedFile.fileUrl);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "url",
              "type": "string",
              "doc": "Wix URL of the successfully uploaded file." },
            { "name": "mediaId",
              "type": "string",
              "doc": "Wix media ID of the uploaded file." },
            { "name": "title",
              "type": "string",
              "doc": "Title of the uploaded file." },
            { "name": "width",
              "type": "number",
              "doc": "Width of an uploaded image or video file." },
            { "name": "height",
              "type": "number",
              "doc": "Height of an uploaded image or video file." },
            { "name": "duration",
              "type": "number",
              "doc": "Duration (in milliseconds) of an uploaded audio file." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "UploadedFile",
        "locations":
          [ { "lineno": 27,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "An array of objects returned by the `uploadFiles()`'s Promise.",
            "links":
              [ "[uploadFiles](#uploadFiles)" ],
            "examples":
              [ { "title": "Get uploaded file information",
                  "body":
                    [ "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('File url:', uploadedFile.fileUrl);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "width",
              "type": "number",
              "doc": "Width of an uploaded image or video file." },
            { "name": "height",
              "type": "number",
              "doc": "Height of an uploaded image or video file." },
            { "name": "duration",
              "type": "number",
              "doc": "Duration (in milliseconds) of an uploaded audio file." },
            { "name": "fileUrl",
              "type": "string",
              "doc": "Wix media URL of the successfully uploaded file in the following format: `'wix:image://v1/<uri>/<filename>#originWidth=<width>&originHeight=<height>[&watermark=<watermark_manifest_string>]'`.\n\n**Note:** This replaces the old `fileName` parameter. `fileName` will continue to work, but we recommend that you use the updated `fileUrl` parameter instead." },
            { "name": "fileName",
              "type": "string",
              "doc": "**Deprecated**. Use the `fileUrl` property instead. \n\nInternal file name of the uploaded file, generated by the Media Manager. The name is the string located in the file's URL. Click [here](https://www.wix.com/velo/forum/tips-tutorials-examples/creating-a-url-for-a-media-file-or-the-truth-about-getfileurl) to learn more." },
            { "name": "originalFileName",
              "type": "string",
              "doc": "Original name of the uploaded file." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ValidityState",
        "locations":
          [ { "lineno": 405,
              "filename": "UploadButton.js" } ],
        "docs":
          { "summary": "Contains detailed information about the validity states of a file to upload.",
            "description":
              [ "States not related to file uploads can be ignored." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "customError",
              "type": "boolean",
              "doc": "`true` if the file's custom validity message has been set to a non-empty string." },
            { "name": "valid",
              "type": "boolean",
              "doc": "`true` if the file to upload meets all validations." },
            { "name": "fileNotUploaded",
              "type": "boolean",
              "doc": "`true` if a file is required, and either no file has been selected, or a file has been selected but not uploaded." },
            { "name": "fileSizeExceedsLimit",
              "type": "boolean",
              "doc": "`true` if a file has been selected but it is too large. Maximum allowed file sizes are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes)." },
            { "name": "fileTypeNotAllowed",
              "type": "boolean",
              "doc": "`true` if a file has been selected but the file's type is not supported. Supported file types are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes)." },
            { "name": "valueMissing",
              "type": "boolean",
              "doc": "`true` if a file is required but no file has been selected." },
            { "name": "typeMismatch",
              "type": "boolean",
              "doc": "`true` if the text input element's value does not match its type when the type is email or url." },
            { "name": "patternMismatch",
              "type": "boolean",
              "doc": "`true` if the element's value does not match its pattern validation." },
            { "name": "tooLong",
              "type": "boolean",
              "doc": "`true` if the length of the element's value exceeds its [`maxLength`]($w.TextInputMixin.html#maxLength) property." },
            { "name": "tooShort",
              "type": "boolean",
              "doc": "`true` if the length of the element's value is smaller than its `minlength` property." },
            { "name": "rangeUnderflow",
              "type": "boolean",
              "doc": "`true` if the element's value is less than the its [`min`]($w.TextInput.html#min) property." },
            { "name": "rangeOverflow",
              "type": "boolean",
              "doc": "`true` if the element's value is more than the its [`max`]($w.TextInput.html#max) property." },
            { "name": "stepMismatch",
              "type": "boolean",
              "doc": "`true` if a text input element's numeric value is defined as a whole number but a decimal number is entered." },
            { "name": "badInput",
              "type": "boolean",
              "doc": "`true` if the element's value cannot be converted to a value." },
            { "name": "exceedsFileLimit",
              "type": "boolean",
              "doc": "`true` if the number of files selected exceeds the limit defined in the `fileLimit` property." },
            { "name": "invalidTime",
              "type": "boolean",
              "doc": "`true` if the element's time value is not a valid time." },
            { "name": "invalidDate",
              "type": "boolean",
              "doc": "`true` if the element's date value is not a valid date." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "example",
        "text": "Animations Viewer",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-wix-animations" } ],
  "FAQs":
    [ { "title": "What types of files can site visitors upload with an upload button?",
        "markdown": "You can set your upload button to upload images, documents, videos, or audio files using the [`fileType`](https://www.wix.com/code/reference/$w.UploadButton.html#fileType) property. The file types of the images, documents, videos and audio files that can be uploaded are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes)." },
      { "title": "How do I use an upload button on my site?",
        "markdown": "The typical file upload scenario is a two-part process. First your site visitor chooses the file to upload and then they trigger the actual upload. This usually requires at least two page elements, an upload button element and a regular button. \n\nThe site visitor chooses which file to upload by clicking the upload button and selecting the file in a native file chooser dialog. (The site visitor can only choose from the specified file type.) Then the site visitor clicks the regular button to trigger some code that performs the upload. [Learn more](https://support.wix.com/en/article/how-to-use-the-upload-button-with-code)." },
      { "title": "How do I get information about files that are pending an upload?",
        "markdown": "Use [`value`](https://www.wix.com/code/reference/$w.UploadButton.html#value) property to check the `name` and `size` of [`File`](https://www.wix.com/code/reference/$w.UploadButton.html#File) objects waiting to be uploaded. " } ] }