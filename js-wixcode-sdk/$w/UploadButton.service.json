{ "name": "UploadButton",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 141,
      "filename": "UploadButton.es6" },
  "docs":
    { "summary": "An upload button enables site visitors to upload files to your site.",
      "description":
        [ "When adding an upload button to your site, you generally add a second button, such as a submit button to enable site visitors to upload  ",
          " and then submit their files. To learn more about how the uploadButton works, see the following typcial file upload scenario. ",
          "",
          " ### Typical File Upload Scenario",
          "",
          " 1. The site visitor clicks the upload button, and chooses which files to upload by selecting the files in a native file chooser dialog. ",
          " 1. At that point, the selected files are stored in the upload button's `value` property as an array of `File` objects. ",
          " 1. The `onChange()` event is fired.",
          " 1. Validations on the files are performed, following which the `valid`, `validity`, and `validationMessage` properties are updated. Because `onChange()` is fired before validations are performed, do not check any of the validation properties in the code of the `onChange()` event handler. For example, do not code an `if` statement that checks the `valid` property in the `onChange()` because the property at this point contains values prior to the `onChange()`.",
          " 1. The site visitor clicks the submit button. ",
          " 1. The submit button's event handler calls the `uploadFiles()` function. This function triggers the actual upload of the files in the upload button's `value` property. ",
          " 1. The upload either succeeds and returns an `UploadedFile` object, or fails and returns an `UploadError` object.",
          "",
          " See a code example of this typical file upload scenario [here](link). ",
          "",
          "> **Note:** ",
          "> The `onChange()` event is fired before validation. As a result, consider the following points if you intend",
          "  to call the `uploadFiles` function inside the `onChange()` event handler: ",
          "> + `uploadFiles()` returns promptly with an `UploadError` object if the `fileSizeExceedsLimit`, `fileTypeNotAllowed`, `exceedsFileLimit`, or `fileSizeExceedsLimit` validity property is true. ",
          "> + If the validation fails for one of these reasons, causing an error to be returned, the `uploadFiles()` does not attempt the upload." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "buttonLabel",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 182,
              "filename": "UploadButton.es6" },
            { "lineno": 201,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Sets or gets the label on the upload button.",
            "links": [],
            "examples":
              [ { "title": "Get an upload button's label",
                  "body":
                    [ "let label = $w(\"#myUploadButton\").buttonLabel;  // \"Choose File\"" ],
                  "extra":
                    {  } },
                { "title": "Set an upload button's label",
                  "body":
                    [ "$w(\"#myUploadButton\").buttonLabel = \"Choose File\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "fileLimit",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 223,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Sets or gets the maximum amount of files that a site visitor can upload at a time.",
            "description":
              [ "Setting the `fileLimit` property sets the maximum amount of files that",
                " a site visitor can upload. The value of `fileLimit` can be set to a number from 1 to 10.",
                "",
                " Getting the `fileLimit` property returns the number of",
                " files that a site visitor can upload at a time." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "fileType",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 240,
              "filename": "UploadButton.es6" },
            { "lineno": 267,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Sets or gets the type of the file that a site visitor can upload.",
            "description":
              [ "Setting the `fileType` property sets the type of the file that",
                " a site visitor can upload. The value of `fileType` can be set to ",
                " `'Image'`, `'Document'`, `'Video'`, `'Audio'`, or `'Gallery`. The `Gallery` fileType includes both images and videos.",
                "",
                " Getting the `fileType` property returns the current type of",
                " file that a site visitor can upload.",
                "",
                " The file types that can be uploaded are",
                " listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes)." ],
            "links": [],
            "examples":
              [ { "title": "Get an upload button's type",
                  "body":
                    [ "let fileType = $w(\"#myUploadButton\").fileType;" ],
                  "extra":
                    {  } },
                { "title": "Set an upload button's type",
                  "body":
                    [ "$w(\"#myUploadButton\").fileType = \"Document\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 499,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Gets an object containing information about the upload button's styles.",
            "description":
              [ "The following styles can be used with upload buttons:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting an upload button's styles, gets or sets the styles of the",
                " upload button's regular state. It does not set the styles of the upload button's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "valid",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 524,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Indicates if a required file was selected, and if the file is valid for upload to the Media Manager.",
            "description":
              [ "The `valid` property indicates if the validation passed. `valid` is `false` if, for example:",
                "",
                "",
                " + A file was not selected, in cases where the file is required.",
                " + A file's type is not supported.",
                " + A file's size is not within the allowed limit.",
                " + There was a failed attempt to upload a file that passed input validation checks to the Media Manager with `uploadFiles()`. This could happen, for example, if the Internet connection is not stable. In this case, the `fileNotUploaded` `validity` property is also set to false." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the file is valid for upload",
                  "body":
                    [ "let isValid = $w(\"#myFile\").valid; // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validationMessage",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 548,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Gets a message indicating why the file is invalid or could not be uploaded. Contains\n empty string if the file is valid and successfully uploaded.",
            "description":
              [ "Set the value of the `validationMessage` property using the",
                " [`reject()`](#reject) function of the [`onCustomValidation()`](#onCustomValidation)",
                " event handler.",
                "",
                " The message indicates why a file was not valid, or why a file could not be uploaded to the Media Manager. (This could happen, for example, if the Internet connection is not stable.)" ],
            "links":
              [ "[validity](#validity)" ],
            "examples":
              [ { "title": "Get the validation message",
                  "body":
                    [ "let msg = $w(\"#myElement\").validationMessage; // \"value missing\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validity",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.UploadButton.ValidityState",
        "locations":
          [ { "lineno": 568,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Gets a ValidityState object that contains\n detailed information about the validity states of the file to upload.",
            "links":
              [ "[validationMessage](#validationMessage)" ],
            "examples":
              [ { "title": "Log ValidityState info",
                  "body":
                    [ "let validityObj = $w(\"#myUploadFile\").validity;",
                      "",
                      "let customError = validityObj.customError;                   // true",
                      "let valid = validityObj.valid;                               // false ",
                      "let fileNotUploaded = validityObj.fileNotUploaded;           // false",
                      "let fileSizeExceedsLimit = validityObj.fileSizeExceedsLimit; // false",
                      "let fileTypeNotAllowed = validityObj.fileTypeNotAllowed;     // false",
                      "let valueMissing = validityObj.valueMissing;                 // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.UploadButton.File" ] },
        "locations":
          [ { "lineno": 319,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Returns a list of files that are pending upload.",
            "description":
              [ "Returns a list of `File` objects that a site visitor has selected to",
                " upload after pressing the upload button.",
                "",
                " See how `value` is used in the typical file upload scenario code example." ],
            "links": [],
            "examples":
              [ { "title": "Get the files pending upload",
                  "body":
                    [ "let files = $w(\"#myUploadButton\").value;",
                      "let fileName = files[0].name; // \"mypic.jpg\"",
                      "let fileSize = files[0].size; // 45941" ],
                  "extra":
                    {  } },
                { "title": "Full file upload scenario",
                  "body":
                    [ "// NOTE: This example uses the new uploadFiles() ",
                      "//       function, which replaces startUpload().  ",
                      "//       See the function description for more information, and ",
                      "//       line 29 for the deprecated example.",
                      "",
                      "$w(\"#myUploadButton\").fileType = \"Image\"; // site visitor can choose an image",
                      "$w('#myButton').onClick( () => {",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // site visitor chose a file",
                      "    console.log(\"Uploading \" + $w(\"#myUploadButton\").value[0].name + \"- Please wait.\");",
                      "    $w(\"#myUploadButton\").uploadFiles()",
                      "      .then( (uploadedFiles) => {",
                      "        uploadedFiles.forEach(uploadedFile => {",
                      "          console.log(\"Upload successful. Files are available here:\");",
                      "          console.log(uploadedFile.url);",
                      "        })",
                      "      })",
                      "      .catch( (uploadError) => {",
                      "        console.log(\"File upload error: \" + uploadError.errorCode);",
                      "        console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "",
                      "",
                      "",
                      "// NOTE: This example uses the deprecated",
                      "//       startUpload() function.",
                      "",
                      "$w(\"#myUploadButton\").fileType = \"Image\"; // site visitor can choose an image",
                      "$w('#myButton').onClick( () => {",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // site visitor chose a file",
                      "    console.log(\"Uploading \" + $w(\"#myUploadButton\").value[0].name + \"- Please wait.\");",
                      "    $w(\"#myUploadButton\").startUpload()",
                      "      .then( (uploadedFile) => {",
                      "        console.log(\"Upload successful. File is available here:\");",
                      "        console.log(uploadedFile.url);",
                      "      } )",
                      "      .catch( (uploadError) => {",
                      "        console.log(\"File upload error: \" + uploadError.errorCode);",
                      "        console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example uploads a file when the site visitor clicks on the submit (`#myButton`) button. First it sets \n the type of the file a site visitor can choose (`image`). Then the example\n checks to see if the site visitor has chosen an image file using the upload button (`#myUploadButton`). If an image file was chosen, it\n triggers the `uploadFiles()` function and logs the status of the file upload when it completes\n successfully or with an error." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "reset",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 473,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Clears the files that are pending upload.",
            "description":
              [ "The [`value`](#value) of the upload button contains a list of files that have been",
                " selected to upload. The `reset()` function clears the files in `value`." ],
            "links": [],
            "examples":
              [ { "title": "Clears the files pending upload",
                  "body":
                    [ "let files = $w(\"#myUploadButton\").value;",
                      "let fileName = files[0].name; // \"myPic.jpg\"",
                      "let fileSize = files[0].size; // 45941",
                      "",
                      "if(fileSize > '40000') {",
                      "    $w(\"#myUploadButton\").reset();",
                      "    files = $w(\"#myUploadButton\").value;",
                      "    $w(\"#text1\").text = \"Please choose a smaller file to upload.\";",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startUpload",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.UploadButton.UploadedFile" ] },
            "doc": "Fulfilled - Resolves when the file upload is completed and returns an `UploadedFile` object.\nRejected - Rejects if the file upload fails and returns an `UploadError` object, which contains the error code and description." },
        "locations":
          [ { "lineno": 393,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "**Deprecated.** This function will continue to work, but a newer version is available. Use the \n[`uploadFiles()`](#uploadFiles) function instead.",
            "description":
              [ "Uploads the file that the site visitor has chosen.",
                "",
                " The `startUpload()` function triggers the upload of the file in the",
                " upload button's [value](#value) property.",
                "",
                "> #### Migration Instructions",
                ">",
                "> If this function is already in your code, it will continue to work.",
                "> To stay compatible with future changes, migrate to",
                "> [`uploadFiles()`](#uploadFiles).",
                ">",
                ">",
                "> To migrate to the new `uploadFiles()` function, update your code with the new code example. ",
                ">",
                "> Note that the updated `uploadFiles()` function is different from the deprecated startUpload() function in the following ways:",
                "> ",
                "> + The function triggers the upload of one or more files in the upload button's [value](#value) property.  ",
                "> + The function returns an array of `UploadedFile` objects. Note the property updates in the [`UploadedFile`](link) object.",
                "> + The function has an additional `.fileLimit` property that gets/sets the maximum amount of files accepted per upload.",
                "> + The `value` property returns 2 additional parameters, `valid` and `validation`. ",
                "> + The `validity` property has an additional `exceedsFileLimit` validity message in the ValidityState object.   ",
                "> + The `fileType` property has an additional `Gallery` value that accepts both images and videos at the same time. ",
                ">",
                ">",
                "> Test your changes to make sure your code behaves as expected." ],
            "links": [],
            "examples":
              [ { "title": "Start a file upload",
                  "body":
                    [ "// NOTE: This example uses the new uploadFiles() ",
                      "//       function, which replaces startUpload().  ",
                      "//       See the function description for more information, and ",
                      "//       line 19 for the deprecated example.",
                      "",
                      "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('file urls are:', uploadedFile.url);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );",
                      "",
                      "",
                      "",
                      "// NOTE: This example uses the deprecated",
                      "//       startUpload() function.",
                      "",
                      "$w(\"#myUploadButton\").startUpload()",
                      "  .then( (uploadedFile) => {",
                      "    let url = uploadedFile.url;  // \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"",
                      "  } )",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Full file upload scenario",
                  "body":
                    [ "// NOTE: This example uses the new uploadFiles() ",
                      "//       function, which replaces startUpload().  ",
                      "//       See the function description for more information, and ",
                      "//       line 29 for the deprecated example.",
                      "",
                      "$w(\"#myUploadButton\").fileType = \"Image\"; // site visitor can choose an image",
                      "$w('#myButton').onClick( () => {",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // site visitor chose a file",
                      "    console.log(\"Uploading \" + $w(\"#myUploadButton\").value[0].name + \"- Please wait.\");",
                      "    $w(\"#myUploadButton\").uploadFiles()",
                      "      .then( (uploadedFiles) => {",
                      "        uploadedFiles.forEach(uploadedFile => {",
                      "          console.log(\"Upload successful. Files are available here:\");",
                      "          console.log(uploadedFile.url);",
                      "        })",
                      "      })",
                      "      .catch( (uploadError) => {",
                      "        console.log(\"File upload error: \" + uploadError.errorCode);",
                      "        console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "",
                      "",
                      "",
                      "// NOTE: This example uses the deprecated",
                      "//       startUpload() function.",
                      "",
                      "$w(\"#myUploadButton\").fileType = \"Image\"; // site visitor can choose an image",
                      "$w('#myButton').onClick( () => {",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // site visitor chose a file",
                      "    console.log(\"Uploading \" + $w(\"#myUploadButton\").value[0].name + \"- Please wait.\");",
                      "    $w(\"#myUploadButton\").startUpload()",
                      "      .then( (uploadedFile) => {",
                      "        console.log(\"Upload successful. File is available here:\");",
                      "        console.log(uploadedFile.url);",
                      "      } )",
                      "      .catch( (uploadError) => {",
                      "        console.log(\"File upload error: \" + uploadError.errorCode);",
                      "        console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example uploads a file when the site visitor clicks on the submit (`#myButton`) button. First it sets \n the type of the file a site visitor can choose (`image`). Then the example\n checks to see if the site visitor has chosen an image file using the upload button (`#myUploadButton`). If an image file was chosen, it\n triggers the `uploadFiles()` function and logs the status of the file upload when it completes\n successfully or with an error." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "uploadFiles",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.UploadButton.UploadedFile" ] },
            "doc": "Fulfilled - Resolves when the file upload is completed and returns an `UploadedFile` object.\nRejected - Rejects if the file upload fails and returns an `UploadError` object, which contains the error code and description." },
        "locations":
          [ { "lineno": 357,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Uploads the files that the site visitor has chosen.",
            "description":
              [ "The `uploadFiles()` function triggers the upload of the files in the",
                " upload button's [value](#value) property.",
                "",
                " The `uploadFiles()` function allows you to upload multiple image, video, and gallery (both images and video) files at once. ",
                " Note that this function does not yet support multiple audio and document file uploads. You can only upload audio and document files one at a time.",
                "",
                " The upload button does not accept files larger than certain sizes, depending on the file type. Maximum allowed file sizes are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes).",
                "",
                " `uploadFiles()` returns promptly (meaning, it does not attempt to contact the upload server) with `UploadError` when either the `validityState`'s `fileSizeExceedsLimit` or `fileTypeNotAllowed` property is `true`.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `startUpload()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions](#migration-instructions)." ],
            "links": [],
            "examples":
              [ { "title": "Start a file upload",
                  "body":
                    [ "// NOTE: This example uses the new uploadFiles() ",
                      "//       function, which replaces startUpload().  ",
                      "//       See the function description for more information, and ",
                      "//       line 19 for the deprecated example.",
                      "",
                      "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('file urls are:', uploadedFile.url);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );",
                      "",
                      "",
                      "",
                      "// NOTE: This example uses the deprecated",
                      "//       startUpload() function.",
                      "",
                      "$w(\"#myUploadButton\").startUpload()",
                      "  .then( (uploadedFile) => {",
                      "    let url = uploadedFile.url;  // \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"",
                      "  } )",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Full file upload scenario",
                  "body":
                    [ "// NOTE: This example uses the new uploadFiles() ",
                      "//       function, which replaces startUpload().  ",
                      "//       See the function description for more information, and ",
                      "//       line 29 for the deprecated example.",
                      "",
                      "$w(\"#myUploadButton\").fileType = \"Image\"; // site visitor can choose an image",
                      "$w('#myButton').onClick( () => {",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // site visitor chose a file",
                      "    console.log(\"Uploading \" + $w(\"#myUploadButton\").value[0].name + \"- Please wait.\");",
                      "    $w(\"#myUploadButton\").uploadFiles()",
                      "      .then( (uploadedFiles) => {",
                      "        uploadedFiles.forEach(uploadedFile => {",
                      "          console.log(\"Upload successful. Files are available here:\");",
                      "          console.log(uploadedFile.url);",
                      "        })",
                      "      })",
                      "      .catch( (uploadError) => {",
                      "        console.log(\"File upload error: \" + uploadError.errorCode);",
                      "        console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "",
                      "",
                      "",
                      "// NOTE: This example uses the deprecated",
                      "//       startUpload() function.",
                      "",
                      "$w(\"#myUploadButton\").fileType = \"Image\"; // site visitor can choose an image",
                      "$w('#myButton').onClick( () => {",
                      "  if ($w(\"#myUploadButton\").value.length > 0) {  // site visitor chose a file",
                      "    console.log(\"Uploading \" + $w(\"#myUploadButton\").value[0].name + \"- Please wait.\");",
                      "    $w(\"#myUploadButton\").startUpload()",
                      "      .then( (uploadedFile) => {",
                      "        console.log(\"Upload successful. File is available here:\");",
                      "        console.log(uploadedFile.url);",
                      "      } )",
                      "      .catch( (uploadError) => {",
                      "        console.log(\"File upload error: \" + uploadError.errorCode);",
                      "        console.log(uploadError.errorDescription);",
                      "      } );",
                      "  }",
                      "  else {  // site visitor clicked button but didn't choose a file",
                      "    console.log(\"Please choose a file to upload.\")",
                      "  }",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example uploads a file when the site visitor clicks on the submit (`#myButton`) button. First it sets \n the type of the file a site visitor can choose (`image`). Then the example\n checks to see if the site visitor has chosen an image file using the upload button (`#myUploadButton`). If an image file was chosen, it\n triggers the `uploadFiles()` function and logs the status of the file upload when it completes\n successfully or with an error." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "File",
        "locations":
          [ { "lineno": 50,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "The object used by the [`value`](#value) property that represents files ready for upload.",
            "links":
              [ "[value](#value)" ],
            "examples":
              [ { "title": "Get the files pending upload",
                  "body":
                    [ "let files = $w(\"#myUploadButton\").value;",
                      "let fileName = files[0].name; // \"mypic.jpg\"",
                      "let fileSize = files[0].size; // 45941" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "The file's name." },
            { "name": "size",
              "type": "number",
              "doc": "The file's size in bytes." },
            { "name": "valid",
              "type": "boolean",
              "doc": "`True` if the file is valid for upload to the Media Manager." },
            { "name": "validationMessage",
              "type": "string",
              "doc": "A message indicating why the file is invalid. Empty if file is valid." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "UploadError",
        "locations":
          [ { "lineno": 74,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "The error message object returned when the `uploadFiles()`'s Promise is rejected.",
            "links":
              [ "[uploadFiles](#uploadFiles)" ],
            "examples":
              [ { "title": "Get upload error information",
                  "body":
                    [ "// NOTE: This example uses the new uploadFiles() ",
                      "//       function, which replaces startUpload().  ",
                      "//       See the function description for more information, and ",
                      "//       line 19 for the deprecated example.",
                      "",
                      "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('file urls are:', uploadedFile.url);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );",
                      "",
                      "",
                      "",
                      "// NOTE: This example uses the deprecated",
                      "//       startUpload() function.",
                      "",
                      "$w(\"#myUploadButton\").startUpload()",
                      "  .then( (uploadedFile) => {",
                      "    let url = uploadedFile.url;  // \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"",
                      "  } )",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "errorCode",
              "type": "string",
              "doc": "The error's code." },
            { "name": "errorDescription",
              "type": "string",
              "doc": "The error's description." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "UploadedFile",
        "locations":
          [ { "lineno": 61,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "The object returned by the `uploadFiles()`'s Promise.",
            "links":
              [ "[uploadFiles](#uploadFiles)" ],
            "examples":
              [ { "title": "Get uploaded file information",
                  "body":
                    [ "// NOTE: This example uses the new uploadFiles() ",
                      "//       function, which replaces startUpload().  ",
                      "//       See the function description for more information, and ",
                      "//       line 19 for the deprecated example.",
                      "",
                      "$w(\"#myUploadButton\").uploadFiles()",
                      "  .then( (uploadedFiles) => {",
                      "    uploadedFiles.forEach(uploadedFile => {",
                      "      console.log('file urls are:', uploadedFile.url);",
                      "    })",
                      "  })",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "} );",
                      "",
                      "",
                      "",
                      "// NOTE: This example uses the deprecated",
                      "//       startUpload() function.",
                      "",
                      "$w(\"#myUploadButton\").startUpload()",
                      "  .then( (uploadedFile) => {",
                      "    let url = uploadedFile.url;  // \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"",
                      "  } )",
                      "  .catch( (uploadError) => {",
                      "    let errCode = uploadError.errorCode;  // 7751",
                      "    let errDesc = uploadError.errorDescription; // \"Error description\"",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "url",
              "type": "string",
              "doc": "The Wix URL of the successfully uploaded file." },
            { "name": "mediaId",
              "type": "string",
              "doc": "The Wix media ID of the uploaded file." },
            { "name": "title",
              "type": "string",
              "doc": "The title of the uploaded file." },
            { "name": "width",
              "type": "number",
              "doc": "The width of an uploaded image or video file." },
            { "name": "height",
              "type": "number",
              "doc": "The height of an uploaded image or video file." },
            { "name": "duration",
              "type": "number",
              "doc": "The duration (in milliseconds) of an uploaded audio file." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] },
      { "name": "ValidityState",
        "locations":
          [ { "lineno": 525,
              "filename": "UploadButton.es6" } ],
        "docs":
          { "summary": "Contains detailed information about the validity states of a file to upload.",
            "description":
              [ "States not related to file uploads can be ignored." ],
            "links":
              [ "[validity](#validity)" ],
            "examples":
              [ { "title": "Get ValidityState info",
                  "body":
                    [ "let validityObj = $w(\"#myUploadFile\").validity;",
                      "",
                      "let customError = validityObj.customError;                   // true",
                      "let valid = validityObj.valid;                               // false ",
                      "let fileNotUploaded = validityObj.fileNotUploaded;           // false",
                      "let fileSizeExceedsLimit = validityObj.fileSizeExceedsLimit; // false",
                      "let fileTypeNotAllowed = validityObj.fileTypeNotAllowed;     // false",
                      "let valueMissing = validityObj.valueMissing;                 // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "customError",
              "type": "boolean",
              "doc": "`true` if the file's custom validity message has been set to a non-empty string." },
            { "name": "valid",
              "type": "boolean",
              "doc": "`true` if the file to upload meets all validations." },
            { "name": "fileNotUploaded",
              "type": "boolean",
              "doc": "`true` if a file has been selected but not uploaded." },
            { "name": "fileSizeExceedsLimit",
              "type": "boolean",
              "doc": "`true` if a file has been selected but it is too large. Maximum allowed file sizes are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes)." },
            { "name": "fileTypeNotAllowed",
              "type": "boolean",
              "doc": "`true` if a file has been selected but the file's type is not supported. Supported file types are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes)." },
            { "name": "valueMissing",
              "type": "boolean",
              "doc": "`true` if a file is required but no file has been selected." },
            { "name": "typeMismatch",
              "type": "boolean",
              "doc": "`true` if the text input element's value does not match its type when the type is email or url." },
            { "name": "patternMismatch",
              "type": "boolean",
              "doc": "`true` if the element's value does not match its pattern validation." },
            { "name": "tooLong",
              "type": "boolean",
              "doc": "`true` if the length of the element's value exceeds its [`maxLength`]($w.TextInputMixin.html#maxLength) property." },
            { "name": "tooShort",
              "type": "boolean",
              "doc": "`true` if the length of the element's value is smaller than its `minlength` property." },
            { "name": "rangeUnderflow",
              "type": "boolean",
              "doc": "`true` if the element's value is less than the its [`min`]($w.TextInput.html#min) property." },
            { "name": "rangeOverflow",
              "type": "boolean",
              "doc": "`true` if the element's value is more than the its [`max`]($w.TextInput.html#max) property." },
            { "name": "stepMismatch",
              "type": "boolean",
              "doc": "`true` if a text input element's numeric value is defined as a whole number but a decimal number is entered." },
            { "name": "badInput",
              "type": "boolean",
              "doc": "`true` if the element's value cannot be converted to a value." },
            { "name": "exceedsFileLimit",
              "type": "boolean",
              "doc": "`true` if the number of files selected exceeds the limit." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] } ],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "example",
        "text": "Animations Viewer",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-wix-animations" } ],
  "FAQs":
    [ { "title": "What types of files can site visitors upload with an upload button?",
        "markdown": "You can set your upload button to upload images, documents, videos, or audio files using the [`fileType`](https://www.wix.com/code/reference/$w.UploadButton.html#fileType) property. The file types of the images, documents, videos and audio files that can be uploaded are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes)." },
      { "title": "How do I use an upload button on my site?",
        "markdown": "The typical file upload scenario is a two-part process. First your site visitor chooses the file to upload and then they trigger the actual upload. This usually requires at least two page elements, an upload button element and a regular button. \n\nThe site visitor chooses which file to upload by clicking the upload button and selecting the file in a native file chooser dialog. (The site visitor can only choose from the specified file type.) Then the site visitor clicks the regular button to trigger some code that performs the upload. [Learn more](https://support.wix.com/en/article/how-to-use-the-upload-button-with-code)." },
      { "title": "How do I get information about files that are pending an upload?",
        "markdown": "Use [`value`](https://www.wix.com/code/reference/$w.UploadButton.html#value) property to check the `name` and `size` of [`File`](https://www.wix.com/code/reference/$w.UploadButton.html#File) objects waiting to be uploaded. " } ] }