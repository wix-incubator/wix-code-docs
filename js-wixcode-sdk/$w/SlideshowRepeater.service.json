{ "name": "SlideshowRepeater",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.PlayableMixin",
      "$w.ContainableMixin",
      "$w.EffectsMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "SlideshowRepeater.js" },
  "docs":
    { "summary": "A slideshow that combines the visual presentation of a slideshow with the data-driven capabilities of a repeater.",
      "description":
        [ "> This feature is only available in Wix Studio.",
          "",
          " SlideshowRepeater is a playable container for repeating items that can be populated with data.",
          " It combines the visual slideshow functionality with the programmatic capabilities ",
          " of a repeater, allowing you to create dynamic slideshows based on data arrays.",
          "",
          " You can populate your slideshow repeater with data programmatically using the [`data`](#data) property ",
          " to pass an array of items. This data comes from your Wix site's collections or a ",
          " 3rd-party database. Then use [`forEachItem()`](#forEachItem), [`forItems()`](#forItems), ",
          " and [`onItemReady()`](#onItemReady) methods to display the data in each repeated item.",
          "",
          " Each object in the data array represents a repeated item in the slideshow and must contain ",
          " a unique `_id` property used to match the object's data to individual repeated items." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.SlideshowRepeater.Accessibility",
        "locations":
          [ { "lineno": 359,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet App (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and apps more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves don't impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "currentIndex",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 68,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Gets the index of the slideshow's current item.",
            "description":
              [ "Note that the item indices in a slideshow repeater are zero-based, even though",
                " they're numbered starting from 1 in the editor." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 410,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "You can use this property to manipulate the custom CSS classes of an element. For example,",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "Custom classes are those that you create on a site, not the predefined global classes",
                "that are provided for each element.",
                "",
                "Use the following methods to work with the element's custom CSS classes:",
                "+ [`add()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/add): Adds custom CSS classes to the class list of an element.",
                "+ [`contains()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/contains): Indicates whether the element's class list contains a specified custom CSS class.",
                "+ [`remove()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/remove): Removes custom CSS classes from an element's class list.",
                "+ [`replace()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/replace): Replaces a custom CSS class of an element with a different custom CSS class.",
                "+ [`toggle()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/toggle): Toggles an element's custom CSS class.",
                "+ [`values()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/values): Retrieves an array of strings listing an element's custom CSS classes.",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://dev.wix.com/docs/velo/velo-only-apis/$w/styling-elements-with-css)",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics)." ],
            "links": [],
            "examples":
              [ { "title": "Add a single class to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Add multiple classes to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Indicate whether an element contains a specified class",
                  "body":
                    [ "$w(\"#myElement\").customClassList.contains(\"className1\"); //true" ],
                  "extra":
                    {  } },
                { "title": "Remove a single class from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Remove multiple classes from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Replace a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.replace(\"className1, className2\");" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.toggle(\"className1\")  // true" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "if( $w(\"#myElement\").customClassList.contains(\"className1\") ) {",
                      "  $w(\"#myElement\").customClassList.replace(\"className1, className2\");",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").customClassList.replace(\"className2, className1\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Get the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.value; // \"className1 className2\"" ],
                  "extra":
                    {  } },
                { "title": "Gets a list of the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.values(); // [\"className1\", \"className2\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "data",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Object" ] },
        "locations":
          [ { "lineno": 107,
              "filename": "SlideshowRepeater.js" },
            { "lineno": 198,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Sets or gets the slideshow repeater data.",
            "description":
              [ "A slideshow repeater's data is stored as an array of objects. Each object in the array",
                " must contain a unique `_id` property which is used to match the object's",
                " data to the individual repeated items of the slideshow repeater as described below.",
                " The value of the `_id` property must be a string and can only contain alphanumeric",
                " characters (A-Z, a-z, 0-9) and hyphens (`-`). Other than `_id`, the objects in the",
                " slideshow repeater's data array can contain anything you want.",
                "",
                " For example, a simple array of slideshow repeater data may look like this:",
                "",
                " ```javascript",
                " [",
                "   {",
                "     \"_id\": \"1\",",
                "     \"title\": \"Item One\",",
                "     \"description\": \"First item content\",",
                "     \"image\": \"http://someImageUrl/item1.jpg\"",
                "   },",
                "   {",
                "     \"_id\": \"2\",",
                "     \"title\": \"Item Two\", ",
                "     \"description\": \"Second item content\",",
                "     \"image\": \"http://someImageUrl/item2.jpg\"",
                "   }",
                " ]",
                " ```",
                "",
                " Slideshow repeater data isn't automatically applied to the elements in the repeated items.",
                " You choose how to use the slideshow repeater's data in the [`onItemReady()`](#onItemReady),",
                " [`onItemRemoved()`](#onItemRemoved), [`forItems()`](#forItems), and",
                " [`forEachItem()`](#forEachItem) callback methods. Most often, you",
                " apply the data of a repeated item to the properties and methods",
                " of the elements contained in that repeated item.",
                "",
                " Typically, you use the [`onItemReady()`](#onItemReady) method to set a callback",
                " that populates the slideshow's elements with the item data from the `data` array.",
                " The callback is triggered for each new item in the `data` array as described below.",
                " Then, you might use the [`forItems()`](#forItems) and [`forEachItem()`](#forEachItem)",
                " methods to modify slideshow elements at some point after the `data` is originally set.",
                "",
                " Because setting a slideshow repeater's `data` property triggers the `onItemReady()`",
                " callback to run, make sure you call `onItemReady()` before you set the",
                " `data` property. Failing to do so means that your callbacks aren't",
                " triggered when you set the `data` property.",
                "",
                " You can't modify the data array in-place. To add, change, or remove",
                " objects from the slideshow repeater's data array:",
                "",
                "   1. Store the value of the `data` property in a variable.",
                "   1. Make changes to the objects of the data array.",
                "   1. Reset the `data` property with the modified array.",
                "",
                "",
                " When the slideshow repeater's `data` property is set:",
                "",
                "   1. New repeated items are created for each object that has an `_id` value",
                "      that's not already present in the current array of data objects. The elements",
                "      in the new repeated items are first populated with the data of the slideshow repeater's",
                "      item template. Then the [`onItemReady()`](#onItemReady)",
                "      event handler is triggered for each of the new repeated items. Usually, you",
                "      overwrite some or all of the data populated from the item template",
                "      in the [`onItemReady()`](#onItemReady) event handler with the data for",
                "      that specific repeated item. When all of the [`onItemReady()`](#onItemReady)",
                "      event handlers have finished running, the new repeated items are displayed.",
                "   1. Repeated items are removed if their IDs are no longer in the array of",
                "      data objects. The [`onItemRemoved()`](#onItemRemoved) event handler is",
                "      triggered for each of the removed repeated items.",
                "   1. Nothing occurs to repeated items whose IDs were already in the array",
                "      of data objects, even if other data in the object has changed. To update",
                "      repeated items with the new data, use the [`forEachItem()`](#forEachItem)",
                "      or [`forItems()`](#forItems) methods.",
                "",
                "",
                " Getting the `data` property returns the slideshow repeater's current data. If you",
                " haven't yet explicitly set the slideshow repeater's `data`, getting the `data`",
                " property returns only the IDs of the current repeated items that were",
                " set in the editor." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showNavigationButtons",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 81,
              "filename": "SlideshowRepeater.js" },
            { "lineno": 100,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Sets or gets whether a slideshow repeater's navigation buttons are shown.",
            "description":
              [ "Setting the `showNavigationButtons` property to `true` shows",
                " the slideshow repeater's navigation buttons (previous/next arrows).",
                " Setting it to `false` hides the navigation buttons.",
                "",
                " Getting the `showNavigationButtons` property returns",
                " whether a slideshow repeater's navigation buttons are shown or hidden." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "changeSlide",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "slideIndex",
              "type": "number",
              "doc": "The index of the item to move to (zero-based)." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 45,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Change the slideshow's current item to a specific index.",
            "description":
              [ "The `changeSlide()` method returns a Promise that's resolved when",
                " the slideshow finishes moving from the current item to the item",
                " at the specified index.",
                "",
                " Note that item indices in a slideshow repeater are zero-based,",
                " even though they're numbered starting from 1 in the editor.",
                "",
                " If the specified index is out of range (less than 0 or greater than",
                " or equal to the number of items), an error is thrown." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "forEachItem",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "callback",
              "type": "$w.ForItemCallback",
              "doc": "The name of the method to run for each repeated item." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 283,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Runs a method for each repeated item.",
            "description":
              [ "Use the `forEachItem()` method to run a method on all of a slideshow repeater's",
                " repeated items. You can use the callback method to update or pull",
                " information from all of the slideshow repeater's repeated items.",
                "",
                " When you set a slideshow repeater's [`data`](#data) property with data that changes",
                " repeated items with existing IDs, those changes aren't automatically reflected",
                " in the elements contained in the slideshow repeater. That's because you are",
                " responsible for applying a slideshow repeater's data to its repeated items.",
                "",
                " To apply the data to repeated items with new IDs, you can use the [`onItemReady()`](#onItemReady)",
                " event handler.",
                "",
                " To update repeated items with existing IDs, you can use the `forEachItem()` or",
                " [`forItems()`](#forItems) methods.",
                "",
                " Usually, when updating repeated items you:",
                "",
                " + Apply the repeated item's `itemData` to the properties and methods",
                "   of the elements contained in the repeated item being updated.",
                "",
                "   For example, you can use `forEachItem()` to set the [`src`]($w.Image.html#src)",
                "   property of an image in the slideshow to an image source found in the `itemData`",
                "   object and then [`show()`]($w.Image.html#show) the image.",
                " + Add event handlers to the elements contained in",
                "   the repeated item being updated.",
                "",
                "   For example, you can use `forEachItem()` to set the [`onClick()`](/$w/button/on-click)",
                "   event handler of a button in the slideshow.",
                "> **Note:** When a page loads, datasets load after slideshow repeaters. To use `forEachItem()` with slideshow repeater data populated by a dataset, ",
                "   make sure to call it in the dataset's [`onReady()`](https://www.wix.com/velo/reference/wix-dataset/dynamicdataset/onready?branch=forEachItem-note) method." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "forItems",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The IDs of the repeated items on which to run the callback method." },
            { "name": "callback",
              "type": "$w.ForItemCallback",
              "doc": "The name of the method to run for each repeated item." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 331,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Runs a method for each repeated item with the specified IDs.",
            "description":
              [ "Use the `forItems()` method to run a method on a specified list of",
                " repeated items. You can use the callback method to update or pull",
                " information from the specified repeated items.",
                "",
                " When you set a slideshow repeater's [`data`](#data) property with data that changes",
                " repeated items with existing IDs, those changes aren't automatically reflected",
                " in the elements contained in the slideshow repeater. That's because you are",
                " responsible for applying a slideshow repeater's data to its repeated items.",
                "",
                " To apply the data to repeated items with new IDs, you can use the [`onItemReady()`](#onItemReady)",
                " event handler.",
                "",
                " To update repeated items with existing IDs, you can use the `forEachItem()` or",
                " `forItems()` methods.",
                "",
                " Usually, when updating repeated items you:",
                "",
                " + Apply the repeated item's `itemData` to the properties and methods",
                "   of the elements contained in the repeated item being updated.",
                "",
                "   For example, you can use `forItems()` to set the [`src`]($w.Image.html#src)",
                "   property of an image in the slideshow to an image source found in the `itemData`",
                "   object and then [`show()`]($w.Image.html#show) the image.",
                " + Add event handlers to the elements contained in",
                "   the repeated item being updated.",
                "",
                "   For example, you can use `forItems()` to set the [`onClick()`](/$w/button/on-click)",
                "   event handler of a button in the slideshow." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "next",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 446,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Moves to the next repeated item.",
            "description":
              [ "The `next()` function returns a Promise that is resolved when the next",
                " repeated item is completely rendered. Calling `next()` when on the last repeated item",
                " moves to the first repeated item." ],
            "links": [],
            "examples":
              [ { "title": "Move to the next item",
                  "body":
                    [ "$w(\"#myElement\").next();" ],
                  "extra":
                    {  } },
                { "title": "Move to the next item and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").next()",
                      "  .then( () => {",
                      "    console.log(\"Finished moving to the next item\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the method or\n the method expression to run when the slideshow moves to a new item." } ],
        "ret":
          { "type": "$w.SlideshowRepeater",
            "doc": "The slideshow repeater on which the event is now registered." },
        "locations":
          [ { "lineno": 28,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the slideshow moves to a new item.",
            "description":
              [ "A slideshow repeater moves to a new item through user actions, such as clicking",
                " on navigation buttons, or programmatically, using methods",
                " such as [changeSlide()](#changeSlide), [play()](#play), [previous( )](#previous), and [next( )](#next)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } },
      { "name": "onItemReady",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ItemReadyEventHandler",
              "doc": "The name of the method or\n the method expression to run when the repeated item is ready." } ],
        "ret":
          { "type": "$w.SlideshowRepeater",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 205,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Sets the method that runs when a new repeated item is created.",
            "description":
              [ "Use the `onItemReady()` method for code you want to run before new",
                " repeated items are rendered. ",
                "",
                " The `onItemReady()` method can be added as a static event handler using the Properties & Events Panel, or as a dynamic event handler using the `$w` selector. ",
                "",
                "> **Note:** When calling this method, make sure to call it only once, and only in the page's `onReady()` method.",
                "",
                " The callback is triggered when you add new repeated items by setting the",
                " [`data`](#data) property or when new repeated items are created based on a",
                " dataset that's connected to the slideshow repeater. It's not triggered for",
                " existing repeated items that are updated when you set the [`data`](#data)",
                " property. (For more information about when new repeated items are created, see",
                " the `data` property.) To run code after updating existing repeated items, use",
                " the [`forEachItem`](#forEachItem) or [`forItems`](#forItems) methods",
                " instead.",
                "",
                " Because setting a slideshow repeater's `data` property triggers the `onItemReady()`",
                " callback to run, make sure you call `onItemReady()` before you set the",
                " `data` property. Failing to do so means that your callbacks aren't",
                " triggered when you set the `data` property.",
                "",
                " Usually, you use `onItemReady()` to:",
                "",
                " + Apply the repeated item's `itemData` to the properties and methods",
                "   of the elements contained in the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`src`]($w.Image.html#src)",
                "   property of an image in the slideshow to an image source found in the `itemData`",
                "   object and then [`show()`]($w.Image.html#show) the image.",
                " + Add event handlers to the elements contained in",
                "   the repeated item being created.",
                "",
                "   For example, you can use `onItemReady()` to set the [`onClick()`](/$w/button/on-click)",
                "   event handler of a button in the slideshow.",
                "",
                "> **Note:** When using a dataset to populate the contents of your repeated items,",
                "  the `onItemReady()` callback method is triggered before the dataset",
                "  populates the values of your page elements. Therefore, element values",
                "  that you set using `onItemReady()` may be overridden when the dataset is",
                "  ready. To change the values set by the dataset, use [`forEachItem`](#forEachItem)",
                "  inside the dataset's [`onReady()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/on-ready). For more",
                "  information, see the [`forEachItem`](#forEachItem) examples." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "itemReady" } },
      { "name": "onItemRemoved",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ItemRemovedEventHandler",
              "doc": "The name of the method or\n the method expression to run when the repeated item is removed." } ],
        "ret":
          { "type": "$w.SlideshowRepeater",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 261,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Sets the function that runs when a repeated item is removed.",
            "description":
              [ "Use the `onItemRemoved()` method for code you want to run when",
                " repeated items are removed. The callback is triggered when you remove",
                " repeated items by setting the value of the [`data`](#data) property to an array",
                " in which some of the existing item IDs are no longer present or when repeated items",
                " are removed based on a dataset that's connected to the slideshow repeater.",
                "",
                "> **Note:** The `onItemRemoved()` callback method isn't called when the static",
                " repeated items that were set in the editor are removed." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "itemRemoved" } },
      { "name": "previous",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 461,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "Moves to the previous repeated item.",
            "description":
              [ "The `previous()` function returns a Promise that is resolved when the previous",
                " repeated item is completely rendered. Calling `previous()` when on the first repeated item",
                " moves to the last repeated item." ],
            "links": [],
            "examples":
              [ { "title": "Move to the previous item",
                  "body":
                    [ "$w(\"#myElement\").previous();" ],
                  "extra":
                    {  } },
                { "title": "Move to the previous item and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").previous()",
                      "  .then( () => {",
                      "    console.log(\"Finished moving to the previous item\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 395,
              "filename": "SlideshowRepeater.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "lang",
              "type": "string",
              "doc": "Specifies the language of the element's content, enhancing pronunciation accuracy for screen readers and other assistive technologies. \n\nSetting the `lang` property improves multilingual support by ensuring that assistive technologies apply the correct linguistic rules and speech patterns. It also enables search engines to index the element's content accurately, resulting in better visibility and relevance in search results for better SEO optimization. \n\nThe `lang` property's value must be a 2-letter language code in [ISO 639-1 format](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes).",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }