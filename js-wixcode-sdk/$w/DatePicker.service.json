{ "name": "DatePicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "DatePicker.js" },
  "docs":
    { "summary": "A `DatePicker` is used for entering dates. It lets site visitors populate a\n date field by picking a date using a calendar popup.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "disabledDateRanges",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.DatePicker.DateRange" ] },
        "locations":
          [ { "lineno": 196,
              "filename": "DatePicker.js" },
            { "lineno": 236,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets ranges of dates that a site visitor can't select.",
            "description":
              [ "Setting the `disabledDateRanges` property prevents site visitors from",
                " selecting dates in the specified ranges.",
                "",
                " Set `disabledDateRanges` to:",
                " + An array of date ranges to disable, each with a start date and an end date",
                " + An empty array (`[]`), to remove the current disabled dates",
                "",
                " Getting the `disabledDateRanges` property returns the current",
                " list of disabled date ranges.",
                "",
                " Ranges are inclusive. This means that January 10th and February 10th are disabled ",
                " when specifying a range from January 10, 2025 to February 10, 2025. ",
                "",
                " ",
                " Disabled dates override any dates enabled with the [`enabledDateRanges`](#enabledDateRanges) property.",
                " This means that if a date matches both enabled and disabled properties, the site visitor ",
                " can't select the date in the date picker." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)",
                "[enabledDateRanges](#enabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are disabled",
                  "body":
                    [ "let disabledDates = $w('#myDatePicker').disabledDateRanges;",
                      "",
                      "let firstDisabledStartDateAsString = disabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are disabled",
                  "body":
                    [ "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022;" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of disabled dates based on a specific time zone",
                  "body":
                    [ "$w('#myDatePicker').timeZone = 'Pacific/Auckland';",
                      "",
                      "// In 2022, New Zealand switches to daylight savings ",
                      "// time on September 25th",
                      "",
                      "const disabledDates = [",
                      "  {",
                      "    startDate: new Date('06/10/2022 GMT+12'),",
                      "    endDate: new Date('08/15/2022 GMT+12')",
                      "  },",
                      "  {",
                      "    startDate: new Date('08/01/2022 GMT+12'),",
                      "    endDate: new Date('10/01/2022 GMT+13')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').disabledDateRanges = disabledDates;" ],
                  "extra":
                    { "description": "This example demonstrates how to base the disabled date ranges on the time zone for a specific country, such as \n New Zealand, and to take daylight savings into account (GMT+13 instead of GMT+12)." } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "",
                      "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022; // Not available on holidays",
                      "$w('#myDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDates",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Date" ] },
        "locations":
          [ { "lineno": 243,
              "filename": "DatePicker.js" },
            { "lineno": 271,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "**Deprecated.** This property will continue to work, but a newer version is available at [`disabledDateRanges`](https://www.wix.com/velo/reference/$w/datepicker/disableddateranges).",
            "description":
              [ "> **Deprecated.** This property will continue to work, but a newer version is available at [`disabledDateRanges`](https://www.wix.com/velo/reference/$w/datepicker/disableddateranges).",
                "",
                "",
                " Sets or gets the dates that a site visitor can't select.",
                "",
                " Setting the `disabledDates` property prevents site visitors from",
                " selecting the specified dates. ",
                "",
                " Set `disabledDates` to an empty array (`[]`) to remove the current disabled dates.",
                "",
                " Getting the `disabledDates` property returns the current",
                " list of disabled dates." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)" ],
            "examples":
              [ { "title": "Get dates which are disabled",
                  "body":
                    [ "let dates = $w(\"#myDatePicker\").disabledDates;",
                      "",
                      "let firstAsStr = dates[0].toDateString(); // \"Fri Jan 13 2017\"",
                      "" ],
                  "extra":
                    { "description": "<span style = \"color:#FF5252;\">This example uses a deprecated property.</span>" } },
                { "title": "Set dates which are disabled",
                  "body":
                    [ "let badDate1 = new Date(2017, 0, 13);",
                      "let badDate2 = new Date(2017, 9, 13);",
                      "",
                      "$w(\"#myDatePicker\").disabledDates = [badDate1, badDate2];" ],
                  "extra":
                    { "description": "<span style = \"color:#FF5252;\">This example uses a deprecated property.</span>" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDaysOfWeek",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 278,
              "filename": "DatePicker.js" },
            { "lineno": 312,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the days of the week that a site visitor can't select.",
            "description":
              [ "Setting the `disabledDaysOfWeek` property prevents site visitors",
                " from selecting the specified days of the weeks. ",
                "",
                " Set `disabledDaysOfWeek` to an empty array (`[]`) to remove the current",
                " disabled days of the week.",
                "",
                " Getting the `disabledDaysOfWeek` property returns the",
                " current list of disabled days of the week.",
                "",
                " The `disabledDaysOfWeek` property accepts an array of integers from 0 to",
                " 6, where 0 represent Sunday, 1 is Monday, 2 is Tuesday, and so on.",
                "",
                " If a date falls on a disabled day of the week, but is also set as an enabled date",
                " with the [`enabledDateRanges`](#enabledDateRanges) property, the date is",
                " disabled and the site visitor can't select the date in the date picker." ],
            "links":
              [ "[disabledDateRanges](#disabledDateRanges)" ],
            "examples":
              [ { "title": "Get which days of the week are disabled",
                  "body":
                    [ "let days = $w(\"#myDatePicker\").disabledDaysOfWeek;",
                      "",
                      "let secondDisabledDay = days[1]; // 6" ],
                  "extra":
                    {  } },
                { "title": "Disable weekends",
                  "body":
                    [ "$w(\"#myDatePicker\").disabledDaysOfWeek = [0, 6];" ],
                  "extra":
                    {  } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "",
                      "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022; // Not available on holidays",
                      "$w('#myDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "enabledDateRanges",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.DatePicker.DateRange" ] },
        "locations":
          [ { "lineno": 140,
              "filename": "DatePicker.js" },
            { "lineno": 188,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets ranges of dates that a site visitor can select.",
            "description":
              [ "Setting the `enabledDateRanges` property lets site visitors",
                " select dates in the specified ranges, provided that the dates aren't ",
                " disabled by some other property. ",
                "",
                " Set `enabledDateRanges` to:",
                " + An array of date ranges to enable, each with a start date and an end date.",
                " + An empty array (`[]`), to disable all dates.",
                " + Null, to ignore `enabledDateRanges`. Use this to ignore previously set enabled date ranges.",
                "",
                " Getting the `enabledDateRanges` property returns the current",
                " list of enabled date ranges.",
                "",
                " Ranges are inclusive. This means that January 10th and February 10th are enabled ",
                " when specifying a range from January 10, 2025 to February 10, 2025. ",
                "",
                "",
                " Disabled dates override any dates enabled with the `enabledDateRanges` property.",
                " This includes dates disabled with the Wix Editor and with the following properties: ",
                " + [`disabledDateRanges`](#disabledDateRanges)",
                " + [`disabledDaysOfWeek`](#disabledDaysOfWeek)",
                " + [`minDate`](#minDate)",
                " + [`maxDate`](#maxDate)",
                " This means that if a date matches both enabled and disabled properties, the site visitor ",
                " can't select the date in the date picker." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)",
                "[disabledDateRanges](#disabledDateRanges)",
                "[enabledDateRanges](#enabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are disabled",
                  "body":
                    [ "let enabledDates = $w('#myDatePicker').enabledDateRanges;",
                      "",
                      "let firstEnabledStartDateAsString = enabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are disabled",
                  "body":
                    [ "const monthsOnCall = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').enabledDateRanges = monthsOnCall;" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of enabled dates based on a specific time zone",
                  "body":
                    [ "$w('#myDatePicker').timeZone = 'Pacific/Auckland';",
                      "",
                      "// In 2022, New Zealand switches to daylight savings ",
                      "// time on September 25th",
                      "",
                      "const enabledDates = [",
                      "  {",
                      "    startDate: new Date('06/10/2022 GMT+12'),",
                      "    endDate: new Date('08/15/2022 GMT+12')",
                      "  },",
                      "  {",
                      "    startDate: new Date('08/01/2022 GMT+12'),",
                      "    endDate: new Date('10/01/2022 GMT+13')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = enabledDates;" ],
                  "extra":
                    { "description": "This example demonstrates how to set a timezone when specifying enabled date ranges. The example \n also takes daylight savings into account (GMT+13 instead of GMT+12)." } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "",
                      "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022; // Not available on holidays",
                      "$w('#myDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 74,
              "filename": "DatePicker.js" },
            { "lineno": 100,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the latest date that a site visitor can select.",
            "description":
              [ "Setting the `maxDate` property prevents site visitors from selecting",
                "dates past the maximum date.",
                "",
                "Set `maxDate` to `undefined` to remove the",
                "current maximum date limitation.",
                "",
                "Getting the `maxDate` property returns the current maximum",
                "date that a site visitor can select.",
                "",
                "If a date is past the maximum date but is also set as an enabled date",
                "with the [`enabledDateRanges`](#enabledDateRanges) property, the date is",
                "disabled and the site visitor can't select the date in the date picker." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get a date picker's maximum date",
                  "body":
                    [ "let pickerMaxDate = $w(\"#myDatePicker\").maxDate;",
                      "",
                      "let maxStr = pickerMaxDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's maximum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").maxDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 107,
              "filename": "DatePicker.js" },
            { "lineno": 133,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the earliest date that a site visitor can select.",
            "description":
              [ "Setting the `minDate` property prevents site visitors from selecting",
                "dates before the minimum date.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting the `minDate` property returns the current minimum",
                "date that a site visitor can select.",
                "",
                "If a date is before the minimum date but is also set as an enabled date",
                "with the [`enabledDateRanges`](#enabledDateRanges) property, the date is",
                "disabled and the site visitor can't select the date in the date picker." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get a date picker's minimum date",
                  "body":
                    [ "let pickerMinDate = $w(\"#myDatePicker\").minDate;",
                      "",
                      "let minStr = pickerMinDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's minimum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").minDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "timeZone",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 319,
              "filename": "DatePicker.js" },
            { "lineno": 351,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the date picker's timezone.",
            "description":
              [ "The date picker's timezone is set in [IANA timezone](https://nodatime.org/TimeZones) format. ",
                "",
                " You can set the `timeZone` to avoid discrepancies if the site visitor and your ",
                " site are in different timezones. `timeZone` affects: ",
                "",
                " + How the date picker reads and returns dates in Velo and in collections. ",
                " + What the data picker considers to be today's date, past dates, and future dates.",
                "",
                " Examples: ",
                " ",
                " + December 12th in Argentina might already be December 13th in Spain. If you want to disable ",
                "   this date in the date picker with Velo, explicitly set the timezone so it's clear",
                "   which timezone to use.",
                " + If a hotel disables past dates so they can't be booked, make sure to set the timezone to ",
                "   the hotel's timezone.",
                "",
                "",
                " When working with collections, it's useful to save the dates in your site's timezone so that when",
                " viewing the data from the collection, ",
                " the dates are correct for your timezone." ],
            "links": [],
            "examples":
              [ { "title": "Get the date picker's timezone",
                  "body":
                    [ "let timeZone = $w(\"#myDatePicker\").timeZone  // \"Pacific/Auckland\"" ],
                  "extra":
                    {  } },
                { "title": "Set the date picker's timezone",
                  "body":
                    [ "$w(\"#myDatePicker\").timeZone = 'Pacific/Auckland';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "locations":
          [ { "lineno": 39,
              "filename": "DatePicker.js" },
            { "lineno": 67,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the value of the date picker.",
            "description":
              [ "Setting the `value` property sets the date displayed in the date picker element. ",
                "",
                "> **Notes:**",
                " > + Changing a date picker's `value` in code doesn't trigger an `onChange` event.",
                ">",
                ">",
                "> + If a date picker is connected to a dataset, setting the date picker's `value`",
                ">   in code doesn't set the value of the connected field in the dataset.",
                ">   That means if you use the dataset to perform a submit, the value changed",
                ">   in code isn't reflected in the submitted item.",
                ">",
                ">",
                "> + To submit the new value using a dataset, set the field's value using the",
                ">   [`setFieldValue()`](wix-dataset.html#setFieldValue) function before",
                ">   performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get a datepicker's date value",
                  "body":
                    [ "let date = $w(\"#myDatePicker\").value;",
                      "",
                      "let valStr = date.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a datepicker's date value to be today",
                  "body":
                    [ "$w(\"#myDatePicker\").value = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "DateRange",
        "locations":
          [ { "lineno": 20,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "An object containing the start and end dates of a range of dates.",
            "links":
              [ "[enabledDateRanges](#enabledDateRanges)",
                "[disabledDateRanges](#disabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are enabled",
                  "body":
                    [ "let enabledDates = $w('#myDatePicker').enabledDateRanges;",
                      "",
                      "let firstEnabledStartDateAsString = enabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are enabled",
                  "body":
                    [ "const monthsOnCall = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').enabledDateRanges = monthsOnCall;" ],
                  "extra":
                    {  } },
                { "title": "Get ranges of dates that are disabled",
                  "body":
                    [ "let disabledDates = $w('#myDatePicker').disabledDateRanges;",
                      "",
                      "let firstDisabledStartDateAsString = disabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are disabled",
                  "body":
                    [ "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "startDate",
              "type": "Date",
              "doc": "Start date for the range. The `startDate` is inclusive, \n meaning it's included in the range. The start date must be earlier than the \n end date of the range." },
            { "name": "endDate",
              "type": "Date",
              "doc": "End date for the range. The `endDate` is inclusive, \n meaning it's included in the range. The end date must be later than the \n start date of the range." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "article",
        "text": "Formatting Dates",
        "url": "https://support.wix.com/en/article/wix-code-formatting-dates" } ],
  "FAQs":
    [ { "title": "How do I prevent my site visitors from selecting specific dates in a date picker?",
        "markdown": "*   Use [`disabledDates`](https://www.wix.com/code/reference/$w.DatePicker.html#disabledDates) to define specific dates a visitor cannot select.\n*   Use [`disabledDaysOfWeek`](https://www.wix.com/code/reference/$w.DatePicker.html#disabledDaysOfWeek) to prevent visitors from selecting specific days in the week, such as Saturday and Sunday.\n*   Use [`minDate`](https://www.wix.com/code/reference/$w.DatePicker.html#minDate) and [`maxDate`](https://www.wix.com/code/reference/$w.DatePicker.html#maxDate) to prevent visitors from selecting a date outside of a specific range." },
      { "title": "I want to display a date in a date picker. How do I prevent site visitors from changing the displayed date?",
        "markdown": "To prevent visitors from modifying the value of your date picker, define the [`readOnly`](https://www.wix.com/code/reference/$w.DatePicker.html#readOnly) property of your date picker as `true`." },
      { "title": "How do I let site visitors search or filter my site content according to date?",
        "markdown": "Let visitors enter a date via a date picker. Then [query](https://www.wix.com/code/reference/wix-data.html#query) your database collection or [filter](https://www.wix.com/code/reference/wix-data.html#filter) your dataset for items with the selected date. " } ] }