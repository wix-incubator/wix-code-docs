{ "name": "DatePicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 15,
      "filename": "DatePicker.es6" },
  "docs":
    { "summary": "A `DatePicker` is used for entering dates. It lets users populate a\n date field by picking a date using a calendar popup.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "disabledDates",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Date" ] },
        "locations":
          [ { "lineno": 206,
              "filename": "DatePicker.es6" },
            { "lineno": 237,
              "filename": "DatePicker.es6" } ],
        "docs":
          { "summary": "Sets or gets the dates that a user cannot select.",
            "description":
              [ "Setting the `disabledDates` property prevents users from",
                " selecting the specified dates. However, it does not limit your ability",
                " to set those dates programmatically.",
                "",
                " Set `disabledDates` to an empty array (`[]`) to remove the current disabled dates.",
                "",
                " Getting the `disabledDates` property returns the current",
                " list of disabled dates." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)" ],
            "examples":
              [ { "title": "Get dates which are disabled",
                  "body":
                    [ "let dates = $w(\"#myDatePicker\").disabledDates;",
                      "",
                      "let firstAsStr = dates[0].toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set dates which are disabled",
                  "body":
                    [ "let badDate1 = new Date(2017, 0, 13);",
                      "let badDate2 = new Date(2017, 9, 13);",
                      "",
                      "$w(\"#myDatePicker\").disabledDates = [badDate1, badDate2];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDaysOfWeek",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 271,
              "filename": "DatePicker.es6" },
            { "lineno": 304,
              "filename": "DatePicker.es6" } ],
        "docs":
          { "summary": "Sets or gets the days of the week that a user cannot select.",
            "description":
              [ "Setting the `disabledDaysOfWeek` property prevents users",
                " from selecting the specified days of the weeks. However, it does not",
                " limit your ability to set those dates programmatically. Set",
                " `disabledDaysOfWeek` to an empty array (`[]`) to remove the current",
                " disabled days of the week.",
                "",
                " Getting the `disabledDaysOfWeek` property returns the",
                " current list of disabled days of the week.",
                "",
                " The `disabledDaysOfWeek` property accepts an array of integers from 0 to",
                " 6, where 0 represent Sunday, 1 is Monday, 2 is Tuesday, and so on." ],
            "links":
              [ "[disabledDates](#disabledDates)" ],
            "examples":
              [ { "title": "Get which days of the week are disabled",
                  "body":
                    [ "let days = $w(\"#myDatePicker\").disabledDaysOfWeek;",
                      "",
                      "let secondDisabledDay = days[1]; // 6" ],
                  "extra":
                    {  } },
                { "title": "Set Sundays and Saturdays to be disabled",
                  "body":
                    [ "$w(\"#myDatePicker\").disabledDaysOfWeek = [0, 6];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 95,
              "filename": "DatePicker.es6" },
            { "lineno": 129,
              "filename": "DatePicker.es6" } ],
        "docs":
          { "summary": "Sets or gets the latest date that a user can select.",
            "description":
              [ "Setting the `maxDate` property prevents users from selecting",
                "dates past the maximum date. However, it does not limit your ability to",
                "change the date picker's value to one that exceeds `maxDate`",
                "programmatically.",
                "",
                "Set `maxDate` to `undefined` to remove the",
                "current maximum date limitation.",
                "",
                "Getting the `maxDate` property returns the current maximum",
                "date that a user can select." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get a date picker's maximum date",
                  "body":
                    [ "let pickerMaxDate = $w(\"#myDatePicker\").maxDate;",
                      "",
                      "let maxStr = pickerMaxDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's maximum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").maxDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minDate",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 151,
              "filename": "DatePicker.es6" },
            { "lineno": 184,
              "filename": "DatePicker.es6" } ],
        "docs":
          { "summary": "Sets or gets the earliest date that a user can select.",
            "description":
              [ "Setting the `minDate` property prevents users from selecting",
                "dates before the minimum date. However, it does not limit your ability to",
                "change the date picker's value to one that precedes `minDate`",
                "programmatically.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting the `minDate` property returns the current minimum",
                "date that a user can select." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get a date picker's minimum date",
                  "body":
                    [ "let pickerMinDate = $w(\"#myDatePicker\").minDate;",
                      "",
                      "let minStr = pickerMinDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's minimum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").minDate = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "locations":
          [ { "lineno": 34,
              "filename": "DatePicker.es6" },
            { "lineno": 66,
              "filename": "DatePicker.es6" } ],
        "docs":
          { "summary": "Sets or gets the value of the date picker.",
            "links": [],
            "examples":
              [ { "title": "Get a datepicker's date value",
                  "body":
                    [ "let date = $w(\"#myDatePicker\").value;",
                      "",
                      "let valStr = date.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a datepicker's date value to be today",
                  "body":
                    [ "$w(\"#myDatePicker\").value = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Changing a date picker's `value` in code does not trigger an `onChange` event.\n\n If a date picker is connected to a dataset, setting the date picker's `value`\n in code does not set the value of the connected field in the dataset.\n That means if you use the dataset to perform a submit, the value changed\n in code is not reflected in the submitted item.\n\n To submit the new value using a dataset, set the field's value using the\n [`setFieldValue()`](wix-dataset.html#setFieldValue) function before\n performing the submit." ] } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "article",
        "text": "Formatting Dates",
        "url": "https://support.wix.com/en/article/wix-code-formatting-dates" } ],
  "FAQs":
    [ { "title": "How do I prevent my site visitors from selecting specific dates in a date picker?",
        "markdown": "*   Use [`disabledDates`](https://www.wix.com/code/reference/$w.DatePicker.html#disabledDates) to define specific dates a visitor cannot select.\n*   Use [`disabledDaysOfWeek`](https://www.wix.com/code/reference/$w.DatePicker.html#disabledDaysOfWeek) to prevent visitors from selecting specific days in the week, such as Saturday and Sunday.\n*   Use [`minDate`](https://www.wix.com/code/reference/$w.DatePicker.html#minDate) and [`maxDate`](https://www.wix.com/code/reference/$w.DatePicker.html#maxDate) to prevent visitors from selecting a date outside of a specific range." },
      { "title": "I want to display a date in a date picker. How do I prevent site visitors from changing the displayed date?",
        "markdown": "To prevent visitors from modifying the value of your date picker, define the [`readOnly`](https://www.wix.com/code/reference/$w.DatePicker.html#readOnly) property of your date picker as `true`." },
      { "title": "How do I let site visitors search or filter my site content according to date?",
        "markdown": "Let visitors enter a date via a date picker. Then [query](https://www.wix.com/code/reference/wix-data.html#query) your database collection or [filter](https://www.wix.com/code/reference/wix-data.html#filter) your dataset for items with the selected date. " } ] }