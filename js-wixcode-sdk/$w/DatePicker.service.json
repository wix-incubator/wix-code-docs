{ "name": "DatePicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.LabelMixin",
      "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "DatePicker.js" },
  "docs":
    { "summary": "A [date picker](https://dev.wix.com/docs/develop-websites/articles/wix-editor-elements/formatting-layout/formatting-dates#displaying-dates-in-date-pickers) \nis used for entering dates. It lets site visitors populate a\ndate field by picking a date using a calendar popup.\nYou can enable and disable dates, date ranges, and days of the week  on your date picker.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "dateFormat",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "'MM/DD/YYYY'",
        "locations":
          [ { "lineno": 42,
              "filename": "DatePicker.js" },
            { "lineno": 67,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the format of the date displayed in the date picker.",
            "description":
              [ "Setting `dateFormat` changes the way the date is displayed in the date picker.",
                "   ",
                "Valid formats:",
                "+ `'MM/DD/YYYY'`",
                "+ `'DD/MM/YYYY'`",
                "+ `'YYYY/MM/DD'`",
                "+ `'YYYY/M/D'`",
                "",
                "Getting the `dateFormat` property returns the current format used to display the date in the date picker.",
                "",
                "`dateFormat` does not affect the format of the `value` property." ],
            "links": [],
            "examples":
              [ { "title": "Get a date picker's date format",
                  "body":
                    [ "let format = $w('#myDatePicker').dateFormat;  // 'MM/DD/YYYY'" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's date format",
                  "body":
                    [ "$w('#myDatePicker').value = 'YYYY/MM/DD';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDateRanges",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.DatePicker.DateRange" ] },
        "locations":
          [ { "lineno": 232,
              "filename": "DatePicker.js" },
            { "lineno": 272,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets ranges of dates that a site visitor can't select.",
            "description":
              [ "Setting the `disabledDateRanges` property prevents site visitors from",
                " selecting dates in the specified ranges.",
                "",
                " Set `disabledDateRanges` to:",
                " + An array of date ranges to disable, each with a start date and an end date",
                " + An empty array (`[]`), to remove the current disabled dates",
                "",
                " Getting the `disabledDateRanges` property returns the current",
                " list of disabled date ranges.",
                "",
                " Ranges are inclusive. This means that January 10th and February 10th are disabled ",
                " when specifying a range from January 10, 2025 to February 10, 2025. ",
                "",
                " ",
                " Disabled dates override any dates enabled with the [`enabledDateRanges`](#enabledDateRanges) property.",
                " This means that if a date matches both enabled and disabled properties, the site visitor ",
                " can't select the date in the date picker." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)",
                "[enabledDateRanges](#enabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are disabled",
                  "body":
                    [ "let disabledDates = $w('#myDatePicker').disabledDateRanges;",
                      "",
                      "let firstDisabledStartDateAsString = disabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are disabled",
                  "body":
                    [ "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022;" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of disabled dates based on a specific time zone",
                  "body":
                    [ "$w('#myDatePicker').timeZone = 'Pacific/Auckland';",
                      "",
                      "// In 2022, New Zealand switches to daylight savings ",
                      "// time on September 25th",
                      "",
                      "const disabledDates = [",
                      "  {",
                      "    startDate: new Date('06/10/2022 GMT+12'),",
                      "    endDate: new Date('08/15/2022 GMT+12')",
                      "  },",
                      "  {",
                      "    startDate: new Date('08/01/2022 GMT+12'),",
                      "    endDate: new Date('10/01/2022 GMT+13')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').disabledDateRanges = disabledDates;" ],
                  "extra":
                    { "description": "This example demonstrates how to base the disabled date ranges on the time zone for a specific country, such as \n New Zealand, and to take daylight savings into account (GMT+13 instead of GMT+12)." } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "",
                      "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022; // Not available on holidays",
                      "$w('#myDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDates",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Date" ] },
        "locations":
          [ { "lineno": 279,
              "filename": "DatePicker.js" },
            { "lineno": 307,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "**Deprecated.** This property will continue to work, but a newer version is available at [`disabledDateRanges`](https://www.wix.com/velo/reference/$w/datepicker/disableddateranges).",
            "description":
              [ "> **Deprecated.** This property will continue to work, but a newer version is available at [`disabledDateRanges`](https://www.wix.com/velo/reference/$w/datepicker/disableddateranges).",
                "",
                "",
                " Sets or gets the dates that a site visitor can't select.",
                "",
                " Setting the `disabledDates` property prevents site visitors from",
                " selecting the specified dates. ",
                "",
                " Set `disabledDates` to an empty array (`[]`) to remove the current disabled dates.",
                "",
                " Getting the `disabledDates` property returns the current",
                " list of disabled dates." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)" ],
            "examples":
              [ { "title": "Get dates which are disabled",
                  "body":
                    [ "let dates = $w(\"#myDatePicker\").disabledDates;",
                      "",
                      "let firstAsStr = dates[0].toDateString(); // \"Fri Jan 13 2017\"",
                      "" ],
                  "extra":
                    { "description": "<span style = \"color:#FF5252;\">This example uses a deprecated property.</span>" } },
                { "title": "Set dates which are disabled",
                  "body":
                    [ "let badDate1 = new Date(2017, 0, 13);",
                      "let badDate2 = new Date(2017, 9, 13);",
                      "",
                      "$w(\"#myDatePicker\").disabledDates = [badDate1, badDate2];" ],
                  "extra":
                    { "description": "<span style = \"color:#FF5252;\">This example uses a deprecated property.</span>" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDaysOfWeek",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 314,
              "filename": "DatePicker.js" },
            { "lineno": 348,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the days of the week that a site visitor can't select.",
            "description":
              [ "Setting the `disabledDaysOfWeek` property prevents site visitors",
                " from selecting the specified days of the weeks. ",
                "",
                " Set `disabledDaysOfWeek` to an empty array (`[]`) to remove the current",
                " disabled days of the week.",
                "",
                " Getting the `disabledDaysOfWeek` property returns the",
                " current list of disabled days of the week.",
                "",
                " The `disabledDaysOfWeek` property accepts an array of integers from 0 to",
                " 6, where 0 represent Sunday, 1 is Monday, 2 is Tuesday, and so on.",
                "",
                " If a date falls on a disabled day of the week, but is also set as an enabled date",
                " with the [`enabledDateRanges`](#enabledDateRanges) property, the date is",
                " disabled and the site visitor can't select the date in the date picker." ],
            "links":
              [ "[disabledDateRanges](#disabledDateRanges)" ],
            "examples":
              [ { "title": "Get which days of the week are disabled",
                  "body":
                    [ "let days = $w(\"#myDatePicker\").disabledDaysOfWeek;",
                      "",
                      "let secondDisabledDay = days[1]; // 6" ],
                  "extra":
                    {  } },
                { "title": "Disable weekends",
                  "body":
                    [ "$w(\"#myDatePicker\").disabledDaysOfWeek = [0, 6];" ],
                  "extra":
                    {  } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "",
                      "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022; // Not available on holidays",
                      "$w('#myDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "enabledDateRanges",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.DatePicker.DateRange" ] },
        "locations":
          [ { "lineno": 174,
              "filename": "DatePicker.js" },
            { "lineno": 224,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets ranges of dates that a site visitor can select.",
            "description":
              [ "Setting the `enabledDateRanges` property lets site visitors",
                " select dates in the specified ranges, provided that the dates aren't ",
                " disabled by some other property. ",
                "  ",
                "> **Note:** All dates outside the set ranges are disabled.",
                "",
                " Set `enabledDateRanges` to:",
                " + An array of date ranges to enable, each with a start date and an end date.",
                " + An empty array (`[]`), to disable all dates.",
                " + Null, to ignore `enabledDateRanges`. Use this to ignore previously set enabled date ranges.",
                "",
                " Getting the `enabledDateRanges` property returns the current",
                " list of enabled date ranges.",
                "",
                " Ranges are inclusive. This means that January 10th and February 10th are enabled ",
                " when specifying a range from January 10, 2025 to February 10, 2025. ",
                "",
                "",
                " Disabled dates override any dates enabled with the `enabledDateRanges` property.",
                " This includes dates disabled with the Wix Editor and with the following properties: ",
                " + [`disabledDateRanges`](#disabledDateRanges)",
                " + [`disabledDaysOfWeek`](#disabledDaysOfWeek)",
                " + [`minDate`](#minDate)",
                " + [`maxDate`](#maxDate)",
                " This means that if a date matches both enabled and disabled properties, the site visitor ",
                " can't select the date in the date picker." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)",
                "[disabledDateRanges](#disabledDateRanges)",
                "[enabledDateRanges](#enabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are enabled",
                  "body":
                    [ "let enabledDates = $w('#myDatePicker').enabledDateRanges;",
                      "",
                      "let firstEnabledStartDateAsString = enabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are enabled",
                  "body":
                    [ "const monthsOnCall = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').enabledDateRanges = monthsOnCall;" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of enabled dates based on a specific time zone",
                  "body":
                    [ "$w('#myDatePicker').timeZone = 'Pacific/Auckland';",
                      "",
                      "// In 2022, New Zealand switches to daylight savings ",
                      "// time on September 25th",
                      "",
                      "const enabledDates = [",
                      "  {",
                      "    startDate: new Date('06/10/2022 GMT+12'),",
                      "    endDate: new Date('08/15/2022 GMT+12')",
                      "  },",
                      "  {",
                      "    startDate: new Date('08/01/2022 GMT+12'),",
                      "    endDate: new Date('10/01/2022 GMT+13')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = enabledDates;" ],
                  "extra":
                    { "description": "This example demonstrates how to set a timezone when specifying enabled date ranges. The example \n also takes daylight savings into account (GMT+13 instead of GMT+12)." } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "",
                      "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "",
                      "$w('#myDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022; // Not available on holidays",
                      "$w('#myDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 108,
              "filename": "DatePicker.js" },
            { "lineno": 134,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the latest date that a site visitor can select.",
            "description":
              [ "Setting the `maxDate` property prevents site visitors from selecting",
                "dates past the maximum date.",
                "",
                "Set `maxDate` to `undefined` to remove the",
                "current maximum date limitation.",
                "",
                "Getting the `maxDate` property returns the current maximum",
                "date that a site visitor can select.",
                "",
                "If a date is past the maximum date but is also set as an enabled date",
                "with the [`enabledDateRanges`](#enabledDateRanges) property, the date is",
                "disabled and the site visitor can't select the date in the date picker." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get a date picker's maximum date",
                  "body":
                    [ "// maxDate must be set before it can be retrieved. For example,",
                      "// $w(\"#myDatePicker\").maxDate = new Date('01/13/2017');",
                      "",
                      "let pickerMaxDate = $w(\"#myDatePicker\").maxDate;",
                      "",
                      "let maxStr = pickerMaxDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's maximum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").maxDate = new Date('01/13/2017');" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minDate",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 141,
              "filename": "DatePicker.js" },
            { "lineno": 167,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the earliest date that a site visitor can select.",
            "description":
              [ "Setting the `minDate` property prevents site visitors from selecting",
                "dates before the minimum date.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting the `minDate` property returns the current minimum",
                "date that a site visitor can select.",
                "",
                "If a date is before the minimum date but is also set as an enabled date",
                "with the [`enabledDateRanges`](#enabledDateRanges) property, the date is",
                "disabled and the site visitor can't select the date in the date picker." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get a date picker's minimum date",
                  "body":
                    [ "// minDate must be set before it can be retrieved. For example,",
                      "// $w(\"#myDatePicker\").minDate = new Date('01/13/2017');",
                      "",
                      "let pickerMinDate = $w(\"#myDatePicker\").minDate;",
                      "",
                      "let minStr = pickerMinDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's minimum date to today",
                  "body":
                    [ "$w(\"#myDatePicker\").minDate = new Date('01/13/2017');" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "timeZone",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 355,
              "filename": "DatePicker.js" },
            { "lineno": 387,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the date picker's timezone.",
            "description":
              [ "The date picker's timezone is set in [IANA timezone](https://nodatime.org/TimeZones) format. ",
                "",
                " You can set the `timeZone` to avoid discrepancies if the site visitor and your ",
                " site are in different timezones. `timeZone` affects: ",
                "",
                " + How the date picker reads and returns dates in Velo and in collections. ",
                " + What the data picker considers to be today's date, past dates, and future dates.",
                "",
                " Examples: ",
                " ",
                " + December 12th in Argentina might already be December 13th in Spain. If you want to disable ",
                "   this date in the date picker with Velo, explicitly set the timezone so it's clear",
                "   which timezone to use.",
                " + If a hotel disables past dates so they can't be booked, make sure to set the timezone to ",
                "   the hotel's timezone.",
                "",
                "",
                " When working with collections, it's useful to save the dates in your site's timezone so that when",
                " viewing the data from the collection, ",
                " the dates are correct for your timezone." ],
            "links": [],
            "examples":
              [ { "title": "Get the date picker's timezone",
                  "body":
                    [ "let timeZone = $w(\"#myDatePicker\").timeZone  // \"Pacific/Auckland\"" ],
                  "extra":
                    {  } },
                { "title": "Set the date picker's timezone",
                  "body":
                    [ "$w(\"#myDatePicker\").timeZone = 'Pacific/Auckland';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Date",
        "locations":
          [ { "lineno": 73,
              "filename": "DatePicker.js" },
            { "lineno": 101,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the value of the date picker.",
            "description":
              [ "Setting the `value` property sets the date displayed in the date picker element. ",
                "",
                "> **Notes:**",
                " > + Changing a date picker's `value` in code doesn't trigger an `onChange` event.",
                ">",
                ">",
                "> + If a date picker is connected to a dataset, setting the date picker's `value`",
                ">   in code doesn't set the value of the connected field in the dataset.",
                ">   That means if you use the dataset to perform a submit, the value changed",
                ">   in code isn't reflected in the submitted item.",
                ">",
                ">",
                "> + To submit the new value using a dataset, set the field's value using the",
                ">   [`setFieldValue()`](wix-dataset.html#setFieldValue) function before",
                ">   performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get a date picker's date value",
                  "body":
                    [ "let date = $w(\"#myDatePicker\").value;",
                      "",
                      "let valStr = date.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a date picker's date value to be today",
                  "body":
                    [ "$w(\"#myDatePicker\").value = new Date();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.DatePickerValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 393,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onViewChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ViewChangeEventHandler",
              "doc": "Name of the function or\n the function expression that is called when the date picker's view changes." },
            { "name": "operation",
              "type": "$w.ViewChangeOperation",
              "doc": "Name of an async operation that is called when the date picker's view changes. The operation result is passed to the handler in the event's `options.operationResult` object.",
              "optional": true },
            { "name": "timeout",
              "type": "number",
              "doc": "Number of milliseconds to wait for the `operation()` function to return. If the operation doesn't resolve before the timeout, an error is returned. Defaults to 10,000.",
              "optional": true } ],
        "ret":
          { "type": "void",
            "doc": "This function does not return anything." },
        "locations":
          [ { "lineno": 439,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "Adds an event handler that triggers when the date picker's view changes.",
            "description":
              [ "When a site visitor views a new month or year in the date picker, the event handler is triggered. Selecting a new day in the current month doesn't trigger the event handler, as the month in view doesn't change. ",
                "Each time a site visitor enters the date picker, they initiate the view, triggering the event handler. You can pass an optional `operation()` function parameter. If provided, the `operation()` function is called first, and the handler function only triggers after the operation finishes. ",
                "You can pass an optional timeout parameter to specify how long to wait for the operation to return. If the operation doesn't resolve before the timeout, an error is returned. When the `operation()` function returns, the returned object is passed to the event handler in the `options.operationResult` object. ",
                "> **Note:** The `operation()` function is called each time the month or year changes and the onViewChange event is triggered. If the `operation()` function takes time to return, there can be more than one instance of the function running when a site visitor clicks multiple times on the next month arrow. In these cases, only the last triggered operation is returned to the event handler and the handler only runs once.",
                "For example, if the date picker's view is in May, and a site visitor clicks the next month arrow 3 times, the operation function is called for June, July, and August. However, the handler is only called only once with the result from the operation for August." ],
            "links": [],
            "examples":
              [ { "title": "Get the month's start and end date dates when the date picker's view changes",
                  "body":
                    [ "$w('#myDatePicker').onViewChange((event) => {",
                      "    let startDate = event.options.startDate; // \"Tue Mar 01 2022 00:00:00 GMT-5 (Eastern Standard Time)\"",
                      "    let endDate = event.options.endDate; // \"Thu Mar 31 2022 23:59:59 GMT-5 (Eastern Standard Time)\"",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Set the disabledDateRanges property using public Holiday dates",
                  "body":
                    [ "const timeout = 2000;",
                      "",
                      "$w.onReady(function () {",
                      "  $w('#datePicker1').onViewChange(handler, operation, timeout);",
                      "});",
                      "",
                      "async function operation() {",
                      "  // get a list of public holidays from the web ",
                      "  const listOfPublicHolidays = await getInfoFromTheWeb(); ",
                      "  return listOfPublicHolidays;",
                      "}",
                      "",
                      "function handler(event) {",
                      "  const holidays = [];",
                      "  let publicHoliday;",
                      "  // get a list of public holidays from the web ",
                      "  let listOfPublicHolidays = event.options.operationResult;",
                      "  listOfPublicHolidays.forEach(holiday => {",
                      "    publicHoliday = {",
                      "      startDate: holiday.startDate,",
                      "      endDate: holiday.endDate",
                      "    }",
                      "    holidays.push(publicHoliday);",
                      "  })",
                      "  $w('#datePicker1').disabledDateRanges = holidays;",
                      "}",
                      "",
                      "function getInfoFromTheWeb() {",
                      "  // fetch a list of public holidays from an API on the web",
                      "",
                      "  /* sample return object:",
                      "  return [",
                      "    {",
                      "      startDate: new Date('12/31/2022'),",
                      "      endDate: new Date('01/01/2023')",
                      "    },",
                      "    {",
                      "      startDate: new Date('12/25/2022'),",
                      "      endDate: new Date('12/25/2022')",
                      "    }",
                      "  ]",
                      "  */",
                      "}" ],
                  "extra":
                    { "description": "The example is for when the date picker's view changes." } },
                { "title": "Set the enabledDateRanges property using available booking slot dates",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "const myBookingsServiceId = // get my booking service ID",
                      "const timeout = 2000;",
                      "",
                      "$w.onReady(function () {",
                      "  $w('#myDatePicker').onViewChange(handler, operation, timeout);",
                      "});",
                      "",
                      "async function operation({options}) {",
                      "  const {startDate, endDate} = options;",
                      "  const availability = await wixBookings.getServiceAvailability(myServiceId, {startDateTime: startDate, endDateTime: endDate});",
                      "  return availability;",
                      "}",
                      "",
                      "function handler(event) {",
                      "  let availableDates = [];",
                      "  const slots = event.options.operationResult.slots;",
                      "  slots.forEach(slot => {",
                      "    if (slot.bookable === true) {",
                      "      const availableSlot = {",
                      "        startDate: slot.startDateTime,",
                      "        endDate: slot.startDateTime",
                      "      }",
                      "      availableDates.push(availableSlot);",
                      "    }",
                      "  })",
                      "  $w('#datePicker1').enabledDateRanges = availableDates;",
                      "}",
                      "",
                      "",
                      "",
                      "" ],
                  "extra":
                    { "description": "The example is for when the date picker's view changes." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onViewChange" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "DateRange",
        "locations":
          [ { "lineno": 24,
              "filename": "DatePicker.js" } ],
        "docs":
          { "summary": "An object containing the start and end dates of a range of dates.",
            "links":
              [ "[enabledDateRanges](#enabledDateRanges)",
                "[disabledDateRanges](#disabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are enabled",
                  "body":
                    [ "let enabledDates = $w('#myDatePicker').enabledDateRanges;",
                      "",
                      "let firstEnabledStartDateAsString = enabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are enabled",
                  "body":
                    [ "const monthsOnCall = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').enabledDateRanges = monthsOnCall;" ],
                  "extra":
                    {  } },
                { "title": "Get ranges of dates that are disabled",
                  "body":
                    [ "let disabledDates = $w('#myDatePicker').disabledDateRanges;",
                      "",
                      "let firstDisabledStartDateAsString = disabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are disabled",
                  "body":
                    [ "const holidays2022 = [",
                      "  {",
                      "    startDate: new Date('4/15/2022'),",
                      "    endDate: new Date('4/17/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('12/25/2022'),",
                      "    endDate: new Date('01/01/2023')",
                      "  }",
                      "];",
                      "$w('#myDatePicker').disabledDateRanges = holidays2022;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "startDate",
              "type": "Date",
              "doc": "Start date for the range. The `startDate` is inclusive, \n meaning it's included in the range. The start date must be earlier than or the same as the \n end date of the range." },
            { "name": "endDate",
              "type": "Date",
              "doc": "End date for the range. The `endDate` is inclusive, \n meaning it's included in the range. The end date must be later than or the same as the \n start date of the range." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./datepicker/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "article",
        "text": "Formatting Dates",
        "url": "https://support.wix.com/en/article/wix-code-formatting-dates" } ],
  "FAQs":
    [ { "title": "How do I prevent my site visitors from selecting specific dates in a date picker?",
        "markdown": "*   Use [`disabledDates`](https://www.wix.com/code/reference/$w.DatePicker.html#disabledDates) to define specific dates a visitor cannot select.\n*   Use [`disabledDaysOfWeek`](https://www.wix.com/code/reference/$w.DatePicker.html#disabledDaysOfWeek) to prevent visitors from selecting specific days in the week, such as Saturday and Sunday.\n*   Use [`minDate`](https://www.wix.com/code/reference/$w.DatePicker.html#minDate) and [`maxDate`](https://www.wix.com/code/reference/$w.DatePicker.html#maxDate) to prevent visitors from selecting a date outside of a specific range." },
      { "title": "I want to display a date in a date picker. How do I prevent site visitors from changing the displayed date?",
        "markdown": "To prevent visitors from modifying the value of your date picker, define the [`readOnly`](https://www.wix.com/code/reference/$w.DatePicker.html#readOnly) property of your date picker as `true`." },
      { "title": "How do I let site visitors search or filter my site content according to date?",
        "markdown": "Let visitors enter a date via a date picker. Then [query](https://www.wix.com/code/reference/wix-data.html#query) your database collection or [filter](https://www.wix.com/code/reference/wix-data.html#filter) your dataset for items with the selected date. " } ] }