{ "name": "Menu",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Menu.js" },
  "docs":
    { "summary": "[Menus](https://support.wix.com/en/article/wix-editor-adding-a-site-menu) are used for navigating between site pages.",
      "description":
        [ "Menus help site visitors navigate from page to page on a site. For example: ",
          "",
          " ![Sample menu with submenu](images/menu.png \"Menu\")",
          "",
          " With Velo, you can customize menu items by changing their labels, links, ",
          " where the item opens, and if an item displays as selected. This includes using Velo ",
          " to modify site menus in real time during the visitor's stay on the site.",
          "",
          " The following table lists available menu element types and if you can customize them with code.",
          "",
          "",
          " | Menu Type   | Velo support   | Submenu support |",
          " | :-------- | :------: | :------- |",
          " | Menu (new)    | Yes   | Up to 2 additional levels (see note below) |",
          " | Horizontal menu (old)   | Yes   | Up to 2 additional levels (see note below) |",
          " | Vertical menu (old)  | Yes   | Up to 1 additional level |",
          " | Drop-down menu   (Deprecated)          | Yes | Up to 1 additional level |",
          " | Mobile menu | Yes | Up to 1 additional level |",
          "",
          " > **Note:** To have the option for 2 additional submenus available, you must first set ",
          " your horizontal menu as an advanced menu. To set as an advanced menu, ",
          " select the menu in the Velo editor, click the Settings icon, and click on **Set as Advanced**.",
          "",
          "<blockquote class='warning'>",
          "",
          "__Deprecation Notice:__",
          "",
          "The drop-down menu component has been deprecated. It will continue to work, but can no longer be added in the editor.",
          "",
          "</blockquote>",
          "",
          "### Difference between old and new menu types",
          "",
          "We are in the process of replacing Horizontal and Vertical menu types with a new general Menu type, which has horizontal and vertical layout options. ",
          "",
          "The old and new menu types function similarly and are added by the same Horizontal and Vertical menu options in the editor's add panel. While we roll out the new Menu type, some users will get the new type of menu while others will have the old Horizontal and Vertical types.",
          "You can check what type of menu you have by selecting the element in the editor. See the highlighted type in the image below:",
          "",
          "   ![Menu types](images/menu-type.png \"Menu type\")",
          "",
          "There are some minor differences between the menu types:",
          "- The types have different [CSS classes](https://dev.wix.com/docs/velo/api-reference/$w/menu/css-classes). ",
          "- When you add a new item from the manage panel to the [structure mega](https://support.wix.com/en/article/studio-editor-adding-and-customizing-a-mega-menu) of a new Menu, the editor automatically adds a DropdownMenu component with the sub-menu and sub-sub-menu data. This component is not the same as the deprecated dropdownMenu menu type." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.Menu.Accessibility",
        "locations":
          [ { "lineno": 160,
              "filename": "Menu.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myMenu').accessibility.ariaDescribedBy = $w('#menuText');",
                      "$w('#myMenu').accessibility.ariaLabel = 'menu content';",
                      "$w('#myMenu').accessibility.ariaLabelledBy = $w('#menuLabel');",
                      "$w('#myMenu').accessibility.ariaLive = 'polite';",
                      "$w('#myMenu').accessibility.lang = 'en';",
                      "$w('#myMenu').accessibility.role = 'navigation';",
                      "$w('#myMenu').accessibility.screenReader = {",
                      "  prefix : 'hidden text before menu element',",
                      "  suffix : 'hidden text after menu element'",
                      "};" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "let myMenuAccessibility = $w('#myMenu').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "menuItems",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Menu.MenuItem" ] },
        "defaultValue": "An array of menu items defined using the Editor.",
        "locations":
          [ { "lineno": 114,
              "filename": "Menu.js" },
            { "lineno": 153,
              "filename": "Menu.js" } ],
        "docs":
          { "summary": "Sets or gets menu items.",
            "description":
              [ "Setting the `menuItems` property sets the items",
                " for a menu element.",
                "",
                " Getting the `menuItems` property returns a `menuItems` array of menu items that have been set using code. If no",
                " items have been set using code, the array defaults to the items defined using the Editor.",
                "",
                " You can't modify the `menuItems` array in-place. To add, change, or remove",
                " individual menu items:",
                "",
                "   1. Store the value of the `menuItems` property in a variable.",
                "   1. Make changes to the variable's array of items.",
                "   1. Reset the `menuItems` property with the variable's modified array.",
                "",
                " To have the option for 2 additional submenus available for your horizontal menu, it must first be set ",
                " as an advanced menu. To set as an advanced menu, select the menu in the Velo editor, ",
                " click the Settings icon, and click on **Set as Advanced**." ],
            "links": [],
            "examples":
              [ { "title": "Get menu items",
                  "body":
                    [ "let menuItems = $w('#myMenu').menuItems;",
                      "",
                      "/* Sample array of menu items: ",
                      " *",
                      " * [",
                      " *   {",
                      " *     \"link\": \"https://myairlines.com\",",
                      " *     \"target\": \"_self\",",
                      " *     \"label\": \"Home\",",
                      " *     \"selected\": true,",
                      " *     \"menuItems\": []",
                      " *   },",
                      " *   {",
                      " *     \"link\": \"https://myairlines.com/reservations\",",
                      " *     \"target\": \"_self\",",
                      " *     \"label\": \"Book a Flight\",",
                      " *     \"selected\": false,",
                      " *     \"menuItems\": []",
                      " *   },",
                      " *   {",
                      " *     \"link\": \"https://myairlines.com/frequentflier\",",
                      " *     \"target\": \"_self\",",
                      " *     \"label\": \"Mileage Program\",",
                      " *     \"selected\": false,",
                      " *     \"menuItems\": [",
                      " *       {",
                      " *         \"link\": \"https://myairlines.com//frequentflier/join\",",
                      " *         \"target\": \"_self\",",
                      " *         \"label\": \"Join\",",
                      " *         \"selected\": false,",
                      " *         \"menuItems\": []",
                      " *       },",
                      " *       {",
                      " *         \"link\": \"https://myairlines.com/frequentflier/check\",",
                      " *         \"target\": \"_self\",",
                      " *         \"label\": \"Check Miles\",",
                      " *         \"selected\": false,",
                      " *         \"menuItems\": []",
                      " *       }",
                      " *     ]",
                      " *   }",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Set items for a horizontal menu",
                  "body":
                    [ "$w('#myHorizontalMenu').menuItems = [",
                      "  {label: 'Home', link: '/', selected: true, id: 'item-id-1'},",
                      "  {label: 'For Rent', link: '/rentals', id: 'item-id-2'},",
                      "  {label: 'For Sale', link: '/purchases', id: 'item-id-3'},",
                      "  {label: 'Mortgage calculator', link: 'https://www.mortgagecalculator.org/', target: '_blank', id: 'item-id-4'},",
                      "  {label: 'About Us', link: '/about', id: 'item-id-5'}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Set items for a vertical menu with a submenu",
                  "body":
                    [ "$w('#myVerticalMenu').menuItems = [",
                      "  {label: 'Home', link: '/', selected: true},",
                      "  {label: 'For Rent', link: '/rentals', id: 'rentals-id', menuItems: [",
                      "    {label: 'Long Term', link: '/rentals/long', id: 'rentals-id-1'},",
                      "    {label: 'Short Term', link: '/rentals/short', id: 'rentals-id-2'}",
                      "  ]},",
                      "  {label: 'For Sale', link: '/purchases'},",
                      "  {label: 'Mortgage calculator', link: 'https://www.mortgagecalculator.org/', target: '_blank'},",
                      "  {label: 'About Us', link: '/about'}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Set items for a menu that changes dynamically based on a visitor's role",
                  "body":
                    [ "import { currentMember } from 'wix-members-frontend';",
                      "",
                      "$w.onReady(async function  () {",
                      "  $w('#horizontalMenu').menuItems = [",
                      "    {label: 'Home', link: '/', selected: false},",
                      "    {label: 'For Rent', link: '/rentals'},",
                      "    {label: 'For Sale', link: '/purchases'}",
                      "  ]",
                      "  try {",
                      "    const roles = await currentMember.getRoles();",
                      "    const foundRole = roles.some(role => role.title === 'Realtor');",
                      "    if (foundRole) {",
                      "      let items = $w('#horizontalMenu').menuItems;",
                      "      items.push({",
                      "        label: 'Realtors Only',",
                      "        link: '/realtors'",
                      "      });",
                      "      $w('#horizontalMenu').menuItems = items;",
                      "    }",
                      "  } catch (error) {",
                      "    // Handle the error",
                      "    console.error(error);",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example assumes that roles have been defined for the site and checks the visitor's role. If the visitor is a realtor, the visitor\n sees an additional menu item for a hidden \"For Realtors Only\" page." } },
                { "title": "Add a new menu item to an existing menu",
                  "body":
                    [ "let menuItems = $w('#myMenu').menuItems;",
                      "menuItems.push({label: 'My New Label', link: '/mynewlink', id: 'my-new-id'});",
                      "$w('#myMenu').menuItems = menuItems;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the menu items, adds a new item, and then overwrites the old items." } },
                { "title": "Use menu item ID for custom event behaviors",
                  "body":
                    [ "import { openLightbox } from 'wix-window-frontend';",
                      "",
                      "$w.onReady(function () {",
                      "  $w('#myMenu').menuItems = [{",
                      "    label: 'About us',",
                      "    id: 'about-id'",
                      "  }, {",
                      "    label: 'New collection',",
                      "    id: 'new-collection-id'",
                      "  }];",
                      "",
                      "  $w('#myMenu').onItemClick(event => {",
                      "    if (event.item.id === 'new-collection-id') {",
                      "        openLightbox('Coming Soon');",
                      "    }",
                      "  }); ",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example assumes that a lightbox has been defined for the site. The lightbox displays when a visitor clicks the corresponding menu item\n informing the visitor that the page is not yet ready. The code identifies the corresponding menu item by its ID." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onItemClick",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the menu item is clicked." } ],
        "ret":
          { "type": "$w.Menu.MenuItem",
            "doc": "The menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 49,
              "filename": "menuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user clicks a menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the menu item that was clicked",
                  "body":
                    [ "$w('#myMenu').onItemClick( (event) => {",
                      "  let label = event.item.label;  // \"Home\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseClick" } },
      { "name": "onItemDblClick",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the menu item is double clicked." } ],
        "ret":
          { "type": "$w.Menu.MenuItem",
            "doc": "The menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 62,
              "filename": "menuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user double clicks a menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the menu item that was double clicked",
                  "body":
                    [ "$w('#myMenu').onItemDblClick( (event) => {",
                      "  let label = event.item.label;  // \"Book a Flight\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/reservations\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseDblClick" } },
      { "name": "onItemMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the menu item is hovered over." } ],
        "ret":
          { "type": "$w.Menu.MenuItem",
            "doc": "The menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 18,
              "filename": "menuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user hovers over a menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the menu item that the mouse hovered over",
                  "body":
                    [ "$w('#myMenu').onItemMouseIn( (event) => {",
                      "  let label = event.item.label;  // \"Mileage Program\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/frequentflier\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Show/hide text if hovering over a menu item",
                  "body":
                    [ "$w('#myMenu').onItemMouseIn(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').show();   // \"You are about to leave the Wix site\"",
                      "  }",
                      "});",
                      "",
                      "$w('#myMenu').onItemMouseOut(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').hide();",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to show a message if the mouse hovers over a menu \n item that links to an external site." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseIn" } },
      { "name": "onItemMouseOut",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MenuItemMouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the menu item is not hovered over." } ],
        "ret":
          { "type": "$w.Menu.MenuItem",
            "doc": "The menu item on which the event is now registered." },
        "locations":
          [ { "lineno": 34,
              "filename": "menuItemMouseEvents.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a user stops hovering over a menu item.",
            "links": [],
            "examples":
              [ { "title": "Get information about the menu item that the mouse stops hovering over",
                  "body":
                    [ "$w('#myMenu').onItemMouseOut( (event) => {",
                      "  let label = event.item.label;  // \"Mileage Program\"",
                      "  let link = event.item.link;  // \"https://myairlines.com/frequentflier\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Show/hide text if hovering over a menu item",
                  "body":
                    [ "$w('#myMenu').onItemMouseIn(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').show();   // \"You are about to leave the Wix site\"",
                      "  }",
                      "});",
                      "",
                      "$w('#myMenu').onItemMouseOut(event => {",
                      "  if (event.item.link === 'https://www.mortgagecalculator.org/') {",
                      "    $w('#displayMessageText').hide();",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to hide a message if the mouse stops hovering over a menu \n item that links to an external site." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "ItemMouseOut" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 184,
              "filename": "Menu.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "role",
              "type": "string",
              "doc": "Defines the role of the element, helping assistive technologies understand the element's purpose and how it should be interacted with. When set to `undefined` or `null`, the role is removed from the element and isn't read by assistive technologies. Learn more about [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles). \n\nSupported values: `'alert'`, `'application'`, `'button'`, `'checkbox'`, `'complementary'`, `'group'`, `'heading'`, `'link'`, `'list'`, `'listBox'`, `'listItem'`, `'navigation'`, `'none'`, `'option'`, `'radio'`, `'radioGroup'`, `'range'`, `'region'`, `'tab'`, `'tabList'`, `'tabPanel'`, `'status'`, `null`, `undefined`. \n\nDefault: `undefined`",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaLive",
              "type": "string",
              "doc": "Sets or gets how to announce changes to an element for site visitors who rely on screen readers. This property allows you to manage the timing and urgency of notifications regarding updates, status changes, or errors for an element. \n\nUse `ariaLive` only when necessary, as excessive or unnecessary announcements can lead to confusion or overload for screen reader users. \n\nIf you don't set a value, the property defaults to the value set in the accessibility panel in the Editor, or is otherwise `undefined`. \n\nSupported values: \n- `'polite'`: Updates are announced at the next available opportunity without interrupting the current speech of the screen reader. Useful for non-urgent notifications or messages. \n- `'assertive'`: Updates are announced immediately, interrupting any ongoing speech. Intended for urgent and critical alerts.\n- `'off'`: No live announcements are made when the content of the element changes.",
              "optional": true },
            { "name": "lang",
              "type": "string",
              "doc": "Specifies the language of the element's content, enhancing pronunciation accuracy for screen readers and other assistive technologies. \n\nSetting the `lang` property improves multilingual support by ensuring that assistive technologies apply the correct linguistic rules and speech patterns. It also enables search engines to index the element's content accurately, resulting in better visibility and relevance in search results for better SEO optimization. \n\nThe `lang` property's value must be a 2-letter language code in [ISO 639-1 format](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes). For example, `\"en\"` for english.",
              "optional": true },
            { "name": "screenReader",
              "type": "$w.Menu.ScreenReader",
              "doc": "Adds extra text before or after an element for screen readers and other assistive technologies. This property helps provide extra context to elements on a site page. The added text doesn't affect your site visually but is read aloud by screen readers for those who rely on assistive technology. For example, you can add the prefix \"bold text\" to a bolded text element because screen readers don't effectively communicate text styles such as bold, italicize, and strikethrough.",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "new" ] },
      { "name": "MenuItem",
        "locations":
          [ { "lineno": 57,
              "filename": "Menu.js" } ],
        "docs":
          { "summary": "An object that contains the attributes of a menu item.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "label",
              "type": "string",
              "doc": "The label of the menu item. This is text that the site visitor sees in the menu and can click to navigate. \n  \n If not specified, and the page that the link property references is: \n + An external page or an empty string: The menu defaults to the menu items based on site pages only, as defined in the Editor, and an error is logged to the console. \n + A page nested under a folder: The specific menu item label defaults to the name of the corresponding page as defined in the Editor.\n + A regular, non-nested, site page: The `label` for the menu item gets its value from the name of the page that the `link` property references.\n \n Min: 1 character\n\n Max: 40 characters",
              "optional": true },
            { "name": "selected",
              "type": "boolean",
              "doc": "Setting `selected` to `true` for a menu item causes the item to appear highlighted in the menu element. \n You can use this property to indicate which page is currently being displayed. \n \n >**Note:** The value of `selected` isn't validated against which page is actually displayed. For example, you can write code that misleadingly sets `selected` to `true` for multiple menu items. \n  \n When not defined explicitly using the `selected` property, the `selected` value is derived from the currently-active page in the site's _main_ menu \n (as defined when managing the menu in the Editor) and not derived from a currently-active page in a _custom_ menu.\n\n Default: `false`",
              "optional": true },
            { "name": "link",
              "type": "string",
              "doc": "Optional link for the menu item. This is the link the site visitor navigates to when they click on a menu item. \n The different types of links you can use are:\n\n + `/localPageURL`: Another page on your site, such as `/about` or `/rentals/shortterm`.\n + `/`: Your site's home page.\n + `http(s)://<url>`: An external web address, such as `https://www.mortgagecalculator.org/`.\n + `wix:document://<location>`: A document stored in the Media Manager, such as `wix:document://v1/9bec_52fb06ea/filename.xls`.\n + `mailto:<email-address>?subject=<subject>`: An email, such as `mailto:michael@example.com?subject=Coming%20Soon`.\n + `tel:<phone number>`: A phone number, such as `tel:+1-555-555-5555`.\n \n If `link` isn't specified, the corresponding label isn't clickable. \n \n Specifying an empty string is not supported. The menu defaults to the menu items as defined in the Editor and an error is logged to the console.\n\n Min: 1 character\n\n Max: 40 characters",
              "optional": true },
            { "name": "target",
              "type": "string",
              "doc": "Whether the link opens in the same window/tab or in a new window/tab.\n + `_self`. The page opens in the same window/tab.\n + `_blank`. The page opens in a new window/tab.\n \n > **Note:** `target` doesn't work when previewing your site.\n\n\n Default: `_self`",
              "optional": true },
            { "name": "menuItems",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "$w.Menu.MenuItem" ] },
              "doc": "Menus can have additional levels of submenus. Vertical menus can have \n 1 level of submenus. Horizontal menus can have 2 additional levels of submenus.",
              "optional": true },
            { "name": "id",
              "type": "string",
              "doc": "A unique ID that can be used to customize events triggered on a menu item. \n For example, when a visitor clicks a menu item, the ID can be checked in order to trigger the appropriate action for that menu item.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ScreenReader",
        "locations":
          [ { "lineno": 222,
              "filename": "Menu.js" } ],
        "docs":
          { "summary": "Adds hidden text before or after a text element using the `screenReader.prefix` and `screenReader.suffix` properties. This helps screen readers better understand the content of your text element. For example, screen readers don't effectively communicate text styles such as bold and strikethrough. Use `screenReader` to provide context for the styled text.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "prefix",
              "type": "string",
              "doc": "Extra text added before an element. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "suffix",
              "type": "string",
              "doc": "Extra text added after an element.\n\nMax: 1000 characters",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "new" ] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./menu/guides/CSS Classes.md" } ] }