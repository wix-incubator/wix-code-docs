{ "name": "HtmlComponent",
  "memberOf": "$w",
  "mixes":
    [ "$w.IFrame" ],
  "labels": [],
  "location":
    { "lineno": 18,
      "filename": "HtmlComponent.es6" },
  "docs":
    { "summary": "A container for internal or external HTML code.",
      "description":
        [ "Messages can be sent",
          " from your page code to the code in an HTML component and from the HTML",
          " component to your page code using the [`postMessage()`](#postMessage) and",
          " [`onMessage()`](#onMessage) functions. To learn more about what code an HTML",
          " component can hold, see <a href=\"https://support.wix.com/en/article/using-iframes-to-display-visible-content-on-your-site\" target=\"_blank\">here</a>.",
          "",
          " For an overview of working with an HTML Component using code, see <a href=\"https://support.wix.com/en/article/working-with-the-html-element\" target=\"_blank\">Working with the HTML Element</a>." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "scrolling",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 86,
              "filename": "HtmlComponent.es6" },
            { "lineno": 111,
              "filename": "HtmlComponent.es6" } ],
        "docs":
          { "summary": "Sets or gets whether the HTML Component displays scrollbars.",
            "description":
              [ "Setting the `scrolling` property sets what happens when the content in",
                " the HTML Component is larger than the size of the component.",
                "",
                " The value can be set to:",
                "",
                " + `\"auto\"`: Scrollbars are displayed only if needed. (This is the default.)",
                " + `\"yes\"`: Scrollbars are always shown, even if they are not needed.",
                " + `\"no\"`: Scrollbars are never shown, even if they are needed).",
                "",
                " Getting the `scrolling` property returns which `ScrollType` the component",
                " is set to use." ],
            "links": [],
            "examples":
              [ { "title": "Set whether the Html Component displays scrollbars",
                  "body":
                    [ "$w(\"#myHtmlComponent\").scrolling = \"no\";" ],
                  "extra":
                    {  } },
                { "title": "Get whether the Html Component displays scrollbars",
                  "body":
                    [ "let compScrolling = $w(\"#myHtmlComponent\").scrolling; // \"auto\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "src",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 40,
              "filename": "HtmlComponent.es6" },
            { "lineno": 59,
              "filename": "HtmlComponent.es6" } ],
        "docs":
          { "summary": "Sets or gets the URL of the HTML Component's code.",
            "description":
              [ "Setting the `src` property sets the website that is",
                " displayed in the HTML Component. The `src` value must be set to an HTTPS",
                " URL.",
                "",
                " Getting the `src` property returns the URL of the website",
                " that is displayed in the HTML Component." ],
            "links": [],
            "examples":
              [ { "title": "Get the displayed website's URL",
                  "body":
                    [ "let compUrl = $w(\"#myHtmlComponent\").src;",
                      "// \"https://comp.com/page.html\"" ],
                  "extra":
                    {  } },
                { "title": "Set the displayed website",
                  "body":
                    [ "$w(\"#myHtmlComponent\").src = \"https://en.wikipedia.org/wiki/HTTPS\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The `src` property must be an HTTPS URL. To use an HTTP URL, [turn off\n SSL for your site](https://support.wix.com/en/article/turning-ssl-on-or-off-for-your-site)." ] } } ],
  "operations":
    [ { "name": "allowFullScreen",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "$w.HtmlComponent" },
        "locations":
          [ { "lineno": 300,
              "filename": "HtmlComponent.es6" } ],
        "docs":
          { "summary": "Allows the HTML Component to be put into full screen mode.",
            "description":
              [ "By default, users cannot place the HTML Component in full screen mode. Calling",
                " this function allows a user to place the HTML Component in full screen mode." ],
            "links": [],
            "examples":
              [ { "title": "Allow an HTML Component to be placed in full screen mode",
                  "body":
                    [ "$w(\"#myHtmlComponent\").allowFullScreen();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMessage",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.HtmlComponentMessageEventHandler",
              "doc": "The name of the function or\n the function expression to run when the HTML Component sends a message." } ],
        "ret":
          { "type": "$w.HtmlComponent",
            "doc": "The HTML Code element that triggered the event." },
        "locations":
          [ { "lineno": 230,
              "filename": "HtmlComponent.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the HTML Component\n sends a message.",
            "description":
              [ "The `onMessage()` function allows your page code to receive messages",
                " from an HTML Component on your page. When a message is received,",
                " the specified event handler is executed and the message can be retrieved",
                " using `event.data`.",
                "",
                " To send a message from your HTML Component, use the postMessage() function",
                " in the HTML component's code. Generally, you call postMessage()",
                " from within a function:",
                "",
                "     <script type=\"text/javascript\">",
                "       function sendReturnMessage(msg) {",
                "         window.parent.postMessage(msg, \"http://mysite.com\");",
                "       }",
                "     </script>",
                "",
                " When posting a message from within your HTML Component, you should specify your",
                " site's URL as the `targetOrigin`. If you use `\"*\"` instead, your message can",
                " be intercepted by a malicious site. To learn more, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\" target=\"_blank\">Window.postMessage()</a>.",
                "",
                " For more information on sending and receiving messages between your page",
                " and your HTML Component, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code#messaging-1\" target=\"_blank\">Working with the HTML Component in Wix Code</a>." ],
            "links":
              [ "[postMessage( )](#postMessage)" ],
            "examples":
              [ { "title": "Receive a message from an HTML Component",
                  "body":
                    [ "$w(\"#myHtmlComponent\").onMessage( (event) => {",
                      "  let receivedMessage = event.data;",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Send a message to an HTML Component and receive a confirmation",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Paste the following into the HTML Component:  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      "",
                      "<!doctype html>",
                      "<html>",
                      "<head>",
                      "",
                      "<script type=\"text/javascript\">",
                      "function init () {",
                      "  // when a message is received from the page code",
                      "  window.onmessage = (event) => {",
                      "    if (event.data) {",
                      "      console.log(\"HTML Code Element received a message!\");",
                      "      insertMessage(event.data);",
                      "    }",
                      "  }",
                      "}",
                      "",
                      "// display received message",
                      "function insertMessage(msg) {",
                      "  document.getElementById('demo').innerHTML = msg;",
                      "  sendReturnMessage(\"Message from the HTML Component!\");",
                      "}",
                      "",
                      "// send message to the page code",
                      "function sendReturnMessage(msg) {",
                      "  window.parent.postMessage(msg, \"http://mysite.com\");",
                      "}",
                      "</script>",
                      "",
                      "</head>",
                      "",
                      "<body onload=\"init();\" style=\"background-color:lightgray;\">",
                      "<h1>HTML Component Test</h1>",
                      "<p id=\"demo\">Message will go here</p>",
                      "</body>",
                      "</html>",
                      "",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * This is the page code:                        *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * */",
                      "",
                      "$w.onReady(function () {",
                      "  // when a message is received from the HTML Component",
                      "  $w(\"#myHtmlComponent\").onMessage( (event) => {",
                      "    console.log(`Message received by page code: ${event.data}`);",
                      "  } );",
                      "} );",
                      "",
                      "export function messageSendButton_onClick() {",
                      "  // send message to the HTML Component",
                      "  $w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example assumes you have created a page with an HTML Component\n whose ID is `myHtmlComponent` and a button whose onClick event handler\n is set to `messageSendButton_onClick`.\n\n When the user clicks the button, a message is sent to the HTML Code\n element. Code inside the element receives and displays the message. Then\n it sends a message back to the page code. The page code receives and\n logs the message." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "**Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "message" } },
      { "name": "postMessage",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "message",
              "type":
                [ "string",
                  "number",
                  "boolean",
                  "Object",
                  { "name": "Array",
                    "typeParams":
                      [ "*" ] } ],
              "doc": "The message to send to the HTML Component." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 143,
              "filename": "HtmlComponent.es6" } ],
        "docs":
          { "summary": "Sends a message to the HTML Component.",
            "description":
              [ "The `postMessage()` function sends a message from your page code to the",
                " HTML Component.",
                "",
                " To receive the message sent from the `postMessage()` function in your",
                " HTML Component, create an event handler for the `window.onmessage` event",
                " in the component's code. You create the event handler within an HTML",
                " `<script>` tag. You get the received data by getting the data property",
                " of the event handler's event parameter.",
                "",
                " Often, you define the `window.onMessage` event handler in a function",
                " that gets called when the HTML component loads using the `body onload`",
                " or `window.onload`:",
                "",
                "     <script type=\"text/javascript\">",
                "       window.onmessage = (event) => {",
                "         if (event.data) {",
                "           console.log(`HTML Component received a message: ${event.data}`);",
                "           // additional code here",
                "         }",
                "       }",
                "     </script>",
                "",
                "",
                " For more information on sending and receiving messages between your page",
                " and your HTML Component, see <a href=\"https://support.wix.com/en/article/working-with-the-html-component-in-wix-code#messaging-1\" target=\"_blank\">Working with the HTML Component in Wix Code</a>." ],
            "links":
              [ "[onMessage( )](#onMessage)" ],
            "examples":
              [ { "title": "Send a message to an HTML Component",
                  "body":
                    [ "$w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");" ],
                  "extra":
                    {  } },
                { "title": "Send a message to an HTML Component and receive a confirmation",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Paste the following into the HTML Component:  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      "",
                      "<!doctype html>",
                      "<html>",
                      "<head>",
                      "",
                      "<script type=\"text/javascript\">",
                      "function init () {",
                      "  // when a message is received from the page code",
                      "  window.onmessage = (event) => {",
                      "    if (event.data) {",
                      "      console.log(\"HTML Code Element received a message!\");",
                      "      insertMessage(event.data);",
                      "    }",
                      "  }",
                      "}",
                      "",
                      "// display received message",
                      "function insertMessage(msg) {",
                      "  document.getElementById('demo').innerHTML = msg;",
                      "  sendReturnMessage(\"Message from the HTML Component!\");",
                      "}",
                      "",
                      "// send message to the page code",
                      "function sendReturnMessage(msg) {",
                      "  window.parent.postMessage(msg, \"http://mysite.com\");",
                      "}",
                      "</script>",
                      "",
                      "</head>",
                      "",
                      "<body onload=\"init();\" style=\"background-color:lightgray;\">",
                      "<h1>HTML Component Test</h1>",
                      "<p id=\"demo\">Message will go here</p>",
                      "</body>",
                      "</html>",
                      "",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * This is the page code:                        *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * */",
                      "",
                      "$w.onReady(function () {",
                      "  // when a message is received from the HTML Component",
                      "  $w(\"#myHtmlComponent\").onMessage( (event) => {",
                      "    console.log(`Message received by page code: ${event.data}`);",
                      "  } );",
                      "} );",
                      "",
                      "export function messageSendButton_onClick() {",
                      "  // send message to the HTML Component",
                      "  $w(\"#myHtmlComponent\").postMessage(\"Message from page code!\");",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example assumes you have created a page with an HTML Component\n whose ID is `myHtmlComponent` and a button whose onClick event handler\n is set to `messageSendButton_onClick`.\n\n When the user clicks the button, a message is sent to the HTML Code\n element. Code inside the element receives and displays the message. Then\n it sends a message back to the page code. The page code receives and\n logs the message." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "An HTML Component needs to load before you can send it messages using the\n `postMessage()` function.\n\n Usually an HTML Component finishes loading a\n short time after the page it is on finishes loading. So if you call\n `postMessage()` inside the page’s [`onReady()`]($w.html#onReady)\n event handler, the HTML Component might not be ready yet.  To call `postMessage()`\n as soon as possible after a page loads, send a\n message from the HTML Component to the page code as when the HTML\n Component is loaded and then call `postMessage()` upon receipt of that\n message.\n\n Also, an HTML Component can send messages to the page it is on before the HTML Component\n itself has loaded completely. For example, this can happen if the HTML Component’s body,\n or one of its downloaded images, is large. To make sure the HTML component is loaded,\n send messages only after listening for an onLoad event in the HTML component." ] } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "example",
        "text": "Chart",
        "url": "https://www.wix.com/code/home/example/Chart" },
      { "icon": "example",
        "text": "Adding Multiple Markers in Google Maps",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-multiple-markers-google-maps" },
      { "icon": "example",
        "text": "Full Screen with HTML Component",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-fullscreen-with-htmlcomponent" } ],
  "FAQs":
    [ { "title": "How do I send data between my page and an HTML Component?",
        "markdown": "You can send and receive messages between your page and an HTML Component using the [`postMessage()`](https://www.wix.com/code/reference/$w.HtmlComponent.html#postMessage) and [`onMessage()`](https://www.wix.com/code/reference/$w.HtmlComponent.html#onMessage) functions. " },
      { "title": "How do I know when my HTML component has loaded and is ready for use?",
        "markdown": "An HTML Component needs to load before you can send it messages using the [`postMessage()`](https://www.wix.com/code/reference/$w.HtmlComponent.html#postMessage) function. \n\nUsually an HTML Component finishes loading a short time after the page it is on finishes loading. So if you call [`postMessage()`](https://www.wix.com/code/reference/$w.HtmlComponent.html#postMessage) inside the page's [`onReady()`](https://www.wix.com/code/reference/$w.html#onReady) event handler, the HTML Component might not be ready yet.\n\nATo call [`postMessage()`](https://www.wix.com/code/reference/$w.HtmlComponent.html#postMessage) as soon as possible after a page loads, send a message from the HTML Component to the page code as the HTML Component is loaded and then call [`postMessage()`](https://www.wix.com/code/reference/$w.HtmlComponent.html#postMessage) upon receipt of that message.\n\nAlso, an HTML Component can send messages to the page it is on before the HTML Component itself has loaded completely. For example, this can happen if the HTML Component’s body, or one of its downloaded images, is large. To make sure the HTML component is loaded, send messages only after listening for an onLoad event in the HTML component.\n\n" },
      { "title": "How do I control how my HTML Component is displayed?",
        "markdown": "*   Use the [`scrolling`](https://www.wix.com/code/reference/$w.HtmlComponent.html#scrolling) property to set whether your HTML Component displays scrollbars.\n*   Use the [`allowFullScreen()`](https://www.wix.com/code/reference/$w.HtmlComponent.html#allowFullScreen) function to let site visitors open the HTML component in full screen mode." } ] }