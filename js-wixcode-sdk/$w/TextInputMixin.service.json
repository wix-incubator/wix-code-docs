{ "name": "TextInputMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 6,
      "filename": "TextInputMixin.es6" },
  "docs":
    { "summary": "Provides functionality for elements that accept text as input.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "maxLength",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 66,
              "filename": "TextInputMixin.es6" },
            { "lineno": 101,
              "filename": "TextInputMixin.es6" } ],
        "docs":
          { "summary": "Sets or gets the maximum number of characters that can be entered.",
            "description":
              [ "Setting the `maxLength` property of an input element to a",
                " positive number restricts user input, by manual entry or pasting, to",
                " text that does not exceed the `maxLength`. However, it does not limit",
                " your ability to change the element's value to one that exceeds",
                " `maxLength` programmatically.",
                "",
                " To remove the maximum length restriction that has been set on the input",
                " element, set `maxLength` to `0`.",
                "",
                " Getting the `maxLength` property returns the element's",
                " current `maxLength` setting.",
                "",
                " The number of characters is calculated by <a href=\"https://en.wikipedia.org/wiki/Code_point\"",
                " target=\"_blank\">Unicode code points</a>." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's maximum length",
                  "body":
                    [ "let maxLen = $w(\"#myElement\").maxLength; // 40" ],
                  "extra":
                    {  } },
                { "title": "Set an element's maximum length",
                  "body":
                    [ "$w(\"#myElement\").maxLength = 40;" ],
                  "extra":
                    {  } },
                { "title": "Remove an element's maximum length restriction",
                  "body":
                    [ "$w(\"#myElement\").maxLength = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 12,
              "filename": "TextInputMixin.es6" },
            { "lineno": 38,
              "filename": "TextInputMixin.es6" } ],
        "docs":
          { "summary": "Sets or gets the element's placeholder text.",
            "description":
              [ "Placeholder text is typically used to provide a",
                " hint to the user of what to enter into a input element that accepts",
                " text. When the user begins to enter text, the placeholder text disappears." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's placeholder text",
                  "body":
                    [ "let placeholdText = $w(\"#myElement\").placeholder; // \"Enter name\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's placeholder text",
                  "body":
                    [ "$w(\"#myElement\").placeholder = \"Enter your name\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onInput",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the input element receives\n input." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 168,
              "filename": "TextInputMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the input element receives\ninput.",
            "description":
              [ "A text input receives an `input` event when a user changes its input value.",
                "",
                " You can retrieve the input element's new value by getting the `value` from the",
                " `target` property of the [`Event`]($w.Event.html) passed to the handler you set",
                " using this function." ],
            "links": [],
            "examples":
              [ { "title": "Get the new input value",
                  "body":
                    [ "$w(\"#myElement\").onInput( (event) => {",
                      "  let newValue = event.target.value;  // \"newValue\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "**Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "onInput" } },
      { "name": "onKeyPress",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when a key is pressed." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 127,
              "filename": "TextInputMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the cursor is inside the\n input element and a key is pressed.",
            "description":
              [ "A text input receives a `keyPress` event when a user presses a key on",
                " the keyboard while the cursor is inside the input element. A `keyPress`",
                " event is fired for printable and non-printable characters." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w(\"myElement\").onKeyPress( (event) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.target.value;       // \"SE\"",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Some browsers do not issue a key press event for certain keys,\n such as arrow keys or the shift key.\n\n When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),\n you get the value of the target element before the key was pressed.  \n\n **Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "keyPress" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }