{ "name": "ValidatableMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "ValidatableMixin.js" },
  "docs":
    { "summary": "Provides functionality for elements that can be validated.",
      "description":
        [ "Certain input elements contain properties that are used in basic form",
          "validation, such as [`required`]($w.RequiredMixin.html#required) and",
          "[`maxLength`]($w.TextInputMixin.html#maxLength). More complex validation",
          "logic is achieved using the properties and functions below.",
          "",
          "Basic validation of elements against the constraints set in the Editor or",
          "programmatically is always performed, regardless of any custom validation.",
          "",
          "However, sometimes more complex validation is needed, including validations",
          "that depend on more than one element. This is typically achieved by adding",
          "custom validation logic in an event handler that you set using the input",
          "element's [`onCustomValidation()`](#onCustomValidation) function. Within that",
          "handler, you call the `reject()` function to indicate that the element is",
          "invalid. The element's validity is checked when the value of the element",
          "changes either by user interaction or programmatically.",
          "",
          "Note that validations other than **required**, including custom validations,",
          "are not run on input elements when they don't have a value.",
          "",
          "Keep in mind that custom validations with the [`onCustomValidation()`](#onCustomValidation) ",
          "event handler run after the [`onChange()`](#onChange) event handler.",
          "",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to a page in the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          " let isValid = $w(\"ValidatableMixin\").valid;",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that ",
          " \"mixes in\" `ValidatableMixin`. ",
          "",
          " ```javascript",
          " let isValid = $w(\"#myElement\").valid;",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "valid",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 52,
              "filename": "ValidatableMixin.js" } ],
        "docs":
          { "summary": "Indicates if an input element's value is valid.",
            "description":
              [ "The `valid` property indicates if an element's value satisfies",
                " all conditions to pass a validation check. This includes basic validity",
                " conditions, such as whether the element has a value if it is [required]($w.RequiredMixin.html#required),",
                " and those specified in its [`onCustomValidation()`](#onCustomValidation)",
                " event handler, if you defined one.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value." ],
            "links":
              [ "[onCustomValidation( )](#onCustomValidation)" ],
            "examples":
              [ { "title": "Get whether the element is valid",
                  "body":
                    [ "let isValid = $w(\"#myElement\").valid; // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validationMessage",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 73,
              "filename": "ValidatableMixin.js" } ],
        "docs":
          { "summary": "Gets a message indicating why the element is invalid, or an\n empty string if the message is valid.",
            "description":
              [ "Set the value of the `validationMessage` property using the",
                " `reject()` function of the [`onCustomValidation()`](#onCustomValidation)",
                " event handler." ],
            "links":
              [ "[validity](#validity)" ],
            "examples":
              [ { "title": "Get the validation message",
                  "body":
                    [ "let msg = $w(\"#myElement\").validationMessage; // \"value missing\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validity",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.ValidatableMixin.ValidityState",
        "locations":
          [ { "lineno": 130,
              "filename": "ValidatableMixin.js" } ],
        "docs":
          { "summary": "Gets a ValidityState object that contains\n detailed information about the validity states of the element.",
            "links":
              [ "[validationMessage](#validationMessage)" ],
            "examples":
              [ { "title": "Log ValidityState info",
                  "body":
                    [ "let validityObj = $w(\"#myElement\").validity;",
                      "",
                      "let customError = validityObj.customError;          // true",
                      "let valid = validityObj.valid;                      // false",
                      "let valueMissing = validityObj.valueMissing;        // false",
                      "let typeMismatch = validityObj.typeMismatch;        // false",
                      "let patternMismatch = validityObj.patternMismatch;  // false",
                      "let tooLong = validityObj.tooLong;                  // false",
                      "let tooShort = validityObj.tooShort;                // false",
                      "let rangeUnderflow = validityObj.rangeUnderflow;    // false",
                      "let rangeOverflow = validityObj.rangeOverflow;      // false",
                      "let fileNotUploaded = validityObj.fileNotUploaded;  // false",
                      "let stepMismatch = validityObj.stepMismatch;        // false",
                      "let badInput = validityObj.badInput;                // false",
                      "let invalidTime = validityObj.invalidTime;          // false",
                      "let invalidDate = validityObj.invalidDate;          // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.Validator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 152,
              "filename": "ValidatableMixin.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "resetValidityIndication",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 201,
              "filename": "ValidatableMixin.js" } ],
        "docs":
          { "summary": "Resets the element's visual validity indication.",
            "description":
              [ "Many elements have a visual cue that indicates whether they are valid or",
                " not. For example, a text input that usually has a black outline might have",
                " a red outline when its value is not valid.",
                "",
                " The `resetValidityIndication()` function resets the validity indication",
                " of an element to show the element as valid. The actual validity state of",
                " the element is not affected. If the element was invalid, it remains",
                " invalid. The validity indication shows the element as valid until",
                " the element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically. At that point,",
                " the element's validity indication shows the element as invalid if",
                " its value is not valid." ],
            "links": [],
            "examples":
              [ { "title": "Reset an element's validity indicator",
                  "body":
                    [ "$w(\"#myElement\").resetValidityIndication();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateValidityIndication",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 189,
              "filename": "ValidatableMixin.js" } ],
        "docs":
          { "summary": "Updates the element's visual validity indication based on its current validity state.",
            "description":
              [ "Many elements have a visual cue that indicates whether they are valid or",
                " not. For example, a text input that usually has a black outline might have",
                " a red outline when its value is not valid." ],
            "links": [],
            "examples":
              [ { "title": "Update an element's validity indicator",
                  "body":
                    [ "$w(\"#myElement\").updateValidityIndication();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "ValidityState",
        "locations":
          [ { "lineno": 90,
              "filename": "ValidatableMixin.js" } ],
        "docs":
          { "summary": "Contains detailed information about the validity states of an element.",
            "links":
              [ "[validity](#validity)" ],
            "examples":
              [ { "title": "Get ValidityState info",
                  "body":
                    [ "let validityObj = $w(\"#myElement\").validity;",
                      "",
                      "let customError = validityObj.customError;          // true",
                      "let valid = validityObj.valid;                      // false",
                      "let valueMissing = validityObj.valueMissing;        // false",
                      "let typeMismatch = validityObj.typeMismatch;        // false",
                      "let patternMismatch = validityObj.patternMismatch;  // false",
                      "let tooLong = validityObj.tooLong;                  // false",
                      "let tooShort = validityObj.tooShort;                // false",
                      "let rangeUnderflow = validityObj.rangeUnderflow;    // false",
                      "let rangeOverflow = validityObj.rangeOverflow;      // false",
                      "let fileNotUploaded = validityObj.fileNotUploaded;  // false",
                      "let stepMismatch = validityObj.stepMismatch;        // false",
                      "let badInput = validityObj.badInput;                // false",
                      "let invalidTime = validityObj.invalidTime;          // false",
                      "let invalidDate = validityObj.invalidDate;          // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "customError",
              "type": "boolean",
              "doc": "`true` if the element's custom\n validity message has been set to a non-empty string." },
            { "name": "valid",
              "type": "boolean",
              "doc": "`true` if the element meets all\n constraint validations." },
            { "name": "valueMissing",
              "type": "boolean",
              "doc": "`true` if the element's\n [`required`]($w.RequiredMixin.html#required) property is `true`, but\n it does not contain a value." },
            { "name": "typeMismatch",
              "type": "boolean",
              "doc": "`true` if the text input element's value\n does not match its type when the type is email or url." },
            { "name": "patternMismatch",
              "type": "boolean",
              "doc": "`true` if the element's\n value does not match its pattern validation." },
            { "name": "tooLong",
              "type": "boolean",
              "doc": "`true` if the length of the\n element's value exceeds its [`maxLength`]($w.TextInputMixin.html#maxLength)\n property." },
            { "name": "tooShort",
              "type": "boolean",
              "doc": "`true` if the length of the\n element's value is smaller than its `minlength` property." },
            { "name": "rangeUnderflow",
              "type": "boolean",
              "doc": "`true` if the element's\n value is less than its [`min`]($w.TextInput.html#min) property." },
            { "name": "rangeOverflow",
              "type": "boolean",
              "doc": "`true` if the element's\n value is more than its [`max`]($w.TextInput.html#max) property." },
            { "name": "fileNotUploaded",
              "type": "boolean",
              "doc": "`true` if the element is\n an upload button that is required and a file has been selected but not\n uploaded." },
            { "name": "stepMismatch",
              "type": "boolean",
              "doc": "`true` if a text input \n element's numeric value is defined as a whole number but a decimal \n number is entered." },
            { "name": "badInput",
              "type": "boolean",
              "doc": "`true` if the element's value\n cannot be converted to a value." },
            { "name": "invalidTime",
              "type": "boolean",
              "doc": "`true` if the element's time value\n is not a valid time." },
            { "name": "invalidDate",
              "type": "boolean",
              "doc": "`true` if the element's date value\n is not a valid date." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }