{ "name": "CollapsedMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "CollapsedMixin.js" },
  "docs":
    { "summary": "Provides functionality for elements that can be collapsed.",
      "description":
        [ "To learn about the behavior of a collapsed element,",
          " see the [`collapsed`](#collapsed) property.",
          "",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velu-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to a page in the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          " $w(\"#CollapsedMixin\").collapse();",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that can be collapsed and  ",
          " \"mixes in\" `CollapsedMixin`. ",
          "",
          "  ```javascript",
          " $w(\"#myElement\").collapse();",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "collapsed",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 58,
              "filename": "CollapsedMixin.js" } ],
        "docs":
          { "summary": "Indicates if the element is collapsed or expanded.",
            "description":
              [ "If `collapsed` is `true`, the element is not displayed on the page under",
                " any circumstances. A collapsed element, unlike a",
                " [`hidden`]($w.HiddenMixin.html#hidden) element, does not take up any",
                " space on the page. When collapsed, elements positioned within 70 pixels",
                " below the collapsed element and each other move up to take the",
                " collapsed element's place where possible. The elements that move up",
                " maintain their positions relative to one another.",
                "",
                " If `collapsed` is `false`, the element _may_ be displayed on the page.",
                " Elements that moved up to take the collapsed element's place on the",
                " page are moved back down.",
                "",
                " However, an expanded element (an element whose `collapsed` property is",
                " `false`) is still not displayed if:",
                "",
                " + It is [hidden]($w.HiddenMixin.html#hidden).",
                " + Its [parent element]($w.Node.html#parent) is hidden or collapsed.",
                " + It is a slide in a [Slideshow]($w.Slideshow.html) which is",
                "   currently not being displayed.",
                " + In Editor X, it has been marked as \"Don't Display\" for the current breakpoint.",
                "",
                "",
                " Even if the element is not displayed due to the conditions",
                " mentioned above, if its `collapsed` property is `false`, it's",
                " displayed when the conditions no longer apply.",
                "",
                " To set the `collapsed` property on an element, use the element's",
                " [`collapse()`](#collapse) and [`expand()`](#expand) functions.",
                "",
                " If you select **Collapsed on load** in the element's Properties panel",
                " in the Editor, the `collapsed` property is set to `true` when the page loads." ],
            "links":
              [ "[collapse( )](#collapse)",
                "[expand( )](#expand)",
                "[hide( )]($w.HiddenMixin.html#hide)",
                "[show( )]($w.HiddenMixin.html#show)",
                "[hidden]($w.HiddenMixin.html#hidden)" ],
            "examples":
              [ { "title": "Get an element's collapsed status",
                  "body":
                    [ "let isCollapsed = $w(\"#myElement\").collapsed; // false" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's collapsed state",
                  "body":
                    [ "if( $w(\"#myElement\").collapsed ) {",
                      "  $w(\"#myElement\").expand();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").collapse();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "collapse",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `collapsed` property has been set to `true`." },
        "locations":
          [ { "lineno": 32,
              "filename": "CollapsedMixin.js" } ],
        "docs":
          { "summary": "Collapses the element and sets its `collapsed` property to `true`.",
            "description":
              [ "The `collapse()` function returns a Promise that is resolved when the",
                " element's [`collapsed`](#collapsed) property has been set to `true`.",
                "",
                " To learn about the behavior of a collapsed element,",
                " see the [`collapsed`](#collapsed) property.",
                "",
                " You can also collapse an element",
                " when the page loads by using the Properties and Events panel in the Editor." ],
            "links":
              [ "[expand( )](#expand)",
                "[collapsed](#collapsed)",
                "[hide( )]($w.HiddenMixin.html#hide)" ],
            "examples":
              [ { "title": "Collapse an element",
                  "body":
                    [ "$w(\"#myElement\").collapse();" ],
                  "extra":
                    {  } },
                { "title": "Collapse an element and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").collapse()",
                      "  .then( () => {",
                      "    console.log(\"Done with collapse\");",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's collapsed state",
                  "body":
                    [ "if( $w(\"#myElement\").collapsed ) {",
                      "  $w(\"#myElement\").expand();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").collapse();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "expand",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `collapsed` property has been set to `false`." },
        "locations":
          [ { "lineno": 110,
              "filename": "CollapsedMixin.js" } ],
        "docs":
          { "summary": "Expands the element and sets its `collapsed` property to `false`.",
            "description":
              [ "The `expand()` function returns a Promise that is resolved when the",
                " element's [`collapsed`](#collapsed) property has been set to `false`.",
                "",
                " To learn about the behavior of an expanded element,",
                " see the [`collapsed`](#collapsed) property.",
                "",
                "> **Notes:** ",
                "> + In Editor X, an element will not become visible by using `expand()` if it has been marked as \"Don't Display\" for the current breakpoint. Calling `expand()` will however, change the `collapsed` property of the element to `false`.",
                "> ",
                ">",
                "> + It is recommended not to mix `expand()` and `collapse()` with \"Don't Display\" in Editor X." ],
            "links":
              [ "[expand( )](#expand)",
                "[collapsed](#collapsed)",
                "[show( )]($w.HiddenMixin.html#show)" ],
            "examples":
              [ { "title": "Expand an element",
                  "body":
                    [ "$w(\"#myElement\").expand();" ],
                  "extra":
                    {  } },
                { "title": "Expand an element and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").expand()",
                      "  .then( () => {",
                      "    console.log(\"Done with expand\");",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's collapsed state",
                  "body":
                    [ "if( $w(\"#myElement\").collapsed ) {",
                      "  $w(\"#myElement\").expand();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").collapse();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }