{ "name": "Text",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.EffectsMixin",
      "$w.FocusMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "Text.js" },
  "docs":
    { "summary": "[Text](https://support.wix.com/en/article/wix-editor-adding-and-editing-text) provides functionality for text elements.",
      "description":
        [ "Text type elements contain text which can be formatted using a subset of",
          " standard HTML tags and CSS styles, as detailed below.",
          "",
          " Format the text using the [`html`](#html) property.",
          "",
          "> **Note**: To add an input element for entering large amounts of text, see [`TextBox`]($w/text-box). Input elements are available when Dev Mode is enabled.",
          "",
          " ### Formatting Text",
          "",
          " #### Supported HTML Subset",
          "",
          " The supported HTML tags are:",
          "",
          " + `<p>`",
          " + `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>`, and `<h6>`",
          " + `<a>`",
          " + `<span>`",
          " + `<ul>`, `<ol>`, and `<li>`",
          " + `<br>`",
          "",
          "",
          " #### Text Theme Translation",
          "",
          " Each text theme in the Editor corresponds to a specific set of HTML and CSS attributes:",
          "",
          " + **Site Title** — `<h1>`",
          " + **Page Title** — `<h2>`",
          " + **Huge Heading** — `<h3>`",
          " + **Large Heading** — `<h4>`",
          " + **Basic Heading** — `<h5>`",
          " + **Small Heading** — `<h6>`",
          " + **Paragraph 1** — `<p class=\"p1\">`",
          " + **Paragraph 2** — `<p>` or `<p class=\"p2\">`",
          " + **Paragraph 3** — `<p class=\"p3\">`",
          "",
          "",
          " #### Inline Styling",
          "",
          " Text elements support inline styling via the supported HTML tags listed above. The element can contain the following attributes:",
          "",
          " + `style`: For example, ",
          "     + `$w(\"#text1\").html = '<h1 style=\"color: blue; text-decoration: underline\">Site Title Text</h1>';`",
          "     + `$w(\"#text1\").html = '<span style=\"color: red; font-size: 10.5em\"> Text </span>'`",
          "     + `$w(\"#text1\").html = '<p style=\"color: green; font-size: 16px\"> Text </p>'`",
          "",
          " + `dir` (text direction): For example, `<span dir=\"rtl\"></span>`",
          "",
          "",
          " The `style` attribute supports the following properties:",
          "",
          " + `font-face`",
          " + `font-size`",
          " + `font-weight`",
          " + `font-style`",
          " + `text-decoration`",
          " + `color`",
          " + `background-color`",
          " + `text-align`",
          " + `margin-left`",
          " + `text-shadow`",
          " + `line-height`",
          " + `letter-spacing`",
          "",
          "",
          " #### Bulleted and Numbered Lists",
          "",
          " Text elements can contain bulleted and numbered lists using standard HTML tags:",
          "",
          " + Numbered lists — using `<ol>` and `<li>`",
          " + Bulleted lists — using `<ul>` and `<li>`",
          "",
          "",
          " #### Links",
          "",
          " You can create links using the standard HTML `<a>` anchor element. Anchor elements support the `href` and `target`",
          " attributes. For example:",
          "",
          " `<a href=\"http://wix.com\" target=\"_blank\">Stunning</a>`",
          "",
          " The `href` attribute can contain all link types in the Wix `link` format." ],
      "links":
        [ "[Customizing and Saving Text Themes](https://www.wix.com/support/html5/article/customizing-and-saving-text-themes)" ],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Text.Accessibility",
        "locations":
          [ { "lineno": 173,
              "filename": "Text.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) of the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. Set the accessibility properties to design your elements to be more inclusive and usable to users with visual, auditory, motor, and or cognitive disabilities. The accessibility object only affects how assistive technologies read and present site content to users. It doesn't affect the appearance, functionality, or SEO of your site. ",
                "",
                ">**Note:** Incorrect use of ARIA can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myText').accessibility.ariaDescribedBy = $w('#descriptionText');",
                      "$w('#myText').accessibility.ariaHidden = false;",
                      "$w('#myText').accessibility.ariaLabel = 'title';",
                      "$w('#myText').accessibility.ariaLabelledBy = $w('#labelText');",
                      "$w('#myText').accessibility.role = 'heading';",
                      "$w('#myText').accessibility.screenReader = {",
                      "  prefix : 'hidden text before text element',",
                      "  suffix : 'hidden text after text element'",
                      "};" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myTextAccessibility = $w('#myText').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "html",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 101,
              "filename": "Text.js" },
            { "lineno": 135,
              "filename": "Text.js" } ],
        "docs":
          { "summary": "Sets or gets the contents of a text element using standard HTML.",
            "description":
              [ "Setting the `html` property sets the text and styling of",
                " the text element. You can use a subset of HTML tags and CSS attributes",
                " as described [above](#formatting-text). Any text that the element",
                " already contained is replaced.",
                "",
                " Getting the `html` property returns the element's text, including",
                " HTML tags.",
                "",
                " The `html` property maps the Editor's built-in text themes and custom",
                " formatting to HTML and CSS [as described here](#introduction).",
                "",
                " To set or get the plain, unstyled contents of a text element, use the",
                " [`text`](#text) property instead." ],
            "links":
              [ "[Formatting Text](#formatting-text)",
                "[text](#text)" ],
            "examples":
              [ { "title": "Get a text element's HTML content",
                  "body":
                    [ "let value = $w(\"#textElement\").html // \"<b>Bold Text</b>\"" ],
                  "extra":
                    {  } },
                { "title": "Set a text element's HTML content",
                  "body":
                    [ "$w(\"#textElement\").html = \"<b>Bold Text</b>\";" ],
                  "extra":
                    {  } },
                { "title": "Set a text element's HTML content using inline styling",
                  "body":
                    [ "$w('#textElement').html = '<h1 style=\"color:blue;text-decoration:underline\">Site Title Text</h1>';",
                      "",
                      "$w(\"#textElement2\").html = '<span style=\"color: red; font-size: 10.5em\">Red text</span>';",
                      "",
                      "$w(\"#textElement3\").html = '<p style=\"color: green; font-size: 16px\">Green text</p>';" ],
                  "extra":
                    { "description": "This example uses multiple properties of the style attribute to set the text element's HTML content." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 237,
              "filename": "Text.js" },
            { "lineno": 252,
              "filename": "Text.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of an element on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard focus order but can still become focusable using the [`focus()`](#focus) function.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "text",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "An empty string",
        "locations":
          [ { "lineno": 142,
              "filename": "Text.js" },
            { "lineno": 171,
              "filename": "Text.js" } ],
        "docs":
          { "summary": "Sets or gets the plain-text contents of a text element.",
            "description":
              [ "Setting the `text` property sets the plain-text contents of",
                " the text element. Any text that the element already contained is",
                " replaced. The new text is formatted using the formatting that was used",
                " on of the first character of the previous `text` value.",
                "",
                " Getting the `text` property returns the plain-text content",
                " of the element, without any HTML tags.",
                "",
                " To set or get the HTML contents of a text element, use the",
                " [`html`](#html) property instead." ],
            "links":
              [ "[html](#html)" ],
            "examples":
              [ { "title": "Get a text element's plain-text content",
                  "body":
                    [ "let value = $w(\"#textElement\").text // \"Text Value\"" ],
                  "extra":
                    {  } },
                { "title": "Set a text element's plain-text content",
                  "body":
                    [ "$w(\"#textElement\").text = \"Text Value\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 202,
              "filename": "Text.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "role",
              "type": "string",
              "doc": "Defines the role of the element, helping assistive technologies understand the element's purpose and how it should be interacted with. When set to `undefined` or `null`, the role is removed from the element and isn't read by assistive technologies. Learn more about [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles). \n\nSupported values: `'alert'`, `'application'`, `'button'`, `'checkbox'`, `'complementary'`, `'group'`, `'heading'`, `'link'`, `'list'`, `'listBox'`, `'listItem'`, `'navigation'`, `'none'`, `'option'`, `'radio'`, `'radioGroup'`, `'range'`, `'region'`, `'tab'`, `'tabList'`, `'tabPanel'`, `'status'`, `null`, `undefined`. \n\nDefault: `undefined`",
              "optional": true },
            { "name": "ariaHidden",
              "type": "boolean",
              "doc": "Indicates whether the element is visible to or hidden from users that rely on assistive technologies. Use `ariaHidden` to hide decorative, redundant, or off-screen content from screen readers. When `true`, the element is hidden from assistive technologies but remains visible in the DOM. When `false`, the element is exposed to assistive technologies. If `ariaHidden` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "screenReader",
              "type": "$w.Text.ScreenReader",
              "doc": "Adds extra text before or after a text element for screen readers and other assistive technologies. This property helps provide extra context to text elements on a site page. The added text does not affect your site visually but is read aloud by screen readers for those who rely on assistive technology. For example, you can add the prefix \"bold text\" to a bold text element because screen readers don't effectively communicate text styles such as bold, italicize, and strikethrough.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ScreenReader",
        "locations":
          [ { "lineno": 97,
              "filename": "ColumnStrip.js" },
            { "lineno": 225,
              "filename": "Text.js" } ],
        "docs":
          { "summary": "Adds hidden text before or after a text element using the `screenReader.prefix` and `screenReader.suffix` properties. This helps screen readers better understand the content of your text element. For example, screen readers don't effectively communicate text styles such as strikethrough. Use `screenReader` to provide context for the styled text.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "prefix",
              "type": "string",
              "doc": "Extra text added before a text element. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "suffix",
              "type": "string",
              "doc": "Extra text added after a text element.\n\nMax: 1000 characters",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./text/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Create a Weather Widget",
        "url": "https://www.wix.com/velo/example/create-a-weather-widget" },
      { "icon": "example",
        "text": "Collapse Elements",
        "url": "https://www.wix.com/velo/example/collapse-elements" },
      { "icon": "article",
        "text": "Formatting Dates",
        "url": "https://support.wix.com/en/article/velo-formatting-dates" },
      { "icon": "article",
        "text": "Importing and Exporting Collection Data with Code",
        "url": "https://support.wix.com/en/article/velo-tutorial-importing-and-exporting-collection-data-with-code" } ],
  "FAQs":
    [ { "title": "What's the difference between the 'text' property and the 'html' property?",
        "markdown": "Setting the [`text`](https://www.wix.com/velo/reference/$w.Text.html#text) property sets the contents of the text element and uses the format of the text it is replacing.\n\nSetting the [`html`](https://www.wix.com/velo/reference/$w.Text.html#html) property sets the contents and style of the text element using a subset of HTML tags and CSS attributes." },
      { "title": "How do I insert links into the text?",
        "markdown": "The Text component does not have a `link` property. \n\nYou can add links to text using one of these methods: \n\n*   Add a link using the [`html`](https://www.wix.com/velo/reference/$w.Text.html#html) property. \\\nExample: `$w(\"#text1\").html = '<a href=\"http://wix.com\" target=\"_blank\">Stunning websites</a>';`\n*   Add an [`onClick()`](https://www.wix.com/velo/reference/$w.Text.html#onClick) event handler to the text element and use [`wix-location.to()`](https://www.wix.com/velo/reference/wix-location.html#to) to navigate to a link." },
      { "title": "How can I make my text use a heading tag (H1, H2..)?",
        "markdown": "You can add heading tags to your Text element's text using the [`html`](https://www.wix.com/velo/reference/$w.Text.html#html) property. The heading styles will match you site's theme.\n\n**Example:** `$w(\"#text1\").html = \"<h1>Heading One</h1><h2>Heading Two</h2>\";`" },
      { "title": "How do I show preview text with a \"Show More\" link?",
        "markdown": "See this tutorial: [Creating a Show-More Link](https://support.wix.com/en/article/wix-velo-tutorial-creating-a-show-more-link)." } ] }