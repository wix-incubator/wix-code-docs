{ "name": "ColumnStrip",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.Background",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin",
      "$w.FocusMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "ColumnStrip.js" },
  "docs":
    { "summary": "A [column strip](https://support.wix.com/en/article/wix-editor-attaching-elements-to-strips-and-columns) is a strip of column elements.",
      "description":
        [ "A [column strip](https://support.wix.com/en/article/wix-editor-attaching-elements-to-strips-and-columns) is a strip of column elements." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.ColumnStrip.Accessibility",
        "locations":
          [ { "lineno": 49,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) of the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. Set the accessibility properties to design your elements to be more inclusive and usable to users with visual, auditory, motor, and or cognitive disabilities. The accessibility object only affects how assistive technologies read and present site content to users. It doesn't affect the appearance, functionality, or SEO of your site. ",
                "",
                ">**Note:** Incorrect use of ARIA can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myColumnStrip').accessibility.ariaCurrent = false;",
                      "$w('#myColumnStrip').accessibility.ariaDescribedBy = $w('#paragraphText');",
                      "$w('#myColumnStrip').accessibility.ariaHidden = false;",
                      "$w('#myColumnStrip').accessibility.ariaLabel = 'footer content';",
                      "$w('#myColumnStrip').accessibility.ariaLabelledBy = $w('#columnStripTitle');",
                      "$w('#myColumnStrip').accessibility.role = 'region';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myColumnStripAccessibility = $w('#myColumnStrip').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "background",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Document.BackgroundOptions",
        "locations":
          [ { "lineno": 37,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the column strip's background, such as its image or video source.",
            "links": [],
            "examples":
              [ { "title": "Get the background information",
                  "body":
                    [ "let backgroundOpts = $w(\"#myElement\").background;",
                      "",
                      "let bgSrc = backgroundOpts.src;",
                      "// \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the Media Manager",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\";" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the web",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"http://placehold.it/250x250\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "columns",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Column" ] },
        "locations":
          [ { "lineno": 19,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Gets a list of all the columns contained in the column strip.",
            "description":
              [ "Note that the column indices in a column strip are zero-based, even though",
                " they are numbered starting from 1 in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Get a column strip's columns",
                  "body":
                    [ "let myColumns = $w(\"#myColumnStrip\").columns;" ],
                  "extra":
                    {  } },
                { "title": "Get the columns, number of columns, and ID of the first column from a column strip",
                  "body":
                    [ "let myColumns = $w(\"#myColumnStrip\").columns;",
                      "",
                      "let numColumns = myColumns.length;    // 4",
                      "let firstColumnId = myColumns[0].id;  // \"column1\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 109,
              "filename": "ColumnStrip.js" },
            { "lineno": 124,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of an element on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard focus order but can still become focusable using the [`focus()`](#focus) function.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 75,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "role",
              "type": "string",
              "doc": "Defines the role of the element, helping assistive technologies understand the element's purpose and how it should be interacted with. When set to `undefined` or `null`, the role is removed from the element and isn't read by assistive technologies. Learn more about [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles). \n\nSupported values: `'alert'`, `'application'`, `'button'`, `'checkbox'`, `'complementary'`, `'group'`, `'heading'`, `'link'`, `'list'`, `'listBox'`, `'listItem'`, `'navigation'`, `'none'`, `'option'`, `'radio'`, `'radioGroup'`, `'range'`, `'region'`, `'tab'`, `'tabList'`, `'tabPanel'`, `'status'`, `null`, `undefined`. \n\nDefault: `undefined`",
              "optional": true },
            { "name": "ariaHidden",
              "type": "boolean",
              "doc": "Indicates whether the element is visible to or hidden from users that rely on assistive technologies. Use `ariaHidden` to hide decorative, redundant, or off-screen content from screen readers. When `true`, the element is hidden from assistive technologies but remains visible in the DOM. When `false`, the element is exposed to assistive technologies. If `ariaHidden` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./columnstrip/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Color Hover",
        "url": "https://www.wix.com/code/home/example/Color-Hover" },
      { "icon": "example",
        "text": "Frozen Header",
        "url": "https://www.wix.com/code/home/example/Frozen-Header" } ] }