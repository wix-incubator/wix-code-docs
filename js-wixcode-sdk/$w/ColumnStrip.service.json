{ "name": "ColumnStrip",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.Background",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin",
      "$w.FocusMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "ColumnStrip.js" },
  "docs":
    { "summary": "A [column strip](https://support.wix.com/en/article/wix-editor-attaching-elements-to-strips-and-columns) is a strip of column elements.",
      "description":
        [ "A [column strip](https://support.wix.com/en/article/wix-editor-attaching-elements-to-strips-and-columns) is a strip of column elements." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.ColumnStrip.Accessibility",
        "locations":
          [ { "lineno": 53,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myColumnStrip').accessibility.ariaAtomic = true;",
                      "$w('#myColumnStrip').accessibility.ariaBusy = false;",
                      "$w('#myColumnStrip').accessibility.ariaDescribedBy = $w('#stripDescription');",
                      "$w('#myColumnStrip').accessibility.ariaHidden = false;",
                      "$w('#myColumnStrip').accessibility.ariaLabel = 'Column strip container';",
                      "$w('#myColumnStrip').accessibility.ariaLabelledBy = $w('#stripTitle');",
                      "$w('#myColumnStrip').accessibility.ariaLive = 'polite';",
                      "$w('#myColumnStrip').accessibility.ariaRelevant = 'additions';",
                      "$w('#myColumnStrip').accessibility.role = 'region';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myColumnStripAccessibility = $w('#myColumnStrip').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "background",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Document.BackgroundOptions",
        "locations":
          [ { "lineno": 37,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the column strip's background, such as its image or video source.",
            "links": [],
            "examples":
              [ { "title": "Get the background information",
                  "body":
                    [ "let backgroundOpts = $w(\"#myElement\").background;",
                      "",
                      "let bgSrc = backgroundOpts.src;",
                      "// \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the Media Manager",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\";" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the web",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"http://placehold.it/250x250\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "columns",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Column" ] },
        "locations":
          [ { "lineno": 19,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Gets a list of all the columns contained in the column strip.",
            "description":
              [ "Note that the column indices in a column strip are zero-based, even though",
                " they are numbered starting from 1 in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Get a column strip's columns",
                  "body":
                    [ "let myColumns = $w(\"#myColumnStrip\").columns;" ],
                  "extra":
                    {  } },
                { "title": "Get the columns, number of columns, and ID of the first column from a column strip",
                  "body":
                    [ "let myColumns = $w(\"#myColumnStrip\").columns;",
                      "",
                      "let numColumns = myColumns.length;    // 4",
                      "let firstColumnId = myColumns[0].id;  // \"column1\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 156,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example,",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "Custom classes are those that you create on a site, not the predefined global classes",
                "that are provided for each element.",
                "",
                "Use the following methods to work with the element's custom CSS classes:",
                "+ [`add()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/add): Adds custom CSS classes to the class list of an element.",
                "+ [`contains()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/contains): Indicates whether the element's class list contains a specified custom CSS class.",
                "+ [`remove()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/remove): Removes custom CSS classes from an element's class list.",
                "+ [`replace()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/replace): Replaces a custom CSS class of an element with a different custom CSS class.",
                "+ [`toggle()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/toggle): Toggles an element's custom CSS class.",
                "+ [`values()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/values): Retrieves an array of strings listing an element's custom CSS classes.",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://dev.wix.com/docs/velo/velo-only-apis/$w/styling-elements-with-css)",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics)." ],
            "links":
              [ "$w.CustomClassList" ],
            "examples":
              [ { "title": "Add a single class to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Add multiple classes to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Indicate whether an element contains a specified class",
                  "body":
                    [ "$w(\"#myElement\").customClassList.contains(\"className1\"); //true" ],
                  "extra":
                    {  } },
                { "title": "Remove a single class from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Remove multiple classes from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Replace a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.replace(\"className1, className2\");" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.toggle(\"className1\")  // true" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "if( $w(\"#myElement\").customClassList.contains(\"className1\") ) {",
                      "  $w(\"#myElement\").customClassList.replace(\"className1, className2\");",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").customClassList.replace(\"className2, className1\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Get the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.value; // \"className1 className2\"" ],
                  "extra":
                    {  } },
                { "title": "Gets a list of the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.values(); // [\"className1\", \"className2\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 134,
              "filename": "ColumnStrip.js" },
            { "lineno": 150,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of an element on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard focus order but can still become focusable using the [`focus()`](#focus) function.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } },
                { "title": "Get the tab index of an element",
                  "body":
                    [ "let myElement = $w(\"#myElement\").tabIndex; //0" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 77,
              "filename": "ColumnStrip.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "role",
              "type": "string",
              "doc": "Defines the role of the element, helping assistive technologies understand the element's purpose and how it should be interacted with. When set to `undefined` or `null`, the role is removed from the element and isn't read by assistive technologies. Learn more about [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles). \n\nSupported values: `'alert'`, `'application'`, `'button'`, `'checkbox'`, `'complementary'`, `'group'`, `'heading'`, `'link'`, `'list'`, `'listBox'`, `'listItem'`, `'navigation'`, `'none'`, `'option'`, `'radio'`, `'radioGroup'`, `'range'`, `'region'`, `'tab'`, `'tabList'`, `'tabPanel'`, `'status'`, `null`, `undefined`. \n\nDefault: `undefined`",
              "optional": true },
            { "name": "ariaHidden",
              "type": "boolean",
              "doc": "Indicates whether the element is visible to or hidden from site visitors who rely on assistive technologies. Use `ariaHidden` to hide decorative, redundant, or off-screen content from screen readers. When `true`, the element is hidden from assistive technologies but remains visible in the DOM. When `false`, the element is exposed to assistive technologies. If `ariaHidden` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies at all.",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(\"#myElement\").accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(\"#myElement\").accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaAtomic",
              "type": "boolean",
              "doc": "Specifies how assistive technologies communicate updates made to an element's content. When set to `false`, assistive technologies announce only the updated content according to the value of `ariaRelevant`. When set to `true`, assistive technologies announce all content in the element, regardless of the `ariaRelevant` property. For example, if a container's content changes and `ariaAtomic` is `true`, assistive technologies announce all contents of the container, providing visitors with complete context for the update. This property only works when the element or one of its ancestors has `ariaLive` enabled.\n\nDefault: `false`",
              "optional": true },
            { "name": "ariaBusy",
              "type": "boolean",
              "doc": "Indicates to assistive technologies whether an element is currently updating or in a loading state, helping to convey the status of dynamic content to visitors. When set to `true`, this property informs assistive technologies that visitors shouldn't interact with the element until the update completes. After the update completes, set `ariaBusy` to `false` to allow assistive technologies to announce that the new content is now available. \n\nDefault: `false`",
              "optional": true },
            { "name": "ariaLive",
              "type": "string",
              "doc": "Sets or gets how to announce changes to an element for site visitors who rely on screen readers. This property allows you to manage the timing and urgency of notifications regarding updates, status changes, or errors for an element. \n\nUse `ariaLive` only when necessary, as excessive or unnecessary announcements can lead to confusion or overload for screen reader users. \nIf you don't set a value, the property defaults to the value set in the accessibility panel in the editor, or is otherwise `'off'`. \n\nSupported values: \n- `'polite'`: Updates are announced at the next available opportunity without interrupting the current speech of the screen reader. Useful for non-urgent notifications or messages. \n- `'assertive'`: Updates are announced immediately, interrupting any ongoing speech. Intended for urgent and critical alerts.\n- `'off'`: No live announcements are made when the content of the element changes.",
              "optional": true },
            { "name": "ariaRelevant",
              "type": "string",
              "doc": "Specifies which types of dynamic content updates are communicated to visitors by assistive technologies. This property helps minimize unnecessary announcements by ensuring that only relevant changes are reported. It's only effective when set on an element, or its parent, that also has `ariaLive` enabled.\n\nSupported values: \n- `'additions'`: Assistive technologies announce only newly added content. \n- `'removals'`: Assistive technologies announce only removed content. \n- `'text'`: Assistive technologies announce only changes to existing text content. \n- `'all'`: Assistive technologies announce all types of updates, including additions, removals, and text changes. \n\nDefault: `'additions'`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./columnstrip/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Color Hover",
        "url": "https://www.wix.com/code/home/example/Color-Hover" },
      { "icon": "example",
        "text": "Frozen Header",
        "url": "https://www.wix.com/code/home/example/Frozen-Header" } ] }