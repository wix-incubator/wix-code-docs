{ "name": "DisabledMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "DisabledMixin.js" },
  "docs":
    { "summary": "Provides functionality for elements that can be disabled.",
      "description":
        [ "This mixin provides functions for disabling and enabling elements. When an element is enabled, ",
          " its `enabled` property is set to `true`.  When an element is disabled, ",
          " its `enabled` property is set to `false`.",
          "",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to a page in the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          " $w(\"#DisabledMixin\").disable();",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that can be disabled and  ",
          " \"mixes in\" `DisabledMixin`. ",
          "",
          "  ```javascript",
          " $w(\"#myElement\").disable();",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "enabled",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 77,
              "filename": "DisabledMixin.js" } ],
        "docs":
          { "summary": "Indicates if the element is enabled or disabled.",
            "description":
              [ "If `enabled` is `true`, users can interact with the element.",
                "",
                " If `enabled` is `false`, users cannot interact with the element.",
                "",
                " When an element is disabled:",
                "",
                " + Its color is faded or grayed out.",
                " + Animations that the element normally exhibits when being interacting",
                "   with do not occur.",
                " + Actions that the element has been configured to perform, such as",
                "   opening a link, do not occur.",
                " + Event handlers that have been bound to the element, such as with",
                "   [`onMouseIn`]($w.Element.onMouseIn), do not run.",
                " + If the element is an input element, such as a dropdown or text box,",
                "   users cannot interact with it.",
                "",
                "",
                " To set the `enabled` property of an element, use the element's",
                " [`enable()`](#enable) or [`disable()`](#disable) functions.",
                "",
                " The `enabled` property can also be set in the Editor using the Properties and Events panel." ],
            "links":
              [ "[disable( )](#disable)",
                "[enable( )](#enable)" ],
            "examples":
              [ { "title": "Get an element's enabled status",
                  "body":
                    [ "let isEnabled = $w(\"#myElement\").enabled; // true" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's enabled state",
                  "body":
                    [ "if( $w(\"#myElement\").enabled ) {",
                      "  $w(\"#myElement\").disable();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").enable();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "disable",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `enabled` property has been set to `false`." },
        "locations":
          [ { "lineno": 33,
              "filename": "DisabledMixin.js" } ],
        "docs":
          { "summary": "Disables the element and sets its `enabled` property to `false`.",
            "description":
              [ "The `disable()` function returns a Promise that is resolved when the",
                " element's [`enabled`](#enabled) property has been set to `false`.",
                "",
                " To learn about the behavior of a disabled element,",
                " see the [`enabled`](#enabled) property." ],
            "links":
              [ "[enable( )](#enable)",
                "[enabled](#enabled)" ],
            "examples":
              [ { "title": "Disable an element",
                  "body":
                    [ "$w(\"#myElement\").disable();" ],
                  "extra":
                    {  } },
                { "title": "Disable an element and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").disable()",
                      "  .then( () => {",
                      "    console.log(\"Element now disabled\");",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's enabled state",
                  "body":
                    [ "if( $w(\"#myElement\").enabled ) {",
                      "  $w(\"#myElement\").disable();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").enable();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "enable",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the element's `enabled` property has been set to `true`." },
        "locations":
          [ { "lineno": 55,
              "filename": "DisabledMixin.js" } ],
        "docs":
          { "summary": "Enables the element and sets its `enabled` property to `true`.",
            "description":
              [ "The `enable()` function returns a Promise that is resolved when the",
                " element's [`enabled`](#enabled) property has been set to `true`.",
                "",
                " To learn about the behavior of an enabled element,",
                " see the [`enabled`](#enabled) property." ],
            "links":
              [ "[disable( )](#disable)",
                "[enabled](#enabled)" ],
            "examples":
              [ { "title": "Enable an element",
                  "body":
                    [ "$w(\"#myElement\").enable();" ],
                  "extra":
                    {  } },
                { "title": "Enable an element and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").enable()",
                      "  .then( () => {",
                      "    console.log(\"Element now enabled\");",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Toggle an element's enabled state",
                  "body":
                    [ "if( $w(\"#myElement\").enabled ) {",
                      "  $w(\"#myElement\").disable();",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").enable();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }