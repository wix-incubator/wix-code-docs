{ "name": "Table",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin" ],
  "labels": [],
  "location":
    { "lineno": 123,
      "filename": "Table.es6" },
  "docs":
    { "summary": "A table for displaying data.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "columns",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Table.Column" ] },
        "locations":
          [ { "lineno": 390,
              "filename": "Table.es6" },
            { "lineno": 426,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Sets or gets the defining properties of the columns in a table.",
            "description":
              [ "Table [columns](#Column) do not store any data. They contain the",
                " properties, such as the `label` and `type`, that define a table column.",
                "",
                " Setting the `columns` property sets the [columns](#Column)",
                " in the table.",
                "",
                " Getting the `columns` property returns the current",
                " list of [columns](#Column) in the table.",
                "",
                " You cannot modify the data array in-place. To add, change, or remove",
                " individual columns:",
                "",
                "   1. Store the value of the `columns` property in a variable.",
                "   1. Make changes to the columns array.",
                "   1. Reset the `columns` property with the modified array." ],
            "links": [],
            "examples":
              [ { "title": "Get the list of columns and the first column's information",
                  "body":
                    [ "let cols = $w(\"#myTable\").columns;",
                      "",
                      "let firstColID = cols[0].id;              // \"col0\"",
                      "let firstColDataPath = cols[0].dataPath;  // \"first_col\"",
                      "let firstColLabel = cols[0].label;        // \"First Column\"",
                      "let firstColWidth = cols[0].width;        // 100",
                      "let firstColVisible = cols[0].visible;      // true",
                      "let firstColType = cols[0].type;          // \"string\"",
                      "let firstColPath = cols[0].linkPath;     // \"link-field-or-property\"" ],
                  "extra":
                    {  } },
                { "title": "Set the list of columns for a table",
                  "body":
                    [ "$w(\"#myTable\").columns = [",
                      "  {",
                      "    \"id\": \"col1\",",
                      "    \"dataPath\": \"field1\",",
                      "    \"label\": \"Field 1\",",
                      "    \"width\": 100,",
                      "    \"visible\": true,",
                      "    \"type\": \"string\",",
                      "    \"linkPath\": \"link-field-or-property\"",
                      "  },",
                      "  {",
                      "    \"id\": \"col2\",",
                      "    \"dataPath\": \"field2\",",
                      "    \"label\": \"Field 2\",",
                      "    \"width\": 100,",
                      "    \"visible\": true,",
                      "    \"type\": \"image\",",
                      "    \"linkPath\": \"link-field-or-property\"",
                      "  },",
                      "  {",
                      "    \"id\": \"col3\",",
                      "    \"dataPath\": \"field3\",",
                      "    \"label\": \"Field 3\",",
                      "    \"width\": 100,",
                      "    \"visible\": true,",
                      "    \"type\": \"number\",",
                      "    \"linkPath\": \"link-field-or-property\"",
                      "  }",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add a column to a table",
                  "body":
                    [ "let cols = $w(\"#myTable\").columns;",
                      "cols.push( {",
                      "  \"id\": \"newCol\",",
                      "  \"dataPath\": \"new_col\",",
                      "  \"label\": \"New Column\",",
                      "  \"width\": 100,",
                      "  \"visible\": true,",
                      "  \"type\": \"string\"",
                      "} );",
                      "$w(\"#myTable\").columns = cols;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the columns of a table, adds a new column, and\n then overwrites the old options." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "dataFetcher",
        "labels": [],
        "get": true,
        "set": true,
        "type": "Function",
        "locations":
          [ { "lineno": 483,
              "filename": "Table.es6" },
            { "lineno": 518,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Sets the function that is called when a new page of table data is to be displayed.",
            "description":
              [ "The `dataFetcher` property is typically used when you are populating",
                " your table with data from an external (non-Wix) data source. You set it",
                " to a function that fetches the data to display.",
                "",
                " The function that runs to fetch a new page of data must conform to the",
                " following structure:",
                "",
                "   ```javascript",
                "   function rowRetrievalFunction(startRow, endRow) {",
                "     return new Promise( (resolve, reject) => {",
                "       // Data retrieval code here",
                "       if( retrievalSuccess ) {",
                "         resolve( {",
                "           pageRows: fetchedRows,",
                "           totalRowsCount: numRows",
                "         } );",
                "       }",
                "       else {",
                "         reject();",
                "       }",
                "     } );",
                "   }",
                "   ```",
                "",
                " Meaning, your function must:",
                "",
                "   + Take in two parameters:",
                "       + `startRow` the index of the first row to get",
                "       + `endRow` the index after the last row to get",
                "   + Return a Promise which:",
                "       + Either resolves to an object with the following properties:",
                "           + `pageRows` is an array of column:value row data",
                "           + `totalRowsCount` is the number of total rows in all pages",
                "       + Or rejects",
                "",
                "",
                " Another way of populating your table with data programmatically is to",
                " use the [`rows`](#rows) property." ],
            "links":
              [ "[rows](#rows)" ],
            "examples":
              [ { "title": "Set the function that fetches more data",
                  "body":
                    [ "$w(\"#myTable\").dataFetcher = getRows;",
                      "",
                      "// ...",
                      "",
                      "function getRows(startRow, endRow) {",
                      "  return new Promise( (resolve, reject) => {",
                      "    // data retrieval code here",
                      "    if( retrievalSuccess ) {",
                      "      // resolve to DataRequested object",
                      "      resolve( {",
                      "        pageRows: fetchedRows,",
                      "        totalRowsCount: numRows",
                      "      } );",
                      "    }",
                      "    else {",
                      "      reject();",
                      "    }",
                      "  } );",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Fetch data from a static array",
                  "body":
                    [ "const myTableData = [",
                      "  {\"name\": \"A\", \"num\": 45},",
                      "  {\"name\": \"B\", \"num\": 34},",
                      "  {\"name\": \"C\", \"num\": 19},",
                      "  {\"name\": \"D\", \"num\": 59},",
                      "  {\"name\": \"E\", \"num\": 24},",
                      "  {\"name\": \"F\", \"num\": 96}",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "\t$w(\"#myTable\").dataFetcher = getRows;",
                      "});",
                      "",
                      "function getRows(startRow, endRow) {",
                      "  return new Promise( (resolve, reject) => {",
                      "    // Fetch the objects from startRow to endRow from `myTableData`:",
                      "    const fetchedDataRows = myTableData.slice(startRow, endRow);",
                      "    // resolve to DataRequested object",
                      "    resolve( {",
                      "      pageRows: fetchedDataRows,",
                      "      totalRowsCount: myTableData.length",
                      "    } );",
                      "  } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example stores row data in a static array and uses `dataFetcher`\n to set the `getRows` function as the function to run when the table\n needs new data. The example assumes you have a table with ID `myTable`\n that contains two fields, `name` (type Text) and `num` (type Number)." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "pagination",
        "labels": [],
        "get": true,
        "set": true,
        "type": "$w.Table.PaginationOptions",
        "locations":
          [ { "lineno": 305,
              "filename": "Table.es6" },
            { "lineno": 329,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Sets or gets the table's pagination options.",
            "description":
              [ "Setting the `pagination` property sets the table's",
                " [pagination options](#PaginationOptions) and changes the way the table",
                " is paginated.",
                "",
                " Getting the `pagination` property returns the table's",
                " current [pagination options](#PaginationOptions)." ],
            "links": [],
            "examples":
              [ { "title": "Get the table's pagination options",
                  "body":
                    [ "let tablePagination = $w(\"#myTable\").pagination;",
                      "",
                      "let paginationType = tablePagination.type;        // \"pagination\"",
                      "let paginationRows = tablePagination.rowsPerPage; // 5" ],
                  "extra":
                    {  } },
                { "title": "Set the table's pagination options",
                  "body":
                    [ "$w(\"#myTable\").pagination = {\"type\": \"pagination\", \"rowsPerPage\": 4};" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "rows",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Object" ] },
        "locations":
          [ { "lineno": 579,
              "filename": "Table.es6" },
            { "lineno": 619,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Sets or gets the table's row data.",
            "description":
              [ "Setting the `rows` property sets the data of the table's rows. A table's",
                " data is stored as an array of objects where each object represents a row",
                " in the table.",
                "",
                " The objects are composed of `\"key\":\"value\"` pairs where:",
                "",
                " + `key` is:",
                "   + A table column **Field Name** if the columns were set in the Editor",
                "     using the **Manage Table** panel.",
                "   + A [table column](#Column) `dataPath` if the columns were set in code",
                "     using the [`columns`](#columns) property.",
                " + `value` is the value to be placed in that table column for the current row.",
                "",
                "",
                " For example, a simple array of table data may look like this:",
                "",
                " ```javascript",
                " [",
                "   {",
                "     \"firstName\": \"John\",",
                "     \"lastName\": \"Doe\",",
                "     \"email\": \"john.doe@somedomain.com\",",
                "     \"image\": \"http://someImageUrl/john.jpg\"",
                "   },",
                "   {",
                "     \"firstName\": \"Jane\",",
                "     \"lastName\": \"Doe\",",
                "     \"email\": \"jane.doe@somedomain.com\",",
                "     \"image\": \"http://someImageUrl/jane.jpg\"",
                "   }",
                " ]",
                " ```",
                "",
                " If the `rows` array contains objects with values whose keys are not",
                " table columns, those values do not appear in the table. For example,",
                " assuming the `rows` array shown above, if the table does not have an",
                " **email** column, the email values do not appear in the table.",
                "",
                " Set `rows` to an empty array (`[]`) to remove the current rows.",
                "",
                " Getting the `rows` property returns the current list of",
                " the table's row data. If the table is connected to a dataset, `rows`",
                " does not include the fields from the dataset items that are not",
                " connected to table columns.",
                "",
                " To update an individual table row, use the [`updateRow()`](#updateRow)",
                " function.",
                "",
                " To add or remove individual table rows:",
                "",
                "   1. Store the value of the `rows` property in a variable.",
                "   1. Apply standard JavaScript array operators to the rows array.",
                "   1. Reset the `rows` property with the new array.",
                "",
                "",
                " To set a table's row data based on a [`query`](wix-data.html#query)",
                " you perform using the [`wix-data`](wix-data.html) API:",
                "",
                " 1. Set the columns of the table in the Editor using the **Manage Table**",
                "    panel or in code using the [`columns`](#columns) property to include",
                "    the collection fields you want to display.",
                " 1. Execute a [`query()`](wix-data.html#query) using the [`find()`]",
                "    function.",
                " 1. Set the tables `rows` to the [`items`](wix-data.WixDataQueryResult.html#items)",
                "    of the query's [results](wix-data.WixDataQueryResult.html).",
                "",
                "",
                " Note that you can optionally add to, remove from, or modify the data",
                " returned from the query before using it to set the table's row data." ],
            "links": [],
            "examples":
              [ { "title": "Get a table's row data",
                  "body":
                    [ "let tableRows = $w(\"#myTable\").rows;",
                      "",
                      "let value = tableRows[0][\"field_name\"]; // \"field value\"" ],
                  "extra":
                    {  } },
                { "title": "Set a table's row data",
                  "body":
                    [ "$w(\"#myTable\").rows = tableRows;" ],
                  "extra":
                    {  } },
                { "title": "Add a row to a table",
                  "body":
                    [ "let rows = $w(\"#myTable\").rows;",
                      "rows.push({field_1: \"Value1\", field_2: \"Value2\"});",
                      "$w(\"#myTable\").rows = rows;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the rows of a table, adds a new row, and then\n overwrites the old rows." } },
                { "title": "Set a table's row data from an array",
                  "body":
                    [ "const myTableData = [",
                      "  {\"name\": \"A\", \"num\": 45},",
                      "  {\"name\": \"B\", \"num\": 34},",
                      "  {\"name\": \"C\", \"num\": 19},",
                      "  {\"name\": \"D\", \"num\": 59},",
                      "  {\"name\": \"E\", \"num\": 24},",
                      "  {\"name\": \"F\", \"num\": 96}",
                      "];",
                      "",
                      "// ...",
                      "",
                      "$w(\"#myTable\").rows = myTableData;" ],
                  "extra":
                    {  } },
                { "title": "Set a table's row data from a query",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    $w(\"#myTable\").rows = results.items;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Set a table's row data from a query",
                  "body":
                    [ "/*",
                      "  The collection \"myCollection\" has the following field keys:",
                      "  - docName: name of the document",
                      "  - docDescription: description of the document",
                      "  - doc: the document file",
                      " */",
                      "",
                      "import wixData from 'wix-data';",
                      "",
                      "$w.onReady( function () {",
                      "",
                      "  // set the table columns",
                      "  $w(\"#myTable\").columns = [",
                      "    // the column that shows the document name",
                      "    {",
                      "      \"id\": \"col1\",",
                      "      \"dataPath\": \"docName\", // matches field key from collection",
                      "      \"label\": \"Name\",",
                      "      \"width\": 100,",
                      "      \"visible\": true,",
                      "      \"type\": \"string\",",
                      "    },",
                      "    // the column that shows the document description",
                      "    {",
                      "      \"id\": \"col2\",",
                      "      \"dataPath\": \"docDescription\", // matches field key from collection",
                      "      \"label\": \"Description\",",
                      "      \"width\": 100,",
                      "      \"visible\": true,",
                      "      \"type\": \"string\",",
                      "    },",
                      "    // the column for downloading the document",
                      "    {",
                      "      \"id\": \"col3\",",
                      "      \"dataPath\": \"download\", // does not match field key from collection",
                      "      \"label\": \"Download\",",
                      "      \"width\": 100,",
                      "      \"visible\": true,",
                      "      \"type\": \"richText\",",
                      "      \"linkPath\": \"doc\" // matches field key from collection",
                      "    }",
                      "  ];",
                      "",
                      "  // execute query",
                      "  wixData.query(\"myCollection\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      // get the query result items",
                      "      let tableRows = results.items;",
                      "",
                      "      // add a property and value to serve as link text",
                      "      // property key matches third column dataPath above",
                      "      tableRows.forEach( (row) => {",
                      "        row.download = '<span style=\"color:blue\">Download the doc</span>';",
                      "      } );",
                      "",
                      "      // set the table row data",
                      "      $w(\"#myTable\").rows = tableRows;",
                      "    } );",
                      "",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example populates a table that displays information about documents\n that are stored in a collection and allows users to download each document\n by clicking a link in the table.\n\n When the page is loaded, we first set the columns of the table to match\n the fields of the collection that contains the documents, excluding the\n field that contains the actual document. We also create one additional\n column whose value is not taken from the collection. The values users\n see in that column are set later, but the links are set to take\n their URLs from a collection field.\n\n Then a query is executed to retrieve information from the collection.\n Before setting the query results to be the table's row data, we add a\n property and value to each retrieved item. These are the values that\n are populated in the additional column that was created earlier." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCellSelect",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.TableCellEventHandler",
              "doc": "The name of the function or\n the function expression to run when the cell is selected." } ],
        "ret":
          { "type": "$w.Table",
            "doc": "The table that triggered the event." },
        "locations":
          [ { "lineno": 784,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a table cell is selected.",
            "description":
              [ "A table receives a [`TableCellEvent`]($w.TableCellEvent.html) when the",
                " table is set [set](https://support.wix.com/en/article/table-settings) in",
                " the Editor to select cells when clicked.",
                "![Clicking Selects Cells](images/table_settings_click_cells.png \"Clicking Selects Cells\")" ],
            "links": [],
            "examples":
              [ { "title": "Get the selected table cell information",
                  "body":
                    [ "$w(\"#myTable\").onCellSelect( (event) => {",
                      "  let cellColId = event.cellColumnId;     // \"columnId_b2b3-87d9-49250\"",
                      "  let cellData = event.cellData;          // \"John\"",
                      "  let cellRowIndex = event.cellRowIndex;  // 1",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "**Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "cellSelect" } },
      { "name": "onDataChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the table's data is changed." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 749,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the table's data is changed.",
            "description":
              [ "A table receives a `dataChange` event when the table's data is changed",
                " using the [`rows`](#rows) property or a data request triggers the",
                " [`onDataRequest` handler](#onDataRequest)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "**Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "dataChange" } },
      { "name": "onRowSelect",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.TableRowEventHandler",
              "doc": "The name of the function or\n the function expression to run when the row is selected." } ],
        "ret":
          { "type": "$w.Table",
            "doc": "The table that triggered the event." },
        "locations":
          [ { "lineno": 822,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a table row is selected.",
            "description":
              [ "A table receives a [`TableRowEvent`]($w.TableRowEvent.html) when the",
                " table is set [set](https://support.wix.com/en/article/table-settings) in",
                " the Editor to select rows when clicked.",
                "![Clicking Selects Rows](images/table_settings_click_rows.png \"Clicking Selects Rows\")" ],
            "links": [],
            "examples":
              [ { "title": "Get the selected table cell information",
                  "body":
                    [ "$w(\"#myTable\").onRowSelect( (event) => {",
                      "  let rowData = event.rowData;    // {\"fName\": \"John\", \"lName\": \"Doe\"}",
                      "  let rowIndex = event.rowIndex;  // 2",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Get the full item information from the dataset",
                  "body":
                    [ "$w(\"#myTable\").onRowSelect( (event) => {",
                      "  let rowData = event.rowData;",
                      "} );",
                      "",
                      "// ...",
                      "",
                      "$w(\"#myDataset\").onCurrentIndexChanged( (event) => {",
                      "  let itemData = $w(\"#myDataset\").getCurrentItem();",
                      "} );",
                      "",
                      "/* rowData:",
                      " * {",
                      " *  \"fName\":  \"John\",",
                      " *  \"lName\":  \"Doe\"",
                      " * }",
                      " *",
                      " * itemData:",
                      " * {",
                      " *  \"_id\":          \"e6895a76-3a89-4aa7-8f6a-023061cd8c24\",",
                      " *  \"_owner\":       \"fdkr99hk-gh94-f8i4-cd8e-so4309dsk3f3\",",
                      " *  \"_createdDate\": \"2017-03-16T09:08:41.826Z\",",
                      " *  \"_updatedDate\": \"2017-03-16T09:08:58.476Z\",",
                      " *  \"fName\":        \"John\",",
                      " *  \"lName\":        \"Doe\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "**Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "rowSelect" } },
      { "name": "refresh",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 729,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Fetches the most current data and updates the table.",
            "links": [],
            "examples":
              [ { "title": "Refresh a table",
                  "body":
                    [ "$w(\"#myTable\").refresh();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectRow",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "index",
              "type": "number",
              "doc": "The number of the row to select." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 861,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Selects a table row by index.",
            "description":
              [ "The rows in a table are zero-based and do not include the table header.",
                " ![Table Row Numbering](images/table_row.png \"Table Row Numbering\")" ],
            "links": [],
            "examples":
              [ { "title": "Select the table's first row",
                  "body":
                    [ "$w(\"#myTable\").selectRow(0);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "updateRow",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "index",
              "type": "number",
              "doc": "The number of the row to update." },
            { "name": "rowData",
              "type": "Object",
              "doc": "A row data object of field_name:value pairs where the keys are the table columns." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 897,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "Updates a the row data of a single row at the specified index.",
            "description":
              [ "The rows in a table are zero-based and do not include the table header.",
                " ![Table Row Numbering](images/table_row.png \"Table Row Numbering\")" ],
            "links": [],
            "examples":
              [ { "title": "Update the table's first row",
                  "body":
                    [ "$w(\"#myTable\").updateRow(0, rowData);" ],
                  "extra":
                    {  } },
                { "title": "Update the table's first row",
                  "body":
                    [ "let rowData = {field_1: \"Value1\", field_2: \"Value2\"};",
                      "",
                      "// ...",
                      "",
                      "$w(\"#myTable\").updateRow(0, rowData);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Column",
        "locations":
          [ { "lineno": 348,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "An object used by the `columns` property that\n contains the properties that define a table column. Table columns do not\n store any data.",
            "links":
              [ "[columns](#columns)" ],
            "examples":
              [ { "title": "Get the list of columns and the first column's information",
                  "body":
                    [ "let cols = $w(\"#myTable\").columns;",
                      "",
                      "let firstColID = cols[0].id;              // \"col0\"",
                      "let firstColDataPath = cols[0].dataPath;  // \"first_col\"",
                      "let firstColLabel = cols[0].label;        // \"First Column\"",
                      "let firstColWidth = cols[0].width;        // 100",
                      "let firstColVisible = cols[0].visible;      // true",
                      "let firstColType = cols[0].type;          // \"string\"",
                      "let firstColPath = cols[0].linkPath;     // \"link-field-or-property\"" ],
                  "extra":
                    {  } },
                { "title": "Set the list of columns for a table",
                  "body":
                    [ "$w(\"#myTable\").columns = [",
                      "  {",
                      "    \"id\": \"col1\",",
                      "    \"dataPath\": \"field1\",",
                      "    \"label\": \"Field 1\",",
                      "    \"width\": 100,",
                      "    \"visible\": true,",
                      "    \"type\": \"string\",",
                      "    \"linkPath\": \"link-field-or-property\"",
                      "  },",
                      "  {",
                      "    \"id\": \"col2\",",
                      "    \"dataPath\": \"field2\",",
                      "    \"label\": \"Field 2\",",
                      "    \"width\": 100,",
                      "    \"visible\": true,",
                      "    \"type\": \"image\",",
                      "    \"linkPath\": \"link-field-or-property\"",
                      "  },",
                      "  {",
                      "    \"id\": \"col3\",",
                      "    \"dataPath\": \"field3\",",
                      "    \"label\": \"Field 3\",",
                      "    \"width\": 100,",
                      "    \"visible\": true,",
                      "    \"type\": \"number\",",
                      "    \"linkPath\": \"link-field-or-property\"",
                      "  }",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Set the columns, data, and links for a table",
                  "body":
                    [ "const myTableData = [",
                      "  {name: \"A\", num: 45, wikiLink: \"https://en.wikipedia.org/wiki/A\"},",
                      "  {name: \"B\", num: 34, wikiLink: \"https://en.wikipedia.org/wiki/B\"},",
                      "  {name: \"C\", num: 19, wikiLink: \"https://en.wikipedia.org/wiki/C\"},",
                      "  {name: \"D\", num: 59, wikiLink: \"https://en.wikipedia.org/wiki/D\"},",
                      "  {name: \"E\", num: 24, wikiLink: \"https://en.wikipedia.org/wiki/E\"},",
                      "  {name: \"F\", num: 96, wikiLink: \"https://en.wikipedia.org/wiki/F\"}",
                      "];",
                      "",
                      "$w.onReady( function () {",
                      "  $w(\"#myTable\").columns = [",
                      "    {",
                      "      \"id\": \"col1\",",
                      "      \"dataPath\": \"name\",",
                      "      \"label\": \"Name\",",
                      "      \"type\": \"string\",",
                      "      \"width\": 100,",
                      "      \"visible\": true,",
                      "      \"linkPath\": \"wikiLink\"",
                      "    },",
                      "    {",
                      "      \"id\": \"col2\",",
                      "      \"dataPath\": \"num\",",
                      "      \"label\": \"Number\",",
                      "      \"type\": \"number\",",
                      "      \"width\": 100,",
                      "      \"visible\": true",
                      "    }",
                      "  ];",
                      "",
                      "  $w(\"#myTable\").rows = myTableData;",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example sets the columns of the table using the table's `columns`\n property. The items in the first column are linked using the URLs found\n in the `wikiLink` property of the table data. It then populates a table\n with static data using the table's `rows` property." } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "The column ID." },
            { "name": "dataPath",
              "type": "string",
              "doc": "The location of the data displayed\n in the column.\n\n When the table is populated by a connection to a dataset, the `dataPath`\n value is a field key from the collection that the dataset is connected to.\n\n When the table is populated by using the [`rows`](#rows) or\n [`dataFetcher`](#dataFetcher) properties, the `dataPath` value is one of the\n property keys from the table's row objects." },
            { "name": "label",
              "type": "string",
              "doc": "The column header label." },
            { "name": "type",
              "type": "string",
              "doc": "The type of data in this column: `\"number\"`, `\"string\"`, `\"date\"`, `\"image\"`, `\"bool\"`, or `\"richText\"`." },
            { "name": "width",
              "type": "number",
              "doc": "The pixel width of the column.",
              "optional": true },
            { "name": "visible",
              "type": "boolean",
              "doc": "Whether the column is visible.",
              "optional": true },
            { "name": "linkPath",
              "type": "string",
              "doc": "The location of the links used when\n the items in the column are clicked.\n\n When the table is populated by a connection to a dataset, the `linkPath`\n value is a field key from the collection that the dataset is connected to.\n The collection field can be a [regular field](https://support.wix.com/en/article/about-database-collections#regular-fields)\n that contains URLs or a [calculated field](https://support.wix.com/en/article/about-database-collections#calculated-fields)\n that contains relative links to dynamic pages.\n\n When the table is populated by using the [`rows`](#rows) or\n [`dataFetcher`](#dataFetcher) properties, the `linkPath` value is one of the\n property keys from the table's rows objects.\n The property values associated with that key contain URLs or relative links.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaginationOptions",
        "locations":
          [ { "lineno": 282,
              "filename": "Table.es6" } ],
        "docs":
          { "summary": "An object used by the `pagination` property that\ncontains the pagination options which determine if and how the table\nis paginated.",
            "description":
              [ "The table can paginate in three ways:",
                "",
                " + `\"normal\"`: No pagination. The table is scrollable if there are more",
                "   rows than can be displayed at once. All data is fetched at once.",
                " + `\"pagination\"`: The data is separated into pages which are navigatable",
                "   using paging buttons. New data is fetched when a user clicks on a",
                "   paging button.",
                " + `\"virtual\"`: The data is separated into pages which are navigated by",
                "   scrolling. New data is fetched when user a user scrolls below the",
                "   displayed rows." ],
            "links":
              [ "[pagination](#pagination)" ],
            "examples":
              [ { "title": "Get the table's pagination options",
                  "body":
                    [ "let tablePagination = $w(\"#myTable\").pagination;",
                      "",
                      "let paginationType = tablePagination.type;        // \"pagination\"",
                      "let paginationRows = tablePagination.rowsPerPage; // 5" ],
                  "extra":
                    {  } },
                { "title": "Set the table's pagination options",
                  "body":
                    [ "$w(\"#myTable\").pagination = {\"type\": \"pagination\", \"rowsPerPage\": 4};" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "The type of pagination to use: `\"normal\"`, `\"pagination\"`, or `\"virtual\"`." },
            { "name": "rowsPerPage",
              "type": "number",
              "doc": "The number of rows per page." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "example",
        "text": "Table Index",
        "url": "https://www.wix.com/code/home/example/Table-Index" },
      { "icon": "example",
        "text": "Multiple Reference Query",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-wix-data-multiple-references" },
      { "icon": "article",
        "text": "Adding Collection Data Search Functionality",
        "url": "https://support.wix.com/en/article/wix-code-tutorial-adding-collection-data-search-functionality" } ],
  "FAQs":
    [ { "title": "What pagination options are there for tables?",
        "markdown": "You can select 1 of 3 [pagination types](https://www.wix.com/code/reference/$w.Table.html#PaginationOptions):\n\n*   **Normal:** No pagination. The table is scrollable if there are more rows than can be displayed at once. All data is fetched at once.\n*   **Pagination:** The data is separated into pages which you can navigate using paging buttons. New data is fetched when a user clicks on a paging button.\n*   **Virtual:** The data is separated into pages which are navigated by scrolling. New data is fetched when user a user scrolls below the displayed rows.\n\nYou can use the `rowsPerPage` property of the [`PaginationOptions`](https://www.wix.com/code/reference/$w.Table.html#PaginationOptions) object to define how many rows are displayed per page." },
      { "title": "Is the table header included in the table row index?",
        "markdown": "No. The rows in a table don't include the header. Note that table rows are zero-based. " },
      { "title": "What's the difference between using the 'items' and 'dataFetcher' properties for populating a table's data?",
        "markdown": "The [`rows`](https://www.wix.com/code/reference/$w.Table.html#rows) property takes a list of all the items to display, whereas the [`dataFetcher`](https://www.wix.com/code/reference/$w.Table.html#dataFetcher) property takes a function that fetches a new page of data whenever one is needed. Usually, you use the [`rows`](https://www.wix.com/code/reference/$w.Table.html#rows) property when getting data from a Wix source and the [`dataFetcher`](https://www.wix.com/code/reference/$w.Table.html#dataFetcher) property when getting items from an external data source." } ] }