{ "name": "ViewChangeEvent",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "ApppointmentFieldEvent.js" },
  "docs":
    { "summary": "The ViewChangeEvent is triggered when the month or year changes on a date picker or appointment field element.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "context",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "$w.Event.EventContext",
        "locations":
          [ { "lineno": 50,
              "filename": "ApppointmentFieldEvent.js" } ],
        "docs":
          { "summary": "Gets the context in which an event was triggered.",
            "description":
              [ "An event's `context` contains information about the circumstances",
                " surrounding the firing of the event.",
                " The context property only appears in events on repeated elements.",
                "",
                " You can use the event context with [`$w.at()`]($w.html#at) to get a",
                " selector function which selects items from a specific repeater item.",
                " It contains an object with one key:value pair. The key is \"itemId\" and",
                " the value is the ID of the repeated item on which the event occurred." ],
            "links": [],
            "examples":
              [ { "title": "Get the context of the event",
                  "body":
                    [ "// non-repeater event",
                      "",
                      "$w(\"#myElement\").onViewChange((event) => {",
                      "  let type = event.context.type; // \"GLOBAL_SCOPE\"",
                      "});",
                      "",
                      "",
                      "// repeater event",
                      "",
                      "$w(\"#myRepeatedElement\").onViewChange( (event) => {",
                      "  let $item = $w.at(event.context)",
                      "  $item(\"#anotherRepeatedElement\").value = \"new value\";",
                      "",
                      "  let itemId = event.context.itemId;  // \"item1\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "options",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.ViewChangeEvent.ViewChangeEventOptions",
        "locations":
          [ { "lineno": 19,
              "filename": "ApppointmentFieldEvent.js" } ],
        "docs":
          { "summary": "Gets the options that relate to the date picker or appointment field view change event.",
            "links": [],
            "examples":
              [ { "title": "Get the event options of the target element",
                  "body":
                    [ "$w.onReady(function () {",
                      "  $w('#myAppointmentField').onViewChange(viewChangeHandler, viewChangeOperation, 3);",
                      "});",
                      "",
                      "export async function viewChangeOperation({ operationOptions }) {",
                      "  const { startDate, endDate } = operationOptions;",
                      "  let enabledDates = await myGetEnabledDatesFunction({ startDateTime: startDate, endDateTime: endDate })",
                      "  return slots",
                      "}",
                      "",
                      "export async function viewChangeHandler(event) {",
                      "  const { options } = event;",
                      "  const slots = options.operationResult.enabledDates; ",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "type",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 28,
              "filename": "ApppointmentFieldEvent.js" } ],
        "docs":
          { "summary": "Gets the type of event that was triggered.",
            "links": [],
            "examples":
              [ { "title": "Get the type of the event",
                  "body":
                    [ "$w(\"#myElement\").onViewChange((event) => {",
                      "  let eventType = event.type; ",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "ViewChangeEventOptions",
        "locations":
          [ { "lineno": 8,
              "filename": "ApppointmentFieldEvent.js" } ],
        "docs":
          { "summary": "An object that contains information about the date picker or appointment field for which an event was triggered.",
            "links":
              [ "[context](#context)" ],
            "examples":
              [ { "title": "Get the context of the event",
                  "body":
                    [ "// non-repeater event",
                      "",
                      "$w(\"#myElement\").onViewChange((event) => {",
                      "  let type = event.context.type; // \"GLOBAL_SCOPE\"",
                      "});",
                      "",
                      "",
                      "// repeater event",
                      "",
                      "$w(\"#myRepeatedElement\").onViewChange( (event) => {",
                      "  let $item = $w.at(event.context)",
                      "  $item(\"#anotherRepeatedElement\").value = \"new value\";",
                      "",
                      "  let itemId = event.context.itemId;  // \"item1\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "startDate",
              "type": "Date",
              "doc": "Start date of the currently displayed month." },
            { "name": "endDate",
              "type": "Date",
              "doc": "End date of the currently displayed month." },
            { "name": "operationResult",
              "type": "*",
              "doc": "Result returned by the operation." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] } ],
  "extra":
    {  } }