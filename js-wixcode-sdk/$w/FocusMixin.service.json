{ "name": "FocusMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 4,
      "filename": "FocusMixin.es6" },
  "docs":
    { "summary": "Provides functionality for elements that can set and lose focus.",
      "description":
        [ "The element on the page that is currently active is the element in focus.",
          " Only one element on the page can have focus at any given moment.",
          " Typically, an element exhibits a visual cue, such as a subtle outline,",
          " indicating that it is in focus. The element in focus receives keystroke",
          " events if the user causes any.",
          "",
          " An element receives focus and loses focus (blurs) through user actions,",
          " such as clicking and tabbing, or programmatically, using the",
          " [focus( )](#focus) and [blur( )](#blur) functions." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "blur",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 48,
              "filename": "FocusMixin.es6" } ],
        "docs":
          { "summary": "Removes focus from the element.",
            "description":
              [ "The `blur()` function removes focus from the element and fires a `blur`",
                " event.",
                "",
                " The `blur` event handlers set on this element by the [onBlur( )](#onBlur)",
                " function or in the Editor are called.",
                "",
                " Removing focus through a call to this function is equivalent to a user",
                " clicking on another element or tabbing out of the element manually.",
                "",
                " If blur() is called on an element that is not in focus, it has no effect.",
                " The element in focus remains in focus and the `onBlur` event handlers",
                " are not called." ],
            "links":
              [ "[onBlur( )](#onBlur)",
                "[focus( )](#focus)",
                "[onFocus( )](#onFocus)" ],
            "examples":
              [ { "title": "Remove focus from an element",
                  "body":
                    [ "$w(\"#myElement\").blur();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "focus",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 21,
              "filename": "FocusMixin.es6" } ],
        "docs":
          { "summary": "Places focus on the element.",
            "description":
              [ "The `focus()` function places focus on the element and fires a `focus`",
                " event.",
                "",
                " The `focus` event handlers set on this element by the [onFocus( )](#onFocus)",
                " function or in the Editor are called.",
                "",
                " Receiving focus through a call to this function is equivalent to",
                " a user clicking on or tabbing to the element manually." ],
            "links":
              [ "[onFocus( )](#onFocus)",
                "[blur( )](#blur)",
                "[onBlur( )](#onBlur)" ],
            "examples":
              [ { "title": "Place focus on an element",
                  "body":
                    [ "$w(\"#myElement\").focus();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onBlur",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element losed focus." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 126,
              "filename": "FocusMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element loses focus.",
            "description":
              [ "An element loses focus (blurs) through user actions,",
                " such as clicking and tabbing, or programmatically, using the",
                " [blur( )](#blur) function." ],
            "links":
              [ "[blur( )](#blur)",
                "[onFocus( )](#onFocus)",
                "[focus( )](#focus)" ],
            "examples":
              [ { "title": "Get the ID of the element that has lost focus",
                  "body":
                    [ "$w(\"#myElement\").onBlur( (event) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`onBlur()` has no effect when applied to [RadioButtonGroup]($w.RadioButtonGroup.html) elements.\n\n **Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "blur" } },
      { "name": "onFocus",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element receives focus." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 79,
              "filename": "FocusMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element receives focus.",
            "description":
              [ "An element receives focus through user actions,",
                " such as clicking and tabbing, or programmatically, using the",
                " [focus( )](#focus) function." ],
            "links":
              [ "[focus( )](#focus)",
                "[onBlur( )](#onBlur)",
                "[blur( )](#blur)" ],
            "examples":
              [ { "title": "Get the ID of the element that has received focus",
                  "body":
                    [ "$w(\"#myElement\").onFocus( (event) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`onFocus()` has no effect when applied to [RadioButtonGroup]($w.RadioButtonGroup.html) elements.\n\n **Deprecation note:** The $w parameter of event handlers is being deprecated. To get\n a scoped selector for working with elements in repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`. To learn more, see\n <a href=\"https://www.wix.com/code/home/forum/wix-tips-and-updates/removal-of-the-w-parameter-from-event-handlers\" target=\"_blank\">here</a>." ],
            "eventType": "focus" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }