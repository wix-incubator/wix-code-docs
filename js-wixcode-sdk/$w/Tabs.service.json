{ "name": "Tabs",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Tabs.js" },
  "docs":
    { "summary": "A tabs container holds multiple tabs, displaying one at a time.",
      "description":
        [ "A `Tabs` container element holds",
          "multiple tabs, each with different content. One [`Tab`]($w.Tab.html) is shown at a time. The site visitor can ",
          "navigate between tabs without leaving the page." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentTab",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Tab",
        "locations":
          [ { "lineno": 71,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the tab currently displaying in the tabs container element.",
            "links": [],
            "examples":
              [ { "title": "Get the current tab and its ID",
                  "body":
                    [ "let muCurrentTab = $w(\"#myTabsContainer\").currentTab;",
                      "",
                      "let tabId = myCurrentTab.id; // \"singleTab1\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "defaultTab",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Tab",
        "locations":
          [ { "lineno": 84,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the tabs container element's default tab.",
            "links": [],
            "examples":
              [ { "title": "Get the default tab and its ID",
                  "body":
                    [ "let myDefaultTab = $w(\"#myTabsContainer\").defaultTab;",
                      "",
                      "let tabId = myDefaultTab.id; // \"singleTab2\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabs",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Tab" ] },
        "locations":
          [ { "lineno": 125,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets a list of all the tabs contained in the tabs container element.",
            "description":
              [ "The list is ordered as the tabs appear in the menu." ],
            "links": [],
            "examples":
              [ { "title": "Get a list of tabs in a tabs container",
                  "body":
                    [ "let myTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab1')\", \"$w('#singleTab2')\", \"$w('#singleTab3')\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "changeTab",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "tabReference",
              "type":
                [ "string",
                  "$w.Tab" ],
              "doc": "The tab to move to. Either the [`id`]($w.Tab.html#id) of the tab or a [`Tab`]($w.Tab.html) object in the tabs container element." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Tab" ] },
            "doc": "Fulfilled - The tab that the tabs container element changed to.\nRejected - Error message: If no argument was provided or the argument is not a string or an existing tab." },
        "locations":
          [ { "lineno": 98,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Changes the tabs container element's current tab to a specific tab.",
            "description":
              [ "The `changeTab()` function returns a Promise that is resolved when",
                " the tabs container element finishes moving from the current tab to the tab",
                " referred to by `tabReference`. `tabReference` can be a [`Tab`]($w.Tab.html) object or",
                " a tab [`id`]($w.Tab.html#id).",
                "",
                " You can retrieve [`Tab`]($w.Tab.html) objects to pass to the",
                " `tabReference` parameter from your tabs container element using the",
                " [`currentTab`](#currentTab) or [`tabs`](#tabs) properties." ],
            "links": [],
            "examples":
              [ { "title": "Move to a new tab using an ID",
                  "body":
                    [ "$w(\"#myTabsContainer\").changeTab(\"singleTab2\");" ],
                  "extra":
                    {  } },
                { "title": "Move to a new tab using a tab object",
                  "body":
                    [ "let myNewTab = $w(\"#singleTab2\");",
                      "",
                      "$w(\"#myTabsContainer\").changeTab(myNewTab);",
                      "" ],
                  "extra":
                    { "description": "This example moves to the tab stored in the `myNewTab` variable." } },
                { "title": "Move to a new tab and log a message when the move is finished",
                  "body":
                    [ "$w(\"#myTabsContainer\").changeTab(\"singleTab2\")",
                      "  .then((newTab) => {",
                      "    console.log(`Done moving to ${newTab.id}`);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the tabs container element moves to a new tab." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 51,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the tabs container element moves to a new tab.",
            "description":
              [ "`onChange` is fired when the tabs container element moves to a new tab. This occurs",
                " when the [`changeTab()`](#changeTab) function is called or when a visitor clicks on a tab menu item." ],
            "links":
              [ "[`changeTab( )`](#changeTab)" ],
            "examples":
              [ { "title": "Get the ID of the tab to which the tabs container element moved",
                  "body":
                    [ "$w(\"#myTabsContainer\").onChange((event) => {",
                      "  let currentTab = event.target.currentTab.id; // \"singleTab2\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } },
      { "name": "onTabItemClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\nthe function expression to run when a visitor clicks on a tab menu item." } ],
        "ret":
          { "type": "$w.Tabs",
            "doc": "The tabs container element on which the event is now registered." },
        "locations":
          [ { "lineno": 33,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when any tab menu item is clicked.",
            "description":
              [ "`onTabItemClicked` is fired when a visitor clicks on any tab menu item in the tabs container element." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the tab clicked",
                  "body":
                    [ "$w(\"#myTabsContainer\").onTabItemClicked((event) => {",
                      "    let tabItemClicked = event.tabId; // \"singleTab2\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } },
      { "name": "orderTabs",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderedTabIDs",
              "type":
                { "name": "array",
                  "typeParams":
                    [ "(string|Tab)" ] },
              "doc": "The tab objects or the IDs of the tabs in the desired new order." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "When the tabs are reordered." },
        "locations":
          [ { "lineno": 19,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Changes the order of the tabs in a tabs container element.",
            "description":
              [ "The `orderedTabsIDs` array contains the either the tab objects or the tab IDs in the desired order. It must contain all of the tabs." ],
            "links": [],
            "examples":
              [ { "title": "Reorder tabs using tab IDs",
                  "body":
                    [ "let myTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab1')\", \"$w('#singleTab2')\", \"$w('#singleTab3')\"]",
                      "",
                      "$w(\"#myTabsContainer\").orderTabs([\"singleTab3\", \"singleTab1\", \"singleTab2\"]);",
                      "",
                      "myUpdatedTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab3')\", \"$w('#singleTab1')\", \"$w('#singleTab2')\"]" ],
                  "extra":
                    {  } },
                { "title": "Reorder tabs using tab objects",
                  "body":
                    [ "let myTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab1')\", \"$w('#singleTab2')\", \"$w('#singleTab3')\"]",
                      "",
                      "$w(\"#myTabsContainer\").orderTabs([$w(\"#singleTab3\"), $w(\"#singleTab1\"), $w(\"#singleTab2\")]);",
                      "",
                      "myUpdatedTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab3')\", \"$w('#singleTab1')\", \"$w('#singleTab2')\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }