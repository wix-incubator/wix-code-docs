{ "name": "Tabs",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "Tabs.js" },
  "docs":
    { "summary": "A [tabs](https://support.wix.com/en/article/wix-editor-about-tabs) element is a container that holds multiple\n[tabs]($w.Tab.html), displaying one at a time.",
      "description":
        [ "A tabs element holds",
          "multiple [tab]($w.Tab.html) elements, each with different content. One tab is displayed at a time. ",
          "A site visitor can navigate between tabs without leaving the page, by clicking a tab menu item.",
          "",
          "![Tabs Example](images/tabs.png \"Tabs Example\")",
          "",
          "With Velo, you can reorder tabs or navigate between them using code. You can also define event handlers that run when tabs are navigated between or tab menu items are clicked." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Tabs.Accessibility",
        "locations":
          [ { "lineno": 181,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myTabs').accessibility.ariaLabel = 'tab content';",
                      "$w('#myTabs').accessibility.ariaLabelledBy = $w('#tabLabel');" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myTabsAccessibility = $w('#myTabs').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "currentTab",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Tab",
        "locations":
          [ { "lineno": 80,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the tab currently displayed in the tabs element.",
            "links": [],
            "examples":
              [ { "title": "Get the current tab and its label",
                  "body":
                    [ "let myCurrentTab = $w(\"#myTabsElement\").currentTab;",
                      "",
                      "let myTabLabel = myCurrentTab.label; // \"Second Tab\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 246,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "The `customClassList` property allows you to manipulate the CSS classes of an element. Use it to add, remove, or check for CSS classes that were defined in the Wix Studio Styles panel." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "defaultTab",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Tab",
        "locations":
          [ { "lineno": 93,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the tabs element's default tab.",
            "description":
              [ "The default tab is the tab displayed automatically when the page loads." ],
            "links": [],
            "examples":
              [ { "title": "Get the default tab and its label",
                  "body":
                    [ "let myDefaultTab = $w(\"#myTabsElement\").defaultTab;",
                      "",
                      "let myTabLabel = myDefaultTab.label; // \"First Tab\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 224,
              "filename": "Tabs.js" },
            { "lineno": 239,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of an element on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard focus order but can still become focusable using the [`focus()](#focus) function.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabs",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Tab" ] },
        "locations":
          [ { "lineno": 137,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets a list of all the tabs contained in the tabs element.",
            "description":
              [ "The `tabs` list is in the same order as the tab menu items appear." ],
            "links": [],
            "examples":
              [ { "title": "Get a list of tabs in a tabs element",
                  "body":
                    [ "let myTabs = $w(\"#myTabsElement\").tabs;",
                      "",
                      "let numberOfTabs = myTabs.length; // 3",
                      "",
                      "let firstTabId = myTabs[0].id; // \"singleTab1\"",
                      "let firstTabLabel = myTabs[0].label; // \"First Tab\"",
                      "let secondTabId = myTabs[1].id; // \"singleTab2\"",
                      "let secondTabLabel = myTabs[1].label; // \"Second Tab\"",
                      "let thirdTabId = myTabs[2].id; // \"singleTab3\"",
                      "let thirdTabLabel = myTabs[2].label; // \"Third Tab\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "type",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 151,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the element's type.",
            "description":
              [ "Possible values include:",
                "",
                " - `$w.Tabs`",
                " - `$w.Tab`",
                " - `$w.TextInput`",
                " - `$w.TextBox`",
                " - `$w.RichTextBox`",
                " - `$w.RadioButtonGroup`",
                " - `$w.CheckboxGroup`",
                " - `$w.Dropdown`",
                " - `$w.SelectionTags`",
                " - `$w.Slider`",
                " - `$w.DatePicker`",
                " - `$w.UploadButton`",
                " - `$w.RatingsInput`",
                " - `$w.AddressInput`",
                " - `$w.Switch`",
                " - `$w.SignatureInput`",
                " - `$w.Captcha`" ],
            "links": [],
            "examples":
              [ { "title": "Get the element's type",
                  "body":
                    [ "let myType = $w(\"#myTabs\").type; // \"$w.Tabs\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "changeTab",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "tabReference",
              "type":
                [ "string",
                  "$w.Tab" ],
              "doc": "The tab within the tabs element to move to. \nEither a tab element or its ID without a preceding **#** character." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Tab" ] },
            "doc": "Fulfilled - The tab that the tabs element changed to." },
        "locations":
          [ { "lineno": 108,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Changes the tabs element's current tab.",
            "description":
              [ "The `changeTab()` function returns a Promise that is resolved when",
                " the tabs element finishes moving from the current tab to the tab",
                " referred to by `tabReference`.",
                "",
                " You can retrieve [tab]($w.Tab.html) elements to pass to the",
                " `tabReference` parameter from your tabs element using the",
                " [`currentTab`](#currentTab), [`defaultTab`](#defaultTab), or [`tabs`](#tabs) properties.",
                "",
                " Changing tabs using `changeTab()` triggers the [`onChange()`](#onChange) event handler." ],
            "links":
              [ "[`onChange()`](#onChange)" ],
            "examples":
              [ { "title": "Move to a different tab using an ID",
                  "body":
                    [ "$w(\"#myTabsElement\").changeTab(\"singleTab2\");" ],
                  "extra":
                    {  } },
                { "title": "Move to a different tab using a tab element",
                  "body":
                    [ "let myNewTab = $w(\"#singleTab2\");",
                      "",
                      "$w(\"#myTabsElement\").changeTab(myNewTab);" ],
                  "extra":
                    {  } },
                { "title": "Move to a different tab and log a message when the move is finished",
                  "body":
                    [ "$w(\"#myTabsElement\").changeTab(\"singleTab2\")",
                      "  .then((newTab) => {",
                      "    console.log(`Done moving to ${newTab.id}`);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Get the list of tabs in a tabs element and move to one of the tabs",
                  "body":
                    [ "let myTabs = $w(\"#myTabsElement\").tabs;",
                      "let numberOfTabs = myTabs.length; // 3",
                      "",
                      "let myNewTab = myTabs[2];",
                      "$w(\"#myTabsElement\").changeTab(myNewTab);",
                      "",
                      "let myCurrentTab = $w(\"#myTabsElement\").currentTab;",
                      "let myCurrentTabLabel = myCurrentTab.label; // \"Third Tab\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the tabs element moves to a different tab." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 59,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the tabs element moves to a different tab.",
            "description":
              [ "`onChange()` runs when the tabs element moves to a different tab. This occurs",
                " when you call the [`changeTab()`](#changeTab) function or when a site visitor clicks on a tab menu item." ],
            "links":
              [ "[`changeTab()`](#changeTab)",
                "[`onTabItemClicked()`](#onTabItemClicked)" ],
            "examples":
              [ { "title": "Get the label of the tab to which the tabs element moved",
                  "body":
                    [ "$w(\"#myTabsElement\").onChange((event) => {",
                      "  let currentTabLabel = event.target.currentTab.label; // \"Second Tab\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } },
      { "name": "onTabItemClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\nthe function expression to run when a site visitor clicks a tab menu item." } ],
        "ret":
          { "type": "$w.Tabs",
            "doc": "The tabs element on which the event is registered." },
        "locations":
          [ { "lineno": 40,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when any tab menu item is clicked.",
            "description":
              [ "`onTabItemClicked()` runs when a site visitor clicks on any tab menu item in the tabs element." ],
            "links":
              [ "[`onChange()`](#onChange)" ],
            "examples":
              [ { "title": "Get the ID of the tab whose menu item was clicked",
                  "body":
                    [ "$w(\"#myTabsElement\").onTabItemClicked((event) => {",
                      "  let tabItemClicked = event.tabId; // \"singleTab2\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } },
      { "name": "orderTabs",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "orderedTabIds",
              "type":
                [ { "name": "Array",
                    "typeParams":
                      [ "string" ] },
                  { "name": "Array",
                    "typeParams":
                      [ "$w.Tab" ] } ],
              "doc": "The tab elements, or the tab IDs without a preceding **#** character, in the desired new order. \nTab elements and IDs can be mixed. The array must include each element (or its ID) once, otherwise the tabs are not reordered." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the tabs are reordered." },
        "locations":
          [ { "lineno": 24,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Changes the order of the tabs in a tabs element.",
            "description":
              [ "The `orderTabs()` function changes the order in which tab menu items are displayed. It reorders the array contained in the [`tabs`](#tabs) property." ],
            "links": [],
            "examples":
              [ { "title": "Reorder tabs using tab IDs",
                  "body":
                    [ "$w(\"#myTabsElement\").orderTabs([\"singleTab3\", \"singleTab1\", \"singleTab2\"]);",
                      "",
                      "let myUpdatedTabs = $w(\"#myTabsElement\").tabs;",
                      "/*",
                      " * [",
                      " *   $w(\"#singleTab3\"), ",
                      " *   $w(\"#singleTab1\"), ",
                      " *   $w(\"#singleTab2\")",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Reorder tabs using tab elements",
                  "body":
                    [ "$w(\"#myTabsElement\").orderTabs([$w(\"#singleTab3\"), $w(\"#singleTab1\"), $w(\"#singleTab2\")]);",
                      "",
                      "let myUpdatedTabs = $w(\"#myTabsElement\").tabs;",
                      "/*",
                      " * [",
                      " *   $w(\"#singleTab3\"), ",
                      " *   $w(\"#singleTab1\"), ",
                      " *   $w(\"#singleTab2\")",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 210,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./tabs/guides/CSS Classes.md" } ] }