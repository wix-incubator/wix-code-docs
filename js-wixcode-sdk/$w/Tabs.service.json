{ "name": "Tabs",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Tabs.js" },
  "docs":
    { "summary": "A container that holds multiple [tab]($w.Tab.html) elements, displaying one at a time.",
      "description":
        [ "A tabs element holds",
          "multiple tabs, each with different content. Each [tab]($w.Tab.html) takes up the entire area of the tabs element, and only one is displayed at a time. ",
          "A site visitor can navigate between tabs without leaving the page, by clicking a tab's menu item.",
          "",
          "With Velo, you can reorder tabs or switch between them using code. You can also cause event handlers to run when tabs are changed or tab menu items are clicked." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentTab",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Tab",
        "locations":
          [ { "lineno": 75,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the tab currently displayed in the tabs element.",
            "links": [],
            "examples":
              [ { "title": "Get the current tab and its ID",
                  "body":
                    [ "let myCurrentTab = $w(\"#myTabsContainer\").currentTab;",
                      "",
                      "let tabId = myCurrentTab.id; // \"singleTab2\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "defaultTab",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Tab",
        "locations":
          [ { "lineno": 88,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the tabs element's default tab.",
            "links": [],
            "examples":
              [ { "title": "Get the default tab and its ID",
                  "body":
                    [ "let myDefaultTab = $w(\"#myTabsContainer\").defaultTab;",
                      "",
                      "let tabId = myDefaultTab.id; // \"singleTab1\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabs",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Tab" ] },
        "locations":
          [ { "lineno": 128,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets a list of all the tabs contained in the tabs element.",
            "description":
              [ "The list is ordered as the tabs appear in the menu." ],
            "links": [],
            "examples":
              [ { "title": "Get a list of tabs in a tabs element",
                  "body":
                    [ "let myTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab1')\", \"$w('#singleTab2')\", \"$w('#singleTab3')\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "type",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 142,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Gets the element's type.",
            "description":
              [ "Possible values include:",
                "",
                " - `$w.Tabs`",
                " - `$w.Tab`",
                " - `$w.TextInput`",
                " - `$w.TextBox`",
                " - `$w.RichTextBox`",
                " - `$w.RadioButtonGroup`",
                " - `$w.CheckboxGroup`",
                " - `$w.Dropdown`",
                " - `$w.SelectionTags`",
                " - `$w.Slider`",
                " - `$w.DatePicker`",
                " - `$w.UploadButton`",
                " - `$w.RatingsInput`",
                " - `$w.AddressInput`",
                " - `$w.Switch`",
                " - `$w.SignatureInput`",
                " - `$w.Captcha`" ],
            "links": [],
            "examples":
              [ { "title": "Get the element's type",
                  "body":
                    [ "let myType = $w(\"#myTabs\").type; // \"$w.Tabs\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "changeTab",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "tabReference",
              "type":
                [ "string",
                  "$w.Tab" ],
              "doc": "The tab to move to. Either the [`id`]($w.Tab.html#id) of the tab or a [`Tab`]($w.Tab.html) object in the tabs element." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Tab" ] },
            "doc": "Fulfilled - The tab that the tabs element changed to.\nRejected - Error message: If no argument was provided or the argument is not a string or an existing tab." },
        "locations":
          [ { "lineno": 102,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Changes the tabs element's current tab to a specific tab.",
            "description":
              [ "The `changeTab()` function returns a Promise that is resolved when",
                " the tabs element finishes moving from the current tab to the tab",
                " referred to by `tabReference`. `tabReference` can be a [tab]($w.Tab.html) element or",
                " a tab [id]($w.Tab.html#id).",
                "",
                " You can retrieve [tab]($w.Tab.html) elements to pass to the",
                " `tabReference` parameter from your tabs element using the",
                " [`currentTab`](#currentTab) or [`tabs`](#tabs) properties." ],
            "links": [],
            "examples":
              [ { "title": "Move to a new tab using an ID",
                  "body":
                    [ "$w(\"#myTabsContainer\").changeTab(\"singleTab2\");" ],
                  "extra":
                    {  } },
                { "title": "Move to a new tab using a tab object",
                  "body":
                    [ "let myNewTab = $w(\"#singleTab2\");",
                      "",
                      "$w(\"#myTabsContainer\").changeTab(myNewTab);" ],
                  "extra":
                    {  } },
                { "title": "Move to a new tab and log a message when the move is finished",
                  "body":
                    [ "$w(\"#myTabsContainer\").changeTab(\"singleTab2\")",
                      "  .then((newTab) => {",
                      "    console.log(`Done moving to ${newTab.id}`);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the tabs element moves to a new tab." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 55,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the tabs element moves to a new tab.",
            "description":
              [ "`onChange` is fired when the tabs element moves to a new tab. This occurs",
                " when the [`changeTab()`](#changeTab) function is called or when a site visitor clicks on a tab menu item." ],
            "links":
              [ "[`changeTab( )`](#changeTab)" ],
            "examples":
              [ { "title": "Get the ID of the tab to which the tabs element moved",
                  "body":
                    [ "$w(\"#myTabsContainer\").onChange((event) => {",
                      "  let currentTab = event.target.currentTab.id; // \"singleTab2\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "change" } },
      { "name": "onTabItemClicked",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\nthe function expression to run when a site visitor clicks on a tab menu item." } ],
        "ret":
          { "type": "$w.Tabs",
            "doc": "The tabs element on which the event is now registered." },
        "locations":
          [ { "lineno": 37,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when any tab menu item is clicked.",
            "description":
              [ "`onTabItemClicked()` runs when a site visitor clicks on any tab menu item in the tabs element." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the tab whose menu item was clicked",
                  "body":
                    [ "$w(\"#myTabsContainer\").onTabItemClicked((event) => {",
                      "  let tabItemClicked = event.tabId; // \"singleTab2\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "click" } },
      { "name": "orderTabs",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "orderedTabIds",
              "type":
                { "name": "array",
                  "typeParams":
                    [ "(string|Tab)" ] },
              "doc": "The tab elements or the [IDs]($w.Tab.html#id) of the tabs in the desired new order. \nTab elements and IDs can be mixed. The array must include each element (or its ID) once, otherwise the tabs are not reordered." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the tabs are reordered." },
        "locations":
          [ { "lineno": 21,
              "filename": "Tabs.js" } ],
        "docs":
          { "summary": "Changes the order of the tabs in a tabs element.",
            "description":
              [ "The `orderTabs()` function changes the order in which tab menu items are displayed. It reorders the array contained in the [`tabs`](#tabs) property." ],
            "links": [],
            "examples":
              [ { "title": "Reorder tabs using tab IDs",
                  "body":
                    [ "let myTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab1')\", \"$w('#singleTab2')\", \"$w('#singleTab3')\"]",
                      "",
                      "$w(\"#myTabsContainer\").orderTabs([\"singleTab3\", \"singleTab1\", \"singleTab2\"]);",
                      "",
                      "let myUpdatedTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab3')\", \"$w('#singleTab1')\", \"$w('#singleTab2')\"]" ],
                  "extra":
                    {  } },
                { "title": "Reorder tabs using tab elements",
                  "body":
                    [ "let myTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab1')\", \"$w('#singleTab2')\", \"$w('#singleTab3')\"]",
                      "",
                      "$w(\"#myTabsContainer\").orderTabs([$w(\"#singleTab3\"), $w(\"#singleTab1\"), $w(\"#singleTab2\")]);",
                      "",
                      "let myUpdatedTabs = $w(\"#myTabsContainer\").tabs;",
                      "// [\"$w('#singleTab3')\", \"$w('#singleTab1')\", \"$w('#singleTab2')\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }