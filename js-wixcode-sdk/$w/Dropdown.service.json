{ "name": "Dropdown",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 18,
      "filename": "DropDown.es6" },
  "docs":
    { "summary": "Dropdowns are used for selecting one of a number of options.",
      "description":
        [ "Dropdowns are especially useful when there are too many options to display using",
          " [radio buttons]($w.RadioButtonGroup.html). Dropdowns consist of a list",
          " of [options](#Option). Each [option](#Option) contains a label, which is",
          " what the user sees, and a value, which is what is used in code and stored in",
          " you collections." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Dropdown.Option" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 52,
              "filename": "DropDown.es6" },
            { "lineno": 91,
              "filename": "DropDown.es6" } ],
        "docs":
          { "summary": "Sets or gets the options in a dropdown.",
            "description":
              [ "Setting the `options` property sets all the [options](#Option)",
                " available to a user.",
                "",
                " Set `options` to an empty array (`[]`) to remove the current dropdown options.",
                "",
                " Getting the `options` property returns the current",
                " list of [options](#Option) available to a user.",
                "",
                " You cannot modify the options array in-place. To add, change, or remove",
                " individual dropdown options:",
                "",
                "   1. Store the value of the `options` property in a variable.",
                "   1. Make changes to the options array.",
                "   1. Reset the `options` property with the modified array." ],
            "links":
              [ "[Option](#Option)" ],
            "examples":
              [ { "title": "Get the list of options and the first option's label and value from dropdown",
                  "body":
                    [ "let dropdownOptions = $w(\"#myDropdown\").options;",
                      "",
                      "let firstLabel = dropdownOptions[0].label;  // \"First Label\"",
                      "let firstValue = dropdownOptions[0].value;  // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the list of options for a dropdown",
                  "body":
                    [ "$w(\"#myDropdown\").options = [",
                      "  {\"label\": \"Who's on first!\", \"value\": \"first\"},",
                      "  {\"label\": \"What's on second\", \"value\": \"second\"},",
                      "  {\"label\": \"I Don't Know is on third\", \"value\": \"third\"}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an option to a dropdown",
                  "body":
                    [ "let opts = $w(\"#myDropdown\").options;",
                      "opts.push({\"label\": \"New Label\", \"value\": \"New Value\"});",
                      "$w(\"#myDropdown\").options = opts;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the options of a dropdown, adds a new\n option, and then overwrites the old options." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 144,
              "filename": "DropDown.es6" },
            { "lineno": 169,
              "filename": "DropDown.es6" } ],
        "docs":
          { "summary": "Sets or gets the dropdown's placeholder text.",
            "description":
              [ "Placeholder text is typically used to",
                " provide a hint to the user describing what the dropdown is for.",
                " When the user chooses an option, the placeholder text disappears." ],
            "links": [],
            "examples":
              [ { "title": "Get a dropdown's placeholder text",
                  "body":
                    [ "let placeholderStr = $w(\"#myDropdown\").placeholder; // \"Enter name\"" ],
                  "extra":
                    {  } },
                { "title": "Set a dropdown's placeholder text",
                  "body":
                    [ "$w(\"#myDropdown\").placeholder = \"Choose your city\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectedIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 202,
              "filename": "DropDown.es6" },
            { "lineno": 232,
              "filename": "DropDown.es6" } ],
        "docs":
          { "summary": "Sets or gets the index of the selected option.",
            "description":
              [ "Setting the `selectedIndex` property sets the option at",
                " that index to be the selected option. To set one of the options to be",
                " selected, set the `selectedIndex` property to an index between `0` and",
                " `options.length - 1`.",
                "",
                " To reset the dropdown to have no option",
                " selected, set the `selectedIndex` property to `undefined`.",
                "",
                " Getting the `selectedIndex` property returns the index of",
                " the currently selected option. If no value is selected, the",
                " `selectedIndex` property returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the index of the selected option",
                  "body":
                    [ "let dropdownSelIndex = $w(\"#myDropdown\").selectedIndex; // 3" ],
                  "extra":
                    {  } },
                { "title": "Select the first option by index",
                  "body":
                    [ "$w(\"#myDropdown\").selectedIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 330,
              "filename": "DropDown.es6" } ],
        "docs":
          { "summary": "Gets an object containing information about the dropdown's styles.",
            "description":
              [ "The following styles can be used with dropdowns:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a dropdown's styles, gets or sets the styles of the",
                " dropdown's regular state. It does not set the styles of the dropdown's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 266,
              "filename": "DropDown.es6" },
            { "lineno": 298,
              "filename": "DropDown.es6" } ],
        "docs":
          { "summary": "Sets or gets an element's value.",
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Changing a dropdown's `value` in code does not trigger an `onChange` event.\n\n If an element is connected to a dataset, setting the element's `value`\n in code does not set the value of the connected field in the dataset.\n That means if you use the dataset to perform a submit, the value changed\n in code is not reflected in the submitted item.\n\n To submit the new value using a dataset, set the field's value using the\n [`setFieldValue()`](wix-dataset.html#setFieldValue) function before\n performing the submit." ] } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Option",
        "locations":
          [ { "lineno": 42,
              "filename": "DropDown.es6" } ],
        "docs":
          { "summary": "An object used by the `options` property that contains the attributes of a dropdown list item.",
            "links":
              [ "[options](#Options)",
                "[value](#value)" ],
            "examples":
              [ { "title": "Get option info",
                  "body":
                    [ "let firstOption = $w(\"#myDropdown\").options[0];",
                      "",
                      "let optionLabel = firstOption.label;  // \"First choice\"",
                      "let optionValue = firstOption.value;  // \"first_choice\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The value of the dropdown option. This is what you use in code and is what is stored in your collections." },
            { "name": "label",
              "type": "string",
              "doc": "The label of the dropdown option. This is what a user sees.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "example",
        "text": "Checkbox Dropdown",
        "url": "https://www.wix.com/code/home/example/Checkbox-Dropdown" },
      { "icon": "example",
        "text": "Remove Duplicates from Connected Dropdown Options",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-remove-duplicates-from-connected-dropdown-options" },
      { "icon": "example",
        "text": "Chart",
        "url": "https://www.wix.com/code/home/example/Chart" },
      { "icon": "example",
        "text": "Create a Weather Widget",
        "url": "https://www.wix.com/code/home/example/Create-a-Weather-Widget" },
      { "icon": "article",
        "text": "Setting Labels and Values for Radio Buttons and Dropdown Lists",
        "url": "https://support.wix.com/en/article/setting-labels-and-values-for-radio-buttons-and-dropdown-lists" } ],
  "FAQs":
    [ { "title": "How do I set the dropdown to display a default option?",
        "markdown": "Set a dropdown's default option using the [`selectedIndex`](https://www.wix.com/code/reference/$w.Dropdown.html#selectedIndex) property." },
      { "title": "What is the difference between the 'label' and 'value' of a dropdown option?",
        "markdown": "Each [`Option`](https://www.wix.com/code/reference/$w.Dropdown.html#Option) in a dropdown has a `label` and a `value`. The `label` is the text that visitors see, and the `value` is used in code and stored in your collections. [Learn more](https://support.wix.com/en/article/setting-labels-and-values-for-radio-buttons-and-dropdown-lists)." },
      { "title": "Should I use a dropdown or radio buttons for my input element?",
        "markdown": "Dropdowns and radio buttons provide the same basic functionality. Here are some tips on when to use one or the other:\n\n**Dropdowns:**\n\n*   When you have many choices. This prevents clutter on your page.\n*   When the default option is recommended or likely to be chosen. Dropdowns emphasize the default option since it's the initial option visitors see.\n\n**Radio Buttons:**\n\n*   When you want your site visitors to read and compare all options. \n*   When you only have a few options. Visitors don't have to click anything to quickly read the options and make their choice.\n*   When time is crucial or the input form is long. Using dropdowns requires an extra click." } ] }