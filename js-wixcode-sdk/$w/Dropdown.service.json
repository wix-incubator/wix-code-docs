{ "name": "Dropdown",
  "memberOf": "$w",
  "mixes":
    [ "$w.LabelMixin",
      "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "DropDown.js" },
  "docs":
    { "summary": "[Dropdowns](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-dropdown-selection-for-a-form-submission) \nare used for selecting one of a number of options.",
      "description":
        [ "Dropdowns are especially useful when there are too many options to display using",
          " [radio buttons]($w.RadioButtonGroup.html). Dropdowns consist of a list",
          " of options. Each option contains a label, which is",
          " what the user sees, and a value, which is what is used in code and stored in",
          " your collections." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Dropdown.Accessibility",
        "locations":
          [ { "lineno": 293,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) of the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. Set the accessibility properties to design your elements to be more inclusive and usable to users with visual, auditory, motor, and or cognitive disabilities. The accessibility object only affects how assistive technologies read and present site content to users. It doesn't affect the appearance, functionality, or SEO of your site. ",
                "",
                ">**Note:** Incorrect use of ARIA can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myDropdown').accessibility.ariaDescribedBy = $w('#dropdownDescriptionText');",
                      "$w('#myDropdown').accessibility.ariaExpanded = true;",
                      "$w('#myDropdown').accessibility.ariaInvalid = true;",
                      "$w('#myDropdown').accessibility.ariaLabel = 'dropdown options';",
                      "$w('#myDropdown').accessibility.ariaLabelledBy = $w('#dropdownLabelText');",
                      "$w('#myDropdown').accessibility.ariaRequired = true;" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myDropdownAccessibility = $w('#myDropdown').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 234,
              "filename": "DropDown.js" },
            { "lineno": 254,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Sets or gets a dropdown's label.",
            "description":
              [ "The dropdown's label refers to the title above the element.",
                "You can also set the dropdown's label by using the Settings panel in the Editor. ",
                "",
                "![Dropdown Label](images/dropdown_label.png 'Dropdown Label')",
                "",
                "> **Note:** Use the `label` property to set the element's label. To set the label for ",
                "the options in the dropdown, see [`options`](#options)." ],
            "links": [],
            "examples":
              [ { "title": "Get a dropdown's label",
                  "body":
                    [ "let dropdownLabel = $w(\"#myDropdown\").label;  // \"New Label\"" ],
                  "extra":
                    {  } },
                { "title": "Set a dropdown's label",
                  "body":
                    [ "$w(\"#myDropdown\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Dropdown.Option" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 39,
              "filename": "DropDown.js" },
            { "lineno": 73,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Sets or gets the options in a dropdown.",
            "description":
              [ "Setting the `options` property sets all the options",
                " available to a user.",
                "",
                " Set `options` to an empty array (`[]`) to remove the current dropdown options.",
                "",
                " Getting the `options` property returns the current",
                " list of options available to a user.",
                "",
                " You cannot modify the options array in-place. To add, change, or remove",
                " individual dropdown options:",
                "",
                "   1. Store the value of the `options` property in a variable.",
                "   1. Make changes to the options array.",
                "   1. Reset the `options` property with the modified array." ],
            "links": [],
            "examples":
              [ { "title": "Get the list of options and the first option's label and value from dropdown",
                  "body":
                    [ "let dropdownOptions = $w(\"#myDropdown\").options;",
                      "",
                      "let firstLabel = dropdownOptions[0].label;  // \"First Label\"",
                      "let firstValue = dropdownOptions[0].value;  // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the list of options for a dropdown",
                  "body":
                    [ "$w(\"#myDropdown\").options = [",
                      "  {\"label\": \"Who's on first!\", \"value\": \"first\"},",
                      "  {\"label\": \"What's on second\", \"value\": \"second\"},",
                      "  {\"label\": \"I Don't Know is on third\", \"value\": \"third\"}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an option to a dropdown",
                  "body":
                    [ "let opts = $w(\"#myDropdown\").options;",
                      "opts.push({\"label\": \"New Label\", \"value\": \"New Value\"});",
                      "$w(\"#myDropdown\").options = opts;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the options of a dropdown, adds a new\n option, and then overwrites the old options." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 80,
              "filename": "DropDown.js" },
            { "lineno": 100,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Sets or gets the dropdown's placeholder text.",
            "description":
              [ "Placeholder text is typically used to",
                " provide a hint to the user describing what the dropdown is for.",
                " When the user chooses an option, the placeholder text disappears." ],
            "links": [],
            "examples":
              [ { "title": "Get a dropdown's placeholder text",
                  "body":
                    [ "let placeholderStr = $w(\"#myDropdown\").placeholder; // \"Enter name\"" ],
                  "extra":
                    {  } },
                { "title": "Set a dropdown's placeholder text",
                  "body":
                    [ "$w(\"#myDropdown\").placeholder = \"Choose your city\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectedIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 107,
              "filename": "DropDown.js" },
            { "lineno": 135,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Sets or gets the index of the selected option.",
            "description":
              [ "Setting the `selectedIndex` property sets the option at",
                " that index to be the selected option. To set one of the options to be",
                " selected, set the `selectedIndex` property to an index between `0` and",
                " `options.length - 1`.",
                "",
                " To reset the dropdown to have no option",
                " selected, set the `selectedIndex` property to `undefined`.",
                "",
                " Getting the `selectedIndex` property returns the index of",
                " the currently selected option. If no value is selected, the",
                " `selectedIndex` property returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the index of the selected option",
                  "body":
                    [ "let dropdownSelIndex = $w(\"#myDropdown\").selectedIndex; // 3" ],
                  "extra":
                    {  } },
                { "title": "Select the first option by index",
                  "body":
                    [ "$w(\"#myDropdown\").selectedIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 176,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the dropdown's styles.",
            "description":
              [ "The following styles can be used with dropdowns:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a dropdown's styles, gets or sets the styles of the",
                " dropdown's regular state. It does not set the styles of the dropdown's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 349,
              "filename": "DropDown.js" },
            { "lineno": 364,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of an element on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard focus order but can still become focusable using the [`focus()`](#focus) function.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 142,
              "filename": "DropDown.js" },
            { "lineno": 169,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Sets or gets an element's value.",
            "description":
              [ "Changing a dropdown's `value` in code does not trigger an `onChange` event.",
                "",
                "If an element is connected to a dataset, setting the element's `value`",
                "in code does not set the value of the connected field in the dataset.",
                "That means if you use the dataset to perform a submit, the value changed",
                "in code is not reflected in the submitted item.",
                "",
                "To submit the new value using a dataset, set the field's value using the",
                "[`setFieldValue()`](wix-dataset.html#setFieldValue) function before",
                "performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element's value changes." } ],
        "ret":
          { "type": "$w.Dropdown",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 203,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an input element's value\n is changed.",
            "description":
              [ "An element receives a `change` event when a user changes the value",
                " in an input element.",
                "",
                " A `change` event is not triggered when you change an element's value using",
                " the element's [`value`](#value) property.",
                "",
                " Because `onChange()` is fired before validations are performed, do not check ",
                " any of the validation properties in the `onChange()` event handler. For example, ",
                " do not code an if statement that checks the `valid` property in the `onChange()` ",
                " because the property at this point contains values prior to the `onChange()`.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links": [],
            "examples":
              [ { "title": "Get the value of the element that was changed",
                  "body":
                    [ "$w(\"#myElement\").onChange( (event) => {",
                      "  let newValue = event.target.value;  // \"new value\"",
                      "});" ],
                  "extra":
                    {  } },
                { "title": "Enable the submit button when a dropdown item is selected",
                  "body":
                    [ "$w('#submitButton').disable();",
                      "$w('myDropdown').onChange( (event) => {",
                      "  if ($w('#myDropdown').value) {",
                      "    $w('#submitButton').enable();",
                      "  }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.DropdownValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 260,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 328,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaExpanded",
              "type": "boolean",
              "doc": "Indicates to assistive technology users whether the element is currently expanded or collapsed. `ariaExpanded` helps screen readers understand when content is displayed or hidden as a result of user interaction on your site. If `ariaExpanded` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true },
            { "name": "ariaInvalid",
              "type": "boolean",
              "doc": "Indicates to assistive technology users whether an element’s input value is invalid or if a required input field is empty. When `true`, assistive technologies alert users that the element’s input value doesn’t meet the expected criteria or that the required field is empty. When `false`, the value entered is valid or the field isn’t required. This helps assistive technology users identify and correct errors in form submissions.",
              "optional": true },
            { "name": "ariaRequired",
              "type": "string",
              "doc": "Indicates to assistive technology users whether an input element has a required field or action. If `ariaRequired` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies. The `ariaRequired` property doesn't inform assistive technologies if the required input value is valid.\n\nSupported values: `'true'`, `'false'`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Option",
        "locations":
          [ { "lineno": 29,
              "filename": "DropDown.js" } ],
        "docs":
          { "summary": "An object used by the `options` property that contains the attributes of a dropdown list item.",
            "links":
              [ "[value](#value)" ],
            "examples":
              [ { "title": "Get option info",
                  "body":
                    [ "let firstOption = $w(\"#myDropdown\").options[0];",
                      "",
                      "let optionLabel = firstOption.label;  // \"First choice\"",
                      "let optionValue = firstOption.value;  // \"first_choice\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The value of the dropdown option. This is what you use in code and is what is stored in your collections. Mandatory if `label` is not specified.",
              "optional": true },
            { "name": "label",
              "type": "string",
              "doc": "The label of the dropdown option. This is what a user sees. Mandatory if `value` is not specified.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./dropdown/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Checkbox Dropdown",
        "url": "https://www.wix.com/velo/example/checkbox-dropdown" },
      { "icon": "example",
        "text": "Create a Weather Widget",
        "url": "https://www.wix.com/velo/example/create-a-weather-widget" },
      { "icon": "article",
        "text": "Setting Labels and Values for Radio Buttons and Dropdown Lists",
        "url": "https://support.wix.com/en/article/setting-labels-and-values-for-radio-buttons-and-dropdown-lists" } ],
  "FAQs":
    [ { "title": "How do I set the dropdown to display a default option?",
        "markdown": "Set a dropdown's default option using the [`selectedIndex`](https://www.wix.com/velo/reference/$w.Dropdown.html#selectedIndex) property." },
      { "title": "What is the difference between the 'label' and 'value' of a dropdown option?",
        "markdown": "Each [`Option`](https://www.wix.com/velo/reference/$w.Dropdown.html#Option) in a dropdown has a `label` and a `value`. The `label` is the text that visitors see, and the `value` is used in code and stored in your collections. [Learn more](https://support.wix.com/en/article/managing-choices-for-a-dropdown-checkbox-or-radio-button-element)." },
      { "title": "Should I use a dropdown or radio buttons for my input element?",
        "markdown": "Dropdowns and radio buttons provide the same basic functionality. Here are some tips on when to use one or the other:\n\n**Dropdowns:**\n\n*   When you have many choices. This prevents clutter on your page.\n*   When the default option is recommended or likely to be chosen. Dropdowns emphasize the default option since it's the initial option visitors see.\n\n**Radio Buttons:**\n\n*   When you want your site visitors to read and compare all options. \n*   When you only have a few options. Visitors don't have to click anything to quickly read the options and make their choice.\n*   When time is crucial or the input form is long. Using dropdowns requires an extra click." } ] }