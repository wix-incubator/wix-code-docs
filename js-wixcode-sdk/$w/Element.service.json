{ "name": "Element",
  "memberOf": "$w",
  "mixes":
    [ "$w.Node",
      "$w.ViewportMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "Element.js" },
  "docs":
    { "summary": "Provides basic functionality for elements.",
      "description":
        [ "`Element` is a mixin that provides basic properties, functions, and event handlers for elements on the page.",
          "",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to a page in the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          " ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          "  $w(\"#Element\").onViewportEnter( (event) => {",
          "    let targetId = event.target.id; ",
          "  });",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that ",
          " \"mixes in\" `Element`. ",
          "",
          "  ```javascript",
          "  $w(\"#myElement\").onViewportEnter( (event) => {",
          "    let targetId = event.target.id; ",
          "  });",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "rendered",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 37,
              "filename": "Element.js" } ],
        "docs":
          { "summary": "Indicates if an element is currently in the [DOM structure](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction).",
            "description":
              [ "If `rendered` is `true`, the element is in the current DOM structure and",
                " can be used.",
                "",
                " If `rendered` is `false` the element is not in the current DOM structure.",
                "",
                " An element might not be in the DOM if it is in a [slide]($w.Slide.html) or a [state]($w.State.html)",
                " which is not currently showing." ],
            "links":
              [ "[collapsed]($w.HiddenCollapsedMixin.html#collapsed)",
                "[hidden]($w.HiddenCollapsedMixin.html#hidden)",
                "[isVisible]($w.HiddenCollapsedMixin.html#isVisible)" ],
            "examples":
              [ { "title": "Get an element's rendered status",
                  "body":
                    [ "let isRendered = $w(\"#myElement\").rendered;  // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved onto the\n element." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 59,
              "filename": "Element.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n onto the element.\n\n You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse enters an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseIn( (event) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "mouseenter" } },
      { "name": "onMouseOut",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the mouse pointer is moved off of\n the element." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 77,
              "filename": "Element.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the mouse pointer is moved\n off of the element.\n\n You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse exits an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseOut( (event) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "mouseleave" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  },
  "relatedContent":
    [ { "icon": "article",
        "text": "Hiding an Element on Certain Pages",
        "url": "https://support.wix.com/en/article/wix-code-tutorial-hiding-an-element-on-certain-pages" } ] }