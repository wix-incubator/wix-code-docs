{ "name": "Box",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ContainableMixin",
      "$w.StyleMixin",
      "$w.FocusMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "Box.js" },
  "docs":
    { "summary": "Container [boxes](https://support.wix.com/en/article/container-boxes)\n are used to structure your site.",
      "description":
        [ "You can [attach](https://support.wix.com/en/article/attaching-elements-to-a-box)",
          " any element to a container box and move the box around, which is a useful",
          " way to to keep elements together. Some actions performed on a box affect the",
          " elements it contains. For example, [hiding](#hide) a box also effectively",
          " hides all the elements in the box, although the values of the",
          " [hidden](#hidden) properties of the elements contained in the box do not change." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Box.Accessibility",
        "locations":
          [ { "lineno": 52,
              "filename": "Box.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) of the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. Set the accessibility properties to design your elements to be more inclusive and usable to users with visual, auditory, motor, and or cognitive disabilities. The accessibility object only affects how assistive technologies read and present site content to users. It doesn't affect the appearance, functionality, or SEO of your site. ",
                "",
                ">**Note:** Incorrect use of ARIA can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myBox').accessibility.ariaCurrent = false;",
                      "$w('#myBox').accessibility.ariaDescribedBy = $w('#boxDescriptionText');",
                      "$w('#myBox').accessibility.ariaHidden = true;",
                      "$w('#myBox').accessibility.ariaLabel = 'box content';",
                      "$w('#myBox').accessibility.ariaLabelledBy = $w('#boxLabelText');",
                      "$w('#myBox').accessibility.role = 'group';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myBoxAccessibility = $w('#myBox').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 27,
              "filename": "Box.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the box's styles.",
            "description":
              [ "The following styles can be used with boxes:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                "",
                "> **Note:** Not all styles can be used on all box designs. To determine which styles",
                " work with a specific box design, go to the **Box Design** panel in",
                " the Editor, choose a design, and click **Customize Design**. The design",
                " options that you see in the **Box Design** panel for your particular",
                " box are the styles you can use in your code." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 109,
              "filename": "Box.js" },
            { "lineno": 124,
              "filename": "Box.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of an element on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard focus order but can still become focusable using the [`focus()`](#focus) function.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 76,
              "filename": "Box.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "role",
              "type": "string",
              "doc": "Defines the role of the element, helping assistive technologies understand the element's purpose and how it should be interacted with. When set to `undefined` or `null`, the role is removed from the element and isn't read by assistive technologies. Learn more about [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles). \n\nSupported values: `'alert'`, `'application'`, `'button'`, `'checkbox'`, `'complementary'`, `'group'`, `'heading'`, `'link'`, `'list'`, `'listBox'`, `'listItem'`, `'navigation'`, `'none'`, `'option'`, `'radio'`, `'radioGroup'`, `'range'`, `'region'`, `'tab'`, `'tabList'`, `'tabPanel'`, `'status'`, `null`, `undefined`. \n\nDefault: `undefined`",
              "optional": true },
            { "name": "ariaHidden",
              "type": "boolean",
              "doc": "Indicates whether the element is visible to or hidden from users that rely on assistive technologies. Use `ariaHidden` to hide decorative, redundant, or off-screen content from screen readers. When `true`, the element is hidden from assistive technologies but remains visible in the DOM. When `false`, the element is exposed to assistive technologies. If `ariaHidden` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaCurrent",
              "type": "string",
              "doc": "Indicates whether the element is currently active or selected in a set of related items. This allows assistive technologies to relay to site visitors which element in a set is currently in focus. \nOnly 1 element in a set should have a value other than `'false'` at any time to ensure that assistive technologies correctly identify which element is currently in focus or active.\n\nSupported values: \n- `'true'`: Represents the current element in an unordered set of related elements.\n- `'false'`: Indicates that the element in a set is not currently active or selected.\n- `'page'`: Represents the current page in a multi-page site.\n- `'step'`: Marks the currently active step in a multi-step process such as a checkout flow.\n- `'date'`: Represents the currently selected date in a calendar.\n\nIf `ariaCurrent` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./box/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Bulk Add to Cart",
        "url": "https://www.wix.com/code-examples/bulk-add-to-cart-vw" },
      { "icon": "example",
        "text": "Chess",
        "url": "https://www.wix.com/velo/example/chess" },
      { "icon": "example",
        "text": "Collapsing Form",
        "url": "https://www.wix.com/velo/example/collapsing-form" },
      { "icon": "example",
        "text": "Collapse Elements",
        "url": "https://www.wix.com/velo/example/collapse-elements" },
      { "icon": "example",
        "text": "Custom Comments",
        "url": "https://www.wix.com/velo/example/custom-comments" } ],
  "FAQs":
    [ { "title": "What is the purpose of a container box?",
        "markdown": "[Container boxes](https://www.wix.com/velo/reference/$w.Box.html) are used to structure your site. [Attach](https://support.wix.com/en/article/attaching-elements-to-a-box) elements to your container box and then move, show, hide, or perform other actions on your box. Actions affect all elements in the box as a unified group." },
      { "title": "How do I add an event handler to a group of elements?",
        "markdown": "[Attach](https://support.wix.com/en/article/attaching-elements-to-a-box) elements to a [container box](https://www.wix.com/velo/reference/$w.Box.html). Then add an event handler to the box. The event handler will apply to all elements in the box." },
      { "title": "How can I hide and show a group of elements together?",
        "markdown": "You can put the group of elements inside a box. When you hide and show the box, all the elements attached to the box are hidden and shown as well." } ] }