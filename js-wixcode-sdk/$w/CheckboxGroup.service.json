{ "name": "CheckboxGroup",
  "memberOf": "$w",
  "mixes":
    [ "$w.LabelMixin",
      "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "CheckboxGroup.js" },
  "docs":
    { "summary": "[Checkbox groups](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-checkbox) are used for selecting any number of the given\n options.",
      "description":
        [ "Checkbox groups consist of a list of options. Each",
          " option contains a label, which is what the user sees, and a",
          " value, which is what is used in code and stored in your collections." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.CheckboxGroup.Option" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 35,
              "filename": "CheckboxGroup.js" },
            { "lineno": 67,
              "filename": "CheckboxGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the options of a checkbox group.",
            "description":
              [ "Setting the `options` property sets all the options",
                " available to a user.",
                "",
                " Getting the `options` property returns the current",
                " list of options available to a user.",
                "",
                " You cannot modify the data array in-place. To add, change, or remove",
                " individual checkbox options:",
                "",
                "   1. Store the value of the `options` property in a variable.",
                "   1. Make changes to the options array.",
                "   1. Reset the `options` property with the modified array." ],
            "links": [],
            "examples":
              [ { "title": "Get the list of options and the first option's label and value from a checkbox group",
                  "body":
                    [ "let checkboxGroupOptions = $w(\"#myCheckboxGroup\").options;",
                      "",
                      "let firstLabel = checkboxGroupOptions[0].label;   // \"First Label\"",
                      "let firstValue = checkboxGroupOptions[0].value;   // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the list of options for a checkbox group",
                  "body":
                    [ "$w(\"#myCheckboxGroup\").options = [",
                      "  {\"label\": \"Who's on first!\", \"value\": \"first\"},",
                      "  {\"label\": \"What's on second\", \"value\": \"second\"},",
                      "  {\"label\": \"I Don't Know is on third\", \"value\": \"third\"}",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an option to a checkbox group",
                  "body":
                    [ "let opts = $w(\"#myCheckboxGroup\").options;",
                      "opts.push({\"label\": \"New Label\", \"value\": \"New Value\"});",
                      "$w(\"#myCheckboxGroup\").options = opts;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the options of a checkbox group, adds a new\n option, and then overwrites the old options." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectedIndices",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 109,
              "filename": "CheckboxGroup.js" },
            { "lineno": 136,
              "filename": "CheckboxGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the indices of the selected options.",
            "description":
              [ "Setting the `selectedIndices` property sets the options at",
                " each specified index to be a selected option.",
                "",
                " To reset the checkbox group to have no option",
                " selected, set the `selectedIndices` property to an empty array, null, or `undefined`.",
                "",
                " Getting the `selectedIndices` property returns an array of the indices of",
                " all selected options. If no value is selected, the `selectedIndices`",
                " property returns an empty array." ],
            "links": [],
            "examples":
              [ { "title": "Get the indices of the selected options",
                  "body":
                    [ "let selectedIndices = $w(\"#myCheckboxGroup\").selectedIndices; // [0,2]" ],
                  "extra":
                    {  } },
                { "title": "Select the selected options by indices",
                  "body":
                    [ "$w(\"#myCheckboxGroup\").selectedIndices = [0,2];" ],
                  "extra":
                    {  } },
                { "title": "Display a message if no checkboxes are selected",
                  "body":
                    [ "$w('#myCheckboxGroup').onChange((event) => {",
                      "    if ($w('#myCheckboxGroup').selectedIndices.length === 0) {",
                      "        $w('#messageText').text = 'You must select at least one value';",
                      "    } else {",
                      "        $w('#messageText').text = '';",
                      "    }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 143,
              "filename": "CheckboxGroup.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the checkbox group's styles.",
            "description":
              [ "The following styles can be used with a checkbox group:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                "",
                "",
                " Getting or setting a checkbox group's styles, gets or sets the styles of the",
                " checkbox group's regular state. It does not set the styles of the checkbox group's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "string" ] },
        "locations":
          [ { "lineno": 74,
              "filename": "CheckboxGroup.js" },
            { "lineno": 102,
              "filename": "CheckboxGroup.js" } ],
        "docs":
          { "summary": "Sets or gets the value of the selected options.",
            "description":
              [ "Setting the `value` property sets the `options`",
                " with those values to be the selected options. You must set the `value`",
                " property to values that exist in the [`options`](#options) list.",
                "",
                " To reset the checkbox group to have no options",
                " selected, set the `value` property to an empty array, `null` or `undefined`.",
                "",
                " Getting the `value` property returns the values of",
                " the currently selected options. If no value is selected, the",
                " `value` property returns an empty array.",
                "",
                " > **Note:** Changing a checkbox group's `value` in code does not trigger an `onChange` event." ],
            "links": [],
            "examples":
              [ { "title": "Get the values of the selected options",
                  "body":
                    [ "let myValue = $w(\"#myCheckboxGroup\").value;  // [\"value1\", \"value2\"]" ],
                  "extra":
                    {  } },
                { "title": "Set the selected options by values",
                  "body":
                    [ "$w(\"#myCheckboxGroup\").value = [\"value1\", \"value2\"];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.CheckboxGroupValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 173,
              "filename": "CheckboxGroup.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Option",
        "locations":
          [ { "lineno": 25,
              "filename": "CheckboxGroup.js" } ],
        "docs":
          { "summary": "An object used by the `options` property that contains the attributes of a checkbox item.",
            "links":
              [ "[options](#options)",
                "[value](#value)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The value of the checkbox option. This is what you use in code and is what is stored in your collections. Mandatory if `label` is not specified.",
              "optional": true },
            { "name": "label",
              "type": "string",
              "doc": "The label of the checkbox option. This is what a user sees.  Mandatory if `value` is not specified.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }