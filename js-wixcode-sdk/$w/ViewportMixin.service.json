{ "name": "ViewportMixin",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 4,
      "filename": "ViewportMixin.es6" },
  "docs":
    { "summary": "Provides functionality for elements that can be scrolled into and out\n of view.",
      "description":
        [ "`ViewportMixin` is a mixin that provides event handlers for elements on the page ",
          " that can be scrolled into and out of view.     ",
          " ",
          " **About Mixins**",
          "",
          " [Mixins](https://support.wix.com/en/article/velo-about-mixins) provide functionality that other elements can inherit and use. ",
          " ",
          " Mixins are not elements. You cannot add mixins to a page in the Editor like other `$w` elements, and mixins are not meant to be used directly ",
          " in your code. ",
          "  ",
          " For example, you would not write code like this, because it is out of context: ",
          "",
          " ```javascript",
          " $w(\"#ViewportMixin\").onViewportEnter( (event) => {",
          "    let targetId = event.target.id; ",
          " });",
          " ```",
          "",
          " Instead, you can code the following if `myElement` is an element that ",
          " \"mixes in\" `ViewportMixin`. ",
          "",
          " ```javascript",
          " $w(\"#myElement\").onViewportEnter( (event) => {",
          "    let targetId = event.target.id; ",
          " });",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "onViewportEnter",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element enters the viewport." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 40,
              "filename": "ViewportMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element is displayed\n in the viewable part of the current window.",
            "description":
              [ "An element enters the viewport when the page is scrolled to show any",
                " part of the element. An element also enters the viewport if it was",
                " [hidden]($w.HiddenMixin.html#hidden) or [collapsed]($w.CollapsedMixin.html#collapsed)",
                " and is then shown or expanded in the viewable part of the current window. `onViewportEnter()` ",
                " is not fired for [hidden]($w.HiddenMixin.html#hidden) or [collapsed]($w.CollapsedMixin.html#collapsed) ",
                " elements even if they are scrolled into view.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links":
              [ "[onViewportLeave( )](#onViewportLeave)" ],
            "examples":
              [ { "title": "Get the ID of the element that has entered the viewport",
                  "body":
                    [ "$w(\"#myElement\").onViewportEnter( (event) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "viewportEnter" } },
      { "name": "onViewportLeave",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the element leaves the viewport." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 85,
              "filename": "ViewportMixin.es6" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an element is no longer\n displayed in the viewable part of the current window.",
            "description":
              [ "An element leaves the viewport when the page is scrolled so that the",
                " element is completely out of view. An element also leaves the viewport",
                " if it was shown or expanded and is then [hidden]($w.HiddenMixin.html#hidden)",
                " or [collapsed]($w.CollapsedMixin.html#collapsed) from the viewable part",
                " of the current window.  `onViewportLeave()` ",
                " is not fired for [hidden]($w.HiddenMixin.html#hidden) or [collapsed]($w.CollapsedMixin.html#collapsed) ",
                " elements even if they are scrolled out of view.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events)." ],
            "links":
              [ "[onViewportEnter( )](#onViewportEnter)" ],
            "examples":
              [ { "title": "Get the ID of the element that has left the viewport",
                  "body":
                    [ "$w(\"#myElement\").onViewportLeave( (event) => {",
                      "  let targetId = event.target.id; // \"myElement\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "viewportLeave" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }