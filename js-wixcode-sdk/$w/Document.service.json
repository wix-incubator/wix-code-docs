{ "name": "Document",
  "memberOf": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 31,
      "filename": "document.js" },
  "docs":
    { "summary": "A [Document](https://support.wix.com/en/article/wix-editor-managing-your-sites-pages) is a complete web page, which consists of a Header, Page, and Footer.",
      "description":
        [ "Select the current document using: `$w(\"Document\")`." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Document.Accessibility",
        "locations":
          [ { "lineno": 76,
              "filename": "document.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('Document').accessibility.ariaCurrent = 'page';",
                      "$w('Document').accessibility.ariaDescribedBy = $w('#documentDescription');",
                      "$w('Document').accessibility.ariaDisabled = false;",
                      "$w('Document').accessibility.ariaExpanded = true;",
                      "$w('Document').accessibility.ariaHasPopup = 'false';",
                      "$w('Document').accessibility.ariaLabel = 'Main document content';",
                      "$w('Document').accessibility.ariaLabelledBy = $w('#documentTitle');",
                      "$w('Document').accessibility.ariaLive = 'polite';",
                      "$w('Document').accessibility.ariaPressed = 'false';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myDocumentAccessibility = $w(\"#myDocument\").accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "background",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Document.BackgroundOptions",
        "locations":
          [ { "lineno": 41,
              "filename": "document.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the document's background, such as its image or video source.",
            "links": [],
            "examples":
              [ { "title": "Get the background information",
                  "body":
                    [ "let backgroundOpts = $w(\"#myElement\").background;",
                      "",
                      "let bgSrc = backgroundOpts.src;",
                      "// \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the Media Manager",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\";" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the web",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"http://placehold.it/250x250\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "children",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.Node" ] },
        "locations":
          [ { "lineno": 54,
              "filename": "document.js" } ],
        "docs":
          { "summary": "Gets the document's Header, Page, and Footer.",
            "links":
              [ "[Header]($w.Header.html)",
                "[Page]($w.Page.html)",
                "[Footer]($w.Footer.html)" ],
            "examples":
              [ { "title": "Get the document's children",
                  "body":
                    [ "let docChildren = $w(\"Document\").children;",
                      "",
                      "let firstChildType = docChildren[0].type;   // \"$w.Page\"",
                      "let secondChildType = docChildren[1].type;  // \"$w.Header\"",
                      "let thirdChildType = docChildren[2].type;   // \"$w.Footer\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "type",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 68,
              "filename": "document.js" } ],
        "docs":
          { "summary": "Gets the document's type.",
            "description":
              [ "Gets the string `\"$w.Document\"`." ],
            "links": [],
            "examples":
              [ { "title": "Get the document's type",
                  "body":
                    [ "let docType = $w(\"Document\").type;  // \"$w.Document\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 106,
              "filename": "document.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaCurrent",
              "type": "string",
              "doc": "Indicates whether the element is currently active or selected in a set of related items. This allows assistive technologies to relay to site visitors which element in a set is currently in focus. \nOnly 1 element in a set should have a value other than `'false'` at any time to ensure that assistive technologies correctly identify which element is currently in focus or active.\n\nSupported values: \n- `'true'`: Represents the current element in an unordered set of related elements.\n- `'false'`: Indicates that the element in a set isn't currently active or selected.\n- `'page'`: Represents the current page in a multi-page site.\n- `'step'`: Marks the currently active step in a multi-step process such as a checkout flow.\n- `'date'`: Represents the currently selected date in a calendar.\n\nIf `ariaCurrent` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies at all.",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(\"#myElement\").accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDisabled",
              "type": "boolean",
              "doc": "Indicates to assistive technologies that an interactive element is currently disabled, even if it's visible. When `true`, assistive technologies inform site visitors that the element can't be interacted with. When `false` or not set, the element is considered enabled.",
              "optional": true },
            { "name": "ariaExpanded",
              "type": "boolean",
              "doc": "Indicates to assistive technology users whether the element is currently expanded or collapsed. `ariaExpanded` helps screen readers understand when content is displayed or hidden as a result of site visitor interaction on a site. If `ariaExpanded` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies at all.",
              "optional": true },
            { "name": "ariaHasPopup",
              "type": "string",
              "doc": "Indicates to assistive technology users whether an element triggers an interactive popup such as a menu or dropdown. If `ariaHasPopup` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies at all.\n\nSupported values: `'true'`, `'false'`",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(\"#myElement\").accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaLive",
              "type": "string",
              "doc": "Sets or gets how to announce changes to an element for site visitors who rely on screen readers. This property allows you to manage the timing and urgency of notifications regarding updates, status changes, or errors for an element. \n\nUse `ariaLive` only when necessary, as excessive or unnecessary announcements can lead to confusion or overload for screen reader users. \nIf you don't set a value, the property defaults to the value set in the accessibility panel in the editor, or is otherwise `'off'`. \n\nSupported values: \n- `'polite'`: Updates are announced at the next available opportunity without interrupting the current speech of the screen reader. Useful for non-urgent notifications or messages. \n- `'assertive'`: Updates are announced immediately, interrupting any ongoing speech. Intended for urgent and critical alerts.\n- `'off'`: No live announcements are made when the content of the element changes.",
              "optional": true },
            { "name": "ariaPressed",
              "type": "string",
              "doc": "Indicates to assistive technology users whether the element is currently pressed. `ariaPressed` is only relevant for buttons that act as toggles or have a pressed/unpressed state. If `ariaPressed` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies at all. \n\nSupported values: `'true'`, `'false'`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BackgroundOptions",
        "locations":
          [ { "lineno": 1,
              "filename": "document.js" } ],
        "docs":
          { "summary": "An object used by the `background` property that contains the background options.",
            "links":
              [ "[background](#background)" ],
            "examples":
              [ { "title": "Get the background information",
                  "body":
                    [ "let backgroundOpts = $w(\"#myElement\").background;",
                      "",
                      "let bgSrc = backgroundOpts.src;",
                      "// \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\"" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the Media Manager",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\";" ],
                  "extra":
                    {  } },
                { "title": "Set the background image to be an image from the web",
                  "body":
                    [ "$w(\"#myElement\").background.src = \"http://placehold.it/250x250\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "src",
              "type": "string",
              "doc": "The file location of the background image.\n\n Setting the `src` property changes the\n displayed image or video to the image or video found at the new `src` value.\n\n Getting the `src` property returns the\n location of the current image or video file.\n\n Images can either be from the [Media Manager](https://support.wix.com/en/article/about-the-media-manager)\n or an external image from any web location. Videos must come from the\n [Media Manager](https://support.wix.com/en/article/about-the-media-manager).\n\n The URL formats supported are:\n\n + Images from the Media Manager:\n   `wix:image://v1/<uri>/<filename>#originWidth=<width>&originHeight=<height>[&watermark=<watermark_manifest_string>]`\n + Videos from the Media Manager:\n   `wix:video://v1/<video_uri>/<filename>#posterUri=<poster_uri>&posterWidth=<width>&posterHeight=<height>`\n + Images from the web:\n   `http(s)://<image url>`" } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }