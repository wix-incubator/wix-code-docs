{ "name": "TextInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.TextInputMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 17,
      "filename": "TextInput.es6" },
  "docs":
    { "summary": "An input element for capturing small amounts of text.",
      "description":
        [ "A text input is configured to receive",
          " <a href=\"https://www.wix.com/support/html5/article/text-input-settings\" target=\"_blank\">different types",
          " of information</a>, such as strings, numbers, or passwords." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "inputType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 215,
              "filename": "TextInput.es6" },
            { "lineno": 257,
              "filename": "TextInput.es6" } ],
        "docs":
          { "summary": "Sets or gets the input type of an Input element.",
            "description":
              [ "Setting the `inputType` property sets what type of data a",
                " user can enter into the text input element. However, it does not limit",
                " your ability to change the value programmatically.",
                "",
                " Getting the `inputType` property gets what type of data a",
                " user can enter into the text input element.",
                "",
                " The text input types are:",
                "",
                " + `\"text\"`: Can contain any type of character.",
                " + `\"password\"`: A password field. Text is hidden with bullets (•••).",
                " + `\"number\"`: A valid number.",
                " + `\"email\"`: A valid email address.",
                " + `\"url\"`: A valid web address.",
                " + `\"tel\"`: Can contain only digits and certain symbols.",
                "",
                "",
                " You can also set an element's `inputType` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-type.png)" ],
            "links": [],
            "examples":
              [ { "title": "Gets a text input's input type",
                  "body":
                    [ "let type = $w(\"#myTextInput\").inputType;  // \"email\"" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's input type",
                  "body":
                    [ "$w(\"#myTextInput\").inputType = \"email\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 82,
              "filename": "TextInput.es6" },
            { "lineno": 119,
              "filename": "TextInput.es6" } ],
        "docs":
          { "summary": "Sets or gets the maximum value for a text input element whose\n type is set to **Number**.",
            "description":
              [ "Setting the `max` property restricts users from changing",
                " the text input's value to a number greater than `max` if the",
                " text input is set to be a **Number** type. However, it does not limit",
                " your ability to change the value to a number greater than `max`",
                " programmatically.",
                "",
                " Set `max` to `undefined` to remove the current maximum value limitation.",
                "",
                " Getting the `max` property returns the maximum value a user",
                " can enter into the text input.",
                "",
                " You can also set an element's `max` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-max_value.png)" ],
            "links":
              [ "[min](#min)" ],
            "examples":
              [ { "title": "Gets a text input's max value",
                  "body":
                    [ "let maxVal = $w(\"#myTextInput\").max;  // 200" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's max value",
                  "body":
                    [ "$w(\"#myTextInput\").max = 200;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 149,
              "filename": "TextInput.es6" },
            { "lineno": 185,
              "filename": "TextInput.es6" } ],
        "docs":
          { "summary": "Sets or gets the minimum value for a text input element whose\n type is set to **Number**.",
            "description":
              [ "Setting the `min` property restricts users from changing",
                " the text input's value to a number lower than `min` if the",
                " text input is set to be a **Number** type. However, it does not limit",
                " your ability to change the value to a number lower than `min`",
                " programmatically.",
                "",
                " Set `min` to `undefined` to remove the current minimum value limitation.",
                "",
                " Getting the `min` property returns the minimum value a user",
                " can enter into the text input.",
                "",
                " You can also set an element's `min` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-min_value.png)" ],
            "links":
              [ "[max](#max)" ],
            "examples":
              [ { "title": "Gets a text input's min value",
                  "body":
                    [ "let minVal = $w(\"#myTextInput\").min;  // 100" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's min value",
                  "body":
                    [ "$w(\"#myTextInput\").min = 100;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 285,
              "filename": "TextInput.es6" } ],
        "docs":
          { "summary": "Gets an object containing information about the text input's styles.",
            "description":
              [ "The following styles can be used with text input elements:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a text input's styles, gets or sets the styles of the",
                " text input's regular state. It does not set the styles of the text input's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 41,
              "filename": "TextInput.es6" },
            { "lineno": 75,
              "filename": "TextInput.es6" } ],
        "docs":
          { "summary": "Sets or gets a text input's value.",
            "description":
              [ "To reset the text input, restoring any placeholder text, set the value",
                " property to `null` or `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Changing a text input's `value` in code does not trigger an `onChange` event.\n\n Using the **Input Settings** panel in the Editor you can set the type of\n a text input. That type is used only for validation purposes. The value\n returned by the `value` property of a text input is always a string,\n regardless of the type set in the Editor.\n\n If an element is connected to a dataset, setting the element's `value`\n in code does not set the value of the connected field in the dataset.\n That means if you use the dataset to perform a submit, the value changed\n in code is not reflected in the submitted item.\n\n To submit the new value using a dataset, set the field's value using the\n [`setFieldValue()`](wix-dataset.html#setFieldValue) function before\n performing the submit." ] } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedContent":
    [ { "icon": "example",
        "text": "Reviews",
        "url": "https://www.wix.com/code/home/example/Reviews" },
      { "icon": "example",
        "text": "Input Repeaters",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-input-repeaters" } ],
  "FAQs":
    [ { "title": "What's the difference between a text input, text box, and rich text box?",
        "markdown": "All 3 elements are used for entering and editing text. So what's the difference between them?\n\n*   Text Input: \n    *   For entering or editing small amounts of text or numbers.\n    *   Connect to Text and Number fields in a collection.\n*   Text Box: \n    *   For entering or editing large amounts of text, including multiline text\n    *   Connect to Text and Number fields in a collection.\n*   Rich Text Box: \n    *   For entering, editing, and formatting rich text. It supports bold, underline, italics character styling, 2 heading levels, paragraph style, text alignment, and bulleted and numbered lists.\n    *   Connect to Rich Text fields in a collection." },
      { "title": "What is the difference between the 'max' and 'maxLength' properties?",
        "markdown": "The [`max`](https://www.wix.com/code/reference/$w.TextInput.html#max) property is used on a text input set to receive numbers. The [`max`](https://www.wix.com/code/reference/$w.TextInput.html#max) you set determines the largest number site visitors can enter into the text input.\n\nThe [`maxLength`](https://www.wix.com/code/reference/$w.TextInputMixin.html#maxLength) property is used on a text input set to receive text or password. The [`maxLength`](https://www.wix.com/code/reference/$w.TextInputMixin.html#maxLength) you set determines the number of characters site visitors can enter into the text input." },
      { "title": "What is the difference between 'onKeyPress' and 'onChange' event handlers?",
        "markdown": "[`onKeyPress`](https://www.wix.com/code/reference/$w.TextInput.html#onKeyPress) applies when a site visitor presses a single key while the cursor is inside an input element. \n\n[`onChange`](https://www.wix.com/code/reference/$w.TextInput.html#onChange) applies when a visitor changes the value of an input element. If a visitor is typing in an input, [`onChange`](https://www.wix.com/code/reference/$w.TextInput.html#onChange) will run only when the visitor clicks elsewhere on the page. \n\nNote that [`onChange`](https://www.wix.com/code/reference/$w.TextInput.html#onChange) also applies to elements that aren't inputs, such as when a slideshow moves to a new slide, or when the current page of a pagination bar changes.\n\nTo see both these event handlers in action, see the [Search Example](https://www.google.com/url?q=https://www.wix.com/code/home/example/Search&sa=D&ust=1552298432532000&usg=AFQjCNECRalMqS7GXagKutAoLtRDfTWkfA)." },
      { "title": "How do I reset the input to show the placeholder text?",
        "markdown": "To reset the text input, restoring any placeholder text, set the [`value`](https://www.wix.com/code/reference/$w.TextInput.html#value) property to `null` or `undefined`." } ] }