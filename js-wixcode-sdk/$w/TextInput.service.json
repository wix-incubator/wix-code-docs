{ "name": "TextInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.LabelMixin",
      "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.TextInputMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "TextInput.js" },
  "docs":
    { "summary": "[Text input](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-text-input) is an element for capturing small amounts of text.",
      "description":
        [ "A text input is configured to receive",
          "[different types of information](https://support.wix.com/en/article/input-settings), such as strings, numbers, or passwords." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.TextInput.Accessibility",
        "locations":
          [ { "lineno": 317,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) of the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. Set the accessibility properties to design your elements to be more inclusive and usable to users with visual, auditory, motor, and or cognitive disabilities. The accessibility object only affects how assistive technologies read and present site content to users. It doesn't affect the appearance, functionality, or SEO of your site. ",
                "",
                ">**Note:** Incorrect use of ARIA can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myTextInput').accessibility.ariaDescribedBy = $w('#descriptionText');",
                      "$w('#myTextInput').accessibility.ariaExpanded = false;",
                      "$w('#myTextInput').accessibility.ariaHasPopup = false;",
                      "$w('#myTextInput').accessibility.ariaInvalid = true;",
                      "$w('#myTextInput').accessibility.ariaLabel = 'text input field';",
                      "$w('#myTextInput').accessibility.ariaLabelledBy = $w('#labelText');",
                      "$w('#myTextInput').accessibility.ariaRequired = true;" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myTextInputAccessibility = $w('#myTextInput').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "inputType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 148,
              "filename": "TextInput.js" },
            { "lineno": 187,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the input type of an Input element. Does not change the type of data stored in the text input's `value` property, which will remain a string.",
            "description":
              [ "Setting the `inputType` property sets what type of data a",
                " user can enter into the text input element. However, it does not limit",
                " your ability to change the value programmatically.",
                "",
                " Regardless of the type of data entered, the data will be stored as a string in the text input's `value` property. ",
                " For example, if the user enters the number 42, the text input's value will hold the string \"42\". Any required type conversions will need to be implemented manually in page code.",
                "",
                " Getting the `inputType` property gets what type of data a",
                " user can enter into the text input element.",
                "",
                " The text input types are:",
                "",
                " + `\"text\"`: Can contain any type of character.",
                " + `\"password\"`: A password field. Text is hidden with bullets (•••).",
                " + `\"number\"`: A valid number.",
                " + `\"email\"`: A valid email address.",
                " + `\"url\"`: A valid web address.",
                " + `\"tel\"`: Can contain only digits and certain symbols.",
                "",
                "",
                " You can also set an element's `inputType` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-type.png)" ],
            "links": [],
            "examples":
              [ { "title": "Gets a text input's input type",
                  "body":
                    [ "let type = $w(\"#myTextInput\").inputType;  // \"email\"" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's input type",
                  "body":
                    [ "$w(\"#myTextInput\").inputType = \"email\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 72,
              "filename": "TextInput.js" },
            { "lineno": 103,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum value for a text input element whose\n type is set to **Number**.",
            "description":
              [ "Setting the `max` property restricts users from changing",
                " the text input's value to a number greater than `max` if the",
                " text input is set to be a **Number** type. However, it does not limit",
                " your ability to change the value to a number greater than `max`",
                " programmatically.",
                "",
                " Set `max` to `undefined` to remove the current maximum value limitation.",
                "",
                " Getting the `max` property returns the maximum value a user",
                " can enter into the text input.",
                "",
                " You can also set an element's `max` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-max_value.png)" ],
            "links":
              [ "[min](#min)" ],
            "examples":
              [ { "title": "Gets a text input's max value",
                  "body":
                    [ "let maxVal = $w(\"#myTextInput\").max;  // 200" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's max value",
                  "body":
                    [ "$w(\"#myTextInput\").max = 200;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 110,
              "filename": "TextInput.js" },
            { "lineno": 141,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the minimum value for a text input element whose\n type is set to **Number**.",
            "description":
              [ "Setting the `min` property restricts users from changing",
                " the text input's value to a number lower than `min` if the",
                " text input is set to be a **Number** type. However, it does not limit",
                " your ability to change the value to a number lower than `min`",
                " programmatically.",
                "",
                " Set `min` to `undefined` to remove the current minimum value limitation.",
                "",
                " Getting the `min` property returns the minimum value a user",
                " can enter into the text input.",
                "",
                " You can also set an element's `min` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-min_value.png)" ],
            "links":
              [ "[max](#max)" ],
            "examples":
              [ { "title": "Gets a text input's min value",
                  "body":
                    [ "let minVal = $w(\"#myTextInput\").min;  // 100" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's min value",
                  "body":
                    [ "$w(\"#myTextInput\").min = 100;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "numberSpinnerHidden",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "defaultValue": "false",
        "locations":
          [ { "lineno": 238,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Indicates if the number spinner is hidden or visible for a numeric text input element.",
            "description":
              [ "If `numberSpinnerHidden` is `true`, and the [`inputType`]($w/text-input/input-type) is `'number'`, the number spinner for the text input element is not shown.",
                "Use [`hideNumberSpinner()`]($w/text-input/hide-number-spinner) to hide the number spinner and [`showNumberSpinner()`]($w/text-input/show-number-spinner) to show it.  ",
                "  ",
                "The spinner allows site visitors to increment and decrement the numeric  value of the text input.  ",
                "![Input Settings pane](images/textInputSpinner.png)" ],
            "links": [],
            "examples":
              [ { "title": "Check if a text input's number spinner is hidden",
                  "body":
                    [ "let isHidden = $w('#myTextInput').numberSpinnerHidden;  // false" ],
                  "extra":
                    {  } },
                { "title": "Toggle an text input's number spinner hidden state",
                  "body":
                    [ "if ($w('#myTextInput').numberSpinnerHidden) {",
                      "  $w('#myTextInput').showNumberSpinner();",
                      "}",
                      "else {",
                      "  $w('#myTextInput').hideNumberSpinner();",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 194,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the text input's styles.",
            "description":
              [ "The following styles can be used with text input elements:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a text input's styles, gets or sets the styles of the",
                " text input's regular state. It does not set the styles of the text input's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "tabIndex",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 378,
              "filename": "TextInput.js" },
            { "lineno": 393,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Sets or gets the tab index of an element on a site page.",
            "description":
              [ "The `tabIndex` property determines the order in which elements can be focused on or selected using the tab key on the keyboard. By default, web browsers only assign a tab index to interactive elements such as links and form controls. When set to `0`, the element becomes part of the keyboard tab and focus order. When set to `-1`, the element isn't part of the keyboard order but can still become focusable using the [`focus()`](#focus) function.",
                "",
                "Supported values: `-1`, `0`" ],
            "links": [],
            "examples":
              [ { "title": "Set the tab index of an element",
                  "body":
                    [ "const myElement = $w(\"#myElement\");",
                      "myElement.tabIndex = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "validity",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.ValidatableMixin.ValidityState",
        "locations":
          [ { "lineno": 222,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Gets a ValidityState object that contains\n detailed information about the validity states of the element.",
            "links":
              [ "[validationMessage](#validationMessage)" ],
            "examples":
              [ { "title": "Log ValidityState info",
                  "body":
                    [ "let validityObj = $w(\"#myElement\").validity;",
                      "",
                      "let customError = validityObj.customError;          // true",
                      "let valid = validityObj.valid;                      // false",
                      "let valueMissing = validityObj.valueMissing;        // false",
                      "let typeMismatch = validityObj.typeMismatch;        // false",
                      "let patternMismatch = validityObj.patternMismatch;  // false",
                      "let tooLong = validityObj.tooLong;                  // false",
                      "let tooShort = validityObj.tooShort;                // false",
                      "let rangeUnderflow = validityObj.rangeUnderflow;    // false",
                      "let rangeOverflow = validityObj.rangeOverflow;      // false",
                      "let fileNotUploaded = validityObj.fileNotUploaded;  // false",
                      "let stepMismatch = validityObj.stepMismatch;        // false",
                      "let badInput = validityObj.badInput;                // false",
                      "let invalidTime = validityObj.invalidTime;          // false",
                      "let invalidDate = validityObj.invalidDate;          // false" ],
                  "extra":
                    {  } },
                { "title": "Check if a number input is within a set range",
                  "body":
                    [ "$w('#myTextInput').min = 1;",
                      "$w('#myTextInput').max = 100;",
                      "$w('#submitButton').onClick( (event) => {",
                      "    if (!$w('#myTextInput').validity.rangeOverflow && ",
                      "    !$w('#myTextInput').validity.rangeUnderflow) {",
                      "        $w('#messageText').text = '';",
                      "    }",
                      "    else {",
                      "        $w('#messageText').text = 'Input a number between 1 and 100';",
                      "    }",
                      "})" ],
                  "extra":
                    { "description": "This example sets a min and max value for a number input. It displays a message if the site visitor enters a number outside of the set range." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 25,
              "filename": "TextInput.js" },
            { "lineno": 65,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Sets or gets a text input's value. This value will always be of type string, regardless of the text input's [`inputType`](#inputtype).",
            "description":
              [ "To reset the text input, restoring any placeholder text, set the value",
                " property to `null` or `undefined`.",
                "",
                " Changing a text input's `value` property to `null` or `undefined` will set the element's `valid` property to `false` and cause the element to visually indicate that it's contents are invalid. For example, a black outline might change to a red outline. ",
                " You can remove this visual indication until the next time the element is updated by calling [`resetValidityIndication()`](#resetvalidityindication).",
                "",
                "> **Notes:**",
                "> + Changing a text input's `value` in code does not trigger an `onChange` event.",
                ">",
                "> + Using the **Input Settings** panel in the Editor you can set the type of",
                ">   a text input. That type is used only for validation purposes. The value",
                ">   returned by the `value` property of a text input is always a string,",
                ">   regardless of the type set in the Editor.",
                ">",
                "> + If an element is connected to a dataset, setting the element's `value`",
                ">   in code does not set the value of the connected field in the dataset.",
                ">   That means if you use the dataset to perform a submit, the value changed",
                ">   in code is not reflected in the submitted item.",
                ">",
                ">",
                "> + To submit the new value using a dataset, set the field's value using the",
                ">   [`setFieldValue()`](wix-dataset/dataset/set-field-value) function before",
                ">   performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } },
                { "title": "Remove visual indication of invalid contents after restoring placeholder text",
                  "body":
                    [ "$w(\"#myElement\").value = undefined;",
                      "$w(\"#myElement\").resetValidityIndication();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "hideNumberSpinner",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 256,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Hides the number spinner for a numeric text input.",
            "description":
              [ "The `hideNumberSpinner()` function returns a Promise when the number spinner for a numeric text input element is hidden.",
                "A numeric text input element is a text input that has the [`inputType`]($w/text-input/input-type) property set to `'number'`.   ",
                "Calling  `hideNumberSpinner()` sets the [`numberSpinnerHidden`]($w/text-input/number-spinner-hidden) property to `true`.  ",
                "  ",
                "The spinner allows site visitors to increment and decrement the numeric  value of the text input.  ",
                "![Input Settings pane](images/textInputSpinner.png)" ],
            "links": [],
            "examples":
              [ { "title": "Hide the number spinner for a text input element",
                  "body":
                    [ "$w('#myTextInput').hideNumberSpinner();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.TextInputValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 286,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "showNumberSpinner",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 271,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "Shows the number spinner for a numeric text input.",
            "description":
              [ "The `showNumberSpinner()` function returns a Promise when the number spinner for a numeric text input element is shown. ",
                "A numeric text input element is a text input that has the [`inputType`]($w/text-input/input-type) property set to `'number'`.  ",
                "Calling  `showNumberSpinner()` sets the [`numberSpinnerHidden`]($w/text-input/number-spinner-hidden) property to `false`.   ",
                "  ",
                "The spinner allows site visitors to increment and decrement the numeric  value of the text input.  ",
                "![Input Settings pane](images/textInputSpinner.png)" ],
            "links": [],
            "examples":
              [ { "title": "Show the number spinner for a text input element",
                  "body":
                    [ "$w('#myTextInput').showNumberSpinner();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 355,
              "filename": "TextInput.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaExpanded",
              "type": "boolean",
              "doc": "Indicates to assistive technology users whether the element is currently expanded or collapsed. `ariaExpanded` helps screen readers understand when content is displayed or hidden as a result of user interaction on your site. If `ariaExpanded` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true },
            { "name": "ariaInvalid",
              "type": "boolean",
              "doc": "Indicates to assistive technology users whether an element’s input value is invalid or if a required input field is empty. When `true`, assistive technologies alert users that the element’s input value doesn’t meet the expected criteria or that the required field is empty. When `false`, the value entered is valid or the field isn’t required. This helps assistive technology users identify and correct errors in form submissions.",
              "optional": true },
            { "name": "ariaHasPopup",
              "type": "string",
              "doc": "Indicates to assistive technology users whether an element triggers an interactive popup such as a menu or dropdown. If `ariaHasPopup` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.\n\nSupported values: `'true'`, `'false'`",
              "optional": true },
            { "name": "ariaRequired",
              "type": "string",
              "doc": "Indicates to assistive technology users whether an input element has a required field or action. If `ariaRequired` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies. The `ariaRequired` property doesn't inform assistive technologies if the required input value is valid.\n\nSupported values: `'true'`, `'false'`",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./textinput/guides/CSS Classes.md" } ],
  "relatedContent":
    [ { "icon": "example",
        "text": "Input Repeaters",
        "url": "https://www.wix.com/velo/forum/tips-tutorials-examples/example-input-repeaters" },
      { "icon": "example",
        "text": "Signature Input",
        "url": "https://www.wix.com/velo/example/signature-input" } ],
  "FAQs":
    [ { "title": "What's the difference between a text input, text box, and rich text box?",
        "markdown": "All 3 elements are used for entering and editing text. So what's the difference between them?\n\n*   Text Input: \n    *   For entering or editing small amounts of text or numbers.\n    *   Connect to Text and Number fields in a collection.\n*   Text Box: \n    *   For entering or editing large amounts of text, including multiline text\n    *   Connect to Text and Number fields in a collection.\n*   Rich Text Box: \n    *   For entering, editing, and formatting rich text. It supports bold, underline, italics character styling, 2 heading levels, paragraph style, text alignment, and bulleted and numbered lists.\n    *   Connect to Rich Text fields in a collection." },
      { "title": "What is the difference between the 'max' and 'maxLength' properties?",
        "markdown": "The [`max`](https://www.wix.com/velo/reference/$w.TextInput.html#max) property is used on a text input set to receive numbers. The [`max`](https://www.wix.com/velo/reference/$w.TextInput.html#max) you set determines the largest number site visitors can enter into the text input.\n\nThe [`maxLength`](https://www.wix.com/velo/reference/$w.TextInputMixin.html#maxLength) property is used on a text input set to receive text or password. The [`maxLength`](https://www.wix.com/velo/reference/$w.TextInputMixin.html#maxLength) you set determines the number of characters site visitors can enter into the text input." },
      { "title": "What is the difference between 'onKeyPress' and 'onChange' event handlers?",
        "markdown": "[`onKeyPress`](https://www.wix.com/velo/reference/$w.TextInput.html#onKeyPress) applies when a site visitor presses a single key while the cursor is inside an input element. \n\n[`onChange`](https://www.wix.com/velo/reference/$w.TextInput.html#onChange) applies when a visitor changes the value of an input element. If a visitor is typing in an input, [`onChange`](https://www.wix.com/velo/reference/$w.TextInput.html#onChange) will run only when the visitor clicks elsewhere on the page. \n\nNote that [`onChange`](https://www.wix.com/velo/reference/$w.TextInput.html#onChange) also applies to elements that aren't inputs, such as when a slideshow moves to a new slide, or when the current page of a pagination bar changes.\n\nTo see both these event handlers in action, see the [Search Example](https://www.google.com/url?q=https://www.wix.com/code/home/example/Search&sa=D&ust=1552298432532000&usg=AFQjCNECRalMqS7GXagKutAoLtRDfTWkfA)." },
      { "title": "How do I reset the input to show the placeholder text?",
        "markdown": "To reset the text input, restoring any placeholder text, set the [`value`](https://www.wix.com/velo/reference/$w.TextInput.html#value) property to `null` or `undefined`." } ] }