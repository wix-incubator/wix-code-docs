{ "name": "Container",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.Background",
      "$w.ClickableMixin",
      "$w.ContainableMixin",
      "$w.EffectsMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Container.js" },
  "docs":
    { "summary": "A [container](https://support.wix.com/en/article/editor-x-using-containers) for Repeater items.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "onKeyPress",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "eventHandler",
              "type": "$w.KeyboardEventHandler",
              "doc": "The name of the function or\n the function expression to run when a key is pressed." } ],
        "ret":
          { "type": "$w.Element",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 18,
              "filename": "Container.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the cursor is inside the\n input element and a key is pressed.",
            "description":
              [ "A text input receives a `keyPress` event when a site visitor presses a key on",
                " the keyboard while the cursor is engaged inside the input element. A `keyPress`",
                " event is fired for printable and non-printable characters.",
                "",
                " You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
                "",
                "> **Notes:**",
                "> + Some browsers do not issue a key press event for certain keys,",
                ">   such as arrow keys or the shift key.",
                ">",
                ">",
                "> + When you retrieve the `value` from the `target` property of a [`KeyboardEvent`]($w.KeyboardEvent.html),",
                ">   you get the value of the target element before the key was pressed." ],
            "links": [],
            "examples":
              [ { "title": "Get the key that was pressed",
                  "body":
                    [ "$w(\"myElement\").onKeyPress( (event) => {",
                      "  let key = event.key;  // \"a\"",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Get all of the keyboard event's properties",
                  "body":
                    [ "$w(\"#myElement\").onKeyPress( (event) => {",
                      "  let key  = event.key;                 // \"A\"",
                      "  let shift = event.shiftKey;           // true",
                      "  let meta = event.metaKey;             // false",
                      "  let alt = event.altKey;               // false",
                      "  let ctrl = event.ctrlKey;             // false",
                      "  let value = event.target.value;       // string value of text inside \"#myElement\" before the last KeyPress event",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "keyPress" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }