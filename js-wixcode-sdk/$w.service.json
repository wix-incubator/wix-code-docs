{ "name": "$w",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 28,
      "filename": "wixCode.es6" },
  "docs":
    { "summary": "The `$w` namespace contains everything you need in order to work\n with your site's components.",
      "description":
        [ "It contains all of the UI elements, nodes, and",
          " events that make up your site. It also includes the [`$w()`]($w.html#w),",
          " [`onReady()`]($w.html#onReady), and [`at()`]($w.html#at) functions.",
          "",
          " The APIs in `$w` can only be used in front-end code.",
          "",
          " You do not need to import `$w`." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "$w",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "selector",
              "type": "string",
              "doc": "A selector or multiple comma-separated selectors." } ],
        "ret":
          { "type":
              [ "$w.Element",
                { "name": "Array",
                  "typeParams":
                    [ "$w.Element" ] } ],
            "doc": "A single selected element or an array of selected elements." },
        "locations":
          [ { "lineno": 42,
              "filename": "wixCode.es6" } ],
        "docs":
          { "summary": "Selects and returns elements from a page.",
            "description":
              [ "The `$w()` function selects single or multiple elements by ID or type.",
                "",
                " To select by ID, pass a selector string with the hash symbol",
                " (`#`) followed by the ID of the item you want to select (e.g. `\"#myElement\"`).",
                " The function returns the selected element object.",
                "",
                " To select by type, pass a selector string with the name of",
                " the type without the preceding `#` (e.g. `\"Button\"`). The function returns",
                " an array of the selected element objects. An array is returned even if one",
                " or no elements are selected.",
                "",
                " To select using multiple selectors, pass a selector string with",
                " multiple selectors separated by commas. The selectors in the",
                " comma-separated string can be ID selectors, type selectors, or a mixture of",
                " the two. The function returns an array of the selected element objects.",
                " An array is returned even if one or no elements are selected. If two or more",
                " selectors select the same element, it's still returned only once in the array." ],
            "links": [],
            "examples":
              [ { "title": "Select an element using its ID",
                  "body":
                    [ "let myElement = $w(\"#myElement\");",
                      "",
                      "let elementType = myElement.type; // \"$w.Type\"" ],
                  "extra":
                    {  } },
                { "title": "Select elements by type",
                  "body":
                    [ "let typeElements = $w(\"Type\");",
                      "",
                      "let firstOfType = typeElements[0];" ],
                  "extra":
                    {  } },
                { "title": "Select all the images on the page",
                  "body":
                    [ "let imageElements = $w(\"Image\");",
                      "",
                      "let firstImage = imageElements[0];" ],
                  "extra":
                    {  } },
                { "title": "Select elements using multiple selectors",
                  "body":
                    [ "let selected = $w(\"#myElement1, #myElement3, Type\");" ],
                  "extra":
                    {  } },
                { "title": "Hide all the page's images",
                  "body":
                    [ "$w(\"Image\").hide();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Most elements accessible for selection by `$w` have basic API properties and functions, \n like `id`, `type`, `show()`, `hide()`, and others. Use Corvid's autocomplete\n in the code panel to see which API functions and properties are available\n for each element." ] } },
      { "name": "at",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "context",
              "type": "$w.Event.EventContext",
              "doc": "An event context." } ],
        "ret":
          { "type": "$w.$w",
            "doc": "A selector function for the given context." },
        "locations":
          [ { "lineno": 137,
              "filename": "wixCode.es6" } ],
        "docs":
          { "summary": "Gets a selector function for a specific context.",
            "description":
              [ "The `at()` function returns a scoped selector where the scope is based on the",
                " context property. Usually, you will use `at()` in a event handler that handles",
                " events fired on an element contained in a repeater to get a [selector with",
                " repeated item scope]($w.Repeater.html#repeated-item-scope). The returned function",
                " selects the elements from the same repeater item where the event was fired." ],
            "links": [],
            "examples":
              [ { "title": "Select an element in a repeated item",
                  "body":
                    [ "$w.onReady( function () {",
                      "  $w(\"#myRepeatedImage\").onClick( (event) => {",
                      "    let $item = $w.at(event.context);",
                      "    $item(\"#myRepeatedText\").text = \"Selected\";",
                      "  } );",
                      "} )" ],
                  "extra":
                    { "description": "In this example, we have a repeater where each item contains an image and\n a text element. When an image is clicked, the value of the text element in\n the same repeated item is changed to \"Selected\". All the other text elements\n in the other repeated items are not affected." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onReady",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "initFunction",
              "type": "$w.ReadyHandler",
              "doc": "The name of the function or the function expression to run when the page has finished loading." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 89,
              "filename": "wixCode.es6" } ],
        "docs":
          { "summary": "Sets the function that runs when all the page elements have finished loading.",
            "description":
              [ "Use the `onReady()` function for code you want to run before the user starts",
                " interacting with your page.",
                "",
                " The following code should be placed inside the `onReady()` event handler:",
                "",
                " + Initialization of element properties: Example: setting a text element's initial text value.",
                " + Function calls on elements to set their initial state: Example: disabling a button.",
                " + Dynamic event handlers that you want bound when the page loads: Example: setting an event handler to be called when the mouse pointer enters an element.",
                "",
                "",
                " Static event handlers, those that are wired using the Properties panel",
                " in the Editor, are not placed inside the `onReady()` event handler.",
                "",
                " The `onReady()` function in the **Site** tab is called before the",
                " `onReady()` function in the **Page** tab.",
                "",
                " The `onReady()` event handler may be called twice during the page rendering",
                " process, once server-side and once client-side." ],
            "links":
              [ "[$w( )](#w)" ],
            "examples":
              [ { "title": "Run code in an anonymous function when the page loads",
                  "body":
                    [ "$w.onReady( function() {",
                      "  let pageTitle = $w(\"#page1\").title;",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Wait for a Promise to resolve",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "$w.onReady(function () {",
                      "  return wixData.query(\"myCollection\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w(\"#myTable\").rows = results.items;",
                      "    } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates the technique of returning a Promise so that the\n page doesn't load until the Promise resolves. Here, we wait for the query to\n finish and populate a table before displaying the page to users." } },
                { "title": "Where to place code",
                  "body":
                    [ "// Import statement go at the top of your code, outside of onReady()",
                      "import wixWindow from 'wix-window';",
                      "",
                      "// Initialization statements without $w() don't need to be in onReady()",
                      "let hideCount = 0;",
                      "",
                      "// Code you want to run when the page loads",
                      "$w.onReady(function () {",
                      "  console.log(`Device viewing site is: ${wixWindow.formFactor}`);",
                      "",
                      "  // Initialize an element property",
                      "  $w(\"#myTextElement\").text = \"Hover over to hide\";",
                      "",
                      "  // Call a function on an element to set its initial state",
                      "  $w(\"#buttonReset\").disable();",
                      "",
                      "  // Dynamic event handler to be bound when the page loads",
                      "  $w(\"#myTextElement\").onMouseIn( (event) => {",
                      "    event.target.hide();",
                      "    console.log(`Hidden ${++hideCount} times`);",
                      "    $w(\"#buttonReset\").enable();",
                      "  } );",
                      "} );",
                      "",
                      "// Static event handler",
                      "export function buttonReset_onClick(event) {",
                      "\t$w(\"#myTextElement\").show();",
                      "  $w(\"#buttonReset\").disable();",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates which code should be placed inside the `onReady()`\n event handler." } },
                { "title": "Use the Rendering API to avoid inserting an item twice",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixWindow from 'wix-window';",
                      "",
                      "let toInsert = {",
                      "  \"field1\": \"Some value\",",
                      "  \"field2\": \"Some other value\"",
                      "};",
                      "",
                      "$w.onReady(function () {",
                      "  if (wixWindow.rendering.env === \"browser\") {",
                      "    return wixData.insert(\"myCollection\", toInsert)",
                      "      .then( (item) => {",
                      "        $w(\"#myText\").text = item.title;",
                      "      } );",
                      "  }",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use the `env` property of the Rendering API to\n make sure an item is inserted into a collection only once." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Because `onReady()` code may be run twice, you need to be aware that if your\n `onReady()` code causes a side effect, such as inserting an item into a collection,\n that side effect might happen twice. To avoid a side effect from happening twice,\n use the [`wixWindow.rendering.env`](wix-window.rendering.html#env) to determine \n where your code is being executed." ] } } ],
  "callbacks":
    [ { "name": "EventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.Event",
              "doc": "The event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 3,
              "filename": "WixEvent.es6" } ],
        "docs":
          { "description":
              [ "Handles events." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ForItemCallback",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "$item",
              "type": "$w.$w",
              "doc": "A selector function with [repeated item scope](#repeated-item-scope)." },
            { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the current repeated item." },
            { "name": "index",
              "type": "number",
              "doc": "The index of the `itemData` object in the `data` array." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 581,
              "filename": "Repeater.es6" } ],
        "docs":
          { "description":
              [ "Runs for items in a repeater." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "GalleryItemChangedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.GalleryItemChangedEvent",
              "doc": "The event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 20,
              "filename": "GalleryItemChangedEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when a gallery moves to a new image.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "GalleryItemClickedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.GalleryItemClickedEvent",
              "doc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 3,
              "filename": "GalleryItemClickedEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when an image in a gallery is clicked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "GoogleMapClickEvent",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.GoogleMapClickEvent",
              "doc": "The mouse click event that occurred." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 4,
              "filename": "GoogleMapClickEvent.es6" },
            { "lineno": 10,
              "filename": "GoogleMapClickEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when google map / marker is clicked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "HtmlComponentMessageEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.HtmlComponentMessageEvent",
              "doc": "The HtmlComponent event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 4,
              "filename": "HtmlComponentMessageEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when the code in an HtmlComponent sends a message.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "HtmlElementEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.HtmlComponentMessageEvent",
              "doc": "The message event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 7,
              "filename": "HtmlComponent.es6" } ],
        "docs":
          { "description":
              [ "Handles events fired when a message is received from an HTML",
                " Component." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "IconMouseInEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.IconMouseInEvent",
              "doc": "The event that occurred." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 3,
              "filename": "IconMouseInEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when a user hovers over a star on the rating component.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ItemReadyEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "$item",
              "type": "$w.$w",
              "doc": "A selector function with [repeated item scope](#repeated-item-scope)." },
            { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the repeated item being created." },
            { "name": "index",
              "type": "number",
              "doc": "The index of the `itemData` object in the `data` array." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 441,
              "filename": "Repeater.es6" } ],
        "docs":
          { "description":
              [ "Handles repeater item ready events." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ItemRemovedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the repeated item being removed." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 536,
              "filename": "Repeater.es6" } ],
        "docs":
          { "description":
              [ "Handles repeater item removed events." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "KeyboardEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.KeyboardEvent",
              "doc": "The keyboard event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 4,
              "filename": "KeyboardEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when the keyboard is pressed.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "MouseEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.MouseEvent",
              "doc": "The mouse event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 4,
              "filename": "MouseEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when the mouse is clicked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "QuickActionBarItemClickedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.QuickActionBarItemClickedEvent",
              "doc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 4,
              "filename": "QuickActionBarItemClickedEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when an item in a quick action bar is clicked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ReadyHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "void" ] },
                "void" ] },
        "locations":
          [ { "lineno": 81,
              "filename": "wixCode.es6" } ],
        "docs":
          { "summary": "Function that runs when all page elements have finished loading.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TableCellEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.TableCellEvent",
              "doc": "The table cell event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 14,
              "filename": "TableCellEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when a table cell is selected.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TableRowEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.TableRowEvent",
              "doc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 14,
              "filename": "TableRowEvent.es6" } ],
        "docs":
          { "summary": "Handles events fired when a table row is selected.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "Validator",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "value",
              "type":
                [ "string",
                  { "name": "Array",
                    "typeParams":
                      [ "$w.UploadButton.File" ] },
                  "boolean" ],
              "doc": "The value of the element being validated." },
            { "name": "reject",
              "type": "Function",
              "doc": "A function that invalidates the element with the specified message." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 134,
              "filename": "ValidatableMixin.es6" } ],
        "docs":
          { "summary": "Function that runs when custom validation is checked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    {  },
  "menuSections": "APIs",
  "displayName": "Wix Editor Elements ($w)",
  "relatedContent":
    [ { "icon": "example",
        "text": "Callout and Highlight",
        "url": "https://www.wix.com/code/home/example/Callout-and-Highlight" },
      { "icon": "example",
        "text": "JavaScript Playground",
        "url": "https://www.wix.com/code/home/example/JavaScript-Playground" },
      { "icon": "example",
        "text": "Hide and Show Elements",
        "url": "https://www.wix.com/code/home/example/Hide-and-Show-Elements" },
      { "icon": "example",
        "text": "Collapse Elements",
        "url": "https://www.wix.com/code/home/example/Collapse-Elements" },
      { "icon": "example",
        "text": "Change Layout",
        "url": "https://www.wix.com/code/home/example/Change-Layout" },
      { "icon": "example",
        "text": "Promotional Preloader",
        "url": "https://www.wix.com/code/home/example/Promotional-Preloader" },
      { "icon": "video",
        "text": "How to Add Custom Interactions with JavaScript",
        "url": "https://www.youtube.com/watch?v=4hym1nbqua8" } ],
  "FAQs":
    [ { "title": "Can I use $w in backend code?",
        "markdown": "No. The `$w` functionality is used to work with a page and its elements. Backend code is not related to a specific page and therefore using `$w` there would have no meaning. You can however, use `$w` in page code and send values you retrieve to backend code." },
      { "title": "Elements in a repeater have the same ID for each repeater item. So how do I select an element in a specific repeater item?",
        "markdown": "You can get an element from a specific repeater item by using the [`at()`](https://www.wix.com/code/reference/$w.html#at) function. You pass the function a [`context`](https://www.wix.com/code/reference/$w.Event.html#context) from an event handler's `event` property. The function returns a selector function that selects elements from the same item that triggered the event whose context you passed it. You can then use that selector to select the specific element you want." },
      { "title": "Why are my $w() selections not working?",
        "markdown": "You can only select page elements using [`$w()`](https://www.wix.com/code/reference/$w.html#$w) when the page is ready. If you use [`$w()`](https://www.wix.com/code/reference/$w.html#$w) in code that runs before the page is ready, like global page code, the page elements are not ready to be selected. Use [`$w()`](https://www.wix.com/code/reference/$w.html#$w) to select elements in the [`onReady()`](https://www.wix.com/code/reference/$w.html#onReady) event handler, element event handlers, or any functions called by the above. \n\nAlso, be sure to check your selection syntax is correct. When selecting individual elements, make sure you have the proper ID and include a hash. For example: `$w(\"#myElement\")`. When selecting elements by type, make sure you have the proper type name and don't include a hash or `$w.` before the type name. For example: `$w(\"Text\")`. " } ] }