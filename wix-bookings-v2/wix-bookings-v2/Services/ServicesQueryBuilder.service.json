{
  "name": "ServicesQueryBuilder",
  "memberOf": "wix-bookings-v2.Services",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-bookings.v2-service.services.services-query-builder",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "eq",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property equals the specified value.",
        "description": [
          "The `eq()` function refines a `ServicesQueryBuilder` to match only items where the value of the specified `propertyName` equals the specified `value`.",
          "`eq()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "Matching strings with `eq()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `eq` filter to a query",
            "body": [
              "const query = services.queryServices.eq('_id', 'some-id');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `eq` filter, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services",
              "    .queryServices()",
              "    .eq('_id', 'bb19b637-74ce-55d3-ae32-430b588051da')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "eq"
    },
    {
      "name": "exists",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property contains a value.",
        "description": [
          "The `exists()` function refines a `ServicesQueryBuilder` to only match items where the value of the specified `propertyName` doesn't equal null or undefined.",
          " `exists()` checks for either existence or non-existence based on the boolen parameter. Note that `exists()` does match items where the value of the specified `propertyName` is an empty string or an invalid value. `exists()` is only useful for properties which don't contain default values and therefore their values may be unassigned."
        ],
        "examples": [
          {
            "title": "Add an `exists` filter to a query",
            "body": [
              "const query = services.queryServices.exists('description', 'some-description');",
              ""
            ]
          },
          {
            "title": "Create a query, add an `exists` filter, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services",
              "    .queryServices()",
              "    .exists('description', 'some-description')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "exists"
    },
    {
      "name": "find",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-bookings-v2.Services.ServicesQueryResult"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns the query results.",
        "description": [
          "The `find()` function returns a Promise that resolves to the query results and metadata.",
          "The Promise is rejected if `find()` is called with insufficient permissions or if any of the previous functions used to refine the query are invalid."
        ],
        "examples": [
          {
            "title": "Run a query with no filters",
            "body": [
              "const query = services.queryServices.find();",
              ""
            ]
          },
          {
            "title": "Perform a `find` on a query",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services.queryServices().find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "find"
    },
    {
      "name": "hasAll",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `values`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "any"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property contains all of the specified values.",
        "description": [
          "The `hasAll()` function refines a `ServicesQueryBuilder` to match only items where the value of the specified `propertyName` equals all of the specified `values`.",
          "Matching strings with `hasAll()` is case-sensitive, so `'text'` isn't equal to `'Text'`.",
          "If the specified property is an array, `hasAll()` matches if that array's elements match all of the specified values."
        ],
        "examples": [
          {
            "title": "Add a `hasAll` filter to a query",
            "body": [
              "const query = services.queryServices.hasAll('labelIds', [",
              "  'red',",
              "  'blue',",
              "  'purple',",
              "]);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `hasAll` filter, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services",
              "    .queryServices()",
              "    .hasAll('labelIds', ['red', 'blue', 'purple'])",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "hasAll"
    },
    {
      "name": "hasSome",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `values`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "any"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property contains any of the specified values.",
        "description": [
          "The `hasSome()` function refines a `ServicesQueryBuilder` to match only items where the value of the specified `propertyName` equals any of the specified `values`.",
          "Matching strings with `hasSome()` is case-sensitive, so `'text'` isn't equal to `'Text'`.",
          "If the specified property is an array, `hasSome()` matches if any of that array's elements equal any of the specified values."
        ],
        "examples": [
          {
            "title": "Add a `hasSome` filter to a query",
            "body": [
              "const query = services.queryServices.hasSome('labelIds', [",
              "  'red',",
              "  'blue',",
              "  'purple',",
              "]);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `hasSome` filter, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services",
              "    .queryServices()",
              "    .hasSome('labelIds', ['red', 'blue', 'purple'])",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "hasSome"
    },
    {
      "name": "in",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to only match items where the specified property conatins any of the values in the provided array of values.",
        "description": [
          "The `in()` function refines a `ServicesQueryBuilder` to match only items where the specified `propertyName` is equal to any of the values in the provided array.",
          "Matching strings with `in()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `in` filter to a query",
            "body": [
              "const query = services.queryServices.in(",
              "  ['labelIds', 'colors'],",
              "  ['red', 'blue', 'purple']",
              ");",
              ""
            ]
          },
          {
            "title": "Create a query, add an `in` filter, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services",
              "    .queryServices()",
              "    .in(['labelIds', 'colors'], ['red', 'blue', 'purple'])",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "in"
    },
    {
      "name": "limit",
      "params": [
        {
          "name": "limit",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to return, which is also the `pageSize` of the results object.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Limits the number of items the query returns.",
        "description": [
          "The `limit()` function defines the number of results a query returns in each page. Only one page of results is retrieved at a time.",
          "You can use the `next()` and `prev()` functions to navigate the pages of a query result."
        ],
        "examples": [
          {
            "title": "Add a `limit` to a query",
            "body": [
              "const query = services.queryServices.limit(10);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `limit`, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services.queryServices().limit(10).find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "limit"
    },
    {
      "name": "ne",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `value`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "Value to compare against.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property doesn't equal the specified value.",
        "description": [
          "The `ne()` function refines a `ServicesQueryBuilder` to match only items where the value of the specified `propertyName` doesn't equal the specified `value`.",
          "`ne()` matches only values of the same type. For example, `0` stored as a number doesn't match `'0'` stored as a string.",
          "Matching strings with `ne()` is case-sensitive, so `'text'` isn't equal to `'Text'`."
        ],
        "examples": [
          {
            "title": "Add an `ne` filter to a query",
            "body": [
              "const query = services.queryServices.ne(",
              "  '_id',",
              "  'bb19b637-74ce-55d3-ae32-430b588051da'",
              ");",
              ""
            ]
          },
          {
            "title": "Create a query, add an `ne` filter, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services",
              "    .queryServices()",
              "    .ne('_id', 'bb19b637-74ce-55d3-ae32-430b588051da')",
              "    .find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "ne"
    },
    {
      "name": "skip",
      "params": [
        {
          "name": "skip",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "Number of items to skip in the query results before returning the results.",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Sets the number of items to skip before returning query results.",
        "description": [
          "The `skip()` function defines the number of results to skip before returning new query results.",
          "For example, if you query a collection and 50 items match your query, but you set `skip()` to `10`, the first 10 items that match are ignored, and the 11th through 50th items are returned."
        ],
        "examples": [
          {
            "title": "Add a `skip` to a query",
            "body": [
              "const query = services.queryServices.skip(10);",
              ""
            ]
          },
          {
            "title": "Create a query, add a `skip`, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services.queryServices().skip(10).find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "skip"
    },
    {
      "name": "startsWith",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "Property whose value is compared with `string`.",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-bookings-v2.Services.ServicesQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items where the specified property starts with the specified value.",
        "description": [
          "The `startsWith()` function refines a `ServicesQueryBuilder` to match only items where the value of the specified `propertyName` starts with the specified `string`.",
          "Matching with `startsWith()` is case-sensitive, so `'TEXT'` doesn't start with `'text'`.",
          "You can only use `startsWith()` with a property whose value is a string."
        ],
        "examples": [
          {
            "title": "Add a `startsWith` filter to a query",
            "body": [
              "const query = services.queryServices.startsWith('_id', 'L');",
              ""
            ]
          },
          {
            "title": "Create a query, add a `startsWith` filter, and run it",
            "body": [
              "import { services } from 'wix-bookings.v2';",
              "",
              "export async function myQueryFunction() {",
              "  const results = await services.queryServices();",
              "  startsWith('_id', 'L').find();",
              "",
              "  if (results.items.length > 0) {",
              "    const items = results.items;",
              "    const firstItem = items[0];",
              "    const pageSize = results.pageSize;",
              "    const hasNext = results.hasNext();",
              "    const hasPrev = results.hasPrev();",
              "    const length = results.length;",
              "    const query = results.query;",
              "",
              "    return items;",
              "  } else {",
              "    // Handle if no matching items found",
              "  }",
              "}",
              ""
            ]
          }
        ]
      },
      "isVeloEvent": false,
      "customLabels": [
        {
          "id": "maturity-beta"
        }
      ],
      "syntaxName": "startsWith"
    }
  ],
  "messages": []
}
