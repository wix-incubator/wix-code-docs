{ "name": "ContactsQueryBuilder",
  "memberOf": "wix-crm-backend.Contacts",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 16,
      "filename": "queryContacts.js" },
  "docs":
    { "summary": "Contains functionality for refining a contacts query.",
      "description":
        [ "The `ContactsQueryBuilder` functions enable you to run, sort, filter, and control",
          "which results a query returns.",
          "",
          "Typically, you build a query using the `queryContacts()` function,",
          "refine the query by chaining `ContactsQueryBuilder` functions, and then execute the",
          "query by chaining the [`find()`](#find) function.",
          "",
          "For example, the following code returns the first 5 contacts who work at Wix",
          "and sorts them by last name in ascending order:",
          "",
          "```javascript",
          "import { contacts } from 'wix-crm-backend';",
          "",
          "contacts.queryContacts()",
          " .eq(\"info.companyName\", \"Wix\")",
          " .ascending(\"info.name.lastName\")",
          " .limit(5)",
          " .find()",
          " .then( (results) => {",
          "   return results.items;",
          " });",
          "```",
          "",
          "> **Note:**",
          "> Only visitors with",
          "> **Manage Contacts** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions)",
          "> can query contacts.",
          "> You can override the permissions by setting the `suppressAuth` option to `true`",
          "> in the [`find()`](wix-crm-backend/contacts/contactsquerybuilder/find) function." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "and",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
              "doc": "A query to add to the initial query as an `and` condition." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 479,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Adds an `and` condition to the query.",
            "description":
              [ "The `and()` function adds an `and` condition to a `ContactsQueryBuilder`.",
                "A query with an `and` returns all the items that match the query",
                "as defined up to the `and` function and also match the query or",
                "filter passed to the `and` function.",
                "",
                "Note that when chaining multiple `ContactsQueryBuilder` functions to a query an `and` condition is assumed.",
                "In such cases, you do not need to add a call to the `and()` function.",
                "For example, this query returns results where subscription status is not set **and**",
                "the contact was created after March 1, 2021.",
                "",
                "```javascript",
                "contacts.queryContacts()",
                ".eq(\"info.extendedFields.emailSubscriptions.subscriptionStatus\", \"NOT_SET\")",
                ".gt(\"_createdDate\", \"2021-03-01T00:00:00.000Z\");",
                "```",
                "",
                "The `and()` function is needed when performing compound queries. For",
                "example, the final query in this set of queries returns results where subscription status",
                "is either not set or pending **and** creation date is earlier than than March 1, 2021 or",
                "the contact is labeled as a stale lead.",
                "",
                "```javascript",
                "const subscriptionStatusQuery = contacts.queryContacts()",
                ".eq(\"info.extendedFields.emailSubscriptions.subscriptionStatus\", \"NOT_SET\")",
                ".or(",
                "  contacts.queryContacts()",
                "  .eq(\"info.extendedFields.emailSubscriptions.subscriptionStatus\", \"PENDING\")",
                ");",
                "",
                "const freshnessQuery = contacts.queryContacts()",
                ".lt(\"_updatedDate\", \"2021-03-01T00:00:00.000Z\")",
                ".or(",
                "  contacts.queryContacts()",
                "  .hasSome(\"info.labelKeys\", [\"custom.stale-lead\"])",
                ");",
                "",
                "const statusAndFreshnessQuery = subscriptionStatusQuery.and(freshnessQuery);",
                "```",
                "",
                "The `and()` function is designed to work with 2 or more queries or filters.",
                "If you use it on its own, it will return all the items that meet the query criteria." ],
            "links": [],
            "examples":
              [ { "title": "Add an `and` filter to a query",
                  "body":
                    [ "const newQuery = query1.and(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a compound query, add an `and` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "  const subscriptionStatusQuery = contacts.queryContacts()",
                      "    .eq(\"info.extendedFields.emailSubscriptions.subscriptionStatus\", \"NOT_SET\")",
                      "    .or(",
                      "      contacts.queryContacts()",
                      "        .eq(\"info.extendedFields.emailSubscriptions.subscriptionStatus\", \"PENDING\")",
                      "    );",
                      "",
                      "  const freshnessQuery = contacts.queryContacts()",
                      "    .lt(\"_updatedDate\", \"2021-03-01T00:00:00.000Z\")",
                      "    .or(",
                      "      contacts.queryContacts()",
                      "      .hasSome(\"info.labelKeys\", [\"custom.stale-lead\"])",
                      "    );",
                      "",
                      "  const statusAndFreshnessQuery = subscriptionStatusQuery.and(freshnessQuery);",
                      "",
                      "  return statusAndFreshnessQuery.find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}",
                      "" ],
                  "extra":
                    { "description": "The first query, `subscriptionStatusQuery`, returns results\nwhere the contact's subscription status is either `\"NOT_SET\"` or `\"PENDING\"`.\nThe second query, `freshnessQuery` returns results\nwhere the contact was last updated before March 1, 2021,\nor where the contact is labeled as a stale lead.\n\nThe final query, `statusAndFreshnessQuery`, combines the first 2 queries with an `and` filter,\nand returns contacts that satisfy both queries." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n\n- `_createdDate`\n- `lastActivity.activityDate`\n- `primaryInfo.email`\n- `info.name.first`\n- `info.name.last`\n- `info.company`\n- `info.jobTitle`\n- `info.birthdate`",
              "spread": true } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 581,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `ContactsQueryBuilder` to sort in ascending order of",
                "the specified properties. If you specify more than one property,",
                "`ascending()` sorts the results in ascending order by each property in the",
                "order they are listed.",
                "",
                "You can sort the following types:",
                "",
                "+ Number: Sorts numerically.",
                "+ Date: Sorts by date and time.",
                "+ String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                "",
                "If a property contains a number as a String, that value will be sorted",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an `ascending` sort to a query",
                  "body":
                    [ "const query = contacts.queryContacts().ascending(\"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `ascending` sort, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .ascending(\"info.name.last\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "between",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared to `rangeStart` and `rangeEnd`.\n\nSupported properties:\n\n- `_createdDate`\n- `_updatedDate`\n- `lastActivity.activityDate`\n- `info.birthdate`" },
            { "name": "rangeStart",
              "type": "Date",
              "doc": "The value to match against." },
            { "name": "rangeEnd",
              "type": "Date",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 279,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property is greater than or equal",
                "to `rangeStart` and less than `rangeEnd`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically, so",
                "+ `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.",
                "+ `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not." ],
            "links": [],
            "examples":
              [ { "title": "Add a `between` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().between(\"_createdDate\", \"2020-07-01\", \"2020-12-31\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `between` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .between(\"lastActivity.activityDate\", \"2021-01-01T00:00:00.000\", \"2021-01-31T11:59:59.000\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n\n- `_createdDate`\n- `lastActivity.activityDate`\n- `primaryInfo.email`\n- `info.name.first`\n- `info.name.last`\n- `info.company`\n- `info.jobTitle`\n- `info.birthdate`",
              "spread": true } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 618,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `ContactsQueryBuilder` to sort in descending order of",
                "the specified properties. If you specify more than one property,",
                "`descending()` sorts the results in descending order by each property in the",
                "order they are listed.",
                "",
                "You can sort the following types:",
                "",
                "+ Number: Sorts numerically.",
                "+ Date: Sorts by date and time.",
                "+ String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                "",
                "If a property contains a number as a String, that value will be sorted",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add a `descending` sort to a query",
                  "body":
                    [ "const query = contacts.queryContacts().descending(\"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `descending` sort, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .descending(\"info.name.last\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\nSupported properties:\n\n- `\"_id\"`\n- `\"_createdDate\"`\n- `\"_updatedDate\"`\n- `\"lastActivity.activityDate\"`\n- `\"primaryInfo.email\"`\n- `\"primaryInfo.phone\"`\n- `\"info.name.first\"`\n- `\"info.name.last\"`\n- `\"info.emails.email\"`\n- `\"info.phones.phone\"`\n- `\"info.addresses.street\"`\n- `\"info.addresses.city\"`\n- `\"info.addresses.subdivision\"`\n- `\"info.addresses.country\"`\n- `\"info.company\"`\n- `\"info.jobTitle\"`\n- `\"info.birthdate\"`\n- `\"info.locale\"`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 51,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property equals the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "Matching strings with `eq()` is case sensitive in most instances, so `\"text\"` is not equal to `\"Text\"`. ",
                "One exception is email fields, which are case insensitive when matching with `eq()`.",
                "",
                "If the value of the `propertyName` property is an Array, `eq()` includes items",
                "in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an `eq` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().eq(\"info.company\", \"Wix\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `eq` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .eq(\"info.addresses.country\", \"GB\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-crm-backend.Contacts.AuthOptions",
              "doc": "Authorization options.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-crm-backend.Contacts.ContactsQueryResult" ] },
            "doc": "Fulfilled - The results of a contacts query, containing the retrieved items.\nWhen you execute a query with the [`find()`](wix-crm-backend.ContactsQueryBuilder.html#find)\nfunction, it returns a Promise that resolves to a `ContactsQueryResult` object.\nThis object contains the items that match the query, information about the\nquery itself, and functions for paging through the query results." },
        "locations":
          [ { "lineno": 708,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Returns the items that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                "by the query and some information about the results. The Promise is",
                "rejected if `find()` is called with incorrect permissions or if any of the",
                "functions used to refine the query are invalid.",
                "",
                "> **Note:**",
                "> Only visitors with",
                "> **Manage Contacts** [permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Froles-and-permissions)",
                "> can query contacts.",
                "> You can override the permissions by setting the `suppressAuth` option to `true`." ],
            "links": [],
            "examples":
              [ { "title": "Run a query with no filters",
                  "body":
                    [ "const queryResults = contacts.queryContacts().find();" ],
                  "extra":
                    {  } },
                { "title": "Perform a `find` on a query",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .find({",
                      "      suppressAuth: false",
                      "    })",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    });",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `\"_createdDate\"`\n- `\"_updatedDate\"`\n- `\"lastActivity.activityDate\"`\n- `\"info.birthdate\"`" },
            { "name": "value",
              "type": "Date",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 173,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property is greater than or equal to the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically,",
                "`\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),",
                "but `\"ABC\"` is not greater than or equal to `\"abc\"`" ],
            "links": [],
            "examples":
              [ { "title": "Add a `ge` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().ge(\"_createdDate\", \"2021-03-01\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `ge` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .ge(\"info.birthdate\", \"1983-02-01\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `\"_createdDate\"`\n- `\"_updatedDate\"`\n- `\"lastActivity.activityDate\"`\n- `\"info.birthdate\"`" },
            { "name": "value",
              "type": "Date",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 139,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property is greater than the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a `gt` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().gt(\"_createdDate\", \"2021-01-01T00:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `gt` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .gt(\"info.birthdate\", \"1983-02-01T00:00:00.000Z\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasAll",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `info.labelKeys`" },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 442,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains all of the specified values.",
            "description":
              [ "The `hasAll()` function refines a `ContactsQueryBuilder` to only",
                "match items where the values of the array of the specified property equal all of",
                "the specified values.",
                "",
                "Matching with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a `hasAll` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts()",
                      ".hasAll(\"info.labelKeys\", [\"custom.white-glove-treatment\", \"custom.at-risk\"]);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `hasAll` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .hasAll(\"info.labelKeys\", [\"custom.white-glove-treatment\", \"custom.at-risk\"])",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `\"_id\"`\n- `\"primaryInfo.email\"`\n- `\"primaryInfo.phone\"`\n- `\"info.name.first\"`\n- `\"info.name.last\"`\n- `\"info.emails.email\"`\n- `\"info.phones.phone\"`\n- `\"info.addresses.street\"`\n- `\"info.addresses.city\"`\n- `\"info.addresses.subdivision\"`\n- `\"info.addresses.country\"`\n- `\"info.company\"`\n- `\"info.jobTitle\"`\n- `\"info.locale\"`\n- `\"info.labelKeys\"`" },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 406,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains any of the specified values.",
            "description":
              [ "The `hasSome()` function refines a `ContactsQueryBuilder` to only",
                "match items where any of the values of the array of the specified property equal any of",
                "the specified values.",
                "",
                "Matching with `hasSome()` is case-sensitive in most instances, so `\"text\"` is not equal to `\"Text\"`.",
                "One exception is email fields, which are case insensitive when matching with `hasSome()`." ],
            "links": [],
            "examples":
              [ { "title": "Add a `hasSome` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts()",
                      ".hasSome(\"info.extendedFields.members.membershipStatus\", [\"APPROVED\", \"DENIED\", \"PENDING\", \"INACTIVE\"]);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `hasSome` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .hasSome(\"info.labelKeys\", [\"custom.white-glove-treatment\", \"custom.at-risk\"])",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `\"_createdDate\"`\n- `\"_updatedDate\"`\n- `\"lastActivity.activityDate\"`\n- `\"info.birthdate\"`" },
            { "name": "value",
              "type": "Date",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 243,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property is less than or equal to the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically,",
                "so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),",
                "but `\"abc\"` is not less than or equal to `\"ABC\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add an `le` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().le(\"_createdDate\", \"2021-01-01T00:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `le` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .le(\"info.birthdate\", \"1990-01-01\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "string",
              "doc": "Limit the number of items to return, which is also the [`pageSize`](wix-crm-backend.ContactsQueryResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 655,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                "page. Only one page of results is retrieved at a time. The [`next()`](wix-crm-backend.ContactsQueryResult.html#next)",
                "and [`prev()`](wix-crm-backend.ContactsQueryResult.html#prev) functions are used to",
                "navigate the pages of a query result.",
                "",
                "By default, `limit` is set to `50`.",
                "",
                "The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a `limit` to a query",
                  "body":
                    [ "const query = contacts.queryContacts().limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `limit`, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .limit(10)",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `\"_createdDate\"`\n- `\"_updatedDate\"`\n- `\"lastActivity.activityDate\"`\n- `\"info.birthdate\"`" },
            { "name": "value",
              "type": "Date",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 209,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property is less than the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add an `lt` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().lt(\"info.birthdate\", \"1990-01-01\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `lt` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .lt(\"info.birthdate\", \"1990-01-01\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `\"_id\"`\n- `\"_createdDate\"`\n- `\"_updatedDate\"`\n- `\"lastActivity.activityDate\"`\n- `\"primaryInfo.email\"`\n- `\"primaryInfo.phone\"`\n- `\"info.name.first\"`\n- `\"info.name.last\"`\n- `\"info.emails.email\"`\n- `\"info.phones.phone\"`\n- `\"info.addresses.street\"`\n- `\"info.addresses.city\"`\n- `\"info.addresses.subdivision\"`\n- `\"info.addresses.country\"`\n- `\"info.company\"`\n- `\"info.jobTitle\"`\n- `\"info.birthdate\"`\n- `\"info.locale\"`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 95,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property does not equal the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "Matching strings with `ne()` is case sensitive in most instances, so `\"text\"` is not equal to `\"Text\"`. ",
                "One exception is email fields, which are case insensitive when matching with `ne()`.",
                "",
                "If the value of the `propertyName` property is an Array, `ne()` includes items",
                "in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an `ne` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().ne(\"info.company\", \"Wix\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `ne` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .ne(\"info.addresses.country\", \"GB\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "not",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
              "doc": "Contains functionality for refining a contacts query.\nThe `ContactsQueryBuilder` functions enable you to run, sort, filter, and control\nwhich results a query returns.\n\nTypically, you build a query using `queryContacts()` function,\nrefine the query by chaining `ContactsQueryBuilder` functions, and then execute the\nquery by chaining the [`find()`](#find) function." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 557,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Adds an `not` condition to the query.",
            "description":
              [ "The `not()` function adds a `not` condition to a `ContactsQueryBuilder`. A query",
                "with a `not` returns all the items that match the query as defined up to",
                "the `not` function,  but don't match the query passed to the `not` function.",
                "",
                "If the query only contains a `not()` function, it returns all the items",
                "that don't match the query defined by the `not` method." ],
            "links": [],
            "examples":
              [ { "title": "Add a `not` filter to a query",
                  "body":
                    [ "const newQuery = query1.not(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `not` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .not(contacts.queryContacts()",
                      "      .hasSome(\"info.labelKeys\", \"custom.stale-lead\"))",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
              "doc": "A query to add to the initial query as an `or` condition." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 539,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Adds an `or` condition to the query.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `ContactsQueryBuilder`. A query",
                "with an `or` returns all the items that match the query as defined up to",
                "the `or` function, the items that match the query passed to the `or`",
                "function, and the items that match both.",
                "",
                "The `or()` function is designed to work with 2 or more queries.",
                "If you use it on its own, it will return all the items that meet the query criteria." ],
            "links": [],
            "examples":
              [ { "title": "Add an `or` filter to a query",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .eq(\"info.addresses.country\", \"GB\")",
                      "    .or(contacts.queryContacts()",
                      "      .eq(\"info.addresses.country\", \"FR\"))",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `or` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .eq(\"info.addresses.country\", \"GB\")",
                      "    .or(contacts.queryContacts()",
                      "      .eq(\"info.addresses.country\", \"FR\"))",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "string",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 674,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the query",
                "results before returning new query results.",
                "",
                "For example, if you query your contacts and 50 items match your query, but",
                "you set `skip` to 10, the results returned will skip the first 10 items",
                "that match and return the 11th through 50th items.",
                "",
                "By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "const query = contacts.queryContacts().skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export async function myQueryContactsFunction() {",
                      "  try {",
                      "",
                      "    const results = await contacts.queryContacts()",
                      "      .skip(10)",
                      "      .find();",
                      "",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const pageSize = results.pageSize;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "",
                      "      return items;",
                      "    } else {",
                      "      // Handle case where no matching items found",
                      "    }",
                      "",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "    // Handle the error",
                      "  }",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n\n- `\"primaryInfo.email\"`\n- `\"primaryInfo.phone\"`\n- `\"info.name.first\"`\n- `\"info.name.last\"`\n- `\"info.emails.email\"`\n- `\"info.phones.phone\"`\n- `\"info.addresses.street\"`\n- `\"info.addresses.city\"`\n- `\"info.company\"`\n- `\"info.jobTitle\"`" },
            { "name": "value",
              "type": "string",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-crm-backend.Contacts.ContactsQueryBuilder",
            "doc": "A `ContactsQueryBuilder` object that contains the refined query." },
        "locations":
          [ { "lineno": 346,
              "filename": "queryContacts.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `ContactsQueryBuilder` to only",
                "match items where the value of the specified property starts with a specified string.",
                "Matching with `startsWith()` is case-sensitive, so `\"TEXT\"` does not start with `\"tex\"`.",
                "",
                "You can only use `startsWith()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a `startsWith` filter to a query",
                  "body":
                    [ "const query = contacts.queryContacts().startsWith(\"info.jobTitle\", \"VP\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `startsWith` filter, and run it",
                  "body":
                    [ "import { contacts } from 'wix-crm-backend';",
                      "",
                      "export function myQueryContactsFunction() {",
                      "",
                      "  return contacts.queryContacts()",
                      "    .startsWith(\"info.company\", \"Goog\")",
                      "    .find()",
                      "    .then((results) => {",
                      "      if (results.items.length > 0) {",
                      "        const items = results.items;",
                      "        const firstItem = items[0];",
                      "        const pageSize = results.pageSize;",
                      "        const hasNext = results.hasNext();",
                      "        const hasPrev = results.hasPrev();",
                      "        const length = results.length;",
                      "        const query = results.query;",
                      "",
                      "        return items;",
                      "      } else {",
                      "        // Handle case where no matching items found",
                      "      }",
                      "    })",
                      "    .catch((error) => {",
                      "      console.error(error);",
                      "    })",
                      "",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }