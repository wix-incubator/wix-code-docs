{ "name": "Authentication",
  "memberOf": "wix-members",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 42,
      "filename": "index.js" },
  "docs":
    { "summary": "The Authentication API contains functionality for authenticating members from frontend code.",
      "description":
        [ "To use the Authentication API, import `{authentication}` from the `wix-members` module:",
          "",
          "```javascript",
          "import { authentication } from 'wix-members';",
          "```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "applySessionToken",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "sessionToken",
              "type": "string",
              "doc": "Session token to apply." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the token is applied." },
        "locations":
          [ { "lineno": 1,
              "filename": "applySessionToken.js" } ],
        "docs":
          { "summary": "Logs the current member into the site using the given session token.",
            "description":
              [ "The `applySessionToken()` function returns a Promise that resolves when the",
                " given session token is applied and the current member is logged into the site.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `wix-users.applySessionToken()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions](wix-users/applysessiontoken#migration-instructions).",
                "",
                "You receive a session token from the following",
                "wix-members-backend functions:",
                "",
                " - [`approveByEmail()`](wix-members-backend/authentication/approveByEmail)",
                " - [`approveByToken()`](wix-members-backend/authentication/approveByToken)",
                " - [`register()`](wix-members-backend/authentication/register)",
                "",
                " Pass the returned session token to your page code and apply it by",
                " calling `applySessionToken()` to complete the process started by one of the",
                " above functions." ],
            "links": [],
            "examples":
              [ { "title": "Log in a member by applying a session token",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "authentication.applySessionToken(sessionToken)",
                      "  .then(() => {",
                      "    console.log('Member logged in.');",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Register a member using a 3rd party for approval",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.jsw *",
                      " *******************************/",
                      "import { authentication } from 'wix-members-backend';",
                      "import { approveBy3rdParty } from 'backend/some-backend-module';",
                      "",
                      "export async function doRegistration(email, password, firstName, lastName) {",
                      "",
                      "  // Call a 3rd-party API to check if the member is approved.",
                      "  const isApproved = await approveBy3rdParty(email, password);",
                      "",
                      "  // If member is approved by 3rd party, register and approve with the Wix site",
                      "  if (isApproved === true) {",
                      "    const options = {",
                      "      contactInfo: {",
                      "        firstName: firstName,",
                      "        lastName: lastName",
                      "      }",
                      "    };",
                      "",
                      "    // Register the member",
                      "    const registration = await authentication.register(email, password, options);",
                      "    const approvalToken = registration.approvalToken;",
                      "    console.log('Member is now registered with the site and pending approval');",
                      "",
                      "    // Approve the member and get session token, to be used to log in the member client-side",
                      "    const sessionToken = await authentication.approveByToken(approvalToken);",
                      "    console.log('Member is now approved, but not logged in');",
                      "",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "",
                      "  } else {",
                      "    // If not approved by the 3rd party",
                      "",
                      "    await authentication.blockByEmail(email);",
                      "    console.log('Member not approved by 3rd-party SSO. Blocking from Wix site.');",
                      "",
                      "    return { approved: false };",
                      "  }",
                      "}",
                      "",
                      "",
                      "/*************",
                      " * Page code *",
                      " *************/",
                      "import { authentication } from 'wix-members';",
                      "import { doRegistration } from 'backend/register';",
                      "",
                      "// ...",
                      "",
                      "$w('#register').onClick(() => {",
                      "",
                      "  const email = $w('#email').value;",
                      "  const password = $w('#password').value;",
                      "  const firstName = $w('#firstName').value;",
                      "  const lastName = $w('#lastName').value;",
                      "",
                      "  doRegistration(email, password, firstName, lastName)",
                      "    .then((result) => {",
                      "      if (result.approved) {",
                      "        // Log the member in",
                      "        console.log('Logging in...');",
                      "        authentication.applySessionToken(result.sessionToken);",
                      "      } else {",
                      "        console.log('Not approved!');",
                      "      }",
                      "    });",
                      "});" ],
                  "extra":
                    { "description": "This example demonstrates a common 3rd-party approval flow.\nThe backend code calls a 3rd-party service that determines whether the member is approved.\nIf approved, the `register()` function is called from backend code,\nthe registration is approved,\nand a session token is returned to the calling page code.\nIf rejected, the `blockByEmail()` function is called." } },
                { "title": "Log a member in after 3rd-party authentication",
                  "body":
                    [ "/****************************",
                      " * Backend code - login.jsw *",
                      " ***************************/",
                      "",
                      " import { authentication } from 'wix-members-backend';",
                      " import { authBy3rdParty } from 'backend/authentications';",
                      "",
                      " export function getLoginToken(email, password) {",
                      "",
                      "   return authBy3rdParty(email, password)",
                      "     .then((isAuthenticated) => {",
                      "",
                      "       // If authenticated, generate and return the session token",
                      "       if (isAuthenticated) {",
                      "         return authentication.generateSessionToken(email)",
                      "           .then((sessionToken) => {",
                      "             return {",
                      "               sessionToken: sessionToken,",
                      "               approved: true",
                      "            };",
                      "           });",
                      "       }",
                      "",
                      "       // If not authenticated, return non-approval",
                      "       return { approved: false };",
                      "     });",
                      " }",
                      "",
                      " /*************",
                      "  * Page code *",
                      "  ************/",
                      "import { getLoginToken } from 'backend/login';",
                      "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "const email = $w('email').value;",
                      "const password = $w('password').value;",
                      "",
                      "// Call the backend function to get the session token",
                      "getLoginToken(email, password)",
                      "  .then((loginResult) => {",
                      "    if (loginResult.approved) {",
                      "      // If approved, log the member in using the returned session token",
                      "      authentication.applySessionToken(loginResult.sessionToken);",
                      "    } else {",
                      "      // If not approved, log a message",
                      "      console.log(\"Member not approved.\");",
                      "    }",
                      "  });",
                      "" ],
                  "extra":
                    { "description": "This example contains a backend function that uses a 3rd-party service to authenticate a member.\nIf the authentication is successful,\na session token is returned to the page and used to log the member in." } },
                { "title": "Register a member, sending an email for confirmation",
                  "body":
                    [ "/*******************************",
                      " * Backend code - register.jsw *",
                      " *******************************/",
                      "",
                      "import { authentication } from 'wix-members-backend';",
                      "import { triggeredEmails } from 'wix-crm-backend';",
                      "",
                      "// To be called from the registration page code",
                      "export async function doRegistration(email, password, firstName, lastName) {",
                      "  // Register the member",
                      "  const registrationOptions = {",
                      "    contactInfo: {",
                      "      firstName: firstName,",
                      "      lastName: lastName",
                      "    }",
                      "  };",
                      "  const registration = await authentication.register(email, password, registrationOptions);",
                      "  console.log('Member is now registered with the site and pending approval');",
                      "",
                      "  // Send a registration confirmation email",
                      "  const emailOptions = {",
                      "    variables: {",
                      "      name: firstName,",
                      "      verifyLink: `http://yourdomain.com/post-register?token=${registration.approvalToken}`",
                      "    }",
                      "  };",
                      "  triggeredEmails.emailMember('verifyRegistration', registration.member.id, emailOptions);",
                      "  console.log('Confirmation email sent');",
                      "}",
                      "",
                      "// To be called from the post-registration page code",
                      "export async function doApproval(token) {",
                      "  try {",
                      "    // Approve the member",
                      "    const sessionToken = await authentication.approveByToken(token);",
                      "    console.log('Member approved');",
                      "    return {",
                      "      approved: true,",
                      "      sessionToken: sessionToken",
                      "    };",
                      "  } catch (error) {",
                      "    // If an error is encountered and the member can't be approved",
                      "    console.log('Member not approved');",
                      "    return {",
                      "      approved: false,",
                      "      reason: error",
                      "    };",
                      "  }",
                      "}",
                      "",
                      "/****************************",
                      " * Page code - registration *",
                      " ****************************/",
                      "import { doRegistration } from 'backend/register';",
                      "",
                      "// ...",
                      "",
                      "const email = $w('#email');",
                      "const password = $w('#password');",
                      "const firstName = $w('#firstName');",
                      "const lastName = $w('#lastName');",
                      "",
                      "doRegistration(email, password, firstName, lastName)",
                      "  .then(() => {",
                      "    console.log('Confirmation email sent.');",
                      "  });",
                      "",
                      "/*********************************",
                      " * Page code - post-registration *",
                      " *********************************/",
                      "import wixLocation from 'wix-location';",
                      "import { authentication } from 'wix-members';",
                      "import { doApproval } from 'backend/register';",
                      "",
                      "$w.onReady(async () => {",
                      "  // Get the token from the URL",
                      "  const token = wixLocation.query.token;",
                      "",
                      "  // Send token to backend code",
                      "  const approval = await doApproval(token);",
                      "",
                      "  if (approval.approved === true) {",
                      "    // Log the member in",
                      "    authentication.applySessionToken(approval.sessionToken);",
                      "    console.log('Member approved & logged in');",
                      "  } else {",
                      "    console.log('Member not approved');",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates a common email verification flow.\nA member is initially registered but not yet approved.\nAt registration, a verification email is sent with a link to a verification page.\nWhen the member goes to the verification page,\nthe approval is granted and the member is logged into the site.\n\n The code is split between three locations:\n\n - A backend web module named **register.jsw**.\n - The page code for the page where members register.\n - The page code for the page where members confirm their registration." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "login",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Login email address." },
            { "name": "password",
              "type": "string",
              "doc": "Member password." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the member is logged in.\nRejected - Error message." },
        "locations":
          [ { "lineno": 1,
              "filename": "login.js" } ],
        "docs":
          { "summary": "Logs a member in with an email and password.",
            "description":
              [ "The `login()` function returns a Promise that resolves when the member with",
                " the specified email address and password is logged in.",
                "",
                "> **Notes:**",
                ">",
                "> - This function replaces the deprecated",
                ">   `wix-users.login()`.",
                ">   The deprecated function will continue to work, but it will not receive updates.",
                ">   To keep any existing code compatible with future changes, see the",
                ">   [migration instructions](wix-users/login#migration-instructions).",
                ">",
                "> - The APIs in `wix-members` are only partially functional when previewing your site.",
                ">   View a published version of your site to see their complete functionality." ],
            "links": [],
            "examples":
              [ { "title": "Log a member in",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "authentication.login(email, password)",
                      "  .then(() => {",
                      "    console.log('Member is logged in');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Log a member in using data from input elements",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "$w('#login').onClick(async () => {",
                      "  const email = $w('#email').value;",
                      "  const password = $w('#password').value;",
                      "",
                      "  try {",
                      "    await authentication.login(email, password);",
                      "    console.log('Member is logged in');",
                      "  } catch (error) {",
                      "    console.error(error);",
                      "  }",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "logout",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "logout.js" } ],
        "docs":
          { "summary": "Logs the current member out of the site.",
            "description":
              [ "The `logout()` function logs the current member out of the site.",
                "",
                "> **Notes:**",
                ">",
                "> - This function replaces the deprecated",
                ">   `wix-users.logout()`.",
                ">   The deprecated function will continue to work, but it will not receive updates.",
                ">   To keep any existing code compatible with future changes, see the",
                ">   [migration instructions](wix-users/logout#migration-instructions).",
                ">",
                "> - The APIs in `wix-members` are only partially functional when previewing your site.",
                ">   View a published version of your site to see their complete functionality.",
                ">",
                "> - The APIs in `wix-members` can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that is contained in or is called from the",
                ">   [onReady()]($w.html#onReady) event handler or any element event handler." ],
            "links": [],
            "examples":
              [ { "title": "Log the current member out",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "authentication.logout();" ],
                  "extra":
                    {  } },
                { "title": "Log the current member out when they click a button",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "$w('#logout').onClick(() => {",
                      "  authentication.logout();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onLogin",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "wix-members.Authentication.LoginHandler",
              "doc": "Function name or expression to run when a member logs in." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 12,
              "filename": "onLogin.js" } ],
        "docs":
          { "summary": "Sets the function that runs when a member logs in.",
            "description":
              [ "Use the `onLogin()` function for code you want to run after a member successfully",
                " logs into your site.",
                "",
                " Usually, you want to call the `onLogin()` function in the **Global (Site)** tab of the",
                " code panel so that the `onLogin()` event handler runs no matter which",
                " page on your site a member uses to log in.",
                "",
                "> **Notes:**",
                ">",
                "> - This function replaces the deprecated",
                ">   `wix-users.onLogin()`.",
                ">   The deprecated function will continue to work, but it will not receive updates.",
                ">   To keep any existing code compatible with future changes, see the",
                ">   [migration instructions](wix-users/onlogin#migration-instructions).",
                ">",
                "> - The APIs in `wix-members` are only partially functional when previewing your site.",
                ">   View a published version of your site to see their complete functionality.",
                ">",
                "> - The APIs in `wix-members` can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that is contained in or is called from the",
                ">   [onReady()]($w.html#onReady) event handler or any element event handler." ],
            "links": [],
            "examples":
              [ { "title": "Run code when a member logs in",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "authentication.onLogin((memberInfo) => {",
                      "  const memberId = memberInfo.id;",
                      "  console.log('Member logged in');",
                      "});",
                      "",
                      "/* Full event object:",
                      " * {",
                      " *   \"id\": \"f32cbc51-a331-442b-86c2-2c664613e8b9\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onLogout",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "wix-members.Authentication.LogoutHandler",
              "doc": "Function name or expression to run when a member logs out." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 5,
              "filename": "onLogout.js" } ],
        "docs":
          { "summary": "Sets the function that runs when a member logs out.",
            "description":
              [ "Use the `onLogout()` function for code you want to run after a member logs out",
                "from your site.",
                "",
                " Usually, you want to call the `onLogout()` function in the **Global (Site)** tab of the",
                " code panel so that the `onLogout()` event handler runs no matter which",
                " page on your site a member uses to log out.",
                "",
                "> **Notes:**",
                ">",
                "> - The APIs in `wix-members` are only partially functional when previewing your site.",
                ">   View a published version of your site to see their complete functionality.",
                ">",
                "> - The APIs in `wix-members` can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that is contained in or is called from the",
                ">   [onReady()]($w.html#onReady) event handler or any element event handler." ],
            "links": [],
            "examples":
              [ { "title": "Run code when a member logs out",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "authentication.onLogout(() => {",
                      "  console.log('Member logged out');",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "promptForgotPassword",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the form is submitted.\nRejected - Message that the dialog was canceled, user is already logged in, or another reason the password reset failed." },
        "locations":
          [ { "lineno": 1,
              "filename": "promptForgotPassword.js" } ],
        "docs":
          { "summary": "Prompts the current site visitor with a password reset modal.",
            "description":
              [ "The `promptForgotPassword()` function returns a Promise that resolves when",
                "the visitor submits the **Create New Password** form.",
                "",
                "If the visitor cancels the form without submitting it,",
                "the Promise is rejected.",
                "",
                "`promptForgotPassword()` cannot be called before the page is ready.",
                "",
                "> **Notes:**",
                ">",
                "> - This function replaces the deprecated",
                ">   `wix-users.promptForgotPassword()`.",
                ">   The deprecated function will continue to work, but it will not receive updates.",
                ">   To keep any existing code compatible with future changes, see the",
                ">   [migration instructions](wix-users/promptforgotpassword#migration-instructions).",
                ">",
                "> - The APIs in `wix-members` are only partially functional when previewing your site.",
                ">   View a published version of your site to see their complete functionality.",
                ">",
                "> - The APIs in `wix-members` can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that is contained in or is called from the",
                ">   [`onReady()`]($w.html#onReady) event handler or any element event handler.",
                ">",
                "> - If you `return` or `await` the `promptForgotPassword()` function",
                ">   when calling from `onReady()`, the page will be prevented from loading.",
                ">   To handle the resolved promise, use `.then()` and `.catch()`." ],
            "links":
              [ "[promptLogin( )](#promptLogin)" ],
            "examples":
              [ { "title": "Prompt the visitor with a password reset",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "authentication.promptForgotPassword()",
                      "  .then(() => {",
                      "    console.log('Sending \"forgot password\" email');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "promptLogin",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-members.Authentication.LoginOptions",
              "doc": "The options that determine how the login dialog box appears.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the member is logged in.\nRejected - Message that the dialog was canceled, or any other reason the member failed to log in." },
        "locations":
          [ { "lineno": 15,
              "filename": "promptLogin.js" } ],
        "docs":
          { "summary": "Prompts the current visitor to log in as a site member.",
            "description":
              [ "The `promptLogin()` function returns a Promise that resolves",
                "when the login has completed.",
                "",
                "If the visitor cancels the form without logging in,",
                "the Promise is rejected.",
                "",
                "The `promptLogin()` function cannot be called before the page is ready.",
                "",
                "> **Notes:**",
                ">",
                "> - This function replaces the deprecated",
                ">   `wix-users.promptLogin()`.",
                ">   The deprecated function will continue to work, but it will not receive updates.",
                ">   To keep any existing code compatible with future changes, see the",
                ">   [migration instructions](wix-users/promptlogin#migration-instructions).",
                ">",
                "> - The APIs in `wix-members` are only partially functional when previewing your site.",
                ">   View a published version of your site to see their complete functionality.",
                ">",
                "> - The APIs in `wix-members` can only be used once the page has loaded. Therefore,",
                ">   you must use them in code that is contained in or is called from the",
                ">   [`onReady()`]($w.html#onReady) event handler or any element event handler.",
                ">",
                "> - If you `return` or `await` the `promptLogin()` function",
                ">   when calling from `onReady()`, the page will be prevented from loading.",
                ">   To handle the resolved promise, use `.then()` and `.catch()`." ],
            "links":
              [ "[promptForgotPassword( )](#promptForgotPassword)" ],
            "examples":
              [ { "title": "Prompt the current visitor to log in",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "// Sample options value:",
                      "// {",
                      "//    mode: 'login',",
                      "//    modal: true",
                      "// }",
                      "",
                      "authentication.promptLogin(options)",
                      "  .then(() => {",
                      "    console.log('Member is logged in');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "register",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "email",
              "type": "string",
              "doc": "Email address the new member will use to log in." },
            { "name": "password",
              "type": "string",
              "doc": "Password to assign to the new member.\nMust be 4 to 100 ASCII characters." },
            { "name": "options",
              "type": "wix-members-backend.Authentication.RegistrationOptions",
              "doc": "Registration options.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-members.Authentication.RegistrationResult" ] },
            "doc": "Fulfilled - When the member is registered.\nRejected - Error message." },
        "locations":
          [ { "lineno": 21,
              "filename": "register.js" } ],
        "docs":
          { "summary": "Registers a new site member.",
            "description":
              [ "The `register()` function returns a Promise that resolves to a `RegistrationResult`",
                " object when the member is registered or pending registration.",
                "",
                "> **Note:**",
                "> This function replaces the deprecated",
                "> `wix-users.register()`.",
                "> The deprecated function will continue to work, but it will not receive updates.",
                "> To keep any existing code compatible with future changes, see the",
                "> [migration instructions](wix-users/register#migration-instructions).",
                "",
                "The specified `password` must be between 4 and 100 ASCII characters.",
                "",
                "#### Automatic vs. Manual Approval",
                "",
                "The `register()` function behaves differently depending on your site's",
                "[member signup settings](https://support.wix.com/en/article/editing-your-member-signup-settings-for-the-default-form).",
                "Details are outlined in the following table:",
                "",
                "| Signup Setting                                                  | Result|",
                "| --------------------------------------------------------------- ||",
                "| **Everyone who signs up** <br /> (automatic approval)           | <ul><li>Member `status` is `\"ACTIVE\"`.</li><li>The member is immediately logged into the site.</li></ul>                                                                                                                                                                                                                                                                                                                                                                                                                           |",
                "| **Only people who I approve manually** <br /> (manual approval) | <ul><li>Member `status` is `\"PENDING\"`.</li><li>The member must be approved. You can approve the member by passing the returned `approvalToken` to [`approveByToken()`](wix-members-backend/authentication-obj/approveByToken) or calling [`approveByEmail()`](wix-members-backend/authentication-obj/approveByEmail) from wix-members-backend.</li><li>`member` is not returned. If you need the `member` object, use [`register()`](wix-members-backend/authentication-obj/register) from wix-members-backend instead.</li></ul> |",
                "",
                "When your site's member signup settings are set to automatic approval,",
                "calling `register()` from wix-members (in page code) is as secure as calling",
                "[`register()` from wix-members-backend](wix-members-backend/authentication-obj/register)",
                "in backend code.",
                "However, when registration is set to manual approval,",
                "calling `register()` from wix-members-backend",
                "allows you to build more secure approval flows",
                "by keeping tokens hidden from the frontend.",
                "",
                "> **Notes:**",
                ">",
                "> - The APIs in `wix-members` are only partially functional when previewing your site.",
                ">   View a published version of your site to see their complete functionality.",
                ">",
                "> - When a new member signs up using an email address",
                ">   that's already in your site's Contact List,",
                ">   a notification is displayed",
                ">   and a confirmation email is sent to the new member.",
                ">   To register a member without displaying the notification, use",
                ">   [`register()` from wix-members-backend](wix-members-backend/authentication-obj/register)",
                ">   (this does not suppress the confirmation email)." ],
            "links": [],
            "examples":
              [ { "title": "Register a site member",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "// Sample options value:",
                      "// {",
                      "//   contactInfo: {",
                      "//     firstName: 'Juan',",
                      "//     lastName: 'Doe',",
                      "//     picture: 'https://static.parastorage.com/unpkg-semver/communities-blog-statics/assets/wix-logo.png',",
                      "//   },",
                      "//   privacyStatus: \"PRIVATE\"",
                      "// }",
                      "",
                      "authentication.register(email, password, options)",
                      "  .then((registrationResult) => {",
                      "    const status = registrationResult.status;",
                      "",
                      "    if (status === \"PENDING\") {",
                      "      // When the site is configured for manual approval,",
                      "      // status is \"PENDING\" and approvalToken is returned.",
                      "      const approvalToken = registrationResult.approvalToken;",
                      "      console.log('Member registered and waiting for approval:', registrationResult);",
                      "    } else {",
                      "      // When the site is configured for automatic approval,",
                      "      // status is \"ACTIVE\" and the member is approved and logged in.",
                      "      // To prevent logging in the member automatically,",
                      "      // use the backendend function: wix-members-backend.authentication.register()",
                      "      console.log('Member registered and logged in:', registrationResult);",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "LoginHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "wix-members.Authentication.LoginEvent",
              "doc": "Details about the member who logged in." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "onLogin.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "LogoutHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 1,
              "filename": "onLogout.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages":
    [ { "name": "LoginEvent",
        "locations":
          [ { "lineno": 6,
              "filename": "onLogin.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "Member ID." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "LoginOptions",
        "locations":
          [ { "lineno": 1,
              "filename": "promptLogin.js" } ],
        "docs":
          { "links": [],
            "examples":
              [ { "title": "Prompt the current visitor to log in",
                  "body":
                    [ "import { authentication } from 'wix-members';",
                      "",
                      "// ...",
                      "",
                      "// Sample options value:",
                      "// {",
                      "//    mode: 'login',",
                      "//    modal: true",
                      "// }",
                      "",
                      "authentication.promptLogin(options)",
                      "  .then(() => {",
                      "    console.log('Member is logged in');",
                      "  })",
                      "  .catch((error) => {",
                      "    console.error(error);",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "mode",
              "type": "string",
              "doc": "Whether to display the `\"login\"` or `\"signup\"` prompt.\n\nDefaults to `\"signup\"`.",
              "optional": true },
            { "name": "modal",
              "type": "boolean",
              "doc": "Whether the login form should be modal (`true`)\nor full screen (`false`).\n\nDefaults to `false` (full screen).",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "RegistrationResult",
        "locations":
          [ { "lineno": 1,
              "filename": "register.js" } ],
        "docs":
          { "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "status",
              "type": "string",
              "doc": "Registration status.\n\nOne of:\n\n- `\"PENDING\"`: The member must be approved before they can log in to the site.\n- `\"ACTIVE\"`: The member is approved and can log in to the site." },
            { "name": "approvalToken",
              "type": "string",
              "doc": "Token for approving the member\nwith the [`approveByToken()`](wix-members-backend/authentication/approveByToken)\nfunction. `approvalToken` is safe to pass via email or from page code to\nbackend code.\n\nReturned when `status` is `\"PENDING\"`.",
              "optional": true },
            { "name": "member",
              "type": "wix-members-backend.Members.Member",
              "doc": "The registered member.\n\nReturned when `status` is `\"ACTIVE\"`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }