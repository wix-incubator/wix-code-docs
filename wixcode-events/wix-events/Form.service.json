{ "name": "Form",
  "memberOf": "wix-events",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "form.js" },
  "docs":
    { "summary": "A registration form for an event.",
      "description":
        [ "You can use a `Form` to create a custom registration form for [accepting RSVPs](wix-events.Rsvp.html#rsvp-lifecycle)",
          " or when [offering tickets](wix-events.Tickets.html#ticketing-lifecycle) for your events." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "formData",
        "labels": [],
        "get": true,
        "set": false,
        "type": "wix-events.Form.FormData",
        "locations":
          [ { "lineno": 79,
              "filename": "form.js" } ],
        "docs":
          { "summary": "Gets information about the event's registration form and status.",
            "description":
              [ "The returned `FormData` object contains the information you need to create",
                " a custom registration form for the specified event.",
                "",
                " This information includes:",
                "",
                " + The event's registration status, such as whether registration is",
                "   open, closed, or guests will be placed on a waitlist.",
                " + Which statuses guests can RSVP with, such as yes, no, or to be added",
                "   to the waitlist.",
                " + Whether the event is a ticketed event.",
                " + Information about the registration form's fields, such as their names, ",
                "   descriptive labels, and whether they are required." ],
            "links": [],
            "examples":
              [ { "title": "Get a registration form's information",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (form) => {",
                      "    let formData = form.formData;",
                      "",
                      "    let fields = formData.formInputs;",
                      "    let firstFieldName = fields[0].name;",
                      "    let statusOptions = formData.rsvpStatusOptions;",
                      "    let registrationStatus = formData.registrationStatus;",
                      "    let isTicketed = formData.isTicketed;",
                      "  } );",
                      "",
                      "/*  formData:",
                      " *",
                      " *  {",
                      " *    \"rsvpStatusOptions\": \"YES_AND_NO,",
                      " *    \"registrationStatus\": \"OPEN_RSVP\",",
                      " *    \"isTicketed\": false,",
                      " *    \"formInputs\": [",
                      " *      {",
                      " *        \"_id\": \"37a5789b-27d1-43a3-703b-a93dedad5b01\",",
                      " *        \"additionalLabels\": [],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"NAME\",",
                      " *        \"label\": \"First Name\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 50,",
                      " *        \"name\": \"firstName\",",
                      " *        \"options\": []",
                      " *      },",
                      " *  ",
                      " *      ...",
                      " *  ",
                      " *      {",
                      " *        \"_id\": \"27d5789b-137a-43ed-a33d-a9703bad5b01\",",
                      " *        \"additionalLabels\": [",
                      " *          {",
                      " *            \"name\": \"one\",",
                      " *            \"label\": \"I'm bringing a plus one\"",
                      " *          },",
                      " *          {",
                      " *            \"name\": \"multiple\",",
                      " *            \"label\": \"Additional Guests\"",
                      " *          }",
                      " *        ],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"GUEST_CONTROL\",",
                      " *        \"label\": \"I'm bringing a plus one\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 0,",
                      " *        \"name\": \"additionalGuests\",",
                      " *        \"options\": [",
                      " *          \"0\",",
                      " *          \"1\"",
                      " *        ]",
                      " *      }",
                      " *    ]",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create and submit a registration form",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "import wixData from 'wix-data';",
                      "",
                      "let eventId;",
                      "let form;",
                      "",
                      "// Run a query that will return only one event. Add",
                      "// additional filtering to the query if necessary.",
                      "wixData.query(\"Events/Events\")",
                      "  .eq(\"title\", \"My Event\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      eventId = results.items[0]._id;",
                      "      wixEvents.getForm(eventId)",
                      "        .then( (result) => {",
                      "          form = result;",
                      "        } );",
                      "    }",
                      "    else {",
                      "      console.log(\"Could not find event\");",
                      "    }",
                      "  });",
                      "",
                      "$w.onReady(function () {",
                      "  $w('#submit').onClick( () => {",
                      "    let formValues = getFormValues();",
                      "",
                      "    form.submit(formValues)",
                      "      .then( (result) => {",
                      "        console.log(\"RSVP form submitted.\")",
                      "      } )",
                      "      .catch( (error) => {",
                      "        console.log(`Error message: ${error.message}`);",
                      "        if(error.fields) {",
                      "          console.log(`Incorrect fields: ${error.fields}`);\t",
                      "        }",
                      "      } );\t",
                      "  } );",
                      "});",
                      "",
                      "function getFormValues() {",
                      "  const formValues = [{\"name\": \"rsvpStatus\", \"value\": \"YES\"}];",
                      "    ",
                      "  form.formData.rsvpFormInputs.forEach( (item) => {",
                      "    formValues.push(",
                      "      {",
                      "        \"name\": [item.name],",
                      "        \"value\": $w(`#${item.name}`).value",
                      "      }",
                      "    );",
                      "  } );",
                      "",
                      "  // When the form contains an address or additional",
                      "  // guests, add code to add those values to formValues.",
                      "",
                      "  return formValues;",
                      "}" ],
                  "extra":
                    { "description": "This example assumes that a form is built with input elements, where the element\n IDs match the field names retrieved from the `formData` property." } },
                { "title": "Reserve, checkout, and update tickets",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "import wixData from 'wix-data';",
                      "import wixPay from 'wix-pay';",
                      "",
                      "let eventId;",
                      "let form;",
                      "let reservationId;",
                      "let orderNumber;",
                      "let tickets;",
                      "",
                      "$w.onReady(function () {",
                      "  // Retrieve data and set up page",
                      "  await getData();",
                      "  $w(\"#ticketRepeater\").onItemReady(displayTickets);",
                      "  $w(\"#ticketRepeater\").data = tickets;",
                      "",
                      "  // Define button click actions",
                      "  $w(\"reservationButton\").onClick(reserveTickets);",
                      "  $w(\"checkoutButton\").onClick(checkoutTickets);",
                      "  $w(\"updateButton\").onClick(updateTickets);",
                      "",
                      "  // Verify coupon code when it is entered",
                      "  $w(\"#couponCode\").onCustomValidation(verifyCouponCode);",
                      "});",
                      "",
                      "async function getData() {",
                      "  // Run a query that will return only one event. Add",
                      "  // additional filtering to the query if necessary.",
                      "  const eventResults = await wixData.query(\"Events/Events\")",
                      "    .eq(\"title\", \"My Event\")",
                      "    .find();",
                      "",
                      "  if (eventResults.items.length > 0) {",
                      "    eventId = eventResults.items[0]._id;",
                      "",
                      "    // Get the event registration form",
                      "    form = await wixEvents.getForm(eventId);",
                      "",
                      "    // Get tickets for the event",
                      "    const ticketResults = await wixData.query(\"Events/Tickets\")",
                      "      .eq(\"event\", eventId)",
                      "      .find();",
                      "",
                      "      if (ticketResults.items.length > 0) {",
                      "        tickets = ticketResults.items;",
                      "      }",
                      "      else {",
                      "        $w(\"#ticketRepeater\").hide();",
                      "        console.log(\"Could not find tickets\");",
                      "      }",
                      "  } ",
                      "  else {",
                      "    console.log(\"Could not find event\");",
                      "  }",
                      "}",
                      "",
                      "function displayTickets($item, itemData, index) {",
                      "  $item(\"#ticketName\").text = itemData.name;",
                      "  $item(\"#ticketPrice\").text = itemData.price.toString();",
                      "  $item(\"#ticketQuantity\").value = 0;",
                      "}",
                      "",
                      "function reserveTickets() {",
                      "  const selectedTickets = getSelectedTickets();",
                      "",
                      "  wixEvents.tickets.reserve(eventId, selectedTickets)",
                      "    .then( (reservation) => {",
                      "      reservationId = reservation.id;",
                      "    } )",
                      "    .catch( (error) => {",
                      "      console.log(\"Error\", error.message)",
                      "    } );",
                      "}",
                      "",
                      "function getSelectedTickets() {",
                      "  let selectedTickets = [];",
                      "",
                      "  $w(\"#ticketRepeater\").forEachItem( ($item, itemData, index) => {",
                      "    if($item(\"#ticketQuantity\").value > 0) {",
                      "      selectedTickets.push( {",
                      "        \"ticketId\": itemData._id,",
                      "        \"quantity\": $item(\"#ticketQuantity\").value",
                      "      } );",
                      "    }",
                      "  } );",
                      "",
                      "  return selectedTickets;",
                      "}",
                      "",
                      "function checkoutTickets() {",
                      "  wixEvents.tickets.checkout(eventId, reservationId, {",
                      "    \"formValues\": getFormValues(),",
                      "    \"coupon\": $w(\"#couponCode\").value",
                      "  })",
                      "    .then( ({order}) => {",
                      "      orderNumber = order.orderNumber",
                      "      wixPay.startPayment(order.paymentId);",
                      "      // Note that PDF tickets are available before payment is complete",
                      "      $w(\"ticketsPdfLink\").value = order.ticketsPdf;",
                      "    })",
                      "    .catch( (error) => {",
                      "      console.log(\"Error\", error.message)",
                      "    } );",
                      "}",
                      "",
                      "function updateTickets() {",
                      "  wixEvents.tickets.updateOrder(eventId, orderNumber, {",
                      "    \"formValues\": getFormValues()",
                      "  })",
                      "    .catch( (error) => {",
                      "      console.log(\"Error\", error.message)",
                      "    } );",
                      "}",
                      "",
                      "function verifyCouponCode(value, reject) {",
                      "  const coupon = $w(\"#couponCode\").value;",
                      "  wixEvents.tickets.verifyCoupon(eventId, reservationId, coupon) ",
                      "    .then( (result) => {",
                      "      if (result.discountErrors) {",
                      "        // handle verification failure",
                      "        $w(\"#couponCode\").updateValidityIndication();",
                      "        $w(\"#couponErrorMsg\").show();",
                      "        $w(\"#couponSuccessMsg\").hide();",
                      "        reject(\"Coupon is invalid\");",
                      "      } ",
                      "      else {",
                      "        // handle coupon verified",
                      "        $w(\"#couponErrorMsg\").hide()",
                      "        $w(\"#couponSuccessMsg\").show()",
                      "      }",
                      "    } );",
                      "}",
                      "",
                      "function getFormValues() {",
                      "  const formValues = [];",
                      "    ",
                      "  form.formData.rsvpFormInputs.forEach( (item) => {",
                      "    formValues.push(",
                      "      {",
                      "        \"name\": [item.name],",
                      "        \"value\": $w(`#${item.name}`).value",
                      "      }",
                      "    );",
                      "  } );",
                      "",
                      "  // When the form contains an address or additional",
                      "  // guests, add code to add those values to formValues.",
                      "",
                      "  return formValues;",
                      "}" ],
                  "extra":
                    { "description": "This example assumes that a form is built with input elements, where the element\n IDs match the field names retrieved from the `formData` property." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "To work with the Wix Events API, you need to publish your site." ] } } ],
  "operations":
    [ { "name": "validate",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "formValues",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-events.Form.FormValue" ] },
              "doc": "Field names and values for a registration form." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-events.Form.ValidationResult" ] },
            "doc": "Fulfilled - Validation result when validation passes.\nRejected - `FieldValidationError` when validation fails." },
        "locations":
          [ { "lineno": 110,
              "filename": "form.js" } ],
        "docs":
          { "summary": "Validates form fields and values against the registration form as defined in the site Dashboard.",
            "description":
              [ "The `validate()` function returns a Promise that resolves to `{valid: true}`",
                " if the fields and values in the registration form are valid or rejects if there are",
                " invalid fields or values.",
                "",
                " When the `validate()` function is called, the [`validateInput()`](#validateInput)",
                " function also runs for all your form fields.",
                "",
                " The following are invalid when checked against the event's registration form",
                " as defined in the site Dashboard:",
                "",
                " + The specified form values contain a field that does not exist in the event's registration form.",
                " + The specified form values are missing a field that exists in the event's registration form. You",
                "   must also include non-required fields even if their values are empty." ],
            "links": [],
            "examples":
              [ { "title": "Validate a registration form",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "let form;",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (result) => {",
                      "    form = result;",
                      "  } );",
                      "",
                      "// ...",
                      "",
                      "let formValues = // get form values",
                      "",
                      "form.validate(formValues)",
                      "  .then( (response) => {",
                      "    // handle case where form is valid",
                      "  } )",
                      "  .catch( (error) => {",
                      "    // handle case where form is not valid",
                      "    let message = error.message; // \"Following fields have invalid IDs: nonExistent1, nonExistent2\"",
                      "    let fields = error.fields; // [\"nonExistent1\", \"nonExistent2\"]",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "To work with the Wix Events API, you need to publish your site." ] } },
      { "name": "validateInput",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "inputName",
              "type": "string",
              "doc": "Name of the input field to validate." },
            { "name": "formValues",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-events.Form.FormValue" ] },
              "doc": "Field names and values for a registration form." } ],
        "ret":
          { "type": "wix-events.Form.ValidationResult",
            "doc": "An object representing whether the input value is valid." },
        "locations":
          [ { "lineno": 188,
              "filename": "form.js" } ],
        "docs":
          { "summary": "Validates an input form field value against the registration form as defined in the site Dashboard.",
            "description":
              [ "The `validateInput()` function returns `{valid: true}`",
                " if the value in the specified field is valid or throws an error if it is not valid.",
                "",
                " You may want to call the `validateInput()` function in an input element's",
                " [`onCustomValidation()`]($w.ValidatableMixin.html#onCustomValidation) event",
                " handler to validate an input while the form is being filled out." ],
            "links": [],
            "examples":
              [ { "title": "Validate a registration form value",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "let form;",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (result) => {",
                      "    form = result;",
                      "  } );",
                      "",
                      "// ...",
                      "",
                      "let formValues = // get form values",
                      "",
                      "try {",
                      "  form.validateInput(\"firstName\", formValues);",
                      "  // handle case where firstName is valid",
                      "} catch(error) {",
                      "  // handle case where firstName is not valid",
                      "  let message = error.message; // \"First Name is required\"",
                      "  let type = error.errorType; // \"EMPTY_INPUT\"",
                      "  let inputId = error.inputId; // firstName",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Validate a form value in an element's `onCustomValidation()` handler",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "let form;",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (result) => {",
                      "    form = result;",
                      "  } );",
                      "",
                      "// ...",
                      "",
                      "let formValues = // get form values",
                      "",
                      "// ...",
                      "",
                      "$w(\"#firstName\").onCustomValidation( (value, reject) => {",
                      "  try {",
                      "    form.validateInput(\"firstName\", formValues);",
                      "  } catch(error) {",
                      "    let message = error.message; // \"First Name is required\"",
                      "    let type = error.errorType; // \"EMPTY_INPUT\"",
                      "    let inputId = error.inputId; // firstName",
                      "    reject(`Error ${error}`);",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Create and submit a registration form",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "import wixData from 'wix-data';",
                      "",
                      "let eventId;",
                      "",
                      "// Run a query that will return only one event. Add",
                      "// additional filtering to the query if necessary.",
                      "wixData.query(\"Events/Events\")",
                      "  .eq(\"title\", \"My Event\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      eventId = results.items[0]._id;",
                      "    }",
                      "    else {",
                      "      console.log(\"Could not find event\");",
                      "    }",
                      "  });",
                      "",
                      "$w.onReady(function () {",
                      "  $w(\"#submit\").onClick( () => {",
                      "    const formValues = getFormValues();",
                      "",
                      "    wixEvents.rsvp.createRsvp(eventId, formValues)",
                      "      .then( (result) => {",
                      "        console.log(\"RSVP created.\")",
                      "      } )",
                      "      .catch( (error) => {",
                      "        console.log(`Error message: ${error.message}`);",
                      "        if(error.fields) {",
                      "          console.log(`Incorrect fields: ${error.fields}`);\t",
                      "        }",
                      "      } );\t",
                      "  } );",
                      "});",
                      "",
                      "function getFormValues() {",
                      "  return [",
                      "    {\"name\": \"rsvpStatus\", \"value\": \"YES\"},",
                      "    {\"name\": \"firstName\", \"value\": $w(\"#firstName\").value},",
                      "    {\"name\": \"lastName\", \"value\": $w(\"#lastName\").value},",
                      "    {\"name\": \"email\", \"value\": $w(\"#email\").value},",
                      "    {\"name\": \"custom\", \"value\": $w(\"#foodAllergies\").value},",
                      "",
                      "    // When a form contains an address, the way you format the",
                      "    // address information for submission depends on what type",
                      "    // of input elements you use to gather that information.",
                      "",
                      "    // Wix address input element.",
                      "    {\"name\": \"address\", \"value\": $w(\"#address\").value},",
                      "",
                      "    // Single element which is not an address",
                      "    // input element, such as a text input.",
                      "    {\"name\": \"address\", \"value\": [$w(\"#address\").value]},",
                      "",
                      "    // Multiple elements for the",
                      "    // various parts of an address.",
                      "    {",
                      "      \"name\": \"address\", ",
                      "      \"value\": [",
                      "        $w(\"#street\").value,",
                      "        $w(\"#city\").value,",
                      "        $w(\"#state\").value,",
                      "        $w(\"#country\").value,",
                      "        $w(\"#postalCode\").value",
                      "      ]",
                      "    },",
                      "",
                      "    // When a form contains an input for adding more guests to an",
                      "    // RSVP, format the guest names for submission in an array",
                      "    // where each element is the full name of a guest.",
                      "    {\"name\": \"additionalGuests\", \"value\": $w('#additionalGuests').value},",
                      "    {",
                      "      \"name\": \"guestNames\",",
                      "      \"value\": [",
                      "        `${$w(\"#guest1FirstName\").value} ${$w(\"#guest1LastName\").value}`,",
                      "        `${$w(\"#guest2FirstName\").value} ${$w(\"#guest2LastName\").value}`,",
                      "      ]",
                      "    }",
                      "  ];",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "To work with the Wix Events API, you need to publish your site." ] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "AdditionalLabel",
        "locations":
          [ { "lineno": 70,
              "filename": "form.js" } ],
        "docs":
          { "summary": "An object containing information about a label for a complex input field type.",
            "links":
              [ "[formData](#formData)" ],
            "examples":
              [ { "title": "Get registration form data",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (form) => {",
                      "    let formData = form.formData;",
                      "",
                      "    let fields = formData.formInputs;",
                      "    let firstFieldName = fields[0].name;",
                      "    let statusOptions = formData.rsvpStatusOptions;",
                      "    let registrationStatus = formData.registrationStatus;",
                      "    let isTicketed = formData.isTicketed;",
                      "  } );",
                      "",
                      "/*  formData:",
                      " *",
                      " *  {",
                      " *    \"rsvpStatusOptions\": \"YES_AND_NO,",
                      " *    \"registrationStatus\": \"OPEN_RSVP\",",
                      " *    \"isTicketed\": false,",
                      " *    \"formInputs\": [",
                      " *      {",
                      " *        \"_id\": \"37a5789b-27d1-43a3-703b-a93dedad5b01\",",
                      " *        \"additionalLabels\": [],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"NAME\",",
                      " *        \"label\": \"First Name\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 50,",
                      " *        \"name\": \"firstName\",",
                      " *        \"options\": []",
                      " *      },",
                      " *  ",
                      " *      ...",
                      " *  ",
                      " *      {",
                      " *        \"_id\": \"27d5789b-137a-43ed-a33d-a9703bad5b01\",",
                      " *        \"additionalLabels\": [",
                      " *          {",
                      " *            \"name\": \"one\",",
                      " *            \"label\": \"I'm bringing a plus one\"",
                      " *          },",
                      " *          {",
                      " *            \"name\": \"multiple\",",
                      " *            \"label\": \"Additional Guests\"",
                      " *          }",
                      " *        ],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"GUEST_CONTROL\",",
                      " *        \"label\": \"I'm bringing a plus one\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 0,",
                      " *        \"name\": \"additionalGuests\",",
                      " *        \"options\": [",
                      " *          \"0\",",
                      " *          \"1\"",
                      " *        ]",
                      " *      }",
                      " *    ]",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "Additional label name." },
            { "name": "label",
              "type": "string",
              "doc": "Additional label value." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FieldValidationError",
        "locations":
          [ { "lineno": 158,
              "filename": "form.js" } ],
        "docs":
          { "summary": "An object representing an error that occurred during validation of a registration form's fields.",
            "links":
              [ "[validate( )](#validate)",
                "[createRsvp( )](#wix-events.Rsvp.html#createRsvp)" ],
            "examples":
              [ { "title": "Validate a registration form",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "let form;",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (result) => {",
                      "    form = result;",
                      "  } );",
                      "",
                      "// ...",
                      "",
                      "let formValues = // get form values",
                      "",
                      "form.validate(formValues)",
                      "  .then( (response) => {",
                      "    // handle case where form is valid",
                      "  } )",
                      "  .catch( (error) => {",
                      "    // handle case where form is not valid",
                      "    let message = error.message; // \"Following fields have invalid IDs: nonExistent1, nonExistent2\"",
                      "    let fields = error.fields; // [\"nonExistent1\", \"nonExistent2\"]",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "message",
              "type": "string",
              "doc": "Error message." },
            { "name": "fields",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of fields that caused the error when the form does not pass validation." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FormData",
        "locations":
          [ { "lineno": 10,
              "filename": "form.js" } ],
        "docs":
          { "summary": "An object representing the details needed to create a registration form for an event.",
            "links":
              [ "[formData](#formData)" ],
            "examples":
              [ { "title": "Get registration form data",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (form) => {",
                      "    let formData = form.formData;",
                      "",
                      "    let fields = formData.formInputs;",
                      "    let firstFieldName = fields[0].name;",
                      "    let statusOptions = formData.rsvpStatusOptions;",
                      "    let registrationStatus = formData.registrationStatus;",
                      "    let isTicketed = formData.isTicketed;",
                      "  } );",
                      "",
                      "/*  formData:",
                      " *",
                      " *  {",
                      " *    \"rsvpStatusOptions\": \"YES_AND_NO,",
                      " *    \"registrationStatus\": \"OPEN_RSVP\",",
                      " *    \"isTicketed\": false,",
                      " *    \"formInputs\": [",
                      " *      {",
                      " *        \"_id\": \"37a5789b-27d1-43a3-703b-a93dedad5b01\",",
                      " *        \"additionalLabels\": [],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"NAME\",",
                      " *        \"label\": \"First Name\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 50,",
                      " *        \"name\": \"firstName\",",
                      " *        \"options\": []",
                      " *      },",
                      " *  ",
                      " *      ...",
                      " *  ",
                      " *      {",
                      " *        \"_id\": \"27d5789b-137a-43ed-a33d-a9703bad5b01\",",
                      " *        \"additionalLabels\": [",
                      " *          {",
                      " *            \"name\": \"one\",",
                      " *            \"label\": \"I'm bringing a plus one\"",
                      " *          },",
                      " *          {",
                      " *            \"name\": \"multiple\",",
                      " *            \"label\": \"Additional Guests\"",
                      " *          }",
                      " *        ],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"GUEST_CONTROL\",",
                      " *        \"label\": \"I'm bringing a plus one\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 0,",
                      " *        \"name\": \"additionalGuests\",",
                      " *        \"options\": [",
                      " *          \"0\",",
                      " *          \"1\"",
                      " *        ]",
                      " *      }",
                      " *    ]",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create and submit a registration form",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "import wixData from 'wix-data';",
                      "",
                      "let eventId;",
                      "let form;",
                      "",
                      "// Run a query that will return only one event. Add",
                      "// additional filtering to the query if necessary.",
                      "wixData.query(\"Events/Events\")",
                      "  .eq(\"title\", \"My Event\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      eventId = results.items[0]._id;",
                      "      wixEvents.getForm(eventId)",
                      "        .then( (result) => {",
                      "          form = result;",
                      "        } );",
                      "    }",
                      "    else {",
                      "      console.log(\"Could not find event\");",
                      "    }",
                      "  });",
                      "",
                      "$w.onReady(function () {",
                      "  $w('#submit').onClick( () => {",
                      "    let formValues = getFormValues();",
                      "",
                      "    form.submit(formValues)",
                      "      .then( (result) => {",
                      "        console.log(\"RSVP form submitted.\")",
                      "      } )",
                      "      .catch( (error) => {",
                      "        console.log(`Error message: ${error.message}`);",
                      "        if(error.fields) {",
                      "          console.log(`Incorrect fields: ${error.fields}`);\t",
                      "        }",
                      "      } );\t",
                      "  } );",
                      "});",
                      "",
                      "function getFormValues() {",
                      "  const formValues = [{\"name\": \"rsvpStatus\", \"value\": \"YES\"}];",
                      "    ",
                      "  form.formData.rsvpFormInputs.forEach( (item) => {",
                      "    formValues.push(",
                      "      {",
                      "        \"name\": [item.name],",
                      "        \"value\": $w(`#${item.name}`).value",
                      "      }",
                      "    );",
                      "  } );",
                      "",
                      "  // When the form contains an address or additional",
                      "  // guests, add code to add those values to formValues.",
                      "",
                      "  return formValues;",
                      "}" ],
                  "extra":
                    { "description": "This example assumes that a form is built with input elements, where the element\n IDs match the field names retrieved from the `formData` property." } },
                { "title": "Reserve, checkout, and update tickets",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "import wixData from 'wix-data';",
                      "import wixPay from 'wix-pay';",
                      "",
                      "let eventId;",
                      "let form;",
                      "let reservationId;",
                      "let orderNumber;",
                      "let tickets;",
                      "",
                      "$w.onReady(function () {",
                      "  // Retrieve data and set up page",
                      "  await getData();",
                      "  $w(\"#ticketRepeater\").onItemReady(displayTickets);",
                      "  $w(\"#ticketRepeater\").data = tickets;",
                      "",
                      "  // Define button click actions",
                      "  $w(\"reservationButton\").onClick(reserveTickets);",
                      "  $w(\"checkoutButton\").onClick(checkoutTickets);",
                      "  $w(\"updateButton\").onClick(updateTickets);",
                      "",
                      "  // Verify coupon code when it is entered",
                      "  $w(\"#couponCode\").onCustomValidation(verifyCouponCode);",
                      "});",
                      "",
                      "async function getData() {",
                      "  // Run a query that will return only one event. Add",
                      "  // additional filtering to the query if necessary.",
                      "  const eventResults = await wixData.query(\"Events/Events\")",
                      "    .eq(\"title\", \"My Event\")",
                      "    .find();",
                      "",
                      "  if (eventResults.items.length > 0) {",
                      "    eventId = eventResults.items[0]._id;",
                      "",
                      "    // Get the event registration form",
                      "    form = await wixEvents.getForm(eventId);",
                      "",
                      "    // Get tickets for the event",
                      "    const ticketResults = await wixData.query(\"Events/Tickets\")",
                      "      .eq(\"event\", eventId)",
                      "      .find();",
                      "",
                      "      if (ticketResults.items.length > 0) {",
                      "        tickets = ticketResults.items;",
                      "      }",
                      "      else {",
                      "        $w(\"#ticketRepeater\").hide();",
                      "        console.log(\"Could not find tickets\");",
                      "      }",
                      "  } ",
                      "  else {",
                      "    console.log(\"Could not find event\");",
                      "  }",
                      "}",
                      "",
                      "function displayTickets($item, itemData, index) {",
                      "  $item(\"#ticketName\").text = itemData.name;",
                      "  $item(\"#ticketPrice\").text = itemData.price.toString();",
                      "  $item(\"#ticketQuantity\").value = 0;",
                      "}",
                      "",
                      "function reserveTickets() {",
                      "  const selectedTickets = getSelectedTickets();",
                      "",
                      "  wixEvents.tickets.reserve(eventId, selectedTickets)",
                      "    .then( (reservation) => {",
                      "      reservationId = reservation.id;",
                      "    } )",
                      "    .catch( (error) => {",
                      "      console.log(\"Error\", error.message)",
                      "    } );",
                      "}",
                      "",
                      "function getSelectedTickets() {",
                      "  let selectedTickets = [];",
                      "",
                      "  $w(\"#ticketRepeater\").forEachItem( ($item, itemData, index) => {",
                      "    if($item(\"#ticketQuantity\").value > 0) {",
                      "      selectedTickets.push( {",
                      "        \"ticketId\": itemData._id,",
                      "        \"quantity\": $item(\"#ticketQuantity\").value",
                      "      } );",
                      "    }",
                      "  } );",
                      "",
                      "  return selectedTickets;",
                      "}",
                      "",
                      "function checkoutTickets() {",
                      "  wixEvents.tickets.checkout(eventId, reservationId, {",
                      "    \"formValues\": getFormValues(),",
                      "    \"coupon\": $w(\"#couponCode\").value",
                      "  })",
                      "    .then( ({order}) => {",
                      "      orderNumber = order.orderNumber",
                      "      wixPay.startPayment(order.paymentId);",
                      "      // Note that PDF tickets are available before payment is complete",
                      "      $w(\"ticketsPdfLink\").value = order.ticketsPdf;",
                      "    })",
                      "    .catch( (error) => {",
                      "      console.log(\"Error\", error.message)",
                      "    } );",
                      "}",
                      "",
                      "function updateTickets() {",
                      "  wixEvents.tickets.updateOrder(eventId, orderNumber, {",
                      "    \"formValues\": getFormValues()",
                      "  })",
                      "    .catch( (error) => {",
                      "      console.log(\"Error\", error.message)",
                      "    } );",
                      "}",
                      "",
                      "function verifyCouponCode(value, reject) {",
                      "  const coupon = $w(\"#couponCode\").value;",
                      "  wixEvents.tickets.verifyCoupon(eventId, reservationId, coupon) ",
                      "    .then( (result) => {",
                      "      if (result.discountErrors) {",
                      "        // handle verification failure",
                      "        $w(\"#couponCode\").updateValidityIndication();",
                      "        $w(\"#couponErrorMsg\").show();",
                      "        $w(\"#couponSuccessMsg\").hide();",
                      "        reject(\"Coupon is invalid\");",
                      "      } ",
                      "      else {",
                      "        // handle coupon verified",
                      "        $w(\"#couponErrorMsg\").hide()",
                      "        $w(\"#couponSuccessMsg\").show()",
                      "      }",
                      "    } );",
                      "}",
                      "",
                      "function getFormValues() {",
                      "  const formValues = [];",
                      "    ",
                      "  form.formData.rsvpFormInputs.forEach( (item) => {",
                      "    formValues.push(",
                      "      {",
                      "        \"name\": [item.name],",
                      "        \"value\": $w(`#${item.name}`).value",
                      "      }",
                      "    );",
                      "  } );",
                      "",
                      "  // When the form contains an address or additional",
                      "  // guests, add code to add those values to formValues.",
                      "",
                      "  return formValues;",
                      "}" ],
                  "extra":
                    { "description": "This example assumes that a form is built with input elements, where the element\n IDs match the field names retrieved from the `formData` property." } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "formInputs",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-events.Form.InputItem" ] },
              "doc": "Information about the input fields needed to create a registration form." },
            { "name": "rsvpStatusOptions",
              "type": "string",
              "doc": "Allowed RSVP statuses for an event. \n One of: \n\n + `\"YES_AND_NO\"`: Guests can RSVP for the event with a \"Yes\" or \"No\". \n + `\"YES_ONLY\"`: Guests can only RSVP for the event with a \"Yes\".\n + `\"WAITING\"`: The guest limit has been reached, but there is an open waitlist." },
            { "name": "registrationStatus",
              "type": "string",
              "doc": "Event registration status.\n One of:\n \n + `\"OPEN_RSVP\"`: Registration is open and guest limit has not been reached.\n + `\"OPEN_RSVP_WAITLIST\"`: Registration is open, guest limit has been reached,\n   and additional registering guests are added to the waitlist.\n + `\"OPEN_TICKETS\"`: Registration is open for a ticketed event and there are still\n   tickets available.\n + `\"OPEN_EXTERNAL\"`: Registration is open for an event that uses external registration,\n    not RSVP or ticketed. \n + `\"CLOSED\"`: Registration is closed because the guest limit has been reached.\n + `\"CLOSED_MANUALLY\"`: Registration was closed manually." },
            { "name": "isTicketed",
              "type": "boolean",
              "doc": "Whether the event is a ticketed event." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FormValue",
        "locations":
          [ { "lineno": 138,
              "filename": "form.js" } ],
        "docs":
          { "summary": "An object containing information about a form value.",
            "links":
              [ "[createRsvp( )](#wix-events.Rsvp.html#createRsvp)",
                "[validate( )](#validate)",
                "[validateInput( )](#validateInput)" ],
            "examples":
              [ { "title": "Create and submit a registration form",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "import wixData from 'wix-data';",
                      "",
                      "let eventId;",
                      "",
                      "// Run a query that will return only one event. Add",
                      "// additional filtering to the query if necessary.",
                      "wixData.query(\"Events/Events\")",
                      "  .eq(\"title\", \"My Event\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      eventId = results.items[0]._id;",
                      "    }",
                      "    else {",
                      "      console.log(\"Could not find event\");",
                      "    }",
                      "  });",
                      "",
                      "$w.onReady(function () {",
                      "  $w(\"#submit\").onClick( () => {",
                      "    const formValues = getFormValues();",
                      "",
                      "    wixEvents.rsvp.createRsvp(eventId, formValues)",
                      "      .then( (result) => {",
                      "        console.log(\"RSVP created.\")",
                      "      } )",
                      "      .catch( (error) => {",
                      "        console.log(`Error message: ${error.message}`);",
                      "        if(error.fields) {",
                      "          console.log(`Incorrect fields: ${error.fields}`);\t",
                      "        }",
                      "      } );\t",
                      "  } );",
                      "});",
                      "",
                      "function getFormValues() {",
                      "  return [",
                      "    {\"name\": \"rsvpStatus\", \"value\": \"YES\"},",
                      "    {\"name\": \"firstName\", \"value\": $w(\"#firstName\").value},",
                      "    {\"name\": \"lastName\", \"value\": $w(\"#lastName\").value},",
                      "    {\"name\": \"email\", \"value\": $w(\"#email\").value},",
                      "    {\"name\": \"custom\", \"value\": $w(\"#foodAllergies\").value},",
                      "",
                      "    // When a form contains an address, the way you format the",
                      "    // address information for submission depends on what type",
                      "    // of input elements you use to gather that information.",
                      "",
                      "    // Wix address input element.",
                      "    {\"name\": \"address\", \"value\": $w(\"#address\").value},",
                      "",
                      "    // Single element which is not an address",
                      "    // input element, such as a text input.",
                      "    {\"name\": \"address\", \"value\": [$w(\"#address\").value]},",
                      "",
                      "    // Multiple elements for the",
                      "    // various parts of an address.",
                      "    {",
                      "      \"name\": \"address\", ",
                      "      \"value\": [",
                      "        $w(\"#street\").value,",
                      "        $w(\"#city\").value,",
                      "        $w(\"#state\").value,",
                      "        $w(\"#country\").value,",
                      "        $w(\"#postalCode\").value",
                      "      ]",
                      "    },",
                      "",
                      "    // When a form contains an input for adding more guests to an",
                      "    // RSVP, format the guest names for submission in an array",
                      "    // where each element is the full name of a guest.",
                      "    {\"name\": \"additionalGuests\", \"value\": $w('#additionalGuests').value},",
                      "    {",
                      "      \"name\": \"guestNames\",",
                      "      \"value\": [",
                      "        `${$w(\"#guest1FirstName\").value} ${$w(\"#guest1LastName\").value}`,",
                      "        `${$w(\"#guest2FirstName\").value} ${$w(\"#guest2LastName\").value}`,",
                      "      ]",
                      "    }",
                      "  ];",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "name",
              "type": "string",
              "doc": "Form field name." },
            { "name": "value",
              "type": "string",
              "doc": "Form field value." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "InputItem",
        "locations":
          [ { "lineno": 43,
              "filename": "form.js" } ],
        "docs":
          { "summary": "An object containing information about an input field in a registration form.",
            "links":
              [ "[formData](#formData)" ],
            "examples":
              [ { "title": "Get registration form data",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (form) => {",
                      "    let formData = form.formData;",
                      "",
                      "    let fields = formData.formInputs;",
                      "    let firstFieldName = fields[0].name;",
                      "    let statusOptions = formData.rsvpStatusOptions;",
                      "    let registrationStatus = formData.registrationStatus;",
                      "    let isTicketed = formData.isTicketed;",
                      "  } );",
                      "",
                      "/*  formData:",
                      " *",
                      " *  {",
                      " *    \"rsvpStatusOptions\": \"YES_AND_NO,",
                      " *    \"registrationStatus\": \"OPEN_RSVP\",",
                      " *    \"isTicketed\": false,",
                      " *    \"formInputs\": [",
                      " *      {",
                      " *        \"_id\": \"37a5789b-27d1-43a3-703b-a93dedad5b01\",",
                      " *        \"additionalLabels\": [],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"NAME\",",
                      " *        \"label\": \"First Name\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 50,",
                      " *        \"name\": \"firstName\",",
                      " *        \"options\": []",
                      " *      },",
                      " *  ",
                      " *      ...",
                      " *  ",
                      " *      {",
                      " *        \"_id\": \"27d5789b-137a-43ed-a33d-a9703bad5b01\",",
                      " *        \"additionalLabels\": [",
                      " *          {",
                      " *            \"name\": \"one\",",
                      " *            \"label\": \"I'm bringing a plus one\"",
                      " *          },",
                      " *          {",
                      " *            \"name\": \"multiple\",",
                      " *            \"label\": \"Additional Guests\"",
                      " *          }",
                      " *        ],",
                      " *        \"array\": false,",
                      " *        \"controlType\": \"GUEST_CONTROL\",",
                      " *        \"label\": \"I'm bringing a plus one\",",
                      " *        \"required\": true,",
                      " *        \"maxLength\": 0,",
                      " *        \"name\": \"additionalGuests\",",
                      " *        \"options\": [",
                      " *          \"0\",",
                      " *          \"1\"",
                      " *        ]",
                      " *      }",
                      " *    ]",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "_id",
              "type": "string",
              "doc": "Unique input identifier." },
            { "name": "array",
              "type": "boolean",
              "doc": "Whether the input field's value is an array." },
            { "name": "label",
              "type": "string",
              "doc": "Input field display label." },
            { "name": "additionalLabels",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-events.Form.AdditionalLabel" ] },
              "doc": "Addition field display labels for complex fields." },
            { "name": "options",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of value options where applicable." },
            { "name": "maxLength",
              "type": "number",
              "doc": "Maximum length of the input field's value. A value of `0` indicates no maximum length." },
            { "name": "name",
              "type": "string",
              "doc": "Input field name." },
            { "name": "required",
              "type": "boolean",
              "doc": "Whether the input field is required." },
            { "name": "controlType",
              "type": "string",
              "doc": "The type of the input field.\n One of:\n \n + `\"NAME\"`\n + `\"INPUT\"`\n + `\"RADIO\"`\n + `\"CHECKBOX\"`\n + `\"DROPDOWN\"`\n + `\"GUEST_CONTROL\"`\n + `\"ADDRESS_FULL\"`\n + `\"TEXTAREA\"`\n + `\"DATE\"`" } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ValidationResult",
        "locations":
          [ { "lineno": 149,
              "filename": "form.js" } ],
        "docs":
          { "summary": "An object representing the result of a validation.",
            "links":
              [ "[validate( )](#validate)" ],
            "examples":
              [ { "title": "Validate a registration form",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "let form;",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (result) => {",
                      "    form = result;",
                      "  } );",
                      "",
                      "// ...",
                      "",
                      "let formValues = // get form values",
                      "",
                      "form.validate(formValues)",
                      "  .then( (response) => {",
                      "    // handle case where form is valid",
                      "  } )",
                      "  .catch( (error) => {",
                      "    // handle case where form is not valid",
                      "    let message = error.message; // \"Following fields have invalid IDs: nonExistent1, nonExistent2\"",
                      "    let fields = error.fields; // [\"nonExistent1\", \"nonExistent2\"]",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Validate a registration form value",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "let form;",
                      "",
                      "wixEvents.getForm(eventId)",
                      "  .then( (result) => {",
                      "    form = result;",
                      "  } );",
                      "",
                      "// ...",
                      "",
                      "let formValues = // get form values",
                      "",
                      "try {",
                      "  form.validateInput(\"firstName\", formValues);",
                      "  // handle case where firstName is valid",
                      "} catch(error) {",
                      "  // handle case where firstName is not valid",
                      "  let message = error.message; // \"First Name is required\"",
                      "  let type = error.errorType; // \"EMPTY_INPUT\"",
                      "  let inputId = error.inputId; // firstName",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "valid",
              "type": "boolean",
              "doc": "Indicates that the registration form field(s) are valid." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ValueValidationError",
        "locations":
          [ { "lineno": 168,
              "filename": "form.js" } ],
        "docs":
          { "summary": "An object representing an error that occurred during validation of an RSVP form's values.",
            "links":
              [ "[validateInput( )](#validateInput)",
                "[createRsvp( )](#wix-events.Rsvp.html#createRsvp)" ],
            "examples":
              [ { "title": "Validate an RSVP form's values",
                  "body":
                    [ "import wixEvents from 'wix-events';",
                      "",
                      "// ...",
                      "",
                      "const eventId = // Get the event ID",
                      "const form = wixEvents.createEventRsvpForm(eventId);",
                      "",
                      "// ...",
                      "",
                      "let formValues = // get form values",
                      "",
                      "form.validateInput(\"firstName\", formValues)",
                      "  .then( (response) => {",
                      "    // handle case where firstName is valid",
                      "  } )",
                      "  .catch( (error) => {",
                      "    // handle case where firstName is not valid",
                      "    let message = error.message; // \"First Name is required\"",
                      "    let type = error.errorType; // \"EMPTY_INPUT\"",
                      "    let inputId = error.inputId; // firstName",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "message",
              "type": "string",
              "doc": "Error message." },
            { "name": "inputId",
              "type": "string",
              "doc": "ID of the input field that failed validation." },
            { "name": "errorType",
              "type": "string",
              "doc": "Error type.\n One of:\n\n + `\"EMPTY_INPUT\"`: A required field is missing its value.\n + `\"INVALID_INPUT_VALUE\"`: The value is not valid for the field type.\n + `\"INPUT_TOO_LONG\"`: The value is too long.\n + `\"INVALID_OPTION\"`: The value does not match one of the defined options for the field.\n + `\"INVALID_STATUS\"`: The status value is not valid.\n + `\"INVALID_NUMBER_OF_GUESTS\"`: The number of guests does not match the number defined for the form." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }