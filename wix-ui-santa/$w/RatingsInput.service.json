{ "name": "RatingsInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.DisabledMixin",
      "$w.RequiredMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.ViewportMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "ratingsInput.js" },
  "docs":
    { "summary": "A [ratings input](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-ratings-input-element)\n element allows you to capture a value from your users\n using icons.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 37,
              "filename": "ratingsInput.js" },
            { "lineno": 70,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Sets or gets the rating value.",
            "description":
              [ "Setting the `value` property sets how many icons are displayed in the on",
                " state.",
                "",
                " Set `value` to a whole number between `1` and `5`.",
                "",
                " To reset the ratings input element, restoring it to the empty state, set",
                " the `value` property to `null` or `undefined`.",
                "",
                " Getting the `value` property returns the current displayed value.",
                " > **Notes:**",
                " > - If an element is connected to a dataset, setting the element's `value`",
                " >   in code does not set the value of the connected field in the dataset.",
                " >   That means if you use the dataset to perform a submit, the value changed",
                " >   in code is not reflected in the submitted item.",
                " >",
                " > - To submit the new value using a dataset, set the field's value using the [`setFieldValue()`](wix-dataset.html#setFieldValue) function before performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get the rating value",
                  "body":
                    [ "let value = $w(\"#myRatingsInput\").value; // 4" ],
                  "extra":
                    {  } },
                { "title": "Set the rating value",
                  "body":
                    [ "$w(\"#myRatingsInput\").value = 4;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.RatingsInput.RatingsInputValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 79,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onIconMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.IconMouseInEventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.RatingsInput",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 21,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Sets the function that runs when a user's mouse enters one of the rating icons.",
            "links": [],
            "examples":
              [ { "title": "Get information about the icon that the mouse entered",
                  "body":
                    [ "$w(\"#myRatingsInput\").onIconMouseIn( (event) => {",
                      "  let label = event.label;  // \"Great\"",
                      "  let value = event.value;  // 4",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "IconMouseIn" } } ],
  "callbacks":
    [ { "name": "RatingsInputValidator",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "value",
              "type": "number",
              "doc": "The value of the element being validated." },
            { "name": "reject",
              "type": "Function",
              "doc": "A function that invalidates the element with the specified message." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 117,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Function that runs when custom validation is checked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./ratingsinput/guides/CSS Classes.md" } ] }