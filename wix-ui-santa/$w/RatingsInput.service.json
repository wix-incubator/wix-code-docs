{ "name": "RatingsInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.DisabledMixin",
      "$w.RequiredMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.ViewportMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "ratingsInput.js" },
  "docs":
    { "summary": "A [ratings input](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-ratings-input-element)\n element allows you to capture a value from your users\n using icons.",
      "description":
        [ "A [ratings input](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-ratings-input-element) element allows you to capture a value from your users using icons." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.RatingsInput.Accessibility",
        "locations":
          [ { "lineno": 127,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myRatingsInput').accessibility.lang = 'en';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myRatingsInputAccessibility = $w('#myRatingsInput').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 163,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example,",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "Custom classes are those that you create on a site, not the predefined global classes",
                "that are provided for each element.",
                "",
                "Use the following methods to work with the element's custom CSS classes:",
                "+ [`add()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/add): Adds custom CSS classes to the class list of an element.",
                "+ [`contains()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/contains): Indicates whether the element's class list contains a specified custom CSS class.",
                "+ [`remove()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/remove): Removes custom CSS classes from an element's class list.",
                "+ [`replace()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/replace): Replaces a custom CSS class of an element with a different custom CSS class.",
                "+ [`toggle()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/toggle): Toggles an element's custom CSS class.",
                "+ [`values()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/values): Retrieves an array of strings listing an element's custom CSS classes.",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://dev.wix.com/docs/velo/velo-only-apis/$w/styling-elements-with-css)",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics)." ],
            "links":
              [ "$w.CustomClassList" ],
            "examples":
              [ { "title": "Add a single class to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Add multiple classes to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Indicate whether an element contains a specified class",
                  "body":
                    [ "$w(\"#myElement\").customClassList.contains(\"className1\"); //true" ],
                  "extra":
                    {  } },
                { "title": "Remove a single class from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Remove multiple classes from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Replace a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.replace(\"className1, className2\");" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.toggle(\"className1\")  // true" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "if( $w(\"#myElement\").customClassList.contains(\"className1\") ) {",
                      "  $w(\"#myElement\").customClassList.replace(\"className1, className2\");",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").customClassList.replace(\"className2, className1\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Get the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.value; // \"className1 className2\"" ],
                  "extra":
                    {  } },
                { "title": "Gets a list of the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.values(); // [\"className1\", \"className2\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 38,
              "filename": "ratingsInput.js" },
            { "lineno": 71,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Sets or gets the rating value.",
            "description":
              [ "Setting the `value` property sets how many icons are displayed in the on",
                " state.",
                "",
                " Set `value` to a whole number between `1` and `5`.",
                "",
                " To reset the ratings input element, restoring it to the empty state, set",
                " the `value` property to `null` or `undefined`.",
                "",
                " Getting the `value` property returns the current displayed value.",
                " > **Notes:**",
                " > - If an element is connected to a dataset, setting the element's `value`",
                " >   in code does not set the value of the connected field in the dataset.",
                " >   That means if you use the dataset to perform a submit, the value changed",
                " >   in code is not reflected in the submitted item.",
                " >",
                " > - To submit the new value using a dataset, set the field's value using the [`setFieldValue()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/set-field-value) function before performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get the rating value",
                  "body":
                    [ "let value = $w(\"#myRatingsInput\").value; // 4" ],
                  "extra":
                    {  } },
                { "title": "Set the rating value",
                  "body":
                    [ "$w(\"#myRatingsInput\").value = 4;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.RatingsInput.RatingsInputValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 80,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onIconMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.IconMouseInEventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.RatingsInput",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "lineno": 22,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Sets the function that runs when a user's mouse enters one of the rating icons.",
            "links": [],
            "examples":
              [ { "title": "Get information about the icon that the mouse entered",
                  "body":
                    [ "$w(\"#myRatingsInput\").onIconMouseIn( (event) => {",
                      "  let label = event.label;  // \"Great\"",
                      "  let value = event.value;  // 4",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "IconMouseIn" } } ],
  "callbacks":
    [ { "name": "RatingsInputValidator",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "value",
              "type": "number",
              "doc": "The value of the element being validated." },
            { "name": "reject",
              "type": "Function",
              "doc": "A function that invalidates the element with the specified message." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 118,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "Function that runs when custom validation is checked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 150,
              "filename": "ratingsInput.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "lang",
              "type": "string",
              "doc": "Specifies the language of the element's content, enhancing pronunciation accuracy for screen readers and other assistive technologies. \n\nSetting the `lang` property improves multilingual support by ensuring that assistive technologies apply the correct linguistic rules and speech patterns. It also enables search engines to index the element's content accurately, resulting in better visibility and relevance in search results for better SEO optimization. \n\nThe `lang` property's value must be a 2-letter language code in [ISO 639-1 format](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes). For example, `\"en\"` for english.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./ratingsinput/guides/CSS Classes.md" } ] }