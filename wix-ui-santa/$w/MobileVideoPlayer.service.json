{ "name": "MobileVideoPlayer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "MobileVideoPlayer.js" },
  "docs":
    { "summary": "[Mobile Video player](https://support.wix.com/en/article/wix-video-displaying-videos-on-your-site) is an element for presenting videos.",
      "description":
        [ "A mobile video player allows you to present video from:",
          " + Videos uploaded to your app",
          " + Any online .mp4 file" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentTime",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 74,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Gets the current play time from the beginning of the current video, in seconds.",
            "description":
              [ "To set the `currentTime`, use `seek()`." ],
            "links": [],
            "examples":
              [ { "title": "Get the current play time",
                  "body":
                    [ "let currentTime = $w(\"#myMobileVideoPlayer\").currentTime // 137" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels":
          [ "removed" ],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 416,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> **Note:** This standard element property is not relevant for MobileVideoPlayer.",
                "> For more information, see [Styling Elements with CSS](https://www.wix.com/velo/reference/$w/styling-elements-with-css) ",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn/CSS)." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "description",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 39,
              "filename": "MobileVideoPlayer.js" },
            { "lineno": 53,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the description of a video.\n > **Note:** Setting a video description only works when a mobile video player is presenting a\n >   video uploaded to your app.",
            "links": [],
            "examples":
              [ { "title": "Get a mobile video player's description",
                  "body":
                    [ "let desc = $w(\"#myMobileVideoPlayer\").description // \"Video description\"" ],
                  "extra":
                    {  } },
                { "title": "Set a mobile video player's description",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").description = \"Video description\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "duration",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 87,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Gets the total play time of the current video in seconds.",
            "links": [],
            "examples":
              [ { "title": "Get the current video's duration",
                  "body":
                    [ "let duration = $w(\"#myMobileVideoPlayer\").duration // 198" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isMuted",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 125,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Indicates if the volume is currently muted.",
            "description":
              [ "To set `isMuted`, use `mute()`",
                " and `unmute()`." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the volume is muted",
                  "body":
                    [ "let isMuted = $w(\"#myMobileVideoPlayer\").isMuted // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isPlaying",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 60,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Indicates if a video is currently playing.",
            "description":
              [ "To set the `isPlaying` property, use `play()`,",
                " `pause()`, and `stop()`." ],
            "links": [],
            "examples":
              [ { "title": "Get whether a video is playing",
                  "body":
                    [ "let isPlaying = $w(\"#myMobileVideoPlayer\").isPlaying // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "poster",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 174,
              "filename": "MobileVideoPlayer.js" },
            { "lineno": 200,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the image shown in the video player before the video is played.",
            "description":
              [ "Setting `poster` changes the displayed poster to",
                " the poster found at the new `poster` value.",
                "",
                " Getting `poster` returns the location of the",
                " current poster media file.",
                "",
                " The media file is one of the following:",
                "",
                " + An image from the [Media Manager](https://support.wix.com/en/article/about-the-media-manager).",
                "   URL Format: `wix:image://v1/<image_uri>/<filename>#originWidth=<width>&originHeight=<height>`",
                " + An external image URL.",
                "   URL Format: `http(s)://site.com/image-file.jpg`" ],
            "links": [],
            "examples":
              [ { "title": "Get the current video's poster",
                  "body":
                    [ "let videoPoster = $w(\"#myMobileVideoPlayer\").poster;",
                      "// \"wix:image://v1/11062b_7124ff06fc5649f5f4846ff000.jpg/_.jpg#originWidth=1920&originHeight=1080\"" ],
                  "extra":
                    {  } },
                { "title": "Set the current video's poster to an image from the Media Manager",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").poster = \"wix:image://v1/11062b_7124ff06fc56495f4846ff000.jpg/_.jpg#originWidth=1920&originHeight=1080\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "src",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 139,
              "filename": "MobileVideoPlayer.js" },
            { "lineno": 167,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the file location of the current video.",
            "description":
              [ "Setting `src` changes the displayed video to",
                " the video found at the new `src` value.",
                "",
                " Getting `src` returns the location of the",
                " current video file.",
                "",
                " The video file is one of the following:",
                "",
                " + A video from the [Media Manager](https://support.wix.com/en/article/about-the-media-manager).",
                "   URL Format: `wix:video://v1/<video_uri>/<filename>#posterUri=<poster_uri>&posterWidth=<width>&posterHeight=<height>`",
                " + A video from a video sharing site.",
                "   URL Format: `https://www.site.com/video-path`",
                " + An external video URL.",
                "   URL Format: `http(s)://site.com/video-file.mp4`" ],
            "links": [],
            "examples":
              [ { "title": "Get the current video's location",
                  "body":
                    [ "let videoSrc = $w(\"#myMobileVideoPlayer\").src;",
                      "// \"wix:video://v1/80c05f_be1c421575e34915ad257571c4055ee4/SampleVideo_1280x720_10mb.mp4#posterUri=80c05f_be1c421575e34915ad257571c4055ee4f001.jpg&posterWidth=1280&posterHeight=720\"" ],
                  "extra":
                    {  } },
                { "title": "Set the current video to a video uploaded to your app",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").src = \"wix:video://v1/80c05f_be1c421575e34915ad257571c4055ee4/SampleVideo_1280x720_10mb.mp4#posterUri=80c05f_be1c421575e34915ad257571c4055ee4f001.jpg&posterWidth=1280&posterHeight=720\";" ],
                  "extra":
                    {  } },
                { "title": "Set the current video to a YouTube video",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").src = \"https://www.youtube.com/watch?v=VyMsDTwge18\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "title",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 18,
              "filename": "MobileVideoPlayer.js" },
            { "lineno": 32,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the title displayed in a mobile video player.\n > **Note:** Setting a video title only works when a mobile video player is presenting a\n >   video uploaded to your site.",
            "links": [],
            "examples":
              [ { "title": "Get a mobile video player's title",
                  "body":
                    [ "let title = $w(\"#myMobileVideoPlayer\").title // \"Video Title\"" ],
                  "extra":
                    {  } },
                { "title": "Set a mobile video player's title",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").title = \"Video Title\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "volume",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 98,
              "filename": "MobileVideoPlayer.js" },
            { "lineno": 118,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Sets or gets the video player volume.",
            "description":
              [ "Setting `volume` sets the video player's percentage of total",
                " volume. Set the value to a number between `0` and `100`.",
                "",
                " Getting the `volume` property returns the video player's current",
                " percentage of total volume.",
                " > **Note:** The actual volume heard by an app user depends on the value of the",
                " > `volume` property and the volume settings on the app user's device." ],
            "links": [],
            "examples":
              [ { "title": "Get a mobile video player's volume",
                  "body":
                    [ "let volume = $w(\"#myMobileVideoPlayer\").volume // 42" ],
                  "extra":
                    {  } },
                { "title": "Set a mobile video player's volume",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").volume = 42;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "mute",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been muted." },
        "locations":
          [ { "lineno": 279,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Mutes video volume.",
            "links": [],
            "examples":
              [ { "title": "Mute volume",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").mute();" ],
                  "extra":
                    {  } },
                { "title": "Mute volume and log a message when done",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").mute()",
                      "  .then( () => {",
                      "    console.log(\"Done with mute\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "next",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Element" ] },
            "doc": "Fulfilled - The newly displayed image or slide." },
        "locations":
          [ { "lineno": 379,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Moves to the next item.",
            "description":
              [ "The `next()` function returns a promise that is resolved when the next",
                " item is completely rendered. Calling `next()` when on the last item",
                " moves to the first item." ],
            "links":
              [ "[previous( )](#previous)",
                "[play( )](#play)",
                "[pause( )](#pause)" ],
            "examples":
              [ { "title": "Move to the next item",
                  "body":
                    [ "$w(\"#myElement\").next();" ],
                  "extra":
                    {  } },
                { "title": "Move to the next item and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").next()",
                      "  .then( () => {",
                      "    console.log(\"Finished moving to the next item\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onEnded",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video has ended." } ],
        "ret":
          { "type": "$w.MobileVideoPlayer",
            "doc": "The video player that triggered the event." },
        "locations":
          [ { "lineno": 347,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback has ended.",
            "description":
              [ "A video ends when playback reaches the `duration` of the video.",
                "",
                " If the video is set to play in a loop, this event handler is never triggered." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the video player whose video has ended",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").onEnded( (event) => {",
                      "  let targetId = event.target.id; // \"myMobileVideoPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onEnded" } },
      { "name": "onPause",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video is paused." } ],
        "ret":
          { "type": "$w.MobileVideoPlayer",
            "doc": "The video player that triggered the event." },
        "locations":
          [ { "lineno": 330,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is paused.",
            "description":
              [ "A video can be paused by a user clicking the video player's",
                " pause button or by calling `pause()` or `stop()`." ],
            "links":
              [ "[pause( )](#pause)" ],
            "examples":
              [ { "title": "Get the ID of the video player that's been paused",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").onPause( (event) => {",
                      "  let targetId = event.target.id; // \"myMobileVideoPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPause" } },
      { "name": "onPlay",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video is played." } ],
        "ret":
          { "type": "$w.MobileVideoPlayer",
            "doc": "The video player that triggered the event." },
        "locations":
          [ { "lineno": 313,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is started or restarted.",
            "description":
              [ "A video can be played by a user clicking the video player's",
                " play button or by calling `play()`." ],
            "links":
              [ "[play( )](#play)" ],
            "examples":
              [ { "title": "Get the ID of the video player that is playing",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").onPlay( (event) => {",
                      "  let targetId = event.target.id; // \"myMobileVideoPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPlay" } },
      { "name": "onProgress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the video progresses." } ],
        "ret":
          { "type": "$w.MobileVideoPlayer" },
        "locations":
          [ { "lineno": 364,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback progresses.",
            "description":
              [ "A video continually progresses as the video plays." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the video player that is progressing",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").onProgress( (event) => {",
                      "  let targetId = event.target.id; // \"myMobileVideoPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onProgress" } },
      { "name": "pause",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been paused." },
        "locations":
          [ { "lineno": 223,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "This method pauses the current video and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the video player by the `onPause`",
                " function or in the Editor are called." ],
            "links": [],
            "examples":
              [ { "title": "Pause playback",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").pause();" ],
                  "extra":
                    {  } },
                { "title": "Pause playback and log a message when done",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").pause()",
                      "  .then( () => {",
                      "    console.log(\"Pause over\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "play",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback begins or resumes." },
        "locations":
          [ { "lineno": 207,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Begins or resumes playback.",
            "description":
              [ "This method plays the current video and fires a `play` event.",
                "",
                " The `play` event handlers set on the video player by the `onPlay`",
                " function or in the editor are called." ],
            "links": [],
            "examples":
              [ { "title": "Begin or resume playback",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").play();" ],
                  "extra":
                    {  } },
                { "title": "Begin or resume playback and log a message when done",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").play()",
                      "  .then( () => {",
                      "    console.log(\"Done with play\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previous",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Element" ] },
            "doc": "Fulfilled - The newly displayed image or slide." },
        "locations":
          [ { "lineno": 398,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Moves to the previous image or slide.",
            "description":
              [ "The `previous()` function returns a promise that is resolved when the",
                " item is completely rendered. Calling `previous()` when on the first item",
                " moves to the last item." ],
            "links":
              [ "[next( )](#next)" ],
            "examples":
              [ { "title": "Move to the previous item",
                  "body":
                    [ "$w(\"#myElement\").previous();" ],
                  "extra":
                    {  } },
                { "title": "Move to the previous item and log a message when done",
                  "body":
                    [ "$w(\"#myElement\").previous()",
                      "  .then( () => {",
                      "    console.log(\"Finished moving to the previous item\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "seek",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "time",
              "type": "number",
              "doc": "Time to which to move the playback, in seconds." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the playback has been moved to the specified time." },
        "locations":
          [ { "lineno": 301,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Moves playback to the specified time, in seconds.",
            "links": [],
            "examples":
              [ { "title": "Move playback to 1 minute and 42 seconds into the video",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").seek(102);" ],
                  "extra":
                    {  } },
                { "title": "Move playback and log a message when done",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").seek(102)",
                      "  .then( () => {",
                      "    console.log(\"Done with seek\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stop",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been stopped." },
        "locations":
          [ { "lineno": 239,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "This method stops the current playback,",
                " moves to the beginning of the video, and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the video player by the `onPause`",
                " function or in the Editor are called.",
                " > **Note:** This method does not work when a mobile video player is presenting a",
                " > video from Dailymotion, Facebook, or Twitch." ],
            "links": [],
            "examples":
              [ { "title": "Stop playback",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").stop();" ],
                  "extra":
                    {  } },
                { "title": "Stop playback and log a message when done",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").stop()",
                      "  .then( () => {",
                      "    console.log(\"Done with stop\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "togglePlay",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been toggled." },
        "locations":
          [ { "lineno": 258,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Toggles playback.",
            "description":
              [ "This method either pauses or plays the current video based",
                " on its current state:",
                "",
                " + If the video is paused, it plays and a `play` event is fired. The",
                "   `play` event handlers set on the video player by the `onPlay`",
                "   function or in the Editor are called.",
                " + If the video is playing, it is paused and a `pause` event is fired. The",
                "   `pause` event handlers set on the video player by the `onPause`",
                "   function or in the Editor are called." ],
            "links": [],
            "examples":
              [ { "title": "Toggle playback",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").togglePlay();" ],
                  "extra":
                    {  } },
                { "title": "Toggle playback and log a message when done",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").togglePlay()",
                      "  .then( () => {",
                      "    console.log(\"Done with toggle play\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "unmute",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been unmuted." },
        "locations":
          [ { "lineno": 290,
              "filename": "MobileVideoPlayer.js" } ],
        "docs":
          { "summary": "Unmutes video volume.",
            "links": [],
            "examples":
              [ { "title": "Unmute volume",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").unmute();" ],
                  "extra":
                    {  } },
                { "title": "Unmute volume and log a message when done",
                  "body":
                    [ "$w(\"#myMobileVideoPlayer\").unmute()",
                      "  .then( () => {",
                      "    console.log(\"Done with unmute\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }