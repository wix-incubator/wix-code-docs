{ "name": "ProgressBar",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.StyleMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "ProgressBar.js" },
  "docs":
    { "summary": "A [progress bar](https://support.wix.com/en/article/cms-adding-and-setting-up-a-progress-bar) is an element for displaying the status of an ongoing process.",
      "description":
        [ "A [progress bar](https://support.wix.com/en/article/cms-adding-and-setting-up-a-progress-bar) allows you to visually display the status of an ongoing process. ",
          "",
          "For example you might use progress bars to indicate:",
          "",
          "- How much of a process a site visitor has completed.",
          "    - How many stages of a purchase process have been completed.",
          "    - How many tasks are marked as done on a to-do list.",
          "    - Percentage completed of a site visitor profile. ",
          "- How much progress has been made towards a goal.",
          "    - The amount of money raised towards a fundraising goal.",
          "    - The number of people who signed a petition.",
          "",
          "## Measuring and viewing progress",
          "",
          "Progress is measured as a number between 0 and the target value that you set. ",
          "",
          "- The **value** is the indication of the current progress status in the progress bar. ",
          "- The **target value** is the indication of the end goal or completed process in the progress bar.",
          "- The area indicating the progress that has already been made is colored in the foreground color. ",
          "- The remaining area until the target value is colored in the background color. ",
          "",
          "<div style=text-align:center>",
          "",
          "![](https://d2x3xhvgiqkx42.cloudfront.net/12345678-1234-1234-1234-1234567890ab/dfff8cbb-ddcb-4376-8cae-3fedb2dd4458/2019/07/16/e054245d-5ce0-4654-8118-0bc66e8eaff3/b3bcaa83-ad1b-47d1-b46b-a23d5d0e5ac6.png)",
          "",
          "</div>",
          "",
          "",
          "## Customizing the progress bar with code",
          "",
          "The progress bar's API allows you to: ",
          "",
          "* Get or set the value and target value. ",
          "* Set the styling of the background color, foreground color, border color, and border width. ",
          "",
          "## Indicating progress with code",
          "",
          "To indicate progress in a progress bar, change the progress bar's value in code. ",
          "",
          "- Sometimes you can simply change the value to a new value. See the Profile Completion example below.",
          "- In other cases, you need to first calculate the new value before setting it. See the Fundraising Goal example below.",
          "",
          "**Profile completion**",
          "",
          "Let's say you're using a progress bar to indicate how much of a profile a site visitor has completed. After every step the site visitor completes you can change the progress bar's value to one more than the current value. ",
          "",
          "**Reaching a fundraising goal**",
          "",
          "Let's say you're using a progress bar to show how much money has been raised. Typically, you calculate that value by [running an aggregation](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/aggregations/working-with-aggregations-in-the-data-api) on a CMS collection where you store individual contributions as items. Then use the result of the aggregation to set the value in the progress bar. ",
          "",
          "You can do this: ",
          "- On-the-fly, when displaying the progress bar using only code. ",
          "- Perform the aggregation each time a contribution has been made and store that value in a collection. Then you can [connect](https://support.wix.com/en/article/connecting-page-elements-to-a-dataset) the progress bar to that stored value using a dataset.",
          "",
          "## See also",
          "",
          "- [Adding and Setting Up a Progress Bar](https://support.wix.com/en/article/cms-adding-and-setting-up-a-progress-bar)" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.ProgressBar.Accessibility",
        "locations":
          [ { "lineno": 167,
              "filename": "ProgressBar.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myProgressBar').accessibility.ariaBusy = true;",
                      "$w('#myProgressBar').accessibility.ariaLabel = 'Loading progress';",
                      "$w('#myProgressBar').accessibility.ariaValueText = 'Step 3 of 5 completed';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myProgressBarAccessibility = $w('#myProgressBar').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 205,
              "filename": "ProgressBar.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example,",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "Custom classes are those that you create on a site, not the predefined global classes",
                "that are provided for each element.",
                "",
                "Use the following methods to work with the element's custom CSS classes:",
                "+ [`add()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/add): Adds custom CSS classes to the class list of an element.",
                "+ [`contains()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/contains): Indicates whether the element's class list contains a specified custom CSS class.",
                "+ [`remove()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/remove): Removes custom CSS classes from an element's class list.",
                "+ [`replace()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/replace): Replaces a custom CSS class of an element with a different custom CSS class.",
                "+ [`toggle()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/toggle): Toggles an element's custom CSS class.",
                "+ [`values()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/values): Retrieves an array of strings listing an element's custom CSS classes.",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://dev.wix.com/docs/velo/velo-only-apis/$w/styling-elements-with-css)",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics)." ],
            "links":
              [ "$w.CustomClassList" ],
            "examples":
              [ { "title": "Add a single class to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Add multiple classes to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Indicate whether an element contains a specified class",
                  "body":
                    [ "$w(\"#myElement\").customClassList.contains(\"className1\"); //true" ],
                  "extra":
                    {  } },
                { "title": "Remove a single class from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Remove multiple classes from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Replace a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.replace(\"className1, className2\");" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.toggle(\"className1\")  // true" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "if( $w(\"#myElement\").customClassList.contains(\"className1\") ) {",
                      "  $w(\"#myElement\").customClassList.replace(\"className1, className2\");",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").customClassList.replace(\"className2, className1\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Get the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.value; // \"className1 className2\"" ],
                  "extra":
                    {  } },
                { "title": "Gets a list of the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.values(); // [\"className1\", \"className2\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 74,
              "filename": "ProgressBar.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the progress bar's styles.",
            "description":
              [ "The following styles can be used with progress bars:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`foregroundColor`]($w.Style.html#foregroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                "",
                "",
                "",
                " > **Note:** Not all styles can be used on all progress bar designs. To determine which styles",
                " work with a specific progress design, go to the **Progress Design** panel in",
                " the Editor, choose a design, and click **Customize Design**. The design",
                " options that you see in the **Progress Design** panel for your particular",
                " box are the styles you can use in your code." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "targetValue",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 136,
              "filename": "ProgressBar.js" },
            { "lineno": 160,
              "filename": "ProgressBar.js" } ],
        "docs":
          { "summary": "Sets or gets a progress bar's target value.",
            "description":
              [ "The `targetValue` is the value at which the progress is complete.",
                "",
                " Setting the `targetValue` property sets the current target for the progress bar",
                " and updates the displayed progress indication to reflect the progress [`value`](#value)",
                " as a percentage of the `targetValue`.",
                "",
                " The `targetValue` property can be set to any number greater than `0`.",
                "",
                " > **Notes:**",
                " > - If a progress bar is connected to a dataset, setting the progress bar's `targetValue` in code does not set the value of the connected field in the dataset.",
                " >",
                " > - To change the value in the connected dataset, set the field's value using",
                " >   the [`setFieldValue()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/set-field-value) function." ],
            "links": [],
            "examples":
              [ { "title": "Get a progress bar's value",
                  "body":
                    [ "let target = $w(\"#myProgressBar\").targetValue; // 150" ],
                  "extra":
                    {  } },
                { "title": "Set a progress bar's value",
                  "body":
                    [ "$w(\"#myProgressBar\").targetValue = 150;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 102,
              "filename": "ProgressBar.js" },
            { "lineno": 129,
              "filename": "ProgressBar.js" } ],
        "docs":
          { "summary": "Sets or gets a progress bar's value.",
            "description":
              [ "Setting the `value` property sets the current value for the progress bar",
                " and updates the displayed progress indication to reflect the progress as",
                " a percentage of the [`targetValue`](#targetValue).",
                "",
                " The `value` property can be set to any number greater or equal to `0`. Setting",
                " `value` to a number greater than [`targetValue`](#targetValue) can be used to",
                " indicate that a goal amount has been surpassed.",
                "",
                " Getting the `value` property returns the current value.",
                "",
                " > **Notes:**",
                " > - If a progress bar is connected to a dataset, setting the progress bar's `value` in code does not set the value of the connected field in the dataset.",
                " >",
                " > - To change the value in the connected dataset, set the field's value using",
                " >   the [`setFieldValue()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/set-field-value) function." ],
            "links": [],
            "examples":
              [ { "title": "Get a progress bar's value",
                  "body":
                    [ "let progressValue = $w(\"#myProgressBar\").value; // 42" ],
                  "extra":
                    {  } },
                { "title": "Set a progress bar's value",
                  "body":
                    [ "$w(\"#myProgressBar\").value = 42;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 191,
              "filename": "ProgressBar.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaBusy",
              "type": "boolean",
              "doc": "Indicates to assistive technologies whether an element is currently updating or in a loading state, helping to convey the status of dynamic content to visitors. When set to `true`, this property informs assistive technologies that visitors shouldn't interact with the element until the update completes. After the update completes, set `ariaBusy` to `false` to allow assistive technologies to announce that the new content is now available. \n\nDefault: `false`",
              "optional": true },
            { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaValueText",
              "type": "string",
              "doc": "Provides a human-readable text description for the current value of an element with a range, such as a slider or progress bar. Use this property to give meaningful context to the value, especially when the numeric value alone may not be clear or sufficient for assistive technology users.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./progressbar/guides/CSS Classes.md" } ] }