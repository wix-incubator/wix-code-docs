{ "name": "Pagination",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ViewportMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Pagination.js" },
  "docs":
    { "summary": "[Pagination](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-pagination-bar) is an element for working with paging.",
      "description":
        [ "A pagination bar provides a way for your users to control the [paging of",
          " a dataset](https://dev.wix.com/docs/velo/api-reference/$w/dataset/introduction#dataset-pages). Elements that are connected to the",
          " same dataset as the pagination bar are affected when the user",
          " interacts with the pagination bar.",
          "",
          " For example, suppose you have a repeater connected to a dataset and that dataset",
          " is set to have a page size of 5. When the page loads, the repeater shows",
          " the first 5 items from the dataset. If a user clicks on the next page button",
          " of a pagination bar connected to the same dataset as the repeater,",
          " the repeater then shows items 6-10 from the dataset.",
          "",
          " You can also use a pagination bar without connecting it to a dataset.",
          " When doing so, you have to provide the pagination logic that runs when",
          " a user interacts with the pagination bar." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Pagination.Accessibility",
        "locations":
          [ { "lineno": 231,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myPagination').accessibility.ariaLabel = 'pagination content';",
                      "$w('#myPagination').accessibility.lang = 'en';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myPaginationAccessibility = $w('#myPagination').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "currentPage",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 60,
              "filename": "Pagination.js" },
            { "lineno": 87,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the current page.",
            "description":
              [ "Setting the `currentPage` property updates the visual indicator of the",
                " pagination bar to display the current page. The `currentPage` cannot be",
                " set to a value greater than [`totalPages`](#totalPages).",
                "",
                " If the pagination bar is connected to a dataset, setting `currentPage`",
                " updates the current page of the dataset and updates any relevant",
                " elements connected to that dataset.",
                "",
                " Getting the `currentPage` property returns the index of the current page.",
                " > **Note:** Page numbers begin with 1." ],
            "links":
              [ "[totalPages](#totalPages)" ],
            "examples":
              [ { "title": "Get a pagination bar's current page",
                  "body":
                    [ "let currentPage = $w(\"#myPagination\").currentPage;  // 4" ],
                  "extra":
                    {  } },
                { "title": "Set a pagination bar's current page",
                  "body":
                    [ "$w(\"#myPagination\").currentPage = 4;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 268,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example,",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "Custom classes are those that you create on a site, not the predefined global classes",
                "that are provided for each element.",
                "",
                "Use the following methods to work with the element's custom CSS classes:",
                "+ [`add()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/add): Adds custom CSS classes to the class list of an element.",
                "+ [`contains()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/contains): Indicates whether the element's class list contains a specified custom CSS class.",
                "+ [`remove()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/remove): Removes custom CSS classes from an element's class list.",
                "+ [`replace()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/replace): Replaces a custom CSS class of an element with a different custom CSS class.",
                "+ [`toggle()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/toggle): Toggles an element's custom CSS class.",
                "+ [`values()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/values): Retrieves an array of strings listing an element's custom CSS classes.",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://dev.wix.com/docs/velo/velo-only-apis/$w/styling-elements-with-css)",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics)." ],
            "links":
              [ "$w.CustomClassList" ],
            "examples": 
              [ { "title": "Add a single class to an element",
              "body":
                [ "$w(\"#myElement\").customClassList.add(\"className1\");" ],
              "extra":
                {  } },
            { "title": "Add multiple classes to an element",
              "body":
                [ "$w(\"#myElement\").customClassList.add(\"className1\", \"className2\");" ],
              "extra":
                {  } },
            { "title": "Indicate whether an element contains a specified class",
              "body":
                [ "$w(\"#myElement\").customClassList.contains(\"className1\"); //true" ],
              "extra":
                {  } },
            { "title": "Remove a single class from an element",
              "body":
                [ "$w(\"#myElement\").customClassList.remove(\"className1\");" ],
              "extra":
                {  } },
            { "title": "Remove multiple classes from an element",
              "body":
                [ "$w(\"#myElement\").customClassList.remove(\"className1\", \"className2\");" ],
              "extra":
                {  } },
            { "title": "Replace a class of an element",
              "body":
                [ "$w(\"#myElement\").customClassList.replace(\"className1, className2\");" ],
              "extra":
                {  } },
            { "title": "Toggle a class of an element",
              "body":
                [ "$w(\"#myElement\").customClassList.toggle(\"className1\")  // true" ],
              "extra":
                {  } },
            { "title": "Toggle a class of an element",
              "body":
                [ "if( $w(\"#myElement\").customClassList.contains(\"className1\") ) {",
                  "  $w(\"#myElement\").customClassList.replace(\"className1, className2\");",
                  "}",
                  "else {",
                  "  $w(\"#myElement\").customClassList.replace(\"className2, className1\");",
                  "}" ],
              "extra":
                {  } },
            { "title": "Get the classes of an element",
              "body":
                [ "$w(\"#myElement\").customClassList.value; // \"className1 className2\"" ],
              "extra":
                {  } },
            { "title": "Gets a list of the classes of an element",
              "body":
                [ "$w(\"#myElement\").customClassList.values(); // [\"className1\", \"className2\"]" ],
              "extra":
                {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "navigationType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 172,
              "filename": "Pagination.js" },
            { "lineno": 192,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Navigation layout type.",
            "description":
              [ "> **Note:** This property is only supported in the [Wix Editor](https://support.wix.com/en/article/wix-editor-getting-started-with-the-wix-editor).",
                "This property has three supported values:",
                "- `\"clickNumbers\"`: Navigate to a page by clicking on the page number.",
                "- `\"inputNumbers\"`: Navigate to a page by typing the page number.",
                "- `\"arrowsOnly\"`: Navigate between pages using arrows.",
                "![](../assets/images/navigation-types.png)" ],
            "links": [],
            "examples":
              [ { "title": "Get the navigation layout type for a pagination element",
                  "body":
                    [ "let navType = $w(\"#myPagination\").navigationType;  // \"clickNumbers\"" ],
                  "extra":
                    {  } },
                { "title": "Set the navigation layout type for a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").navigationType = \"inputNumbers\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "nextEnabled",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 132,
              "filename": "Pagination.js" },
            { "lineno": 146,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Whether the Next button is enabled in the pagination bar.",
            "links": [],
            "examples":
              [ { "title": "Get whether the Next button is enabled in a pagination element",
                  "body":
                    [ "let isNextEnabled = $w(\"#myPagination\").nextEnabled;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set whether the Next button is enabled in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").nextEnabled = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previousEnabled",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 152,
              "filename": "Pagination.js" },
            { "lineno": 166,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Whether the Previous button is enabled in the pagination bar.",
            "links": [],
            "examples":
              [ { "title": "Get whether the Previous button is enabled in a pagination element",
                  "body":
                    [ "let isPreviousEnabled = $w(\"#myPagination\").previousEnabled;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set whether the Previous button is enabled in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").previousEnabled = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "totalPages",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 94,
              "filename": "Pagination.js" },
            { "lineno": 126,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the total number of pages shown in a pagination bar.",
            "description":
              [ "Setting the `totalPages` property updates the number of pages shown in",
                " the pagination bar.",
                "",
                " Setting `totalPages` to a value less than [`currentPage`](#currentPage)",
                " causes `currentPage` to be reset to the new `totalPages` value. For",
                " example, if `currentPage` is `8` and `totalPages` is set to `5`, `currentPage`",
                " is reset automatically to `5`.",
                "",
                " If the pagination bar is connected to a dataset, it is recommended that",
                " you allow the dateset to control the pagination bar's `totalPages` value.",
                "",
                " Getting the `totalPages` property returns the total number of pages available",
                " for selection in the pagination bar. If the pagination bar is",
                " connected to a dataset, the initial `totalPages` value is calculated based",
                " on the total number of items in the dataset and the dataset's page size." ],
            "links":
              [ "[currentPage](#currentPage)" ],
            "examples":
              [ { "title": "Get the number of pages available in a pagination element",
                  "body":
                    [ "let totalPages = $w(\"#myPagination\").totalPages;  // 14" ],
                  "extra":
                    {  } },
                { "title": "Set the number of pages available in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").totalPages = 14;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 32,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pagination bar\n is changed.",
            "description":
              [ "A pagination bar receives a `change` event when a user changes the",
                " current page by interacting with the pagination bar.",
                "",
                " A `change` event is not triggered when you change a pagination bar's",
                " current page using the [`currentPage`](#currentPage) property.",
                "",
                " When a pagination bar is connected to a dataset, changing the [dataset's",
                " current page](https://dev.wix.com/docs/velo/api-reference/$w/dataset/introduction#dataset-pages) using dataset functions, such",
                " as [`nextPage()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/next-page), do not trigger `change`",
                " events on the pagination bar." ],
            "links": [],
            "examples":
              [ { "title": "Get the new current page of the pagination bar that was changed",
                  "body":
                    [ "$w(\"#myPagination\").onChange( (event) => {",
                      "  let newValue = event.target.currentPage;  // 4",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Change" } },
      { "name": "onNextClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the Next button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 199,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the Next button in the pagination bar is clicked.",
            "links": [],
            "examples":
              [ { "title": "Log a message to the console when the Next button is clicked",
                  "body":
                    [ "$w(\"#myPagination\").onNextClicked(() => {",
                      "  console.log(\"Next clicked\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Click" } },
      { "name": "onPreviousClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the Previous button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 215,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the Previous button in the pagination bar is clicked.",
            "links": [],
            "examples":
              [ { "title": "Log a message to the console when the Previous button is clicked",
                  "body":
                    [ "$w(\"#myPagination\").onPreviousClicked(() => {",
                      "  console.log(\"Previous clicked\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Click" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 255,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context.",
              "optional": true },
            { "name": "lang",
              "type": "string",
              "doc": "Specifies the language of the element's content, enhancing pronunciation accuracy for screen readers and other assistive technologies. \n\nSetting the `lang` property improves multilingual support by ensuring that assistive technologies apply the correct linguistic rules and speech patterns. It also enables search engines to index the element's content accurately, resulting in better visibility and relevance in search results for better SEO optimization. \n\nThe `lang` property's value must be a 2-letter language code in [ISO 639-1 format](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes). For example, `\"en\"` for english.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./pagination/guides/CSS Classes.md" } ] }
