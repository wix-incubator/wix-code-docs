{ "name": "SlideshowButton",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.LabelMixin",
      "$w.EffectsMixin" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "SlideshowButton.js" },
  "docs":
    { "summary": "The [slideshow button](https://support.wix.com/en/article/wix-editor-displaying-navigation-buttons-and-arrows-on-your-slideshow)\nis a button element on a [slideshow]($w.Slideshow.html).",
      "description":
        [ "Slideshow buttons are used to navigate between the slides of your slideshow. Slideshow buttons ",
          "are only accessible from within a slideshow component." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "icon",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 122,
              "filename": "SlideshowButton.js" },
            { "lineno": 151,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Sets or gets the icon image displayed on the slideshow button.",
            "description":
              [ "The `icon` property defines the vector image used as icon on the slideshow button.",
                "",
                "Setting `icon` changes the slideshow button icon to the image indicated by the new value.",
                "Getting the `icon` property returns the location of the icon image file.",
                "To remove a slideshow button icon, set `icon` to `null`, `undefined`, or an empty string.",
                "",
                "The following formats are supported:",
                " + Vector images from the Media Manager: `wix:vector://v1/<vector_uri>/<filename>`",
                " + Vector images from the web: `http(s)://<vector image url>`",
                " + Vector XML string: `<svg>...</svg>`",
                "",
                ">**Note:** [Raster images](https://www.adobe.com/creativecloud/file-types/image/raster.html#what-is-a-raster-file) are not supported by this property." ],
            "links":
              [ "[iconCollapsed](#iconCollapsed), [expandIcon](#expandIcon), [collapseIcon](#collapseIcon)" ],
            "examples":
              [ { "title": "Set a slideshow button icon to a Media Manager image",
                  "body":
                    [ "$w('#mySlideshowButton').icon = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';" ],
                  "extra":
                    {  } },
                { "title": "Set a slideshow button icon to an XML string",
                  "body":
                    [ "$w('#mySlideshowButton').icon = '<svg height=\"10\" width=\"10\"><polygon points=\"0,9 9,9 5,0\" style=\"fill:lime;stroke:purple;stroke-width:1\"/></svg>';" ],
                  "extra":
                    {  } },
                { "title": "Delete a slideshow button icon",
                  "body":
                    [ "$w('#mySlideshowButton').icon = '';" ],
                  "extra":
                    {  } },
                { "title": "Get a slideshow button icon",
                  "body":
                    [ "const iconLocation = $w('#mySlideshowButton').icon;",
                      "// 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg'" ],
                  "extra":
                    {  } },
                { "title": "Change the slideshow button icon when clicked",
                  "body":
                    [ "$w('#mySlideshowButton').onClick((event) => {",
                      "  $w('#mySlideshowButton').icon = 'wix:vector://v1/ce0334_2cec984ab68c490891dda1b53a33fead.svg/my-vector-graphic.svg';",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "iconCollapsed",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 158,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Indicates if the slideshow button icon is collapsed or expanded.",
            "description":
              [ "If `iconCollapsed` is `true`, the icon isn't displayed in the button under any circumstances. ",
                "",
                "If `iconCollapsed` is `false`, the icon is displayed unless the icon's button is hidden or collapsed.",
                "",
                "To set the `iconCollapsed` property on an element, use the element's [`collapseIcon()`](#collapseIcon) and [`expandIcon()`](#expandIcon) functions.",
                "",
                "> **Note:** ",
                "> * A collapsed icon doesn't take up any space in the slideshow button.",
                "> * If you remove the icon of a slideshow button, `iconCollapsed` retains the removed icon's final state." ],
            "links":
              [ "[icon](#icon), [expandIcon](#expandIcon), [collapseIcon](#collapseIcon)" ],
            "examples":
              [ { "title": "Check if a slideshow button icon is collapsed",
                  "body":
                    [ "const iconStatus = $w('#mySlideshowButton').iconCollapsed; // true" ],
                  "extra":
                    {  } },
                { "title": "Expand a slideshow button icon if it's collapsed",
                  "body":
                    [ "if ($w('#mySlideshowButton').iconCollapsed) {",
                      "  $w('#mySlideshowButton').expandIcon();",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Display tooltip text when hovering over a slideshow button",
                  "body":
                    [ "$w('#mySlideshowButton').onMouseIn( (event) => {",
                      "  // check if an icon exists and is displayed",
                      "  if ($w('#mySlideshowButton').icon && !$w('#mySlideshowButton').iconCollapsed){",
                      "    // display a text box with tooltip instructions relating to the icon",
                      "    $w('#tooltipText').expand();",
                      "  }",
                      "});",
                      "" ],
                  "extra":
                    { "description": "In this example, a tooltip is displayed when hovering over a slideshow button if its icon is collapsed." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "Empty string",
        "locations":
          [ { "lineno": 62,
              "filename": "SlideshowButton.js" },
            { "lineno": 78,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Sets or gets the label of a slideshow button.",
            "links": [],
            "examples":
              [ { "title": "Get the label of a slideshow button",
                  "body":
                    [ "const buttonLabel = $w(\"#mySlideshowButton\").label;  // \"Submit\"" ],
                  "extra":
                    {  } },
                { "title": "Set the label of a slideshow button",
                  "body":
                    [ "$w(\"#mySlideshowButton\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 28,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the styles of a slideshow button.",
            "description":
              [ "The following styles can be used with slideshow buttons:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting styles of a slideshow button gets or sets the styles of the",
                " button's regular state. It does not set the styles of the button in the hover",
                " or disabled states.",
                "",
                " > **Note:** Not all styles can be used on all slideshow button designs. To determine which styles",
                " work with a specific slideshow button design, go to the design panel in",
                " the Editor and customize your design. The design options that you see in ",
                " the design panel for your particular slideshow button are the styles you can use in ",
                " your code." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "collapseIcon",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the element's `iconCollapsed` property is set to `true`." },
        "locations":
          [ { "lineno": 194,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Collapses the icon of a slideshow button and sets its `iconCollapsed` property to `true`.",
            "description":
              [ "The `collapseIcon()` function returns a Promise that resolves when the element's `iconCollapsed` property is set to `true`." ],
            "links":
              [ "[icon](#icon), [iconCollapsed](#iconCollapsed), [expandIcon](#expandIcon)" ],
            "examples":
              [ { "title": "Collapse a slideshow button icon",
                  "body":
                    [ "$w('#mySlideshowButton').collapseIcon();" ],
                  "extra":
                    {  } },
                { "title": "Collapse the icon when a visitor stops hovering over a slideshow button",
                  "body":
                    [ "$w('#mySlideshowButton').onMouseOut( (event) => {",
                      "\t$w(\"#mySlideshowButton\").collapseIcon();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "expandIcon",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the element's `iconCollapsed` property is set to `false`." },
        "locations":
          [ { "lineno": 182,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Expands the slideshow button icon and sets its `iconCollapsed` property to `false`.",
            "description":
              [ "The `expandIcon()` function returns a Promise that resolves when the icon of a slideshow button is expanded." ],
            "links":
              [ "[icon](#icon), [iconCollapsed](#iconCollapsed), [collapseIcon](#collapseIcon)" ],
            "examples":
              [ { "title": "Expand a slideshow button icon",
                  "body":
                    [ "$w('#mySlideshowButton').expandIcon();" ],
                  "extra":
                    {  } },
                { "title": "Expand the icon when a site visitor hovers over the slideshow button",
                  "body":
                    [ "$w('#mySlideshowButton').onMouseIn((event) => {",
                      "  $w(\"#mySlideshowButton\").expandIcon();",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMouseIn",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the pointer is moved onto the\n element." } ],
        "ret":
          { "type": "$w.SlideshowButton",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 85,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pointer is moved\n onto the element.\n\n You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse enters an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseIn( (event) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Change the style when the mouse enters element",
                  "body":
                    [ "$w('#mySlideshowButton').onMouseIn((event) => {",
                      "  $w('#mySlideshowButton').style.backgroundColor = 'blue';",
                      "  $w('#mySlideshowButton').style.color = 'white';",
                      "});",
                      "" ],
                  "extra":
                    { "description": "In this example, multiple styles of the slideshow button change when the mouse enters the slideshow button element." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMouseOut",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.MouseEventHandler",
              "doc": "The name of the function or\n the function expression to run when the pointer is moved off of\n the element." } ],
        "ret":
          { "type": "$w.SlideshowButton",
            "doc": "The element to which the event handler was added." },
        "locations":
          [ { "lineno": 104,
              "filename": "SlideshowButton.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pointer is moved\n off of the element.\n\n You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).",
            "links": [],
            "examples":
              [ { "title": "Get the mouse event info when the mouse exits an element",
                  "body":
                    [ "$w(\"#myElement\").onMouseOut( (event) => {",
                      "  let clientX = event.clientX;  // 362",
                      "  let clientY = event.clientY;  // 244",
                      "  let offsetX = event.offsetX;  // 10",
                      "  let offsetY = event.offsetY;  // 12",
                      "  let pageX = event.pageX;      // 362",
                      "  let pageY = event.pageY;      // 376",
                      "  let screenX = event.screenX;  // 3897",
                      "  let screenY = event.screenY;  // 362",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Change the style when the mouse exits a slideshow button",
                  "body":
                    [ "$w('mySlideshowButton').onMouseOut((event) => {",
                      "  $w('#mySlideshowButton').style.backgroundColor = 'white';",
                      "  $w('#mySlideshowButton').style.color = 'blue';",
                      "});",
                      "" ],
                  "extra":
                    { "description": "In this example, multiple styles of the slideshow button change when the mouse exits the slideshow button element." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }