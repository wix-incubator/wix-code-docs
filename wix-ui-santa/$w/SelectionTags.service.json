{ "name": "SelectionTags",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "removed" ],
  "location":
    { "lineno": 38,
      "filename": "SelectionTagsList.js" },
  "docs":
    { "summary": "[Selection Tags](https://support.wix.com/en/article/adding-and-setting-up-selection-tags) are used for selecting one or more options.",
      "description":
        [ "Selection Tags let your site visitors choose from a set of options, each displayed as a tag. ",
          "",
          "![Selection Tags](images/selection_tags2.png \"Selection Tags\")",
          "",
          "Selection tags are commonly used to filter page content." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.SelectionTags.Option" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 71,
              "filename": "SelectionTagsList.js" },
            { "lineno": 107,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Sets or gets a list of items which will be rendered as tags.",
            "description":
              [ "Setting the `options` property sets all the [options](#Option) available to a site visitor.",
                "",
                " Getting the `options` property returns the current list of options available to a site visitor.",
                "",
                "Each option contains a label, which is what the site visitor sees, ",
                "and a value, which is used in code and stored in your collections.",
                "",
                "You cannot modify the `options` data array in-place. To add, change, or remove",
                "individual selection tag options:",
                "",
                "   1. Store the value of the `options` property in a variable.",
                "   1. Make changes to the array.",
                "   1. Reset the `options` property with the modified array." ],
            "links": [],
            "examples":
              [ { "title": "Get the options of selection tags",
                  "body":
                    [ "let selectionTagsOptions = $w(\"#mySelectionTags\").options;",
                      "",
                      "let firstLabel = selectionTagsOptions[0].label;   // \"First Label\"",
                      "let firstValue = selectionTagsOptions[0].value;   // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the options of selection tags",
                  "body":
                    [ "$w(\"#mySelectionTags\").options = [",
                      "    { ‘label’: ‘Onion’, ‘value’: ‘onion’},",
                      "    { ‘label’: ‘Tomatoes’, ‘value’: ‘tomatoes’},",
                      "    { ‘label’: ‘Extra Cheese’, ‘value’: ‘cheese’}",
                      "",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an option to selection tags",
                  "body":
                    [ "let pizzaToppingOptions = $w(\"#pizzaToppingTags\").options;",
                      "pizzaToppingOptions.push({\"label\": \"Olives\", \"value\": \"olives\"});",
                      "$w(\"#pizzaToppingTags\").options = pizzaToppingOptions;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the options of selection tags, adds a new option, and then overwrites the old options." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Setting the `options` property clears the [`value`](#value) and [`selectedIndices`](#selectedIndices) of the selection tags." ] } },
      { "name": "selectedIndices",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 128,
              "filename": "SelectionTagsList.js" },
            { "lineno": 153,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Sets or gets the indices of the selected options.",
            "description":
              [ "Setting the `selectedIndices` property sets the options at each specified index to be a selected option.",
                " To reset the selection tags to have no option selected, set the `selectedIndices` property to an empty array, null, or undefined.",
                "",
                " Getting the `selectedIndices` property returns an array of the indices of all selected options.",
                " If no value is selected, the `selectedIndices` property returns an empty array." ],
            "links": [],
            "examples":
              [ { "title": "Get the selected indices of selection tags",
                  "body":
                    [ "let selectedIndices = $w(\"#mySelectionTags\").selectedIndices; // [0,2]" ],
                  "extra":
                    {  } },
                { "title": "Set the selected indices of selection tags",
                  "body":
                    [ "$w(\"#mySelectedTags\").selectedIndices = [0,2];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 222,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the selection tags' styles.",
            "description":
              [ "The following styles can be used with selection tags:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting styles gets or sets the styles of the",
                " selection tags' regular state. It does not set the styles of the selection tags' hover,",
                " selected, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "string" ] },
        "locations":
          [ { "lineno": 169,
              "filename": "SelectionTagsList.js" },
            { "lineno": 200,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Sets or gets the values of the selected options.",
            "description":
              [ "Setting the `value` property sets the [options](#options) with those values to be the selected options.",
                " The site visitor must set the `value` property to values that exist in the options list.",
                "",
                " To reset the selection tags to have no options selected, set the `value` property to an empty array, `null` or `undefined`.",
                "",
                " Getting the `value` property returns the values of the currently selected options.",
                " If no value is selected, the `value` property returns an empty array." ],
            "links":
              [ "[options](#options)" ],
            "examples":
              [ { "title": "Get the value of selection tags",
                  "body":
                    [ "let myValue = $w(\"#mySelectionTags\").value;  // [\"value1\", \"value2\"]" ],
                  "extra":
                    {  } },
                { "title": "Set the value of selection tags",
                  "body":
                    [ "$w(\"#mySelectionTags\").value = [\"value1\", \"value2\"];" ],
                  "extra":
                    {  } },
                { "title": "Filter page content using selection tags",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ..",
                      "",
                      "export function mySelectionTags_change(event) {",
                      "",
                      "    let selectedTags = $w(\"#mySelectionTags\").value;",
                      "    // Define an empty filter",
                      "    let filter = wixData.filter();",
                      "",
                      "    if (selectedTags) {",
                      "        // Build a filter that only includes items with all selected tags",
                      "        filter = filter.hasAll(\"tags\", selectedTags);",
                      "    }",
                      "",
                      "    $w('#myDataset').setFilter(filter);",
                      "}" ],
                  "extra":
                    { "description": "This example demonstrates how to filter a dataset based on tags selected by site visitors. If no tags are selected we use an empty filter, which includes all content. If one or more tags are selected, the dataset is filtered to only include items that contain all selected tags. The filtered content is displayed in the repeater or another element connected to the dataset." } },
                { "title": "Filter page content using selection tags and update the URL",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixLocation from 'wix-location';",
                      "",
                      "// ..",
                      "",
                      "export function mySelectionTags_change(event) {",
                      "",
                      "    let selectedTags = $w(\"#mySelectionTags\").value;",
                      "    let filter = wixData.filter();",
                      "",
                      "    if (selectedTags) {",
                      "        let query = selectedTags.join(\"-\");",
                      "        wixLocation.queryParams.add({ \"categories\": query });",
                      "        ",
                      "        filter = filter.hasAll(\"tags\", selectedTags);",
                      "    } else {",
                      "        wixLocation.queryParams.remove([\"categories\"]);",
                      "    }",
                      "",
                      "    $w('#myDataset').setFilter(filter);",
                      "}",
                      "",
                      "// Example URL: https://bookahotel.com/hotels/listings?categories=fridge-pool-gym" ],
                  "extra":
                    { "description": "This example demonstrates how to filter a dataset based on selected tags, and then update the page URL to reflect the filtered content. We join the tags using a dash as a separator, and add them to the URL as a query parameter." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "Option",
        "locations":
          [ { "lineno": 60,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "An object used by the [`options`](#options) property that contains the attributes of the selection tag item.",
            "links":
              [ "[options](#options)",
                "[value](#value)" ],
            "examples":
              [ { "title": "Get the options of selection tags",
                  "body":
                    [ "let selectionTagsOptions = $w(\"#mySelectionTags\").options;",
                      "",
                      "let firstLabel = selectionTagsOptions[0].label;   // \"First Label\"",
                      "let firstValue = selectionTagsOptions[0].value;   // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the options of selection tags",
                  "body":
                    [ "$w(\"#mySelectionTags\").options = [",
                      "    { ‘label’: ‘Onion’, ‘value’: ‘onion’},",
                      "    { ‘label’: ‘Tomatoes’, ‘value’: ‘tomatoes’},",
                      "    { ‘label’: ‘Extra Cheese’, ‘value’: ‘cheese’}",
                      "",
                      "];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The value of the selection tag option. This is what you use in code and is what is stored in your collections." },
            { "name": "label",
              "type": "string",
              "doc": "The label of the selection tag option. This is what a site visitor sees." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }