{ "name": "SelectionTags",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin",
      "$w.ValidatableMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "SelectionTagsList.js" },
  "docs":
    { "summary": "[Selection tags](https://support.wix.com/en/article/adding-and-setting-up-selection-tags) are used for selecting one or more options.",
      "description":
        [ "Selection Tags let your site visitors choose from a set of options, each displayed as a tag.",
          "",
          "![Selection Tags](images/selection_tags2.png \"Selection Tags\")",
          "",
          "Selection tags are commonly used to filter page content." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.SelectionTags.Accessibility",
        "locations":
          [ { "lineno": 199,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) and other accessibility properties for the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. ",
                "",
                "Set the accessibility properties to design your elements to be more inclusive and usable for visitors with visual, auditory, motor, and or cognitive disabilities. The accessibility object primarily affects how assistive technologies read and present site content. ARIA attributes themselves do not impact SEO, but other accessibility properties, such as `lang`, can influence content indexing and discoverability.",
                "",
                ">**Note:** Incorrect use of ARIA attributes can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#mySelectionTags').accessibility.ariaLabel = 'selection tags content';",
                      "$w('#mySelectionTags').accessibility.lang = 'en';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const mySelectionTagsAccessibility = $w('#mySelectionTags').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "customClassList",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 251,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "The `customClassList` property allows you to manipulate the CSS classes of an element. Use it to add, remove, or check for CSS classes that were defined in the Wix Studio Styles panel." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "options",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.SelectionTags.Option" ] },
        "defaultValue": "An empty array",
        "locations":
          [ { "lineno": 36,
              "filename": "SelectionTagsList.js" },
            { "lineno": 67,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Sets or gets a list of items which will be rendered as tags.",
            "description":
              [ "Setting the `options` property sets all the options available to a site visitor.",
                "",
                " Getting the `options` property returns the current list of options available to a site visitor.",
                "",
                "Each option contains a label, which is what the site visitor sees,",
                "and a value, which is used in code and stored in your collections.",
                "",
                "You cannot modify the `options` data array in-place. To add, change, or remove",
                "individual selection tag options:",
                "",
                "   1. Store the value of the `options` property in a variable.",
                "   1. Make changes to the array.",
                "   1. Reset the `options` property with the modified array.",
                "",
                "",
                " > **Note:** Setting the `options` property clears the [`values`](#value) that do not match the new `options`." ],
            "links": [],
            "examples":
              [ { "title": "Get the options of selection tags",
                  "body":
                    [ "let selectionTagsOptions = $w(\"#mySelectionTags\").options;",
                      "",
                      "let firstLabel = selectionTagsOptions[0].label;   // \"First Label\"",
                      "let firstValue = selectionTagsOptions[0].value;   // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the options of selection tags",
                  "body":
                    [ "$w(\"#mySelectionTags\").options = [",
                      "    { 'label': 'Onion', 'value': 'onion'},",
                      "    { 'label': 'Tomatoes', 'value': 'tomatoes'},",
                      "    { 'label': 'Extra Cheese', 'value': 'cheese'}",
                      "",
                      "];" ],
                  "extra":
                    {  } },
                { "title": "Add an option to selection tags",
                  "body":
                    [ "let pizzaToppingOptions = $w(\"#pizzaToppingTags\").options;",
                      "pizzaToppingOptions.push({\"label\": \"Olives\", \"value\": \"olives\"});",
                      "$w(\"#pizzaToppingTags\").options = pizzaToppingOptions;",
                      "" ],
                  "extra":
                    { "description": "This example retrieves the options of selection tags, adds a new option, and then overwrites the old options." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "selectedIndices",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 74,
              "filename": "SelectionTagsList.js" },
            { "lineno": 94,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Sets or gets the indices of the selected options.",
            "description":
              [ "Setting the `selectedIndices` property sets the options at each specified index to be a selected option.",
                " To reset the selection tags to have no option selected, set the `selectedIndices` property to an empty array, null, or undefined.",
                "",
                " Getting the `selectedIndices` property returns an array of the indices of all selected options.",
                " If no value is selected, the `selectedIndices` property returns an empty array." ],
            "links": [],
            "examples":
              [ { "title": "Get the selected indices of selection tags",
                  "body":
                    [ "let selectedIndices = $w(\"#mySelectionTags\").selectedIndices; // [0,2]" ],
                  "extra":
                    {  } },
                { "title": "Set the selected indices of selection tags",
                  "body":
                    [ "$w(\"#mySelectedTags\").selectedIndices = [0,2];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "lineno": 136,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Gets an object containing information about the selection tags' styles.",
            "description":
              [ "The following styles can be used with selection tags:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting styles gets or sets the styles of the",
                " selection tags' regular state. It does not set the styles of the selection tags' hover,",
                " selected, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "string" ] },
        "locations":
          [ { "lineno": 101,
              "filename": "SelectionTagsList.js" },
            { "lineno": 129,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Sets or gets the values of the selected options.",
            "description":
              [ "Setting the `value` property sets the [options](#options) with those values to be the selected options.",
                " The site visitor must set the `value` property to values that exist in the options list.",
                "",
                " To reset the selection tags to have no options selected, set the `value` property to an empty array, `null` or `undefined`.",
                "",
                " Getting the `value` property returns the values of the currently selected options.",
                " If no value is selected, the `value` property returns an empty array." ],
            "links":
              [ "[options](#options)" ],
            "examples":
              [ { "title": "Get the value of selection tags",
                  "body":
                    [ "let myValue = $w(\"#mySelectionTags\").value;  // [\"value1\", \"value2\"]" ],
                  "extra":
                    {  } },
                { "title": "Set the value of selection tags",
                  "body":
                    [ "$w(\"#mySelectionTags\").value = [\"value1\", \"value2\"];" ],
                  "extra":
                    {  } },
                { "title": "Filter page content using selection tags",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ..",
                      "",
                      "export function mySelectionTags_change(event) {",
                      "",
                      "    let selectedTags = $w(\"#mySelectionTags\").value;",
                      "    // Define an empty filter",
                      "    let filter = wixData.filter();",
                      "",
                      "    if (selectedTags) {",
                      "        // Build a filter that only includes items with all selected tags",
                      "        filter = filter.hasAll(\"tags\", selectedTags);",
                      "    }",
                      "",
                      "    $w('#myDataset').setFilter(filter);",
                      "}" ],
                  "extra":
                    { "description": "This example demonstrates how to filter a dataset based on tags selected by site visitors. If no tags are selected we use an empty filter, which includes all content. If one or more tags are selected, the dataset is filtered to only include items that contain all selected tags. The filtered content is displayed in the repeater or another element connected to the dataset." } },
                { "title": "Filter page content using selection tags and update the URL",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixLocationFrontend from 'wix-location-frontend';",
                      "",
                      "// ..",
                      "",
                      "export function mySelectionTags_change(event) {",
                      "",
                      "    let selectedTags = $w(\"#mySelectionTags\").value;",
                      "    let filter = wixData.filter();",
                      "",
                      "    if (selectedTags) {",
                      "        let query = selectedTags.join(\"-\");",
                      "        wixLocationFrontend.queryParams.add({ \"categories\": query });",
                      "        ",
                      "        filter = filter.hasAll(\"tags\", selectedTags);",
                      "    } else {",
                      "        wixLocationFrontend.queryParams.remove([\"categories\"]);",
                      "    }",
                      "",
                      "    $w('#myDataset').setFilter(filter);",
                      "}",
                      "",
                      "// Example URL: https://bookahotel.com/hotels/listings?categories=fridge-pool-gym",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to filter a dataset based on selected tags, and then update the page URL to reflect the filtered content. We join the tags using a dash as a separator, and add them to the URL as a query parameter." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onCustomValidation",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "validator",
              "type": "$w.SelectionTags.SelectionTagsValidator",
              "doc": "The name of the function or\n the function expression to run when the element's custom validation is checked." },
            { "name": "override",
              "type": "boolean",
              "doc": "When `true`, overrides any existing custom validations set for the element so that only the current custom validation applies. \n\nWhen `false`, the current custom validation is added to the previously applied validations and all of them run. The order of execution follows the order the validations were set. \nIf one of the validations rejects, the rest of the validations won't run. \n\nDefaults to `true`, so that omitting the `override` property causes the current custom validation to override any other validations. \nIf multiple validations are set to override explicitly or by default, only the last applied validation will run.\n\nFor example, if you add 4 custom validations to an element and set the `override` parameter to `false`, `true`, `false`, `false` respectively, the first validation won't run\nand the remaining validations will run. This is because the second validation overrides the first.",
              "optional": true } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 164,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the element's validation is checked.",
            "description":
              [ "The `onCustomValidation()` function allows you perform custom validation",
                " in addition to any basic validation that was defined in the Editor.",
                "",
                " To invalidate the element, call the `reject()` function that is passed",
                " into the `validator` callback function and pass it a validation message.",
                "",
                " The element's validity is checked when the value of the element",
                " changes either by user interaction or programmatically.",
                "",
                " Note that validations other than **required**, including custom validations,",
                " are not run on input elements when they don't have a value.",
                "",
                " You can use the `override` parameter to override previously applied custom validations." ],
            "links": [],
            "examples":
              [ { "title": "Set an element to invalid if its value is \"evil\"",
                  "body":
                    [ "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Set a new custom validation that overrides a previous validation",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"evil\") {",
                      "    reject(\"Evil is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation will run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"bad\") {",
                      "    reject(\"Bad is invalid\");",
                      "  }",
                      "}, true);" ],
                  "extra":
                    {  } },
                { "title": "Set multiple custom validations",
                  "body":
                    [ "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"ain't\") {",
                      "    reject(\"Ain't is invalid\");",
                      "  }",
                      "}, false);",
                      "",
                      "// This validation won't run",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"i'd've\") {",
                      "    reject(\"I'd've is invalid\");",
                      "  }",
                      "}, true);",
                      "",
                      "// This validation runs first",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"there're\") {",
                      "    reject(\"There're is invalid\");",
                      "  }",
                      "});",
                      "",
                      "// This validation runs second",
                      "$w(\"#myElement\").onCustomValidation( (value, reject) => {",
                      "  if(value === \"could've\") {",
                      "    reject(\"Could've is invalid\");",
                      "  }",
                      "}, false);" ],
                  "extra":
                    { "description": "In this example, only the 3rd and 4th custom validations run. This is because the **override** property for the 3rd validation is set to **true** by default and overrides the previous 2 validations." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "SelectionTagsValidator",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "value",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The value of the element being validated." },
            { "name": "reject",
              "type": "Function",
              "doc": "A function that invalidates the element with the specified message." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 202,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "Function that runs when custom validation is checked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 235,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "lang",
              "type": "string",
              "doc": "Specifies the language of the element's content, enhancing pronunciation accuracy for screen readers and other assistive technologies. \n\nSetting the `lang` property improves multilingual support by ensuring that assistive technologies apply the correct linguistic rules and speech patterns. It also enables search engines to index the element's content accurately, resulting in better visibility and relevance in search results for better SEO optimization. \n\nThe `lang` property's value must be a 2-letter language code in [ISO 639-1 format](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes).",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Option",
        "locations":
          [ { "lineno": 24,
              "filename": "SelectionTagsList.js" } ],
        "docs":
          { "summary": "An object used by the [`options`](#options) property that contains the attributes of the selection tag item.",
            "links":
              [ "[options](#options)",
                "[value](#value)" ],
            "examples":
              [ { "title": "Get the options of selection tags",
                  "body":
                    [ "let selectionTagsOptions = $w(\"#mySelectionTags\").options;",
                      "",
                      "let firstLabel = selectionTagsOptions[0].label;   // \"First Label\"",
                      "let firstValue = selectionTagsOptions[0].value;   // \"first_value\"" ],
                  "extra":
                    {  } },
                { "title": "Set the options of selection tags",
                  "body":
                    [ "$w(\"#mySelectionTags\").options = [",
                      "    { 'label': 'Onion', 'value': 'onion'},",
                      "    { 'label': 'Tomatoes', 'value': 'tomatoes'},",
                      "    { 'label': 'Extra Cheese', 'value': 'cheese'}",
                      "",
                      "];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "value",
              "type": "string",
              "doc": "The value of the selection tag option. This is what you use in code and is what is stored in your collections." },
            { "name": "label",
              "type": "string",
              "doc": "The label of the selection tag option. This is what a site visitor sees." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  },
  "relatedGuides":
    [ { "path": "./selectiontags/guides/CSS Classes.md" } ] }