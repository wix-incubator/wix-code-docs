{ "name": "CustomElement",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "CustomElement.js" },
  "docs":
    { "summary": "An API for rendering a custom element.",
      "description":
        [ "A custom element is a reusable web component element that you define in a JavaScript file that is either",
          " hosted by Wix or hosted on a server that is external to Wix.  The custom element is defined using",
          " the standard ECMAScript 2015 class syntax.",
          "",
          "This reference focuses on how you can use Velo to interact with custom elements. This reference provides only basic instructions for actually creating custom elements. For complete instructions and examples, see [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/Web_Components).",
          "",
          "+ [Learn more](https://support.wix.com/en/article/velo-about-custom-elements-8253009) about using custom elements with Velo.",
          "+ [This FAQ](https://support.wix.com/en/article/custom-element-faqs) provides more information including some technical tips for getting started.",
          "",
          "",
          " ### Custom Element Lifecycle with Velo",
          "",
          " The general flow for working with custom elements and Velo is:",
          "",
          "",
          " 1. Code the custom element and its behavior in a JavaScript file using any IDE.",
          " 1. In the Wix Editor's Add panel, [add a custom element to the site](https://support.wix.com/en/article/adding-a-custom-element-to-your-site). In **Choose Source**'s **Element Settings**,",
          "    connect the custom element's code to the custom element added to your page on the site.",
          "",
          "    ![tag-name](images/customElement_tag2.png \"Tag Name\")",
          "",
          " 1. Using Velo, set up interactions between your site and the custom element. You can code event handling and additional functionality for the custom element.",
          "",
          " You can also define [`seoMarkup`]($w.CustomElement.html#seoMarkup) for SEO support on custom elements.",
          "",
          " Note that custom elements don't work when previewing your site.",
          "",
          "",
          " ### Limitations",
          "",
          "",
          " + Custom elements are supported only for [premium Wix users on sites with their own domain and with Wix ads removed](https://support.wix.com/en/article/upgrading-your-site-to-premium-3066683).",
          " + See [this FAQ](https://support.wix.com/en/article/custom-element-faqs) for more prerequisites and limitations." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "seoMarkup",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 108,
              "filename": "CustomElement.js" },
            { "lineno": 125,
              "filename": "CustomElement.js" } ],
        "docs":
          { "summary": "Sets or gets the SEO markup to be rendered for search engine bots.",
            "description":
              [ "Use the `seoMarkup` property to write HTML content that will be served to Google and other search engines.  This is necessary because some bots cannot process the JavaScript content of the custom element.",
                "",
                " If you do not add the equivalent HTML of the custom element's implementation using this SEO markup property, only bots that index JavaScript, such as Google, will be able to index the custom element's content/markup for search engine results.",
                " > **Note:** It is the user's responsibility to handle all aspects of SEO for the element, including managing the validity of the",
                " SEO markup opposite search engines." ],
            "links": [],
            "examples":
              [ { "title": "Set SEO markup for the custom element",
                  "body":
                    [ "// **********************************************",
                      "// Custom Element Code in Velo ",
                      "// **********************************************",
                      "",
                      "// Set the HTML content for SEO markup ",
                      "// to be used by search engines.",
                      "// Make sure the SEO markup matches the ",
                      "// contents of the custom",
                      "// element exactly so as not to mislead ",
                      "// web crawlers.",
                      "",
                      "$w('#myCustomElement').seoMarkup = 'Hello World!';",
                      "",
                      "",
                      "// **********************************************",
                      "// Custom Element Implementation on an HTML Page",
                      "// **********************************************",
                      "",
                      "class MyElement extends HTMLElement {",
                      "  connectedCallback() {",
                      "    this.innerHTML = 'Hello World!'",
                      "  }",
                      "}",
                      "customElements.define('my-custom-element', MyElement);",
                      "  ",
                      "",
                      "// ***************************************************************",
                      "// Custom Element's Result (both for SEO bots and non-SEO traffic)",
                      "// ***************************************************************",
                      "<my-custom-element>Hello World!</my-custom-element>" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "on",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "eventName",
              "type": "string",
              "doc": "The name of the event." },
            { "name": "callBackFunction",
              "type": "Function",
              "doc": "The callback function to run when the event is triggered." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 76,
              "filename": "CustomElement.js" } ],
        "docs":
          { "summary": "Registers a callback function in Velo for an event triggered from the custom element.",
            "description":
              [ "The `on()` function registers a callback function in Velo based on the [`this.dispatchEvent()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent) in the custom element's script.",
                "",
                " The `on()` function enables the custom element to affect the rendering of the site.",
                "",
                " The code snippets below demonstrate how to define a `my-event` event in the custom element's implementation and how to refer to it from Velo.",
                "",
                " **In Custom Element Implementation**: ",
                " ```Javascript",
                " connectedCallback() {",
                "   this.dispatchEvent(new CustomEvent ('my-event'));",
                " }",
                " ```",
                "",
                " **In Velo Implementation**: ",
                " ```Javascript",
                " $w('#myCustomElement').on('my-event', (event) => {",
                "   console.log('The event triggered successfully.')",
                " });",
                " ```" ],
            "links": [],
            "examples":
              [ { "title": "Create an event in the custom element that Corivd can respond to",
                  "body":
                    [ "// **********************************************",
                      "// Custom Element Code in Velo",
                      "// **********************************************",
                      "",
                      "// Handle an event on the custom element.",
                      "$w('#myCE').on('my-event', (event) => {",
                      "  console.log('The event triggered successfully.');",
                      "});",
                      "",
                      "",
                      "// **********************************************",
                      "// Custom Element Implementation on an HTML Page",
                      "// **********************************************",
                      "",
                      "class MyElement extends HTMLElement {",
                      "  connectedCallback() {",
                      "    this.innerHTML = 'Hello World!';",
                      "",
                      "    // Trigger an event that Velo can watch for",
                      "    // and handle using the [`on()`] function.",
                      "",
                      "    this.dispatchEvent(new CustomEvent('my-event'));",
                      "  }",
                      "}",
                      "customElements.define('my-custom-element', MyElement);",
                      "",
                      "",
                      "// ************************************************",
                      "// Custom Element's Result",
                      "// ************************************************",
                      "",
                      "<my-custom-element>Hello World!</my-custom-element>" ],
                  "extra":
                    {  } },
                { "title": "Check if events defined in the custom element occur",
                  "body":
                    [ "// **********************************************",
                      "// Custom Element Implementation on an HTML Page",
                      "// **********************************************",
                      "",
                      "// Code to set up variables and styles for the logo. ",
                      "const LOGO_TXT = 'https://static.wixstatic.com/media/logo-txt.png';",
                      "const LOGO_IMG = 'https://static.wixstatic.com/media/logo-img.png';",
                      "const LOGO_PHONE ='https://static.wixstatic.com/media/logo-phone.png';",
                      "",
                      "const STYLE = `",
                      "#img.shake {",
                      "    animation: shake 0.5s;",
                      "    animation-iteration-count: infinite;",
                      "  }",
                      "",
                      "  @keyframes shake {",
                      "    0% { transform: translate(1px, 1px) rotate(0deg); }",
                      "    10% { transform: translate(-1px, -2px) rotate(-1deg); }",
                      "    20% { transform: translate(-3px, 0px) rotate(1deg); }",
                      "    30% { transform: translate(3px, 2px) rotate(0deg); }",
                      "    40% { transform: translate(1px, -1px) rotate(1deg); }",
                      "    50% { transform: translate(-1px, 2px) rotate(-1deg); }",
                      "    60% { transform: translate(-3px, 1px) rotate(0deg); }",
                      "    70% { transform: translate(3px, 1px) rotate(-1deg); }",
                      "    80% { transform: translate(-1px, -1px) rotate(1deg); }",
                      "    90% { transform: translate(1px, 2px) rotate(0deg); }",
                      "    100% { transform: translate(1px, -2px) rotate(-1deg); }",
                      "  }",
                      "`;",
                      "",
                      "// Code to check if the size of the custom element has ",
                      "// changed. ",
                      "const dispatchSizeChange = (root,scaleTxt) => {",
                      "  const gettingSmall = scaleTxt === 0 && root.prevScaleTxt !== 0;",
                      "  const gettingBig = scaleTxt !== 0 && root.prevScaleTxt === 0;",
                      "  root.prevScaleTxt = scaleTxt;",
                      "",
                      "  // Use dispatchEvent() to create a new custom event that ",
                      "  // Velo can handle. In our example, the event is ",
                      "  // triggered when the size of the custom element gets bigger or ",
                      "  // smaller.",
                      "  if (gettingSmall || gettingBig) {",
                      "    root.dispatchEvent(new CustomEvent('sizeChange', ",
                      "        { detail: { data: gettingSmall ? 'small' : 'big' } }));",
                      "  }",
                      "};",
                      "",
                      "// Code to rotate and resize the custom element. ",
                      "const scrollHandler = root => (event) => {",
                      "  const txt = root.querySelector('#txt');",
                      "  const scaleTxt = (Math.max(0, 1000 - window.scrollY)) / 1000;",
                      "  txt.style.transform = `scale(${scaleTxt})`;",
                      "  dispatchSizeChange(root, scaleTxt);",
                      "  const opacityTxt = 1 / Math.log10(Math.max(10, window.scrollY));",
                      "  txt.style.opacity = opacityTxt;",
                      "  const img = root.querySelector('#img');",
                      "  img.style.transform = `rotate(${window.scrollY / 10}deg)`;",
                      "}",
                      "",
                      "// Code to create each image that the logo comprises and ",
                      "// add the logo to the DOM using a `createImg()` function.",
                      "const createImg = (id, src) => {",
                      "  const img = document.createElement('img');",
                      "  img.src = src;",
                      "  img.id = id;",
                      "  img.width = '200';",
                      "  img.style.position = 'fixed';",
                      "  return img;",
                      "}",
                      "",
                      "// Code to define the custom element based on the ",
                      "// definitions above.",
                      "class allEffects extends HTMLElement {",
                      "",
                      "  constructor() {",
                      "    super();",
                      "",
                      "    document.addEventListener('wheel', scrollHandler(this), {",
                      "        capture: false, passive: true })",
                      "        const style = document.createElement('style');",
                      "        style.innerHTML = STYLE;",
                      "        this.appendChild(style);",
                      "  }",
                      "",
                      "  // Code for a special lifecycle function `connectedCallback()`",
                      "  // that runs when the custom element is connected initially to the DOM.",
                      "  // This function displays the various parts of the logo.",
                      "  connectedCallback() {",
                      "    this.appendChild(createImg('txt', LOGO_TXT));",
                      "    this.appendChild(createImg('img', LOGO_IMG));",
                      "    this.appendChild(createImg('img', LOGO_PHONE));",
                      "    const phone = createImg('phone', LOGO_PHONE);",
                      "    phone.style.display = 'none';",
                      "    this.appendChild(phone);",
                      "  }",
                      "",
                      "  // Code for a special lifecycle function `attributeChangedCallback()`",
                      "  // that checks if the context of the page has changed. ",
                      "  attributeChangedCallback(name, oldValue, newValue) {   ",
                      "    if (name === 'hoveringmenu') {",
                      "      this.querySelector('#img').className = newValue === 'true' ? 'shake' : '';",
                      "    }",
                      "    if (name === 'footershown') {",
                      "      this.querySelector('#phone').style.display = newValue === 'true' ? '' : 'none';",
                      "    }",
                      "  }",
                      "",
                      "  // Code for a special lifecycle function `observedAttributes()`",
                      "  // that checks specific attributes on the page. ",
                      "  static get observedAttributes() {",
                      "    return ['hoveringmenu', 'footershown'];",
                      "  }",
                      "}",
                      "",
                      "// Code to register the custom element. The name `my-logo-effects` is the ",
                      "// tag name to specify when adding the custom element in the Wix ",
                      "// Editor to the site. Make sure the tag name is in lowercase characters. ",
                      "customElements.define('my-logo-effects', allEffects);",
                      "  ",
                      "",
                      "// **********************************************",
                      "// Velo Code for Custom Element on Page",
                      "// **********************************************",
                      "",
                      "// Use `on()` to handle the `sizeChange` event defined in the ",
                      "// custom element. In this case, if the logo is very small, ",
                      "// the menu on the page is hidden. This is because one of the ",
                      "// defined behaviors of the element is that the logo gets ",
                      "// smaller as we scroll down the page.",
                      "$w.onReady(function () {",
                      "  $w('#myCustomElement').on('sizeChange', ({detail: {data}}) => {",
                      "    if (data === 'small') {",
                      "      $w('#menu').hide();",
                      "    } else {",
                      "      $w('#menu').show();",
                      "    }",
                      "  })",
                      "});",
                      "",
                      "// **********************************************",
                      "// Velo Code for Custom Element on the Site",
                      "// **********************************************",
                      "",
                      "// The custom element's behavior will change for the entire",
                      "//  site in the following cases: ",
                      "// ",
                      "// + If the footer enters or leaves the viewport.",
                      "// + If the site visitor's mouse hovers or stops hovering over the menu.",
                      "// ",
                      "// Velo \"sends\" the custom element attributes using `setAttribute()`",
                      "// so the element can process and and affect the element's behaviors",
                      "// according to the context on the page. ",
                      "export function footer1_viewportEnter(event) {",
                      "  $w('#myCustomElement').setAttribute('footershown', true);",
                      " }",
                      "export function footer1_viewportLeave(event) {",
                      " $w('#myCustomElement').setAttribute('footershown', false);",
                      "}",
                      "export function menu_mouseIn(event) {",
                      " $w('#myCustomElement').setAttribute('hoveringmenu', true);",
                      "}",
                      "export function menu_mouseOut(event) {",
                      " $w('myCustomElement').setAttribute('hoveringmenu', false);",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "setAttribute",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "key",
              "type": "string",
              "doc": "The name of the attribute. Use lowercase characters." },
            { "name": "value",
              "type":
                [ "string",
                  "boolean",
                  "number" ],
              "doc": "The value of the attribute." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 49,
              "filename": "CustomElement.js" } ],
        "docs":
          { "summary": "Sets an HTML attribute on the custom element's DOM node.",
            "description":
              [ "We can use `setAttribute()` to affect the custom element's definition and behavior. Consider `setAttribute()` a way for Velo to pass information to the custom element based on the context of the site.",
                "",
                "Attributes can either be set:",
                "",
                "",
                "",
                "+ Using this API with `setAttribute()`.",
                "+ In the Editor, by [clicking the custom element's Set Attribute button](https://support.wix.com/en/article/adding-a-custom-element-to-your-site#setting-the-custom-elements-attributes), without any coding. **Tip**: Set attributes using the Editor if you would like to share the element with other designers that don't code.",
                "",
                "",
                "",
                "Each `setAttribute()` function sets one attribute at a time using a key-value pair. Use multiple `setAttribute()` functions to set more than one attribute.",
                "",
                "If the custom element does not yet have the attribute, `setAttribute()` creates it." ],
            "links": [],
            "examples":
              [ { "title": "Set the attribute of a custom element",
                  "body":
                    [ "// **********************************************",
                      "// Custom Element Code in Velo ",
                      "// **********************************************",
                      "",
                      "import wixUsers from 'wix-users';",
                      "",
                      "// Set the `is-logged-in' attribute of the ",
                      "// custom element. Its value will be true/false, ",
                      "// depending on whether the",
                      "// user is currently logged-in.",
                      "// Remember to use lowercase characters for the ",
                      "// name of the attribute.",
                      "",
                      "$w('#myCE').setAttribute('logged-in', wixUsers.currentUser.loggedIn);",
                      "",
                      "",
                      "// **********************************************",
                      "// Custom Element Implementation on an HTML Page",
                      "// **********************************************",
                      "",
                      "class MyElement extends HTMLElement {",
                      "",
                      "  connectedCallback() {",
                      "    this.innerHTML = 'Hello World!'",
                      "    this.dispatchEvent(new CustomEvent('my-event'))",
                      "  }",
                      "}",
                      "customElements.define('my-custom-element', MyElement);",
                      "  ",
                      "",
                      "// *****************************************************",
                      "// Custom Element's Result",
                      "// *****************************************************",
                      "",
                      "// In the result, we can see the `is-logged-in` ",
                      "// attribute and its value",
                      "// as set in Velo using `setAttribute()`.",
                      "",
                      "<my-custom-element logged-in=\"true\">Hello World!</my-custom-element>" ],
                  "extra":
                    {  } },
                { "title": "Set a custom element attribute with info about the page from Velo",
                  "body":
                    [ "// **********************************************",
                      "// Custom Element Implementation on an HTML Page",
                      "// **********************************************",
                      "",
                      "// Code to set up variables and styles for the logo. ",
                      "const LOGO_TXT = 'https://static.wixstatic.com/media/logo-txt.png';",
                      "const LOGO_IMG = 'https://static.wixstatic.com/media/logo-img.png';",
                      "const LOGO_PHONE ='https://static.wixstatic.com/media/logo-phone.png';",
                      "",
                      "const STYLE = `",
                      "#img.shake {",
                      "    animation: shake 0.5s;",
                      "    animation-iteration-count: infinite;",
                      "  }",
                      "",
                      "  @keyframes shake {",
                      "    0% { transform: translate(1px, 1px) rotate(0deg); }",
                      "    10% { transform: translate(-1px, -2px) rotate(-1deg); }",
                      "    20% { transform: translate(-3px, 0px) rotate(1deg); }",
                      "    30% { transform: translate(3px, 2px) rotate(0deg); }",
                      "    40% { transform: translate(1px, -1px) rotate(1deg); }",
                      "    50% { transform: translate(-1px, 2px) rotate(-1deg); }",
                      "    60% { transform: translate(-3px, 1px) rotate(0deg); }",
                      "    70% { transform: translate(3px, 1px) rotate(-1deg); }",
                      "    80% { transform: translate(-1px, -1px) rotate(1deg); }",
                      "    90% { transform: translate(1px, 2px) rotate(0deg); }",
                      "    100% { transform: translate(1px, -2px) rotate(-1deg); }",
                      "  }",
                      "`;",
                      "",
                      "// Code to check if the size of the custom element has ",
                      "// changed. ",
                      "const dispatchSizeChange = (root,scaleTxt) => {",
                      "  const gettingSmall = scaleTxt === 0 && root.prevScaleTxt !== 0;",
                      "  const gettingBig = scaleTxt !== 0 && root.prevScaleTxt === 0;",
                      "  root.prevScaleTxt = scaleTxt;",
                      "",
                      "  // Use dispatchEvent() to create a new custom event that ",
                      "  // Velo can handle. In our example, the event is ",
                      "  // triggered when the size of the custom element gets bigger or ",
                      "  // smaller.",
                      "  if (gettingSmall || gettingBig) {",
                      "    root.dispatchEvent(new CustomEvent('sizeChange', ",
                      "        { detail: { data: gettingSmall ? 'small' : 'big' } }));",
                      "  }",
                      "};",
                      "",
                      "// Code to rotate and resize the custom element. ",
                      "const scrollHandler = root => (event) => {",
                      "  const txt = root.querySelector('#txt');",
                      "  const scaleTxt = (Math.max(0, 1000 - window.scrollY)) / 1000;",
                      "  txt.style.transform = `scale(${scaleTxt})`;",
                      "  dispatchSizeChange(root, scaleTxt);",
                      "  const opacityTxt = 1 / Math.log10(Math.max(10, window.scrollY));",
                      "  txt.style.opacity = opacityTxt;",
                      "  const img = root.querySelector('#img');",
                      "  img.style.transform = `rotate(${window.scrollY / 10}deg)`;",
                      "}",
                      "",
                      "// Code to create each image that the logo comprises and ",
                      "// add the logo to the DOM using a `createImg()` function.",
                      "const createImg = (id, src) => {",
                      "  const img = document.createElement('img');",
                      "  img.src = src;",
                      "  img.id = id;",
                      "  img.width = '200';",
                      "  img.style.position = 'fixed';",
                      "  return img;",
                      "}",
                      "",
                      "// Code to define the custom element based on the ",
                      "// definitions above.",
                      "class allEffects extends HTMLElement {",
                      "",
                      "  constructor() {",
                      "    super();",
                      "",
                      "    document.addEventListener('wheel', scrollHandler(this), {",
                      "        capture: false, passive: true })",
                      "        const style = document.createElement('style');",
                      "        style.innerHTML = STYLE;",
                      "        this.appendChild(style);",
                      "  }",
                      "",
                      "  // Code for a special lifecycle function `connectedCallback()`",
                      "  // that runs when the custom element is connected initially to the DOM.",
                      "  // This function displays the various parts of the logo.",
                      "  connectedCallback() {",
                      "    this.appendChild(createImg('txt', LOGO_TXT));",
                      "    this.appendChild(createImg('img', LOGO_IMG));",
                      "    this.appendChild(createImg('img', LOGO_PHONE));",
                      "    const phone = createImg('phone', LOGO_PHONE);",
                      "    phone.style.display = 'none';",
                      "    this.appendChild(phone);",
                      "  }",
                      "",
                      "  // Code for a special lifecycle function `attributeChangedCallback()`",
                      "  // that checks if the context of the page has changed. ",
                      "  attributeChangedCallback(name, oldValue, newValue) {   ",
                      "    if (name === 'hoveringmenu') {",
                      "      this.querySelector('#img').className = newValue === 'true' ? 'shake' : '';",
                      "    }",
                      "    if (name === 'footershown') {",
                      "      this.querySelector('#phone').style.display = newValue === 'true' ? '' : 'none';",
                      "    }",
                      "  }",
                      "",
                      "  // Code for a special lifecycle function `observedAttributes()`",
                      "  // that checks specific attributes on the page. ",
                      "  static get observedAttributes() {",
                      "    return ['hoveringmenu', 'footershown'];",
                      "  }",
                      "}",
                      "",
                      "// Code to register the custom element. The name `my-logo-effects` is the ",
                      "// tag name to specify when adding the custom element in the Wix ",
                      "// Editor to the site. Make sure the tag name is in lowercase characters. ",
                      "customElements.define('my-logo-effects', allEffects);",
                      "  ",
                      "",
                      "// **********************************************",
                      "// Velo Code for Custom Element on Page",
                      "// **********************************************",
                      "",
                      "// Use `on()` to handle the `sizeChange` event defined in the ",
                      "// custom element. In this case, if the logo is very small, ",
                      "// the menu on the page is hidden. This is because one of the ",
                      "// defined behaviors of the element is that the logo gets ",
                      "// smaller as we scroll down the page.",
                      "$w.onReady(function () {",
                      "  $w('#myCustomElement').on('sizeChange', ({detail: {data}}) => {",
                      "    if (data === 'small') {",
                      "      $w('#menu').hide();",
                      "    } else {",
                      "      $w('#menu').show();",
                      "    }",
                      "  })",
                      "});",
                      "",
                      "// **********************************************",
                      "// Velo Code for Custom Element on the Site",
                      "// **********************************************",
                      "",
                      "// The custom element's behavior will change for the entire",
                      "//  site in the following cases: ",
                      "// ",
                      "// + If the footer enters or leaves the viewport.",
                      "// + If the site visitor's mouse hovers or stops hovering over the menu.",
                      "// ",
                      "// Velo \"sends\" the custom element attributes using `setAttribute()`",
                      "// so the element can process and and affect the element's behaviors",
                      "// according to the context on the page. ",
                      "export function footer1_viewportEnter(event) {",
                      "  $w('#myCustomElement').setAttribute('footershown', true);",
                      " }",
                      "export function footer1_viewportLeave(event) {",
                      " $w('#myCustomElement').setAttribute('footershown', false);",
                      "}",
                      "export function menu_mouseIn(event) {",
                      " $w('#myCustomElement').setAttribute('hoveringmenu', true);",
                      "}",
                      "export function menu_mouseOut(event) {",
                      " $w('myCustomElement').setAttribute('hoveringmenu', false);",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  },
  "relatedContent":
    [ { "icon": "article",
        "text": "Adding a Custom Element to Your Site",
        "url": "https://support.wix.com/en/article/adding-a-custom-element-to-your-site#adding-the-custom-element" },
      { "icon": "article",
        "text": "Velo: About Custom Elements",
        "url": "https://support.wix.com/en/article/velo-about-custom-elements-8253009" },
      { "icon": "article",
        "text": "Custom Element FAQs",
        "url": "https://support.wix.com/en/article/custom-element-faqs" },
      { "icon": "example",
        "text": "Chart.js Custom Element",
        "url": "https://www.wix.com/velo/example/chart.js-custom-element" },
      { "icon": "example",
        "text": "Dropdown Custom Element",
        "url": "https://www.wix.com/velo/example/dropdown-custom-element" } ] }