{ "name": "Captcha",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.FocusMixin",
      "$w.HiddenCollapsedMixin" ],
  "labels": [],
  "location":
    { "lineno": 8,
      "filename": "Captcha.js" },
  "docs":
    { "summary": "The reCAPTCHA element allows you to present a challenge-response test to site visitors to determine whether they are human or a bot.",
      "description":
        [ "Use the reCAPTCHA element to verify that site visitors are human before",
          "allowing them to perform restricted operations such as data submission,",
          "login, or accessing private content.",
          "",
          " <h3 id=\"captcha-lifecycle\">Typical CAPTCHA Validation Lifecycle</h3>",
          "",
          " Important: To ensure complete protection, you must include backend [authorization](wix-captcha-backend.html#authorize) as a mandatory step of the CAPTCHA validation lifecycle.",
          "",
          " The following outlines a typical CAPTCHA validation lifecycle:",
          "",
          " 1. A button or another clickable element that triggers a submit, login, or another restricted operation is disabled, pending CAPTCHA verification.",
          " 1. A site visitor completes the CAPTCHA challenge. One of the following occurs:",
          "     * Verification: The CAPTCHA is verified. A [`token`]($w.Captcha.html#token) is generated. The `onVerified()` event indicates a successful CAPTCHA challenge completion. Use the [`onVerified()`]($w.Captcha.html#onVerified) event handler to enable the disabled clickable element.",
          "     * Error: The reCAPTCHA element loses connection with the CAPTCHA provider. You can use the [`onError()`]($w.Captcha.html#onError) event handler to instruct the visitor to try again later. Return to Step 1.",
          " 1. The clickable element is enabled. One of the following occurs:",
          "     * Click: The site visitor clicks the clickable element, triggering a backend function that calls [`authorize()`](wix-captcha-backend.html#authorize) with the generated [`token`]($w.Captcha.html#token).",
          "     * Timeout: The site visitor did not click the submit button within 120 seconds of token generation, causing the token to expire. When timeout occurs, the reCAPTCHA element automatically resets and displays a message asking the site visitor to redo the challenge. Use the [`onTimeout()`]($w.Captcha.html#onTimeout) event handler to disable the clickable trigger. Return to Step 1.",
          " 1. [`authorize()`](wix-captcha-backend.html#authorize) checks whether the token is valid. One of the following occurs:",
          "     * Authorization: The CAPTCHA is authorized. Perform the restricted operation (such as data insert) in the backend function. [`reset()`]($w.Captcha.html#reset) the reCAPTCHA element for future operations.",
          "     * Error: Token fails authorization. [`reset()`]($w.Captcha.html#reset) the reCAPTCHA element and ask the visitor to redo the challenge. Return to Step 1.",
          "",
          "",
          "For more information on working with your reCAPTCHA element, click <a href=\"https://support.wix.com/en/article/corvid-tutorial-using-captcha-to-protect-data-submission\" target=\"_blank\">here</a>." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "token",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 50,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Gets the reCAPTCHA token.",
            "description":
              [ "When a site visitor successfully completes a CAPTCHA challenge, a `token`",
                " is generated. The token is used for backend authorization.",
                "",
                " Prior to completing the CAPTCHA challenge and following timeout, the token returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the token of the verified reCAPTCHA element",
                  "body":
                    [ "let myToken = $w(\"#myCaptcha\").token;",
                      "// \"01ABCDeFG23hijKlmn4...OPQ5r6stuvWXy\"" ],
                  "extra":
                    {  } },
                { "title": "Full CAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  try {",
                      "    return wixCaptcha.authorize(submitRequestData.token).then(() => {",
                      "      try {",
                      "        wixData.insert(\"MyCollection\", submitRequestData.data)",
                      "      } catch (error) {",
                      "        // Add unique error message to indicate failed data insert",
                      "        return \"Error: Cannot insert data into the database collection: \" + error",
                      "      }",
                      "    })",
                      "  } catch (error) {",
                      "    // Add unique error message to indicate failed authorization",
                      "    return \"Error: CAPTCHA authorization failed: \" + error",
                      "  }",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"The reCAPTCHA element lost connection with the CAPTCHA provider. Try again later.\";",
                      "    $w(\"#messageText\").show()",
                      "    .then(() => {",
                      "      $w(\"#messageText\").hide(\"fade\", {\"delay\": 10000});",
                      "    } );",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "    $w(\"#messageText\").text = \"The CAPTCHA has timed out. Please redo the CAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the CAPTCHA is verified and a token is\n generated. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onError",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.ErrorHandler",
              "doc": "The name of the function or\n the function expression to run when an error occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 130,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when a connection error occurs while completing the CAPTCHA challenge.",
            "description":
              [ "The `onError()` function allows you to perform actions when the reCAPTCHA element on the client side",
                "loses connection with the CAPTCHA provider.",
                "",
                "If an error occurs, the reCAPTCHA element automatically resets. You can ask the site visitor to retry the CAPTCHA challenge later." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when an error occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onError(() => {",
                      "  $w(\"#messageText\").text = \"The reCAPTCHA element lost connection with the CAPTCHA provider. Try again later.\";",
                      "  $w(\"#messageText\").show()",
                      "  .then(() => {",
                      "    $w(\"#messageText\").hide(\"fade\", {\"delay\": 10000});",
                      "  } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "In this example, the onError() event handler runs,\n indicating a connection problem. We flash a temporary message instructing site\n visitors to try complete the challenge later." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onError" } },
      { "name": "onTimeout",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.TimeoutHandler",
              "doc": "The name of the function or\n the function expression to run when a CAPTCHA timeout occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 178,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the CAPTCHA token expires.",
            "description":
              [ "The `onTimeout()` function allows you to perform actions when a CAPTCHA timeout occurs.",
                "",
                "When a site visitor completes a CAPTCHA challenge, a [`token`]($w.Captcha.html#token) is",
                "generated. If 120 seconds pass without backend [authorization](wix-captcha-backend.html#authorize),",
                "the token expires and `onTimeout()` is called.",
                "",
                "When a timeout occurs, the reCAPTCHA element automatically resets and displays a",
                "message asking the site visitor to redo the challenge. If you enabled the",
                "clickable element for triggering a restricted operation when the CAPTCHA was verified, disable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when a timeout occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#submitDataButton\").disable();",
                      "  $w(\"#messageText\").text = \"The CAPTCHA has timed out. Please redo the CAPTCHA challenge.\";",
                      "  $w(\"#messageText\").show();",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onTimeout" } },
      { "name": "onVerified",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.VerifiedHandler",
              "doc": "The name of the function or\n the function expression to run when the CAPTCHA is verified." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 229,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the CAPTCHA challenge is successfully completed.",
            "description":
              [ "Once the CAPTCHA challenge has been successfully completed by the user, the `onVerified`",
                " callback is triggered and a CAPTCHA token is generated.",
                "",
                " If the clickable element for triggering the submit or another",
                " restricted operation was disabled, enable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when the CAPTCHA is verified",
                  "body":
                    [ "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#signupButton\").enable();",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Full CAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  try {",
                      "    return wixCaptcha.authorize(submitRequestData.token).then(() => {",
                      "      try {",
                      "        wixData.insert(\"MyCollection\", submitRequestData.data)",
                      "      } catch (error) {",
                      "        // Add unique error message to indicate failed data insert",
                      "        return \"Error: Cannot insert data into the database collection: \" + error",
                      "      }",
                      "    })",
                      "  } catch (error) {",
                      "    // Add unique error message to indicate failed authorization",
                      "    return \"Error: CAPTCHA authorization failed: \" + error",
                      "  }",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"The reCAPTCHA element lost connection with the CAPTCHA provider. Try again later.\";",
                      "    $w(\"#messageText\").show()",
                      "    .then(() => {",
                      "      $w(\"#messageText\").hide(\"fade\", {\"delay\": 10000});",
                      "    } );",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "    $w(\"#messageText\").text = \"The CAPTCHA has timed out. Please redo the CAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the CAPTCHA is verified and a token is\n generated. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onVerified" } },
      { "name": "reset",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the reCAPTCHA element has been reset." },
        "locations":
          [ { "lineno": 74,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Resets the reCAPTCHA element.",
            "description":
              [ "`reset()` the reCAPTCHA element in the following cases:",
                "",
                " + CAPTCHA fails [authorization](wix-captcha-backend.html#authorize)",
                " + The operation restricted by the reCAPTCHA element is successfully completed. This enables the reCAPTCHA element for the next operation." ],
            "links": [],
            "examples":
              [ { "title": "Reset the reCAPTCHA element",
                  "body":
                    [ "$w(\"#myCaptcha\").reset();" ],
                  "extra":
                    {  } },
                { "title": "Full CAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  try {",
                      "    return wixCaptcha.authorize(submitRequestData.token).then(() => {",
                      "      try {",
                      "        wixData.insert(\"MyCollection\", submitRequestData.data)",
                      "      } catch (error) {",
                      "        // Add unique error message to indicate failed data insert",
                      "        return \"Error: Cannot insert data into the database collection: \" + error",
                      "      }",
                      "    })",
                      "  } catch (error) {",
                      "    // Add unique error message to indicate failed authorization",
                      "    return \"Error: CAPTCHA authorization failed: \" + error",
                      "  }",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the CAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"The reCAPTCHA element lost connection with the CAPTCHA provider. Try again later.\";",
                      "    $w(\"#messageText\").show()",
                      "    .then(() => {",
                      "      $w(\"#messageText\").hide(\"fade\", {\"delay\": 10000});",
                      "    } );",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "    $w(\"#messageText\").text = \"The CAPTCHA has timed out. Please redo the CAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  });",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the CAPTCHA is verified and a token is\n generated. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "ErrorHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 123,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "An error event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TimeoutHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 171,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A timeout event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerifiedHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 221,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    { "notes":
        [ "The reCAPTCHA element does not offer protection for data submission performed via a dataset. To protect data submission with CAPTCHA, use code to perform the data operation (for example, [`insert()`](wix-data.html#insert) or [`save()`](wix-data.html#save))." ],
      "queryable": true } }