{ "name": "TimePicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.LabelMixin",
      "$w.FocusMixin",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.RequiredMixin",
      "$w.ReadOnlyMixin",
      "$w.FormElement" ],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "TimePicker.js" },
  "docs":
    { "summary": "An input element for capturing the time of day.",
      "description":
        [ "Time pickers allow users to easily enter a time of day. The time format is",
          " a string representation of 24-hour time, such as `'16:00'`." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "enabledTimes",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "$w.TimePicker.TimeSlot" ] },
        "locations":
          [ { "lineno": 192,
              "filename": "TimePicker.js" },
            { "lineno": 225,
              "filename": "TimePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the time slots that are available for a time picker.",
            "description":
              [ "The `enabledTimes` lets your site members choose from a set of ",
                " enabled time slots that you defined as available.",
                "",
                " Setting the `enabledTimes` property sets all the time slots",
                " available to a `timePicker` element.",
                "",
                " Getting the `enabledTimes` property returns the current",
                " list of time slots available to a `timePicker` element. ",
                "",
                " When setting and getting the enabled times, the time slot values are an array of `TimeSlot` objects.",
                " Each time slot object contains a `startTime` and an `endTime`.",
                "",
                " You cannot modify the `enabledTimes` array in-place. To add, change, or remove",
                " individual time slots:",
                "",
                "   1. Store the value of the `enabledTimes` property in a variable.",
                "   1. Make changes to the variable's array of enabled time slots.",
                "   1. Reset the `enabledTimes` property with the variable's modified array." ],
            "links": [],
            "examples":
              [ { "title": "Get the enabled time slots for the time picker",
                  "body":
                    [ "let availableTimeSlots = $w(\"#myTimePicker\").enabledTimes;" ],
                  "extra":
                    {  } },
                { "title": "Set the enabled time slots for the time picker",
                  "body":
                    [ "$w(\"#myTimePicker\").enabledTimes = [",
                      "  {startTime: \"13:35\", endTime: \"14:00\"},",
                      "  {startTime: \"16:00\", endTime: \"19:00\"},",
                      "];" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "step",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 65,
              "filename": "TimePicker.js" },
            { "lineno": 111,
              "filename": "TimePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the number of minutes the time picker steps.",
            "description":
              [ "Setting the `step` property defines the stepping behavior of the time picker.",
                " The stepping behavior is also dependent on the input option type chosen",
                " in the **Time Input Settings** panel in the Editor.",
                "",
                " ![TimePicker Input Options](images/time_picker_input_options.png \"TimePicker input options\")",
                "",
                " The input option types include the following: ",
                "",
                " + **Text only:** When input focus is on the minutes, the keyboard up and",
                "   down arrows increment and decrement the minutes by the `step` value.",
                "   When the input focus is on the hours, the hour increments and decrements",
                "   by 1 hour, regardless of the `step` value.",
                " + **Stepper:** The stepper buttons increment and decrement the minutes by",
                "   the `step` value. When the input focus is on the hours, the hour increments",
                "   and decrements by 1 hour, regardless of the `step` value. The keyboard up",
                "   and down arrows work as above.",
                " + **Dropdown:** The dropdown contains times where the difference between each",
                "   time is the `step` value in minutes. For example, if the `step` value is",
                "   '10', the dropdown will contain `11:00`, `11:10`, `11:20`, etc.",
                "",
                " Set the `step` value to a number between 1 and 60.",
                "",
                " You can also set an element's `step` property in the Editor using the Settings panel.",
                "",
                " Getting the `step` property returns the current step value.",
                "",
                " Setting the [`enabledTimes`](#enabledTimes) property changes the way `step` behaves.",
                " The input time options will change based on what `startTime` is set to. ",
                " For example, if the `step` value is '10', `startTime` is '11:00', and `endTime` is '11:30',",
                " the input time options will include '11:00', '11:10', and '11:20'.",
                " If the `step` value is '10', `startTime` is '11:05', and `endTime` is '11:30',",
                " the input time options will include '11:05', '11:15', and '11:25'." ],
            "links": [],
            "examples":
              [ { "title": "Get a time picker's step value",
                  "body":
                    [ "let step = $w(\"#myTimeInput\").step; // 5" ],
                  "extra":
                    {  } },
                { "title": "Set a time picker's step value",
                  "body":
                    [ "$w(\"#myTimeInput\").step = 5;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "useAmPmFormat",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 118,
              "filename": "TimePicker.js" },
            { "lineno": 141,
              "filename": "TimePicker.js" } ],
        "docs":
          { "summary": "Sets or gets whether the time picker uses 12-hour or 24-hour format.",
            "description":
              [ "The `useAmPmFormat` only affects the display format. A time picker always",
                " uses the 24-hour format for its [`value`](#value).",
                "",
                " The `useAmPmFormat` property can be:",
                "",
                " + `true`: Displays a 12-hour time along with AM/PM indication. For example,",
                "   **04:00 PM**.",
                " + `false`: Displays a 24-hour time. For example, **16:00**.",
                "",
                " You can also set an element's `useAmPmFormat` property in the Editor using the Settings panel." ],
            "links": [],
            "examples":
              [ { "title": "Get whether a time picker is using the AM/PM format",
                  "body":
                    [ "let amPm = $w(\"#myTimeInput\").useAmPmFormat; // false" ],
                  "extra":
                    {  } },
                { "title": "Set a time picker to use the AM/PM format",
                  "body":
                    [ "$w(\"#myTimeInput\").useAmPmFormat = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 22,
              "filename": "TimePicker.js" },
            { "lineno": 58,
              "filename": "TimePicker.js" } ],
        "docs":
          { "summary": "Sets or gets a time picker's value.",
            "description":
              [ "Setting the `value` property sets the time displayed in the time picker element.",
                "The time picker displays the hours and minutes from the `value` even if the `value`",
                "contains seconds or milliseconds information.",
                "",
                " Set `value` to a 24-hour time string in one of the following formats:",
                "",
                " + `HH:MM`",
                " + `HH:MM:SS`",
                " + `HH:MM:SS.mmm`",
                "",
                " Where `HH` is a two-digit hour value (0-23), `MM` is a two-digit minute value (0-59),",
                " `SS` is a two-digit second value (0-59), and `mmm` is a three-digit millisecond value (0-999). (Seconds are rounded down to the nearest minute and milliseconds are rounded down to the nearest seconds.)",
                "",
                " Getting the `value` property returns the current displayed time. The time",
                " is returned as an HH\\:MM\\:SS.mmm string in 24-hour format regardless of how it is currently being displayed.",
                " > **Notes:**",
                " > - If an element is connected to a dataset, setting the element's `value`",
                " >   in code does not set the value of the connected field in the dataset.",
                " >   That means if you use the dataset to perform a submit, the value changed",
                " >   in code is not reflected in the submitted item.",
                " > - To submit the new value using a dataset, set the field's value using the",
                " >   [`setFieldValue()`](wix-dataset.html#setFieldValue) function before",
                " >   performing the submit." ],
            "links": [],
            "examples":
              [ { "title": "Get a time picker's value",
                  "body":
                    [ "let value = $w(\"#myTimeInput\").value; // \"16:30:00.000\"" ],
                  "extra":
                    {  } },
                { "title": "Set a time picker's value",
                  "body":
                    [ "$w(\"#myTimeInput\").value = \"16:30\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages":
    [ { "name": "TimeSlot",
        "locations":
          [ { "lineno": 147,
              "filename": "TimePicker.js" } ],
        "docs":
          { "summary": "An object representing an available time slot for a time picker.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "startTime",
              "type": "string",
              "doc": "Start time for the time slot. The `startTime` must be earlier than the `endTime`, and \n be in one of the following formats: \n + `HH:MM` (hours and minutes)\n + `HH:MM:SS` (hours, minutes, and seconds)\n + `HH:MM:SS.mmm` (hours, minutes, seconds, and milliseconds)\n\n `HH` is a 2-digit value between 0-23. \n\n `MM` is a 2-digit value between 0-59. \n\n `SS` is a 2-digit value between 0-59. Seconds are rounded down to the nearest minute.\n\n `mmm` is a 3-digit value between 0-999. Milliseconds are rounded down to the nearest second.\n\n\n The time picker's first input time option is the `startTime`.\n This means that if the `startTime` is '10:00', the first input time option is '10:00'." },
            { "name": "endTime",
              "type": "string",
              "doc": "End time for the time slot. The `endTime` must be later than the `startTime`, and \n be in one of the following formats:\n + `HH:MM` (hours and minutes)\n + `HH:MM:SS` (hours, minutes, and seconds)\n + `HH:MM:SS.mmm` (hours, minutes, seconds, and milliseconds)\n\n `HH` is a 2-digit value between 0-23. \n > Note that '24:00' is a valid `endTime` in order for '23:59' to be an input time option.\n\n `MM` is a 2-digit value between 0-59. \n\n `SS` is a 2-digit value between 0-59. Seconds are rounded down to the nearest minute.\n\n `mmm` is a 3-digit value between 0-999.  Milliseconds are rounded down to the nearest second.\n\n\n The `endTime` is not included in the time picker's input time options. This means that if the `endTime` \n is '11:00', the time picker's last input time option (assuming [`step`](#step) is '1'), is '10:59'." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    { "queryable": true } }