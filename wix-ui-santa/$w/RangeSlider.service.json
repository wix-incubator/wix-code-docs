{ "name": "RangeSlider",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.ValueMixin",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "RangeSlider.js" },
  "docs":
    { "summary": "Range sliders allow site visitors to select a range of values within a given range.",
      "description":
        [ "> This feature is not yet available to all users.",
          "",
          " Range sliders allow site visitors to input a range of values by sliding two 'handles'",
          " along a numeric track. The slider also supports a 'single-handle' mode. ",
          " ",
          " ![Range Slider Handles](images/rangeSlider_handles.png 'Range Slider Handles')",
          "",
          " [`max`](#max) and [`min`](#min) define the upper and lower limits of a range slider. ",
          " [`value`](#value) defines the currently selected values of the handles. ",
          "",
          " Range sliders can be used to filter data, or to collect numeric input from site visitors.",
          " For example, you can use a range slider so a site visitor can select a price range for their online ",
          " shopping needs.",
          "",
          " ![Range Slider Types](images/rangeSlider_sliderTypes.png 'Range Slider sliderTypes')",
          "",
          " A range slider has a [`sliderType`](#sliderType) that can be set to either 'Continuous' or 'Stepped'. ",
          " - As a handle slides left or right along a continuous slider, the selected value always increases or decreases by 0.1. ",
          " - Unlike a continuous slider, a stepped slider includes tick marks along its track. The tick marks indicate ",
          "   the possible input values that can be selected by sliding the handles. ",
          " - As a handle slides left or right along a stepped slider, the value increases or decreases by its [`step`](#step) value ",
          "   represented by the tick marks. ",
          " - A stepped slider also has a [`stepType`](#stepType) that can be set to either 'Number' or 'Value'. ",
          "   - When set to 'Number', the [`stepType`](#stepType) defines the amount of steps there are within a given range. ",
          "   - When set to 'Value', the [`stepType`](#stepType) defines the amount of units between each step. ",
          "   - The [`stepType`](#stepType) and [`step`](#step) properties can only be used when a range slider has a ",
          "     [`sliderType`](#sliderType) of 'Stepped'.",
          "",
          " The following diagram illustrates how the [`stepType`](#stepType) and [`step`](#step) properties ",
          " can only be used when the range slider's [`sliderType`](#sliderType) is set to 'Stepped'.",
          "",
          " ![Range Slider Flow](images/rangeSlider_flowChart.png 'Range Slider Flow')" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 52,
              "filename": "RangeSlider.js" },
            { "lineno": 63,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the label of a range slider.",
            "links": [],
            "examples":
              [ { "title": "Get a range slider's label",
                  "body":
                    [ "let rangeSliderLabel = $w('#myRangeSlider').label; // 'Set a range value'" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's label",
                  "body":
                    [ "$w('#myRangeSlider').label = 'Set a range value';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "'100'",
        "locations":
          [ { "lineno": 90,
              "filename": "RangeSlider.js" },
            { "lineno": 103,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the maximum value of a range slider.",
            "description":
              [ "Note that the `max` is the upper limit of the range slider, and not the maximum handle value." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's maximum value",
                  "body":
                    [ "let rangeSliderMax = $w('#myRangeSlider').max; // 100" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's maximum value",
                  "body":
                    [ "$w('#myRangeSlider').max = 100;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "'0'",
        "locations":
          [ { "lineno": 70,
              "filename": "RangeSlider.js" },
            { "lineno": 83,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the minimum value of a range slider.",
            "description":
              [ "Note that the `min` is the lower limit of the range slider, and not the minimum handle value." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's minimum value",
                  "body":
                    [ "let rangeSliderMin = $w('#myRangeSlider').min; // 0" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's minimum value",
                  "body":
                    [ "$w('#myRangeSlider').min = 0;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prefix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 240,
              "filename": "RangeSlider.js" },
            { "lineno": 255,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the prefix of a range slider's value.",
            "description":
              [ "You can set a prefix for a range slider's value. For example, you can set a prefix as a type ",
                "of currency, such as '$'." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's value prefix",
                  "body":
                    [ "let rangeSliderPrefix = $w('#myRangeSlider').prefix; // '$'" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's value prefix",
                  "body":
                    [ "$w('#myRangeSlider').prefix = '$';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sliderType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "'Continuous'",
        "locations":
          [ { "lineno": 110,
              "filename": "RangeSlider.js" },
            { "lineno": 134,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets a range slider's type.",
            "description":
              [ "The `sliderType` can be set to one of the following:",
                "",
                " - `'Continuous'`: A continuous range slider allows site visitors to select ",
                "    any value within the range you set. The handles move smoothly at a step value of 0.1, along ",
                "    the slider's track. ",
                " - `'Stepped'`: A stepped range slider only allows site visitors to select specific ",
                "    values within the set range. The handles move along tick marks displayed underneath the stepped ",
                "    slider's track. The tick marks are based on a step value that can be adjusted by setting ",
                "    the [`step`](#step) property." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's type",
                  "body":
                    [ "let rangeSliderType = $w('#myRangeSlider').sliderType; // 'Stepped'" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's type",
                  "body":
                    [ "$w('#myRangeSlider').sliderType = 'Stepped';" ],
                  "extra":
                    {  } },
                { "title": "Toggle a range slider's type",
                  "body":
                    [ "$w('#sliderTypeToggleButton').onClick(() => {",
                      "  if($w('#myRangeSlider').sliderType === 'Continuous') {",
                      "    $w('#myRangeSlider').sliderType = 'Stepped';",
                      "  }",
                      "  else{",
                      "    $w('#myRangeSlider').sliderType = 'Continuous';",
                      "  }",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "step",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "defaultValue": "0.1",
        "locations":
          [ { "lineno": 182,
              "filename": "RangeSlider.js" },
            { "lineno": 203,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets a range slider's step value.",
            "description":
              [ "<br/>",
                "",
                " > **Note:** This property is only relevant when the [`sliderType`](#sliderType) is set to 'Stepped'.",
                " ",
                " The stepped range slider is divided into specific steps within a set range. The ",
                " handles of the slider move along the tick marks displaying each step value. The step value ",
                " represents either the size of each step, or the number of steps within the slider's set range. Use the ",
                " [`stepType`](#stepType) to set the type of step that defines the step value." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's step value",
                  "body":
                    [ "let rangeSliderStep = $w('#myRangeSlider').step; // 10" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's step value",
                  "body":
                    [ "$w('#myRangeSlider').step = 10;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stepType",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "'Number'",
        "locations":
          [ { "lineno": 141,
              "filename": "RangeSlider.js" },
            { "lineno": 175,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets a range slider's step type.",
            "description":
              [ "<br/>",
                "",
                " > **Note:** This property is only relevant when the [`sliderType`](#sliderType) is set to 'Stepped'.",
                "",
                " The `stepType` defines the steps in a **stepped** range slider's track. ",
                " It can be set to one of the following:",
                "",
                " - `'Number'`: The number of steps is determined by the [`step`](#step) ",
                "   property's value. For example, suppose a range slider has a [`min`](#min)",
                "   value of `0`, [`max`](#max) value of `10`, and [`step`](#step) value ",
                "   of `5`. There will be 5 steps, meaning each step will be 2 units. ",
                "",
                "   ![StepType Number](images/rangeSlider_stepType_number.png 'StepType Number')",
                "  ",
                " - `'Value'`: The value of each step is equal to the number of units defined by ",
                "   the [`step`](#step) property's value. For example, suppose a slider has",
                "   a [`min`](#min) value of 0, [`max`](#max) value of 10, and [`step`](#step) ",
                "   value of 5. Each step size will be 5 units, meaning there will be two 2 steps. ",
                "",
                "   ![StepType Value](images/rangeSlider_stepType_value.png 'StepType Value')" ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's step type",
                  "body":
                    [ "let rangeSliderStepType = $w('#myRangeSlider').stepType; // 'Number'" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's step type",
                  "body":
                    [ "$w('#myRangeSlider').stepType = 'Number';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "suffix",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 244,
              "filename": "RangeSlider.js" },
            { "lineno": 277,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the suffix of a range slider's value.",
            "description":
              [ "You can set a suffix for a range slider's value. For example, you can set a suffix to be a ",
                "unit of measurement, such as 'cm'." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's value suffix",
                  "body":
                    [ "let rangeSliderSuffix = $w('#myRangeSlider').suffix; // '%'" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's value suffix",
                  "body":
                    [ "$w('#myRangeSlider').suffix = '%';" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          [ "number",
            { "name": "Array",
              "typeParams":
                [ "number" ] } ],
        "locations":
          [ { "lineno": 210,
              "filename": "RangeSlider.js" },
            { "lineno": 233,
              "filename": "RangeSlider.js" } ],
        "docs":
          { "summary": "Sets or gets the value(s) of a range slider's handle(s).",
            "description":
              [ "The `value` of a range slider refers to the currently selected value(s) of the range slider represented by the handle(s).  ",
                "The `value` can be one of 2 types:",
                "",
                " - Number: Use a number to set the selected value of a single-handle range slider. The selected value ",
                "   is bound by the [`min`](#min) and the [`max`](#max) limits of the range slider.",
                " - Array of Numbers: Use an array of 2 numbers, a minimum and maximum value, to set the selected ",
                "   values of a 2-handle range slider. The selected values are bound by the [`min`](#min) and the [`max`](#max)",
                "   limits of the range slider." ],
            "links": [],
            "examples":
              [ { "title": "Get a range slider's value",
                  "body":
                    [ "let rangeSliderValue = $w('#myRangeSlider').value; // [10,50]" ],
                  "extra":
                    {  } },
                { "title": "Set a range slider's value",
                  "body":
                    [ "$w('#myRangeSlider').value = [10,50];" ],
                  "extra":
                    {  } },
                { "title": "Toggle a range slider's value type",
                  "body":
                    [ "$w('#valueToggleButton').onClick(() => {",
                      "  let numberVal = $w('#myRangeSlider').max/2;",
                      "  let arrayVal = [$w('#myRangeSlider').min, $w('#myRangeSlider').max]",
                      "",
                      "  if (Array.isArray($w('#myRangeSlider').value)){",
                      "      $w('#myRangeSlider').value = numberVal;",
                      "  }",
                      "  else {",
                      "      $w('#myRangeSlider').value = arrayVal;",
                      "  }",
                      "})" ],
                  "extra":
                    { "description": "This example demonstrates how to toggle between a range slider with two handles and a range slider with a sinlge-handle." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }