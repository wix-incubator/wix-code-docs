{ "name": "wix-editor",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "editor.js" },
  "docs":
    { "summary": "The wix-editor module contains functionality for working with the Editor from [Blocks Panel](https://support.wix.com/en/article/creating-custom-panels-for-your-widgets-action-bar-buttons) code.",
      "description":
        [ "> **This module is available only in Wix Blocks**  ",
          "> [Wix Blocks](https://support.wix.com/en/article/wix-blocks-check-out-our-articles) is a workspace for building Wix apps. It is currently a Beta version, open to a limited number of users.",
          "",
          "The Editor API is used within the code of panels built with the [Blocks Panel Builder](https://support.wix.com/en/article/creating-custom-panels-for-your-widgets-action-bar-buttons).",
          "It enables your panel to interact with the Wix editors by removing or restoring widget elements, opening Dashboard panels, and more.",
          "To use the Editor API, import `wixEditor` from the `wix-editor` module:",
          "",
          "```javascript",
          "import wixEditor from 'wix-editor';",
          "```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "getCurrentViewport",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-editor.Viewport" ] },
            "doc": "Fulfilled - Object with the current Editor viewport." },
        "locations":
          [ { "lineno": 110,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "Gets the viewport currently selected in the Editor.",
            "description":
              [ "The `getCurrentViewport()` function returns a Promise that resolves to an object containing details about the currently selected viewport. To use this function on an inner (nested) widget, use [`getScopedWixEditor()`](#getScopedWixEditor)." ],
            "links": [],
            "examples":
              [ { "title": "Get the current viewport",
                  "body":
                    [ "import wixEditor from 'wix-editor';",
                      "",
                      "// ...",
                      "",
                      "wixEditor.getCurrentViewport()",
                      "  .then(viewport => {",
                      "  // Your code that uses the 'viewport' value goes here",
                      "  }); ",
                      "  ",
                      "/* For example, `viewport` can be: ",
                      "  {",
                      "    type: \"DESKTOP\",",
                      "    range: {",
                      "      minWidth: 1001,",
                      "      maxWidth: undefined",
                      "    }",
                      "  }",
                      "*/" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getScopedWixEditor",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "Selector",
              "type": "string",
              "doc": "A string of one or more nested widget selectors, which can include a few levels of nesting from outer to inner, separated by spaces. For example: `(\"#nestedWidget1\")`, or `(\"#nestedWidget1 #nestedWidget2\")`." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The `wix-editor` module scoped to the nested widget." },
        "locations":
          [ { "lineno": 121,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "Gets the `wix-editor` module scoped of an [inner (nested) widget](https://support.wix.com/en/article/wix-blocks-creating-and-managing-widgets-within-widgets).",
            "description":
              [ "The `getScopedWixEditor()` function lets you use `wix-editor` functions on inner (nested) widgets. It receives a selector of an inner widget and returns a promise that resolves with an object representing the scope of the inner widget." ],
            "links": [],
            "examples":
              [ { "title": "Removes an element in an inner (nested) widget",
                  "body":
                    [ "import wixEditor from 'wix-editor';",
                      "",
                      "// ...",
                      "",
                      "wixEditor.getScopedWixEditor(\"#nestedWidget1 #nestedWidget2\") ////nestedWidget2 is inside nestedWidget1",
                      "  .then(nestedWidget => {",
                      "    nestedWidget.removeElement(\"#title1\"); //removes title1 from nestedWidget2",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isRemoved",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "selector",
              "type": "string",
              "doc": "An element selector." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - `true` if the element was removed and `false` if it exists." },
        "locations":
          [ { "lineno": 72,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "Checks if an element is removed from the widget.",
            "description":
              [ "The `isRemoved()` function returns a Promise that resolves to `true` if the element is removed.",
                "",
                "The element selector is a string with the hash symbol (`#`) followed by the ID of the item you want to select (e.g. `\"#myElement\"`). To use this function on an inner (nested) widget, use [`getScopedWixEditor()`](#getScopedWixEditor)." ],
            "links": [],
            "examples":
              [ { "title": "Check if an element is removed",
                  "body":
                    [ "import wixEditor from 'wix-editor';",
                      "",
                      "// ...",
                      "",
                      "wixEditor.isRemoved('#title')",
                      "  .then(isRemoved => {",
                      "    // Your code that uses the 'isRemoved' value goes here",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "listRemovedElements",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "string" ] } ] },
            "doc": "Fulfilled - A list of of selectors of removed elements." },
        "locations":
          [ { "lineno": 86,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "Gets a list of all removed widget elements.",
            "description":
              [ "The `listRemovedElements()` function returns a Promise that resolves to a list of selectors of removed elements that are part of the widget with which the panel is associated, for example: `[‘title’, ‘description’]`. To use this function on an inner (nested) widget, use [`getScopedWixEditor()`](#getScopedWixEditor)." ],
            "links": [],
            "examples":
              [ { "title": "Get all the removed elements",
                  "body":
                    [ "import wixEditor from 'wix-editor';",
                      "",
                      "// ...",
                      "",
                      "wixEditor.listRemovedElements()",
                      "  .then(allRemovedElements => {",
                      "    // Code to execute with the allRemovedElements array ",
                      "  })",
                      "  ",
                      "// For example, allRemovedElements can be: [\"#title\", \"#button1\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "openDashboardPanel",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-editor.DashboardOptions",
              "doc": "Relative URL for the Dashboard page." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the Dashboard is open." },
        "locations":
          [ { "lineno": 97,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "Opens the [Dashboard](https://support.wix.com/en/article/about-your-wix-dashboard) for the current site.",
            "description":
              [ "The `openDashboardPanel()` function returns a Promise that resolves when the Dashboard is open.",
                "The `url` parameter specifies the page to open within the Dashboard." ],
            "links": [],
            "examples":
              [ { "title": "Open a dashboard panel",
                  "body":
                    [ "import wixEditor from 'wix-editor';",
                      "",
                      "// ...",
                      "",
                      "wixEditor.openDashboardPanel({ url: 'blog' })",
                      "  .then(() => {",
                      "    // Code to execute after opening the dashboard panel",
                      "  })" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "removeElement",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "selector",
              "type": "string",
              "doc": "An element selector." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the element is removed." },
        "locations":
          [ { "lineno": 40,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "Removes a widget element from the stage.",
            "description":
              [ "The `removeElement()` function returns a Promise that is resolved when the element is removed. You can only remove elements that are part of the widget with which the panel is associated.  ",
                "The element selector is a string with the hash symbol (`#`) followed by the ID of the item you want to select (for example, `\"#myElement\"`). To use this function on an inner (nested) widget, use [`getScopedWixEditor()`](#getScopedWixEditor)." ],
            "links":
              [ "[restoreElement( )](#restoreElement)",
                "[isRemoved( )](#isRemoved)" ],
            "examples":
              [ { "title": "Use a toggle switch to remove/restore a widget element",
                  "body":
                    [ "// In this example, we use a toggle switch to remove or restore an element in our widget.",
                      "",
                      "import wixEditor from 'wix-editor';",
                      "",
                      "$w.onReady(async function () {",
                      " $w('#toggleSwitch').onClick(async (event) => {",
                      "   if (event.target.value) {",
                      "      await wixEditor.removeElement('#title');",
                      "   } else {",
                      "     await wixEditor.restoreElement('#title');",
                      "        }",
                      "  });",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "restoreElement",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "selector",
              "type": "string",
              "doc": "An element selector." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - when the element is restored." },
        "locations":
          [ { "lineno": 55,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "Restores (shows) a widget element on the stage.",
            "description":
              [ "The `restoreElement()` function returns a Promise that is resolved when the element is restored. You can only restore elements that are part of the widget with which the panel is associated.",
                "",
                "The element selector is a string with the hash symbol (`#`) followed by the ID of the item you want to select (for example, `\"#myElement\"`).  To use this function on an inner (nested) widget, use [`getScopedWixEditor()`](#getScopedWixEditor)." ],
            "links":
              [ "[removeElement( )](#removeElement)",
                "[isRemoved( )](#isRemoved)" ],
            "examples":
              [ { "title": "Show an element",
                  "body":
                    [ "import wixEditor from 'wix-editor';",
                      "",
                      "// ...",
                      "",
                      "wixEditor.restoreElement('#title');" ],
                  "extra":
                    {  } },
                { "title": "Use a toggle switch to remove/restore a widget element",
                  "body":
                    [ "// In this example, we use a toggle switch to remove or restore an element in our widget.",
                      "",
                      "import wixEditor from 'wix-editor';",
                      "",
                      "$w.onReady(async function () {",
                      " $w('#toggleSwitch').onClick(async (event) => {",
                      "   if (event.target.value) {",
                      "      await wixEditor.removeElement('#title');",
                      "   } else {",
                      "     await wixEditor.restoreElement('#title');",
                      "        }",
                      "  });",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "DashboardOptions",
        "locations":
          [ { "lineno": 17,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "An object representing the Dashboard parameters.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "url",
              "type": "string",
              "doc": "The relative URL to open in the Business Manager." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Viewport",
        "locations":
          [ { "lineno": 24,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "An object representing the current viewport.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Type of viewport (`DESKTOP`, `MOBILE`, or `TABLET`)" },
            { "name": "An",
              "type": "wix-editor.viewportRange",
              "doc": "object representing the current viewport's range." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "viewportRange",
        "locations":
          [ { "lineno": 32,
              "filename": "editor.js" } ],
        "docs":
          { "summary": "An object representing the current viewport's range.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "minWidth",
              "type": "number",
              "doc": "Minimum range in pixels for the current viewport." },
            { "name": "maxWidth",
              "type": "number",
              "doc": "Maximum range in pixels for the current viewport." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }
