{
  "name": "PostsQueryBuilder",
  "memberOf": "wix-blog-backend.Post",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-blog-backend-post.post.posts-query-builder",
  "docs": {},
  "relatedGuides": [],
  "properties": [],
  "operations": [
    {
      "name": "ascending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
        "description": [
          "The `ascending()` function refines a `PostsQueryBuilder` to sort in ascending order of the specified properties. If you specify more than one property, `ascending()` sorts the results in ascending order by each property in the order they are listed.",
          "",
          "You can sort the following types:",
          "",
          "Number: Sorts numerically.",
          "Date: Sorts by date and time.",
          "String: Sorts lexicographically, so \"abc\" comes after \"XYZ\".",
          "If a property contains a number as a String, that value will be sorted alphabetically and not numerically. Items that do not have a value for the specified sort property are ranked lowest."
        ],
        "examples": [
          {
            "title": "ascending example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .ascending('id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "descending",
      "params": [
        {
          "name": "propertyNames",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "string"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Adds a sort to a query, sorting by the specified properties in descending order.",
        "description": [
          "The `descending()` function refines a `PostsQueryBuilder` to sort in descending order of the specified properties. If you specify more than one property, `descending()` sorts the results in descending order by each property in the order they are listed.",
          "",
          "You can sort the following types:",
          "",
          "Number: Sorts numerically.",
          "Date: Sorts by date and time.",
          "String: Sorts lexicographically, so \"abc\" comes after \"XYZ\".",
          "If a property contains a number as a String, that value will be sorted alphabetically and not numerically. Items that do not have a value for the specified sort property are ranked lowest."
        ],
        "examples": [
          {
            "title": "descending example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .descending('id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "eq",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value equals the specified value.",
        "description": [
          "The `eq()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property equals the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type does not match the same number stored as a Number type.",
          "",
          "Matching strings with `eq()` is case sensitive, so \"text\" is not equal to \"Text\"."
        ],
        "examples": [
          {
            "title": "eq example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .eq('id', 'some-id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "exists",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "boolean"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": [
          {
            "title": "exists example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .exists('id', 'some-id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "find",
      "params": [],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "complexType": {
              "nativeType": "Promise",
              "typeParams": [
                {
                  "referenceType": "wix-blog-backend.Post.PostsQueryResult"
                }
              ]
            }
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Returns the `post` that match the query.",
        "description": [
          "The `find()` function returns a Promise that resolves to the results found by the query and some information about the results. The Promise is rejected if `find()` is called with incorrect permissions or if any of the functions used to refine the query are invalid."
        ],
        "examples": [
          {
            "title": "find example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "ge",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value is greater than or equal to the specified value.,,",
        "description": [
          "The `ge()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property is greater than or equal to the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type does not match the same number stored as a Number type.",
          "",
          "If a property contains a number as a String, that value will be compared alphabetically and not numerically. Items that do not have a value for the specified property are ranked lowest.",
          "",
          "The following types of properties can be compared:",
          "",
          "Number: Compares numerically.",
          "Date: Compares JavaScript Date objects.",
          "String: Compares lexicographically, so \"abc\" is greater than or equal to \"ABC\" (because of the greater than), but \"ABC\" is not greater than or equal to \"abc\"."
        ],
        "examples": [
          {
            "title": "ge example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .ge('height', 1212)",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "gt",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value is greater than the specified value.,,",
        "description": [
          "The `gt()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property is greater than the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type does not match the same number stored as a Number type.",
          "",
          "If a property contains a number as a String, that value will be compared alphabetically and not numerically. Items that do not have a value for the specified property are ranked lowest.",
          "",
          "The following types of properties can be compared:",
          "",
          "Number: Compares numerically.",
          "Date: Compares JavaScript Date objects.",
          "String: Compares lexicographically, so \"abc\" is greater than \"ABC\" (because of the greater than), but \"ABC\" is not greater than to \"abc\"."
        ],
        "examples": [
          {
            "title": "gt example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .gt('firstPublishedDate', '2022-05-22T20:57:00.638Z')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "hasAll",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "any"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property contains all of the specified value parameters.",
        "description": [
          "The `hasAll()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property equals all of the specified values.",
          "",
          "Matching strings with `hasAll()` is case sensitive, so \"text\" is not equal to \"Text\".",
          "",
          "If the value of the specified property is an array, `hasAll()` will match if there is a match in the elements of that array for all of the specified values.",
          "",
          "You can specify a list of values to match by providing comma-separated String types as the value parameters. You can also specify a list of these values by including them in an array and providing the array as the value.",
          "",
          ""
        ],
        "examples": [
          {
            "title": "hasAll example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .hasAll('categoryIds', ['some-category-ids'])",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "hasSome",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "complexType": {
                "nativeType": "Array",
                "typeParams": [
                  {
                    "nativeType": "any"
                  }
                ]
              }
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property contains any of the specified value parameters.",
        "description": [
          "The `hasSome()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property equals any of the specified values.",
          "",
          "Matching strings with `hasSome()` is case sensitive, so \"text\" is not equal to \"Text\".",
          "",
          "If the value of the specified property is an array, `hasSome()` will match if any of the elements of that array match any of the specified values.",
          "",
          "You can specify a list of values to match by providing comma-separated String types as the value parameters. You can also specify a list of these values by including them in an array and providing the array as the value.",
          "",
          ""
        ],
        "examples": [
          {
            "title": "hasSome example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .hasSome('id', 'some-id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "in",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": [
          {
            "title": "in example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .in('id', 'some-id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "le",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value is less than or equal to the specified value.,,",
        "description": [
          "The `le()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property is less than or equal to the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type does not match the same number stored as a Number type.",
          "",
          "If a property contains a number as a String, that value will be compared alphabetically and not numerically. Items that do not have a value for the specified property are ranked lowest.",
          "",
          "The following types of properties can be compared:",
          "",
          "Number: Compares numerically.",
          "Date: Compares JavaScript Date objects.",
          "String: Compares lexicographically, so \"ABC\" is less than or equal to \"abc\" (because of the less than), but \"abc\" is not less than or equal to \"ABC\"."
        ],
        "examples": [
          {
            "title": "le example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .le('height', 1212)",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "limit",
      "params": [
        {
          "name": "limit",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Limits the number of items the query returns.",
        "description": [
          "The `limit()` function defines the number of results a query returns in each page. Only one page of results is retrieved at a time. The `next()` and `prev()` functions are used to navigate the pages of a query result.",
          "",
          "By default, `limit` is set to 50.",
          "",
          "The maximum value that `limit()` can accept is 1000."
        ],
        "examples": [
          {
            "title": "limit example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .limit(10)",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "lt",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value is less than the specified value.,,",
        "description": [
          "The `lt()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property is less than the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type does not match the same number stored as a Number type.",
          "",
          "If a property contains a number as a String, that value will be compared alphabetically and not numerically. Items that do not have a value for the specified property are ranked lowest.",
          "",
          "The following types of properties can be compared:",
          "",
          "Number: Compares numerically.",
          "Date: Compares JavaScript Date objects.",
          "String: Compares lexicographically, so \"ABC\" is less than \"abc\" (because of the less than), but \"abc\" is not less than \"ABC\"."
        ],
        "examples": [
          {
            "title": "lt example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .lt('firstPublishedDate', '2022-05-22T20:57:00.642Z')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "ne",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Refines a query to match items whose specified property value does not equal the specified value.",
        "description": [
          "The `ne()` function refines a `PostsQueryBuilder` to only match items where the value of the specified property does not equal the specified value.",
          "",
          "It only matches values of the same type. For example, a number value stored as a String type is considered not equal to the same number stored as a Number type.",
          "",
          "Matching strings with `ne()` is case sensitive, so \"text\" is not equal to \"Text\"."
        ],
        "examples": [
          {
            "title": "ne example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .ne('id', 'some-id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "skip",
      "params": [
        {
          "name": "skip",
          "type": [
            {
              "nativeType": "number"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "Sets the number of items to skip before returning query results.",
        "description": [
          "The `skip()` function defines the number of results to skip in the query results before returning new query results.",
          "",
          "For example, if you query a collection and 50 items match your query, but you set skip to 10, the results returned will skip the first 10 items that match and return the 11th through 50th items.",
          "",
          "By default, skip is set to 0."
        ],
        "examples": [
          {
            "title": "skip example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .skip(10)",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "startsWith",
      "params": [
        {
          "name": "propertyName",
          "type": [
            {
              "nativeType": "string"
            }
          ],
          "doc": "",
          "required": false
        },
        {
          "name": "value",
          "type": [
            {
              "nativeType": "any"
            }
          ],
          "doc": "",
          "required": false
        }
      ],
      "requiredFields": [],
      "ret": {
        "type": [
          {
            "referenceType": "wix-blog-backend.Post.PostsQueryBuilder"
          }
        ],
        "doc": null
      },
      "docs": {
        "summary": "",
        "description": [],
        "examples": [
          {
            "title": "startsWith example",
            "body": [
              "import { post } from 'wix-blog-backend';",
              "//...",
              "post",
              "  .queryPosts()",
              "  .startsWith('id', 'some-id')",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    }
  ],
  "messages": []
}
