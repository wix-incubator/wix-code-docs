{ "name": "wix-data",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 98,
      "filename": "data-api.es6" },
  "docs":
    { "summary": "The wix-data module contains functionality for working with data in collections.",
      "description":
        [ "To use the data module, import `wixData` from the `wix-data` module:",
          "",
          "   ``` javascript",
          "   import wixData from 'wix-data';",
          "   ```",
          "",
          " The wix-data API can be used in your siteâ€™s front-end or backend code.",
          "",
          " The wix-data API includes functions for managing the data in your collections,",
          " building queries on collections, and registering hooks.",
          "",
          " For more information, see <a href=\"https://www.wix.com/support/html5/article/working-with-the-data-api\" target=\"_blank\">Working with the Data API</a>.",
          "",
          " <h3 id=\"data-types\">Data Types</h3>",
          " The Wix Data API works with a schemaless database behind the scenes. In theory,",
          " you can store any type of data in any database collection field. In practice, each collection has a",
          " non-enforced schema that you should conform to. This schema is used to determine",
          " which page elements can connect to which fields and to provide a better experience",
          " in the <a href=\"https://support.wix.com/en/article/managing-your-database-collections-5018117\" target=\"_blank\">Data Manager</a>.",
          " For example, if you set a field's type to **Date and Time**, you can then connect",
          " that field to elements that work with dates, such as DatePicker and Text elements.",
          " Also, in the Data Manager, values will appear as dates and you can add new values",
          " using a date picker.",
          "",
          " The following is a list of the field types from database collections and their",
          " corresponding JavaScript data types. When you retrieve data from a collection,",
          " that data will be represented in the JavaScript data types that correspond",
          " to your collection's field types. When you add or update data in a collection,",
          " you should provide the data using the JavaScript data types that correspond to your",
          " collection's field types.",
          "",
          "<table style=\"border-collapse: collapse;\">",
          "  <tr>",
          "    <td><b>Field Type</b></td>",
          "    <td><b>Data Type</b></td>",
          "    <td><b>Notes</b></td>",
          "  </tr>",
          "  <tr>",
          "    <td>Audio</td>",
          "    <td>JavaScript string</td>",
          "    <td>A Media Manager audio URL as described [here]($w.AudioPlayer.html#src).</td>",
          "  </tr>",
          "  <tr>",
          "    <td>Boolean</td>",
          "    <td>JavaScript boolean</td>",
          "    <td></td>",
          "  </tr>",
          "  <tr>",
          "    <td>Date and Time</td>",
          "    <td>JavaScript Date object</td>",
          "    <td></td>",
          "  </tr>",
          "  <tr>",
          "    <td>Document</td>",
          "    <td>JavaScript string</td>",
          "    <td>A Media Manager document URL as described [here]($w.LinkableMixin.html#link).</td>",
          "  </tr>",
          "  <tr>",
          "    <td>Image</td>",
          "    <td>JavaScript string</td>",
          "    <td>An image URL as described [here]($w.Gallery.html#ImageItem).</td>",
          "  </tr>",
          "  <tr>",
          "    <td>Media Gallery</td>",
          "    <td>JavaScript array</td>",
          "    <td>Each element in the array is either an [ImageItem]($w.Gallery.html#ImageItem) or [VideoItem]($w.Gallery.html#VideoItem).</td>",
          "  </tr>",
          "  <tr>",
          "    <td>Number</td>",
          "    <td>JavaScript number</td>",
          "    <td></td>",
          "  </tr>",
          "  <tr>",
          "    <td>Rich Text</td>",
          "    <td>JavaScript string</td>",
          "    <td>A string which can contain a [subset of HTML tags]($w.Text.html#formatting-text).</td>",
          "  </tr>",
          "  <tr>",
          "    <td>Reference/Multiple Items Reference</td>",
          "    <td>JavaScript string/JavaScript array of strings</td>",
          "    <td>An item ID or multiple items IDs from the referenced collection.</td>",
          "  </tr>",
          "  <tr>",
          "    <td>Tags</td>",
          "    <td>JavaScript string array</td>",
          "    <td></td>",
          "  </tr>",
          "  <tr>",
          "    <td>Text</td>",
          "    <td>JavaScript string</td>",
          "    <td></td>",
          "  </tr>",
          "  <tr>",
          "    <td>Time</td>",
          "    <td>JavaScript string</td>",
          "    <td>Time in the HH.mm.ss.SSS format.</td>",
          "  </tr>",
          "  <tr>",
          "    <td>URL</td>",
          "    <td>JavaScript string</td>",
          "    <td>A valid URL.</td>",
          "  </tr>",
          "  <tr>",
          "    <td>Video</td>",
          "    <td>JavaScript string</td>",
          "    <td>A video URL as described [here]($w.Gallery.html#VideoItem).</td>",
          "  </tr>",
          "</table>" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "aggregate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The collection to run the aggregation on." } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "An aggregate object." },
        "locations":
          [ { "lineno": 1140,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Creates an aggregation.",
            "description":
              [ "The `aggregate()` function builds an aggregation on the specified collection",
                " and returns a [`WixDataAggregate`](wix-data.WixDataAggregate.html) object.",
                "",
                " The returned object contains the aggregate definition which is typically used",
                " to run the aggregation using the [`run()`](wix-data.WixDataAggregate.html#run)",
                " function.",
                "",
                " You can refine the aggregation by chaining [`WixDataAggregate`](wix-data.WixDataAggregate.html)",
                " functions on to the aggregate.",
                "",
                " The `aggregate()` function runs with the following [`WixDataAggregate`](wix-data.WixDataAggregate.html)",
                " defaults that you can override:",
                "",
                " + [**skip**](wix-data.WixDataAggregate.html#skip) - `0`",
                " + [**limit**](wix-data.WixDataAggregate.html#limit) - `50`" ],
            "links": [],
            "examples":
              [ { "title": "Perform an aggregation",
                  "body":
                    [ "aggregate.run()",
                      "  .then( (results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let numItems = results.length;",
                      "      let hasNext = results.hasNext();  ",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "const filter = wixData.filter().eq(\"year\", 2010);",
                      "const having = wixData.filter().gt(\"maxPopulation\", 1000000);",
                      "",
                      "wixData.aggregate(\"PopulationData\")",
                      "  .filter(filter)",
                      "  .group(\"state\")",
                      "  .max(\"population\", \"maxPopulation\")",
                      "  .having(having)",
                      "  .descending(\"maxPopulation\")",
                      "  .skip(5)",
                      "  .limit(3)",
                      "  .run()",
                      "  .then( (results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let numItems = results.length;",
                      "      let hasNext = results.hasNext();",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "bulkInsert",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection to add the item to." },
            { "name": "items",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "Object" ] },
              "doc": "The items to add." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataBulkResult" ] },
            "doc": "Fulfilled - The results of the bulk insert.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 945,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Adds a number of items to a collection.",
            "description":
              [ "The `bulkInsert()` function returns a Promise that resolves after the items",
                " have been added to the specified collection.",
                " The Promise is rejected if the current user does not have create permissions",
                " for the collection. Items are skipped if they include an `_id` property whose",
                " value matches an existing ID in the collection. Meaning, `bulkInsert()` cannot",
                " overwrite an existing item in the collection.",
                "",
                " Calling the `bulkInsert()` function triggers the [`beforeInsert()`](wix-data.Hooks.html#beforeInsert)",
                " and [`afterInsert()`](wix-data.Hooks.html#afterInsert) hooks for each item",
                " that is inserted if the hooks have been defined.",
                "",
                " Use the `options` parameter to run `bulkInsert()` from backend code without",
                " checking for permissions or without its registered hooks.",
                "",
                " When inserting items into a collection that has a reference field, set",
                " the values of the reference fields to the referenced item's `_id` value or",
                " the entire referenced item object.",
                "",
                " The `bulkInsert()` function adds the following properties and values to the item",
                " when it adds it to the collection:",
                "",
                " + `_id`: A unique identifier for the item with collection, if the item does not include one. You can optionally provide your own ID. Once an ID is assigned to an item it cannot be changed.",
                " + `_createdDate`: The date the item was added to the collection.",
                " + `_updatedDate`:  The date the item was modified. When the item is first added, the `createdDate` and `updatedDate` are the same.",
                "",
                "",
                " Any valid JavaScript object can be added as a property value. The `bulkInsert()`",
                " function maintains the structure of the specified object. For example,",
                " objects that contain nested objects, Arrays, or Arrays with nested objects",
                " are all added to the collection as defined.",
                "",
                "The maximum size of an item that you can add to a collection is 200kb." ],
            "links": [],
            "examples":
              [ { "title": "Insert multiple items into a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toInsert1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toInsert2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.bulkInsert(\"myCollection\", [toInsert1, toInsert2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Insert multiple items with specified IDs into a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toInsert1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toInsert2 = {",
                      "  \"_id\":          \"00002\",",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.bulkInsert(\"myCollection\", [toInsert1, toInsert2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // [\"00001\", \"00002\"]",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Insert multiple items into a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toInsert1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toInsert2 = {",
                      "  \"_id\":          \"00002\",",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.bulkInsert(\"myCollection\", [toInsert1, toInsert2], options)",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // [\"00001\", \"00002\"]",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Insert multiple items including a reference to another item using the referenced item's ID",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryId = \"id-of-usa-item\";",
                      "",
                      "let toInsert1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "let toInsert2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "wixData.bulkInsert(\"myCollection\", [toInsert1, toInsert2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Insert multiple items including a reference to another item using the reference item",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryItem = // get country item from somewhere",
                      "",
                      "let toInsert1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "let toInsert2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "wixData.bulkInsert(\"myCollection\", [toInsert1, toInsert2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Bulk operations are limited to 1000 items per function call." ] } },
      { "name": "bulkRemove",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection to remove the items from." },
            { "name": "itemIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "IDs of the items to remove." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataBulkResult" ] },
            "doc": "Fulfilled - The results of the bulk remove.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 473,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Removes a number of items from a collection.",
            "description":
              [ "The `bulkRemove()` function returns a Promise that resolves after the items",
                " have been removed from the specified collection.",
                " The Promise is rejected if the current user does not have delete permissions",
                " for the collection. If the delete permissions for the collection are set to",
                " **Site member author**, the only items that will be deleted are those for",
                " which the current user is the owner. All other items will be skipped.",
                "",
                " Calling the `bulkRemove()` function triggers the [`beforeRemove()`](wix-data.Hooks.html#beforeRemove)",
                " and [`afterRemove()`](wix-data.Hooks.html#afterRemove) hooks for each item",
                " that is deleted if the hooks have been defined.",
                "",
                " Use the `options` parameter to run `bulkRemove()` from backend code without",
                " checking for permissions or without its registered hooks." ],
            "links": [],
            "examples":
              [ { "title": "Remove multiple items from a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toRemove = [\"00001\", \"00003\", \"00004\"];",
                      "",
                      "wixData.bulkRemove(\"myCollection\", toRemove)",
                      "  .then( (results) => {",
                      "    let removed = results.removed; // 2",
                      "    let removedIds = results.removedItemIds; // see below",
                      "    let skipped = results.skipped; // 0",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  removedIds is:",
                      " *",
                      " *  [",
                      " *    \"00001\",",
                      " *    \"00002\",",
                      " *    \"00003\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Remove multiple items from a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toRemove = [\"00001\", \"00003\", \"00004\"];",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.bulkRemove(\"myCollection\", toRemove, options)",
                      "  .then( (results) => {",
                      "    let removed = results.removed; // 2",
                      "    let removedIds = results.removedItemIds; // see below",
                      "    let skipped = results.skipped; // 0",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  removedIds is:",
                      " *",
                      " *  [",
                      " *    \"00001\",",
                      " *    \"00002\",",
                      " *    \"00003\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The `bulkRemove()` function also clears multiple-item reference fields for items in collections referenced by the specified items.\n For example, suppose you have a Movies collection with an Actors field that contains multiple references\n to items in a People collection. Removing items in the Movies collection also clears the data in the corresponding\n multiple-item reference fields in the People collection.\n \n Bulk operations are limited to 1000 items per function call." ] } },
      { "name": "bulkSave",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection to save the item to." },
            { "name": "items",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "Object" ] },
              "doc": "The items to insert or update." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataBulkResult" ] },
            "doc": "Fulfilled - The results of the bulk save.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 1008,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Inserts or updates a number of items in a collection.",
            "description":
              [ "The `bulkSave()` function returns a Promise that resolves after the items",
                " have been added or updated in the specified collection. The Promise is rejected if the",
                " current user does not have the necessary permissions for the collection.",
                "",
                " The `bulkSave` function inserts or updates the specified items, depending on",
                " whether they already exist in the collection. It compares the `_id` property",
                " value of the specified items with the `_id` property values of the items in",
                " the specified collection. ",
                "",
                " + If an item in the collection has the specified `_id` value,",
                "   `bulkSave` uses [update](#update) to update the item in the",
                "   collection, triggering the [`beforeUpdate()`](wix-data.Hooks.html#beforeUpdate)",
                "   and [`afterUpdate()`](wix-data.Hooks.html#afterUpdate) hooks for that item if they have",
                "   been defined. ",
                " + If no items in the collection have that `_id` value, or if the",
                "   specified item does not have an `_id` property, `bulkSave` uses",
                "   [insert](#insert) to add the specified item into the",
                "   collection, triggering the [`beforeInsert()`](wix-data.Hooks.html#beforeInsert)",
                "   and [`afterInsert()`](wix-data.Hooks.html#afterInsert) hooks for that item if they have",
                "   been defined.",
                "",
                "",
                " Use the `options` parameter to run `bulkSave()` from backend code without",
                " checking for permissions or without its registered hooks.",
                "",
                " When saving items to a collection that has a reference field, set",
                " the values of the reference fields to the referenced item's `_id` value or",
                " the entire referenced item object." ],
            "links": [],
            "examples":
              [ { "title": "Save multiple items in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toSave1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toSave2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.bulkSave(\"myCollection\", [toSave1, toSave2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Save multiple items with specified IDs in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toSave1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Schmoe\"",
                      "};",
                      "",
                      "let toSave2 = {",
                      "  \"_id\":          \"00003\",",
                      "  \"title\":        \"Prof.\",",
                      "  \"first_name\":   \"Jan\",",
                      "  \"last_name\":    \"Doey\"",
                      "};",
                      "",
                      "wixData.bulkSave(\"myCollection\", [toSave1, toSave2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 1",
                      "    let insertedIds = results.insertedItemIds; // [\"00003\"]",
                      "    let updated = results.updated; // 1",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Save multiple items in a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toSave1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Schmoe\"",
                      "};",
                      "",
                      "let toSave2 = {",
                      "  \"_id\":          \"00003\",",
                      "  \"title\":        \"Prof.\",",
                      "  \"first_name\":   \"Jan\",",
                      "  \"last_name\":    \"Doey\"",
                      "};",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.bulkSave(\"myCollection\", [toSave1, toSave2], options)",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 1",
                      "    let insertedIds = results.insertedItemIds; // [\"00003\"]",
                      "    let updated = results.updated; // 1",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Save multiple items including a reference to another item using the referenced item's ID",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryId = \"id-of-usa-item\";",
                      "",
                      "let toSave1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "let toSave2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "wixData.bulkSave(\"myCollection\", [toSave1, toSave2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Save multiple items including a reference to another item using the reference item",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryItem = // get country item from somewhere",
                      "",
                      "let toSave1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "let toSave2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "wixData.bulkSave(\"myCollection\", [toSave1, toSave2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Bulk operations are limited to 1000 items per function call." ] } },
      { "name": "bulkUpdate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection that contains the item to update." },
            { "name": "items",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "Object" ] },
              "doc": "The items to update." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataBulkResult" ] },
            "doc": "Fulfilled - The results of the bulk save.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 1067,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Updates a number of items in a collection.",
            "description":
              [ "The `bulkUpdate()` function returns a Promise that resolves after the items",
                " have been updated in the specified collection. The Promise is rejected if the",
                " current user does not have update permissions for the collection. Items are",
                " skipped if they include an `_id` property whose value does not match an",
                " existing ID in the collection. Meaning, `bulkUpdate()` cannot add new items",
                " into the collection.",
                "",
                " Calling the `bulkUpdate()` function triggers the [`beforeUpdate()`](wix-data.Hooks.html#beforeUpdate)",
                " and [`afterUpdate()`](wix-data.Hooks.html#afterUpdate) hooks for each item",
                " that is updated if the hooks have been defined.",
                "",
                " The `bulkUpdate()` function compares the `_id` property of the specified",
                " items with the `_id` property values of the items in the specified",
                " collection. ",
                "",
                " If an item in the collection has that `_id` value, `bulkUpdate`",
                " replaces the item's property values with the ones in the specified item.",
                " If the existing item had properties with values and those properties were not",
                " included in the specified item, the values in those properties are lost. The",
                " item's `_updatedDate` property is also updated to the current date.",
                "",
                " Any valid JavaScript object can be used as a property value. The `bulkUpdate()`",
                " function maintains the structure of the specified object. For example,",
                " objects that contain nested objects, Arrays, or Arrays with nested objects",
                " are all added to the collection as defined.",
                "",
                " Use the `options` parameter to run `bulkUpdate()` from backend code without",
                " checking for permissions or without its registered hooks.",
                "",
                " When updating items in a collection that has a reference field, set",
                " the values of the reference field to the referenced item's `_id` value or",
                " the entire referenced item object.",
                "",
                "The maximum size of an item that you can update in a collection is 200kb." ],
            "links": [],
            "examples":
              [ { "title": "Update multiple items with specified IDs in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toUpdate1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toUpdate2 = {",
                      "  \"_id\":          \"00002\",",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.bulkUpdate(\"myCollection\", [toUpdate1, toUpdate2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 0",
                      "    let insertedIds = results.insertedItemIds; // []",
                      "    let updated = results.updated; // 2",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Update multiple items in a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toUpdate1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toUpdate2 = {",
                      "  \"_id\":          \"00002\",",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.bulkUpdate(\"myCollection\", [toUpdate1, toUpdate2], options)",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 0",
                      "    let insertedIds = results.insertedItemIds; // []",
                      "    let updated = results.updated; // 2",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Update multiple items including a reference to another item using the referenced item's ID",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryId = \"id-of-usa-item\";",
                      "",
                      "let toUpdate1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "let toUpdate2 = {",
                      "  \"_id\":          \"00002\",",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "wixData.bulkUpdate(\"myCollection\", [toUpdate1, toUpdate2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 0",
                      "    let insertedIds = results.insertedItemIds; // []",
                      "    let updated = results.updated; // 2",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Update multiple items including a reference to another item using the referenced item",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryItem = // get country item from somewhere",
                      "",
                      "let toUpdate1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "let toUpdate2 = {",
                      "  \"_id\":          \"00002\",",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "wixData.bulkUpdate(\"myCollection\", [toUpdate1, toUpdate2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 0",
                      "    let insertedIds = results.insertedItemIds; // []",
                      "    let updated = results.updated; // 2",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Bulk operations are limited to 1000 items per function call." ] } },
      { "name": "filter",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataFilter",
            "doc": "A filter object." },
        "locations":
          [ { "lineno": 355,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Creates a filter to be used with the dataset `setFilter()` function.",
            "description":
              [ "This function is not used on its own. It is only used to create a filter",
                " for a dataset using the [`setFilter()`](wix-dataset.Dataset.html#setFilter) function." ],
            "links": [],
            "examples":
              [ { "title": "Filter a dataset",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#myDataset\").setFilter( wixData.filter()",
                      "  .startsWith(\"lastName\", \"D\")",
                      "  .ge(\"age\", \"21\")",
                      ");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "get",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection to retrieve the item from." },
            { "name": "itemId",
              "type": "string",
              "doc": "The ID of the item to retrieve." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The retrieved item or null if not found.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 218,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Retrieves an item from a collection.",
            "description":
              [ "The `get()` function returns a Promise that resolves to the item with ID",
                " `itemId` from the specified collection, or null if the `itemId` is not found. The Promise is rejected if the",
                " current user does not have read permissions for the collection.",
                "",
                " Calling the `get()` function triggers the [`beforeGet()`](wix-data.Hooks.html#beforeGet)",
                " and [`afterGet()`](wix-data.Hooks.html#afterGet) hooks if they have been defined.",
                "",
                " Use the `options` parameter to run `get()` from backend code without",
                " checking for permissions or without its registered hooks." ],
            "links": [],
            "examples":
              [ { "title": "Get an item from a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.get(\"myCollection\", \"00001\")",
                      "  .then( (results) => {",
                      "    let item = results; //see item below",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get an item from a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.get(\"myCollection\", \"00001\", options)",
                      "  .then( (results) => {",
                      "    let item = results; //see item below",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "insert",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection to add the item to." },
            { "name": "item",
              "type": "Object",
              "doc": "The item to add." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The item that was added.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 253,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Adds an item to a collection.",
            "description":
              [ "The `insert()` function returns a Promise that resolves to the inserted item",
                " after it has been added to the specified collection.",
                " The Promise is rejected if the current user does not have create permissions",
                " for the collection or the specified item includes an `_id` property whose",
                " value matches an existing ID in the collection. Meaning, `insert()` cannot",
                " overwrite an existing item in the collection.",
                "",
                " Calling the `insert()` function triggers the [`beforeInsert()`](wix-data.Hooks.html#beforeInsert)",
                " and [`afterInsert()`](wix-data.Hooks.html#afterInsert) hooks if they have been defined.",
                "",
                " Use the `options` parameter to run `insert()` from backend code without",
                " checking for permissions or without its registered hooks.",
                "",
                " When inserting an item into a collection that has a reference field, set",
                " the value of the reference field to the referenced item's `_id` value or",
                " the entire referenced item object.",
                "",
                " The `insert()` function adds the following properties and values to the item",
                " when it adds it to the collection:",
                "",
                " + `_id`: A unique identifier for the item with collection, if the item does not include one. You can optionally provide your own ID. Once an ID is assigned to an item it cannot be changed.",
                " + `_createdDate`: The date the item was added to the collection.",
                " + `_updatedDate`:  The date the item was modified. When the item is first added, the `createdDate` and `updatedDate` are the same.",
                "",
                "",
                " Any valid JavaScript object can be added as a property value. The `insert()`",
                " function maintains the structure of the specified object. For example,",
                " objects that contain nested objects, Arrays, or Arrays with nested objects",
                " are all added to the collection as defined.",
                "",
                "The maximum size of an item that you can add to a collection is 200kb." ],
            "links": [],
            "examples":
              [ { "title": "Insert an item into a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toInsert = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.insert(\"myCollection\", toInsert)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Insert an item with a specified ID into a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toInsert = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.insert(\"myCollection\", toInsert)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Insert an item into a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toInsert = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.insert(\"myCollection\", toInsert, options)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Insert an item including a reference to another item using the referenced item's ID",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryId = \"id-of-usa-item\";",
                      "",
                      "let toInsert = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "wixData.insert(\"myCollection\", toInsert)",
                      "  .then( (results) => {",
                      "    let item = results; //see item below",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\",",
                      " *    \"country\":      \"id-of-usa-item\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Insert an item including a reference to another item using the reference item",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryItem = // get country item from somewhere",
                      "",
                      "let toInsert = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "wixData.insert(\"myCollection\", toInsert)",
                      "  .then( (results) => {",
                      "    let item = results; //see item below",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\",",
                      " *    \"country\":      \"id-of-usa-item\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "insertReference",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection that contains the referring item." },
            { "name": "propertyName",
              "type": "string",
              "doc": "The property to insert the reference into." },
            { "name": "referringItem",
              "type":
                [ "Object",
                  "string" ],
              "doc": "The referring item or referring item's ID." },
            { "name": "referencedItem",
              "type":
                [ "Object",
                  "string",
                  { "name": "Array",
                    "typeParams":
                      [ "Object" ] },
                  { "name": "Array",
                    "typeParams":
                      [ "string" ] } ],
              "doc": "The referenced item, referenced item's ID, an array of referenced items, or an array of referenced item IDs." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the references have been inserted.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 713,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Inserts a reference in the specified property.",
            "description":
              [ "The `insertReference()` function returns a Promise that resolves when a",
                " reference to the referenced item(s) is added to the referring item in the",
                " specified property. The Promise is rejected if the current user does not",
                " have update permissions for the collection.",
                "",
                " Calling the `insertReference()` function does not trigger any hooks." ],
            "links": [],
            "examples":
              [ { "title": "Insert a reference",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.insertReference(\"movies\", \"actors\", \"00001\", \"12345\")",
                      "  .then( () => {",
                      "    console.log(\"Reference inserted\");",
                      "  } )",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example inserts a reference to the item with ID **12345** in the\n **Actors** field of the item in the **Movies** collection with the ID **00001**." } },
                { "title": "Insert references using an array",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.insertReference(\"movies\", \"actors\", \"00001\", [\"12345\", \"67890\"])",
                      "  .then( () => {",
                      "    console.log(\"Reference inserted\");",
                      "  } )",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example inserts a reference to the items with IDs **12345** and **67890** in the\n **Actors** field of the item in the **Movies** collection with the ID **00001**." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isReferenced",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection that contains the referring item." },
            { "name": "propertyName",
              "type": "string",
              "doc": "The property that possibly contains the references to the referenced item." },
            { "name": "referringItem",
              "type":
                [ "Object",
                  "string" ],
              "doc": "The referring item or referring item's ID." },
            { "name": "referencedItem",
              "type":
                [ "Object",
                  "string" ],
              "doc": "The referenced item or referenced item's ID." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "boolean" ] },
            "doc": "Fulfilled - Whether the referring item contains a reference to the referenced item or not.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 888,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Checks if a reference to the referenced item exists in the specified\n  property of the referring item.",
            "description":
              [ "The `isReferenced()` function returns a Promise that resolves to `true` if",
                " the referring item contains a reference to the referenced item in the",
                " specified property. The Promise is rejected if the current",
                " user does not have read permissions for the collection.",
                "",
                " Calling the `queryReferenced()` function does not trigger any hooks." ],
            "links": [],
            "examples":
              [ { "title": "Get referenced items",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.isReferenced(\"movies\", \"actors\", \"00001\", \"12345\")",
                      "  .then( (result) => {",
                      "    let isReferenced = result;  // true",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example checks if the item in the **Movies** collection with the ID **00001**\n has a reference in its **Actors** field that refers to an item with the ID\n **12345**." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "query",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The collection to run the query on." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A query object." },
        "locations":
          [ { "lineno": 309,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Creates a query.",
            "description":
              [ "The `query()` function builds a query on the specified collection and returns",
                " a [`WixDataQuery`](wix-data.WixDataQuery.html) object.",
                "",
                " The returned object contains the query definition which is typically used",
                " to run the query using the [`find()`](wix-data.WixDataQuery.html#find)",
                " function.",
                "",
                " You can refine the query by chaining [`WixDataQuery`](wix-data.WixDataQuery.html)",
                " functions onto the query. `WixDataQuery` functions enable you to sort,",
                " filter, and control the results a query returns.",
                "",
                " The `query()` runs with the following [`WixDataQuery`](wix-data.WixDataQuery.html)",
                " defaults that you can override:",
                "",
                " + [**skip**](wix-data.WixDataQuery.html#skip): `0`",
                " + [**limit**](wix-data.WixDataQuery.html#limit): `50`",
                " + [**descending**](wix-data.WixDataQuery.html#descending): by `_createdDate`",
                " + [**include**](wix-data.WixDataQuery.html#include): none",
                "",
                "",
                "",
                " The functions that are chained to `query()` are applied in the order they",
                " are called. For example, if you sort on an `age` property in ascending",
                " order and then on a `name` property in descending order, the results are",
                " sorted first by the age of the items and then, if there are multiple",
                " results with the same age, the items are sorted by name in descending",
                " order, per age value." ],
            "links": [],
            "examples":
              [ { "title": "Build a query",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let query = wixData.query(\"myCollection\");" ],
                  "extra":
                    {  } },
                { "title": "Build and perform a query",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let firstItem = results.items[0]; //see item below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  firstItem is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Build and perform a query using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"title\", \"Dr.\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let firstItem = results.items[0]; //see item below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  firstItem is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00002\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Dr.\",",
                      " *    \"first_name\":   \"Jane\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Build a query incrementally",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "function runQuery(low, high) {",
                      "  let myQuery = wixData.query(\"myCollection\");",
                      "",
                      "  if(low) {",
                      "    myQuery = myQuery.ge(\"price\", low);",
                      "  }",
                      "",
                      "  if(high) {",
                      "    myQuery = myQuery.le(\"price\", high);",
                      "  }",
                      "",
                      "  myQuery.find()",
                      "    .then( (results) => {",
                      "      if(results.items.length > 0) {",
                      "        $w(\"#myTable\").rows = results.items;",
                      "      } else {",
                      "        $w(\"#myTable\").collapse();",
                      "      }",
                      "    } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example builds a query based on certain conditions. It then performs the\n query and uses the results to populate a table." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "queryReferenced",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection that contains the referring item." },
            { "name": "item",
              "type":
                [ "Object",
                  "string" ],
              "doc": "The referring item or referring item's ID." },
            { "name": "propertyName",
              "type": "string",
              "doc": "The property that contains the references to the referenced items." },
            { "name": "options",
              "type": "wix-data.WixDataQueryReferencedOptions",
              "doc": "An object for controlling the order of the returned referenced items." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQueryReferencedResult" ] },
            "doc": "Fulfilled - The referenced items.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 649,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Gets the full items referenced in the specified property.",
            "description":
              [ "The `queryReferenced()` function returns a Promise that resolves to the full",
                " items that are referenced in the specified property of the",
                " item from the specified collection. The Promise is rejected if the current",
                " user does not have read permissions for the specified collection or the",
                " collection containing the referenced items.",
                "",
                " For example, suppose you have a **Movies** collection with an **Actors**",
                " field that contains references",
                " to items in a **People** collection. Querying the **Movies** collection",
                " using `queryReferenced()` returns the relevant **People** items",
                " referenced in the **Actors** field of the specified **Movies** item. Meaning,",
                " it returns the full actor information for all actors in the specified movie.",
                "",
                " The `queryReferenced()` function can be used instead of a standard [`query()`](#query)",
                " with an [`include()`](wix-data.WixDataQuery.html#include) to overcome the",
                " limitations of the [`include()`](wix-data.WixDataQuery.html#include) function.",
                "",
                " You can optionally control the order of the returned referenced items by",
                " passing a [`WixDataQueryReferencedOptions`](#WixDataQueryReferencedOptions) object.",
                "",
                " Calling the `queryReferenced()` function does not trigger any hooks." ],
            "links": [],
            "examples":
              [ { "title": "Get referenced items",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.queryReferenced(\"movies\", \"00001\", \"actors\")",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let firstItem = results.items[0]; //see item below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  firstItem is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"12345\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */",
                      "" ],
                  "extra":
                    { "description": "This example finds the item in the **Movies** collection with the ID **00001**.\n It gets all of the items referenced in the **Actors** field of that item\n and then stores the first actor in a variable." } },
                { "title": "Get referenced items using options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let options = {",
                      "  \"order\": \"asc\"",
                      "};",
                      "",
                      "wixData.queryReferenced(\"movies\", \"00001\", \"actors\", options)",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let firstItem = results.items[0]; //see item below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  firstItem is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"12345\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "remove",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The collection to remove the item from." },
            { "name": "itemId",
              "type": "string",
              "doc": "The ID of the item to remove." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The removed item.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 390,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Removes an item from a collection.",
            "description":
              [ "The `remove()` function returns a Promise that resolves to the removed item",
                " after it has been removed from the specified collection.",
                " The Promise is rejected if the current user does not have delete permissions",
                " for the collection.",
                "",
                " Calling the `remove()` function triggers the [`beforeRemove()`](wix-data.Hooks.html#beforeRemove)",
                " and [`afterRemove()`](wix-data.Hooks.html#afterRemove) hooks if they have been defined.",
                "",
                " Use the `options` parameter to run `remove()` from backend code without",
                " checking for permissions or without its registered hooks." ],
            "links": [],
            "examples":
              [ { "title": "Remove an item from a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.remove(\"myCollection\", \"00001\")",
                      "  .then( (results) => {",
                      "    let item = results; //see item below",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Remove an item from a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.remove(\"myCollection\", \"00001\", options)",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let firstItem = results.items[0]; //see item below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`remove()` also clears multiple-item reference fields for items in collections referenced by the specified item.\nFor example, suppose you have a Movies collection with an Actors field that contains multiple references\nto items in a People collection. Removing an item in the Movies collection also clears the data in the corresponding\nmultiple-item reference fields in the People collection." ] } },
      { "name": "removeReference",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection that contains the referring item." },
            { "name": "propertyName",
              "type": "string",
              "doc": "The property to remove the reference from." },
            { "name": "referringItem",
              "type":
                [ "Object",
                  "string" ],
              "doc": "The referring item or referring item's ID." },
            { "name": "referencedItem",
              "type":
                [ "Object",
                  "string",
                  { "name": "Array",
                    "typeParams":
                      [ "Object" ] },
                  { "name": "Array",
                    "typeParams":
                      [ "string" ] } ],
              "doc": "The referenced item, referenced item's ID, an array of referenced items, or an array of referenced item IDs." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the references have been removed.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 829,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Removes a reference from the specified property.",
            "description":
              [ "The `removeReference()` function returns a Promise that resolves when a",
                " reference to the referenced item(s) is removed from the specified property in",
                " the referring item. The Promise is rejected if the current user does not",
                " have update permissions for the collection.",
                "",
                " Calling the `removeReference()` function does not trigger any hooks." ],
            "links": [],
            "examples":
              [ { "title": "Remove a reference",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.removeReference(\"movies\", \"actors\", \"00001\", \"12345\")",
                      "  .then( () => {",
                      "    console.log(\"Reference removed\");",
                      "  } )",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example removes a reference to the item with ID **12345** from the\n **Actors** field of the item in the **Movies** collection with the ID **00001**." } },
                { "title": "Remove references using an array",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.removeReference(\"movies\", \"actors\", \"00001\", [\"12345\", \"67890\"])",
                      "  .then( () => {",
                      "    console.log(\"Reference removed\");",
                      "  } )",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example removes a reference to the items with IDs **12345** and **67890** from the\n **Actors** field of the item in the **Movies** collection with the ID **00001**." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "replaceReferences",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection that contains the referring item." },
            { "name": "propertyName",
              "type": "string",
              "doc": "The property to replaces the references in." },
            { "name": "referringItem",
              "type":
                [ "Object",
                  "string" ],
              "doc": "The referring item or referring item's ID." },
            { "name": "referencedItem",
              "type":
                [ "Object",
                  "string",
                  { "name": "Array",
                    "typeParams":
                      [ "Object" ] },
                  { "name": "Array",
                    "typeParams":
                      [ "string" ] } ],
              "doc": "The referenced item, referenced item's ID, an array of referenced items, or an array of referenced item IDs." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the references have been inserted.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 777,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Replaces current references with references in the specified property.",
            "description":
              [ "The `replaceReferences()` function returns a Promise that resolves when",
                " the item's current references in the specified property are removed and",
                " references to the referenced items are added in their place. The Promise is",
                " rejected if the current user does not have update permissions for the collection.",
                "",
                " Calling the `replaceReferences()` function does not trigger any hooks." ],
            "links": [],
            "examples":
              [ { "title": "Replace a reference",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.replaceReferences(\"movies\", \"actors\", \"00001\", \"12345\")",
                      "  .then( () => {",
                      "    console.log(\"References replaced\");",
                      "  } )",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example replaces the references in the **Actors** field of the item in\n the **Movies** collection with the ID **00001** with a reference to the item with ID **12345**." } },
                { "title": "Replace references using an array",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.replaceReferences(\"movies\", \"actors\", \"00001\", [\"12345\", \"67890\"])",
                      "  .then( () => {",
                      "    console.log(\"References replaced\");",
                      "  } )",
                      "  .catch( (error) => {",
                      "    console.log(error);",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example replaces the references in the **Actors** field of the item in\n the **Movies** collection with the ID **00001** with references to the items\n with IDs **12345** and **67890**." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "save",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection to save the item to." },
            { "name": "item",
              "type": "Object",
              "doc": "The item to insert or update." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The item that was either inserted or updated, depending on whether it previously existed in the collection.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 520,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Inserts or updates an item in a collection.",
            "description":
              [ "The `save()` function returns a Promise that resolves to the inserted or",
                " updated item after the it has been added or updated in",
                " the specified collection. The Promise is rejected if the",
                " current user does not have the necessary permissions for the collection.",
                "",
                " The `save` function inserts or updates the specified item, depending on",
                " whether it already exists in the collection. It compares the `_id` property",
                " value of the specified item with the `_id` property values of the items in",
                " the specified collection. If an item in the collection has that `_id` value,",
                " `save` uses [update](#update) to update the item in the",
                " collection, triggering the [`beforeUpdate()`](wix-data.Hooks.html#beforeUpdate)",
                " and [`afterUpdate()`](wix-data.Hooks.html#afterUpdate) hooks if they have",
                " been defined. If no items in the collection have that `_id` value, or if the",
                " specified item does not have an `_id` property, `save` uses",
                " [insert](#insert) to add the specified item into the",
                " collection, triggering the [`beforeInsert()`](wix-data.Hooks.html#beforeInsert)",
                " and [`afterInsert()`](wix-data.Hooks.html#afterInsert) hooks if they have",
                " been defined.",
                "",
                " Use the `options` parameter to run `save()` from backend code without",
                " checking for permissions or without its registered hooks.",
                "",
                " When saving an item to a collection that has a reference field, set",
                " the value of the reference field to the referenced item's `_id` value or",
                " the entire referenced item object." ],
            "links": [],
            "examples":
              [ { "title": "Save an item in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toSave = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.save(\"myCollection\", toSave)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Save an item with a specified ID in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toSave = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.save(\"myCollection\", toSave)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Save an item in a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toSave = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.save(\"myCollection\", toSave, options)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Save an item including a reference to another item using the referenced item's ID",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryId = \"id-of-usa-item\";",
                      "",
                      "let toSave = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "wixData.save(\"myCollection\", toSave)",
                      "  .then( (results) => {",
                      "    let item = results; //see item below",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\",",
                      " *    \"country\":      \"id-of-usa-item\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Save an item including a reference to another item using the reference item",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryItem = // get country item from somewhere",
                      "",
                      "let toSave = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "wixData.save(\"myCollection\", toSave)",
                      "  .then( (results) => {",
                      "    let item = results; //see item below",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\",",
                      " *    \"country\":      \"id-of-usa-item\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "sort",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataSort",
            "doc": "A sort object." },
        "locations":
          [ { "lineno": 370,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Creates a sort to be used with the dataset `setSort()` function.",
            "description":
              [ "This function is not used on its own. It is only used to create a sort",
                " for a dataset using the [`setSort()`](wix-dataset.Dataset.html#setSort) function." ],
            "links": [],
            "examples":
              [ { "title": "Sort a dataset",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "$w(\"#myDataset\").setSort( wixData.sort()",
                      "  .ascending(\"lastName\")",
                      "  .descending(\"age\")",
                      ");" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "truncate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The collection to remove items from." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with the following boolean property: suppressAuth.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the items have been removed.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 433,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Removes all items from a collection.",
            "description":
              [ "The `truncate()` function returns a Promise that resolves",
                " after all items have been removed from the specified collection.",
                "",
                " `truncate()` runs when at least one of the following is true:",
                "",
                " + The current user is the site owner.",
                " + The request is performed in backend code with a [`suppressAuth`](#WixDataOptions) options value of `true`.",
                "",
                "",
                " Calling the `truncate()` function does not trigger any hooks." ],
            "links": [],
            "examples":
              [ { "title": "Site owner removes all items from a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.truncate(\"myCollection\")",
                      "  .then( () => {",
                      "    console.log(\"All items removed\");",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "User who is not the site owner removes all items from a collection in the backend using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true",
                      "};",
                      "",
                      "wixData.truncate(\"myCollection\", options)",
                      "  .then( () => {",
                      "    console.log(\"All items removed\");",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`truncate()` also clears multiple-item reference fields in collections referenced by the specified collection.\nFor example, suppose you have a Movies collection with an Actors field that contains multiple references\nto items in a People collection. Truncating the Movies collection also clears the data in the corresponding\nmultiple-item reference field in the People collection." ] } },
      { "name": "update",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection that contains the item to update." },
            { "name": "item",
              "type": "Object",
              "doc": "The item to update." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The object that was updated.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "lineno": 571,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "Updates an item in a collection.",
            "description":
              [ "The `update()` function returns a Promise that resolves to the updated",
                " item from the specified collection. The Promise is rejected if the",
                " current user does not have update permissions for the collection.",
                "",
                " Calling the `update()` function triggers the [`beforeUpdate()`](wix-data.Hooks.html#beforeUpdate)",
                " and [`afterUpdate()`](wix-data.Hooks.html#afterUpdate) hooks if they have been defined.",
                "",
                " The `update()` function compares the `_id` property of the specified",
                " item with the `_id` property values of the items in the specified",
                " collection. If an item in the collection has that `_id` value, `update`",
                " replaced the item's property values with the ones in the specified item.",
                " If the existing item had properties with values and those properties were not",
                " included in the specified item, the values in those properties are lost. The",
                " item's `_updatedDate` property is also updated to the current date.",
                "",
                " Any valid JavaScript object can be used as a property value. The `update()`",
                " function maintains the structure of the specified object. For example,",
                " objects that contain nested objects, Arrays, or Arrays with nested objects",
                " are all added to the collection as defined.",
                "",
                " Use the `options` parameter to run `update()` from backend code without",
                " checking for permissions or without its registered hooks.",
                "",
                " When updating an item in a collection that has a reference field, set",
                " the value of the reference field to the referenced item's `_id` value or",
                " the entire referenced item object.",
                "",
                "The maximum size of an item that you can update in a collection is 200kb." ],
            "links": [],
            "examples":
              [ { "title": "Update an item with a specified ID in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toUpdate = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.update(\"myCollection\", toUpdate)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Update an item in a collection using data options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toUpdate = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.update(\"myCollection\", toUpdate, options)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"00001\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get an item in a collection and update it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "/*  existing item:",
                      " *",
                      " *  {",
                      " *    \"_id\": \"00001\",",
                      " *\t  \"title\": \"Mr.\",",
                      " *\t  \"first_name\": \"John\",",
                      " *    \"last_name\": \"Doe\"",
                      " *  }",
                      " *",
                      " */",
                      "",
                      "wixData.get(\"myCollection\", \"00001\")",
                      "  .then( (item) => {",
                      "    item.last_name = \"Smith\"; // updated last name",
                      "    wixData.update(\"myCollection\", item);",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  updated item:",
                      " *",
                      " *  {",
                      " *    \"_id\": \"00001\",",
                      " *\t  \"title\": \"Mr.\",",
                      " *\t  \"first_name\": \"John\",",
                      " *    \"last_name\": \"Smith\"",
                      " *  }",
                      " *",
                      " */",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates the `get()` function followed by the `update()` function. When updating an item in a collection, all\n  existing item properties must be passed to the `update()` function. If only the changed property is passed, the values of the\n  other item properties will be lost. To ensure all item properties are included in the update, perform a `get()` on the item,\n  change a property, and then `update()` the item." } },
                { "title": "Query an item in a collection and update it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "/*  existing item:",
                      " *",
                      " *  {",
                      " *    \"_id\": \"00001\",",
                      " *\t  \"title\": \"Mr.\",",
                      " *\t  \"first_name\": \"John\",",
                      " *    \"last_name\": \"Doe\"",
                      " *  }",
                      " *",
                      " */",
                      "",
                      " wixData.query(\"myCollection\")",
                      "  .eq(\"first_name\", \"John\")",
                      "  .eq(\"last_name\", \"Doe\")",
                      "  .find()",
                      "    .then( (results) => {",
                      "      if(results.items.length > 0) {",
                      "        let item = results.items[0];",
                      "        item.last_name = \"Smith\"; // updated last name",
                      "        wixData.update(\"myCollection\", item);",
                      "      } else {",
                      "        // handle case where no matching items found",
                      "      }",
                      "    } )",
                      "    .catch( (err) => {",
                      "      let errorMsg = err;",
                      "    } );",
                      "",
                      "/*  updated item:",
                      " *",
                      " *  {",
                      " *    \"_id\": \"00001\",",
                      " *\t  \"title\": \"Mr.\",",
                      " *\t  \"first_name\": \"John\",",
                      " *    \"last_name\": \"Smith\"",
                      " *  }",
                      " *",
                      " */",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates the `query()` function followed by the `update()` function. When updating an item in a collection, all\n  existing item properties must be passed to the `update()` function. If only the changed property is passed, the values of the\n  other item properties will be lost. To ensure all item properties are included in the update, perform a `query()` on the item,\n  change a property, and then `update()` the item." } },
                { "title": "Update an item including a reference to another item using the referenced item's ID",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "et countryId = \"id-of-usa-item\";",
                      "",
                      "let toUpdate = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryId",
                      "};",
                      "",
                      "wixData.update(\"myCollection\", toUpdate)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\",",
                      " *    \"country\":      \"id-of-usa-item\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Update an item including a reference to another item using the referenced item",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let countryItem = // get country item from somewhere",
                      "",
                      "let toUpdate = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\",",
                      "  \"country\":      countryItem",
                      "};",
                      "",
                      "wixData.update(\"myCollection\", toUpdate)",
                      "\t.then( (results) => {",
                      "\t\tlet item = results; //see item below",
                      "\t} )",
                      "\t.catch( (err) => {",
                      "\t\tlet errorMsg = err;",
                      "\t} );",
                      "",
                      "/*  item is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"rifk4nrk-dj4o-djhe-oidk-fnoqw4oiglk4i\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"title\":        \"Mr.\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\",",
                      " *    \"country\":      \"id-of-usa-item\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "WixDataBulkResult",
        "locations":
          [ { "lineno": 928,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "An object returned by Wix Data bulk operations.",
            "links": [],
            "examples":
              [ { "title": "Insert multiple items into a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toInsert1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toInsert2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.bulkInsert(\"myCollection\", [toInsert1, toInsert2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Save multiple items in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toSave1 = {",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toSave2 = {",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.bulkSave(\"myCollection\", [toSave1, toSave2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 2",
                      "    let insertedIds = results.insertedItemIds; // see below",
                      "    let updated = results.updated; // 0",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  insertedIds is:",
                      " *",
                      " *  [",
                      " *    \"d9ea65a6-726a-4c3e-b97d-1128c0a06b5f\",",
                      " *    \"472c1da9-e5e4-4620-8ee3-962e9d1a7df5\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Update multiple items with specified IDs in a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toUpdate1 = {",
                      "  \"_id\":          \"00001\",",
                      "  \"title\":        \"Mr.\",",
                      "  \"first_name\":   \"John\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "let toUpdate2 = {",
                      "  \"_id\":          \"00002\",",
                      "  \"title\":        \"Ms.\",",
                      "  \"first_name\":   \"Jane\",",
                      "  \"last_name\":    \"Doe\"",
                      "};",
                      "",
                      "wixData.bulkUpdate(\"myCollection\", [toUpdate1, toUpdate2])",
                      "  .then( (results) => {",
                      "    let inserted = results.inserted; // 0",
                      "    let insertedIds = results.insertedItemIds; // []",
                      "    let updated = results.updated; // 2",
                      "    let skipped = results.skipped; // 0",
                      "    let errors = results.errors; // []",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Remove multiple items from a collection",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let toRemove = [\"00001\", \"00003\", \"00004\"];",
                      "",
                      "wixData.bulkRemove(\"myCollection\", toRemove)",
                      "  .then( (results) => {",
                      "    let removed = results.removed; // 2",
                      "    let removedIds = results.removedItemIds; // see below",
                      "    let skipped = results.skipped; // 0",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  removedIds is:",
                      " *",
                      " *  [",
                      " *    \"00001\",",
                      " *    \"00002\",",
                      " *    \"00003\"",
                      " *  ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "inserted",
              "type": "number",
              "doc": "The number of inserted items." },
            { "name": "updated",
              "type": "number",
              "doc": "The number of updated items." },
            { "name": "skipped",
              "type": "number",
              "doc": "The number of skipped items." },
            { "name": "insertedItemIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of IDs of inserted items." },
            { "name": "errors",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "Error" ] },
              "doc": "List of errors." },
            { "name": "removed",
              "type": "number",
              "doc": "The number of removed items." },
            { "name": "removedItemIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "List of IDs of removed items." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "WixDataOptions",
        "locations":
          [ { "lineno": 74,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "An object that you pass as the `options` parameter that modifies how an operation is performed.",
            "description":
              [ "The `options` parameter is an optional parameter that can be used when",
                " calling some wix-data functions. To use `options`, pass it a `WixDataOptions`",
                " object with one or both of the following key:value pairs:",
                "",
                " + `\"suppressAuth\"`: `true`/`false`",
                " + `\"suppressHooks\"`: `true`/`false`",
                "",
                "",
                " The `options` parameter can only be used in backend code. Permission checks",
                " and hooks always run for wix-data functions called from Page, Site and",
                " Public code." ],
            "links": [],
            "examples":
              [ { "title": "Create a data options object",
                  "body":
                    [ "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};" ],
                  "extra":
                    {  } },
                { "title": "Use data options to prevent permission checks and hooks from running",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let options = {",
                      "  \"suppressAuth\": true,",
                      "  \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.get(\"myCollection\", \"00001\", options)",
                      "  .then( (results) => {",
                      "    let item = results;",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "suppressAuth",
              "type": "boolean",
              "doc": "Prevents <a href=\"https://support.wix.com/en/article/about-collection-permissions\" target=\"_blank\">permission</a> checks from running for the operation.",
              "optional": true },
            { "name": "suppressHooks",
              "type": "boolean",
              "doc": "Prevents <a href=\"https://support.wix.com/en/article/wix-code-how-to-use-data-hooks\" target=\"_blank\">hooks</a> from running for the operation.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "WixDataQueryReferencedOptions",
        "locations":
          [ { "lineno": 633,
              "filename": "data-api.es6" } ],
        "docs":
          { "summary": "An object for controlling the order of returned referenced items.",
            "description":
              [ "Pass a `WixDataQueryReferencedOptions` object when calling the [`queryReferenced`](#queryReferenced)",
                " function to control the order of the returned referenced items.",
                "",
                " The object's `order` property can have the following values:",
                "",
                " + `asc`: References are returned by insertion time in ascending order.",
                " + `desc`: References are returned by insertion time in descending order." ],
            "links": [],
            "examples":
              [ { "title": "Get referenced items using options",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let options = {",
                      "  \"order\": \"asc\"",
                      "};",
                      "",
                      "wixData.queryReferenced(\"movies\", \"00001\", \"actors\", options)",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let firstItem = results.items[0]; //see item below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (err) => {",
                      "    let errorMsg = err;",
                      "  } );",
                      "",
                      "/*  firstItem is:",
                      " *",
                      " *  {",
                      " *    \"_id\":          \"12345\",",
                      " *    \"_owner\":       \"ffdkj9c2-df8g-f9ke-lk98-4kjhfr89keedb\",",
                      " *    \"_createdDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"_updatedDate\": \"2017-05-24T12:33:18.938Z\",",
                      " *    \"first_name\":   \"John\",",
                      " *    \"last_name\":    \"Doe\"",
                      " *  }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "order",
              "type": "string",
              "doc": "The order of the returned referenced items. Either \"asc\" or \"desc\"." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  },
  "menuSections": "APIs",
  "relatedContent":
    [ { "icon": "article",
        "text": "Working with the Data API",
        "url": "https://support.wix.com/en/article/wix-code-working-with-the-data-api" },
      { "icon": "article",
        "text": "Calculating and Displaying Collection Data",
        "url": "https://support.wix.com/en/article/wix-code-tutorial-calculating-and-displaying-collection-data" },
      { "icon": "article",
        "text": "Adding Collection Data Search Functionality",
        "url": "https://support.wix.com/en/article/wix-code-tutorial-adding-collection-data-search-functionality" },
      { "icon": "example",
        "text": "Search",
        "url": "https://www.wix.com/code/home/example/Search" },
      { "icon": "example",
        "text": "Saved Search",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-saved-search" },
      { "icon": "example",
        "text": "Checkbox Dropdown",
        "url": "https://www.wix.com/code/home/example/Checkbox-Dropdown" },
      { "icon": "article",
        "text": "Working with Aggregations in the Data API",
        "url": "https://support.wix.com/en/article/wix-code-working-with-aggregations-in-the-data-api" },
      { "icon": "video",
        "text": "How to Create a Search for Your Database",
        "url": "https://www.youtube.com/watch?v=Hx7_8-lRsW0&feature=youtu.be" } ],
  "FAQs":
    [ { "title": "Why don't I see my database content displayed in my site elements?",
        "markdown": "*   Make sure your [collection permission settings](https://support.wix.com/en/article/about-collection-permissions) allow visitors to view collection content.\n*   Make sure the [dataset mode](https://support.wix.com/en/article/working-with-dataset-settings) of the dataset connected to your element is set to **Read-only** or **Read & Write**.\n*   Make sure you've [synced](https://support.wix.com/en/article/syncing-data-between-sandbox-and-live-database-collections) your Sandbox collection with your Live collection.\n*   Preview or publish your site. Database collection content does not appear in site elements in the Editor. It only appears in preview mode or on your published site.\n" },
      { "title": "How do I populate a repeater with data from a query?",
        "markdown": "The most common way to populate a repeater is as follows:\n\n1. Set the repeater's data using the [`data`](https://www.wix.com/code/reference/$w.Repeater.html#data) property. This triggers the second step for all items in the data array with a new ID.\n2. Populate the repeater with data from the new items using the [`onItemReady()`](https://www.wix.com/code/reference/$w.Repeater.html#onItemReady) function.\n\nFor data from a query, set the repeater's [`data`](https://www.wix.com/code/reference/$w.Repeater.html#data) property to the [`items`](https://www.wix.com/code/reference/wix-data.WixDataQueryResult.html#items) property of the query's [`results`](https://www.wix.com/code/reference/wix-data.WixDataQueryResult.html). For an example, see: **[Set a repeater's data from a database query](https://www.wix.com/code/reference/$w.Repeater.html#data)**." },
      { "title": "How do I update some fields for a collection item without deleting the values in the items other fields?",
        "markdown": "When you call the [`update()`](https://www.wix.com/code/reference/wix-data.html#update) function, all fields of the corresponding item in your collection are updated. That means, if you pass an item to [`update()`](https://www.wix.com/code/reference/wix-data.html#update) and it does not contain all the fields in your collection, the fields that do not appear will have their values deleted. \n\nTo only update some values:\n\n1. Call the [`get()`](https://www.wix.com/code/reference/wix-data.html#get) or [`query()`](https://www.wix.com/code/reference/wix-data.html#query) function to retrieve the item's current values. \n2. Change the values in the returned item.\n3. Call the [`update()`](https://www.wix.com/code/reference/wix-data.html#update) function and pass it the item with the changed values.\n\nSee the **Get an item in a collection and update it** and **Query an item in a collection and update it** examples found [here](https://www.wix.com/code/reference/wix-data.html#update)." },
      { "title": "How do I limit the number of items returned by a query?",
        "markdown": "By default, a [`query()`](https://www.wix.com/code/reference/wix-data.html#query) is limited to returning 50 items. Add the [`limit()`](https://www.wix.com/code/reference/wix-data.WixDataQuery.html#limit) function to your query chain to change the limit on the number of items returned by a query." },
      { "title": "How do I retrieve the items referenced by another item?",
        "markdown": "When you query an item that references other items, you only receive the ID's of the referenced items in the query's results.\n\nThere are two ways to retrieve the items referenced by another item:\n\n1. Call the [`queryReferenced()`](https://www.wix.com/code/reference/wix-data.html#queryReferenced) function to retrieve the items referenced in the specified property of an item.\n2. Add the [`include()`](https://www.wix.com/code/reference/wix-data.WixDataQuery.html#include) function to your query chain to included referenced items for the specified properties in your query's results." },
      { "title": "Why is my data operation working in preview, but not in my published site?",
        "markdown": "This may be caused by a [permissions](https://support.wix.com/en/article/about-collection-permissions) issue. When in preview, you are performing operations on your collection as the Admin. On the published site, you may be performing those operations with a role that is not permitted to perform those operations on that collection.\n\nAlso make sure that you [synced](https://support.wix.com/en/article/syncing-data-between-sandbox-and-live-database-collections) your Sandbox collection with your Live collection." },
      { "title": "How do I bypass permissions checks when performing a data operation?",
        "markdown": "You can pass the [`WixDataOptions`](https://www.wix.com/code/reference/wix-data.html#WixDataOptions) object when performing a data operation. However, this only works when you perform the data operation in backend code.  " } ] }