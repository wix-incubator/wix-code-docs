{ "name": "WixDataFilterBuilder",
  "memberOf": "wix-data",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 6,
      "filename": "filterMixin.es6" },
  "docs":
    { "summary": "Provides functionality for refining a filter.",
      "description":
        [ "The `WixDataFilterBuilder` functions enable you to filter and control which results are returned by a dataset when the\r[`setFilter()`](wix-dataset.Dataset.html#setFilter)  function is applied. \r\rA filter is used to control which data is contained in a dataset on your page.\r\rTypically, you  build a filter using the [`filter()`](wix-data.html#filter) function, refine the filter with `WixDataFilterBuilder` functions, \rand then apply the filter to the dataset using the [`setFilter()`](wix-dataset.Dataset.html#setFilter) function.\r\r\r\rFor example, the following code shows a filter on a dataset that is connected to a collection containing customer data. The filter includes only customers over the age of 20:\r  \r\r```javascript\r import wixData from 'wix-data';\r\r const customerFilter = wixData.filter()\r   .gt(\"age\", 20);\r\r $w(\"#myDataset\").setFilter(customerFilter);\r\r\r ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "and",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as an `and` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 522,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Adds an `and` condition to the query or filter.",
            "description":
              [ "The `and()` function adds an `and` condition to a `WixDataQuery` or `WixDataFilterBuilder`.\r A query or filter with an `and` returns all the items that match the query\r or filter as defined up to the `and` function and also match the query or\r filter passed to the `and` function.\r\r Note that when chaining multiple `WixDataFilterBuilder` functions to a query an `add` condition is assumed.\r In such cases, you do not need to add a call to the `and()` function.\r For example, this query returns results where status is active **and** age is\r greater than 25.\r\r ```javascript\r wixData.query(\"myCollection\")\r   .eq(\"status\", \"active\")\r   .gt(\"age\", 25);\r ```\r\r The `and()` function, is needed when perfoming compound queries. For\r example, the final query in this set of queries returns results where status\r is either pending or rejected **and** age is either less than 25 or greater than 65.\r\r ```javascript\r let statusQuery = wixData.query(\"myCollection\")\r   .eq(\"status\", \"pending\")\r   .or(\r     wixData.query(\"myCollection\")\r       .eq(\"status\", \"rejected\")\r   );\r\r let ageQuery = wixData.query(\"myCollection\")\r   .lt(\"age\", 25)\r   .or(\r     wixData.query(\"myCollection\")\r       .gt(\"age\", 65)\r   );\r\r let statusAndAgeQuery = statusQuery.and(ageQuery);\r ```\r\r The collections referenced by both the initial query and the query passed\r to the `and` function must be the same.\r\r The 'and()' function is designed to work with 2 or more queries or filters. \r If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an and to a query",
                  "body":
                    [ "let newQuery = query1.and(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "let statusQuery = wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"pending\")\r",
                      "  .or(\r",
                      "    wixData.query(\"myCollection\")\r",
                      "      .eq(\"status\", \"rejected\")\r",
                      "  );\r",
                      "\r",
                      "let ageQuery = wixData.query(\"myCollection\")\r",
                      "  .lt(\"age\", 25)\r",
                      "  .or(\r",
                      "    wixData.query(\"myCollection\")\r",
                      "      .gt(\"age\", 65)\r",
                      "  );\r",
                      "\r",
                      "statusQuery.and(ageQuery)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "  /*\r",
                      "   * For example, results contain items where age is:\r",
                      "   * 18\r",
                      "   * 21\r",
                      "   * 67\r",
                      "   * 90\r",
                      "   *\r",
                      "   * But not items where age is:\r",
                      "   * 25\r",
                      "   * 30\r",
                      "   * 40\r",
                      "   * 65\r",
                      "   */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "between",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `rangeStart` and `rangeEnd`." },
            { "name": "rangeStart",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The beginning value of the range to match against." },
            { "name": "rangeEnd",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The ending value of the range to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 635,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only\r match items where the value of the specified property is greater than or equal\r to `rangeStart` and less than `rangeEnd`.\r\r It only matches values of the same type. For example, a number value stored\r as a String type does not match the same number stored as a Number type.\r\r If a property contains a number as a String, that value will be compared\r alphabetically and not numerically. Items that do not have a value for the\r specified property are ranked lowest.\r\r The following types of properties can be compared:\r\r + Number: Compares numerically.\r + Date: Compares JavaScript Date objects.\r + String: Compares lexicographically, so\r   + `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.\r   + `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not." ],
            "links": [],
            "examples":
              [ { "title": "Add a between filter to a query",
                  "body":
                    [ "let newQuery = query.between(\"age\", 25, 65);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .between(\"age\", 25, 65)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a between filter and other filters, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .between(\"age\", 25, 65)\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "contains",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for inside the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 379,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to\r only match items where the value of the specified property contains the\r specified `string`. Matching with `contains()` is not case sensitive, so\r `\"text\"` does contain `\"Tex\"`.\r\r You can use `contains()` with a property whose value is a String or a Reference.\r For properties of type reference it is recommended that you use the [`eq()`](#eq)\r function instead of `contains()`. With properties that are References, `contains()`\r matches by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a contains filter to a query",
                  "body":
                    [ "let newQuery = query.contains(\"description\", \"some words\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .contains(\"description\", \"some words\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .contains(\"description\", \"some words\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "endsWith",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 352,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only\r match items where the value of the specified property ends with the specified\r`string`. Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends\r with `\"ext\"`.\r\r You can only use `endsWith()` with a property whose value is a String or Reference.\r When using a Reference, `endsWith()` matches by the ID of the referenced item as Strings." ],
            "links": [],
            "examples":
              [ { "title": "Add an ends with filter to a query",
                  "body":
                    [ "let newQuery = query.endsWith(\"last_name\", \"z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .endsWith(\"last_name\", \"z\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .endsWith(\"last_name\", \"z\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 48,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only\r match items where the value of the specified property equals the specified `value`.\r\r It only matches values of the same type. For example, a number value stored\r as a String type does not match the same number stored as a Number type.\r\r Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\r\r If the value of the `propertyName` property is an Array, `eq()` includes items\r in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "let newQuery = query.eq(\"status\", \"active\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 106,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only\r match items where the value of the specified property is greater than or\r equal to the specified `value`.\r\r It only matches values of the same type. For example, a number value stored\r as a String type does not match the same number stored as a Number type.\r\r If a property contains a number as a String, that value will be compared\r alphabetically and not numerically. Items that do not have a value for the\r specified property are ranked lowest.\r\r The following types of properties can be compared:\r\r + Number: Compares numerically.\r + Date: Compares JavaScript Date objects.\r + String: Compares lexicographically,\r   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),\r   but `\"ABC\"` is not greater than or equal to `\"abc\"`.\r + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.ge(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .ge(\"age\", 25)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .ge(\"age\", 25)\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "lineno": 146,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only match\r items where the value of the specified property is greater than the specified `value`.\r\r It only matches values of the same type. For example, a number value stored\r as a String type does not match the same number stored as a Number type.\r\r If a property contains a number as a String, that value will be compared\r alphabetically and not numerically. Items that do not have a value for the\r specified property are ranked lowest.\r\r The following types of properties can be compared:\r\r + Number: Compares numerically.\r + Date: Compares JavaScript Date objects.\r + String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.\r + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than filter to a query",
                  "body":
                    [ "let newQuery = query.gt(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasAll",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  { "name": "Array",
                    "typeParams":
                      [ "*" ] } ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 449,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.",
            "description":
              [ "The `hasAll()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to\r only match items where the value of the specified property equals all of\r the specified values.\r\r Matching strings with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\r\r If the value of the specified property is an array, `hasAll()` will match\r if there is a match in the elements of that array for all of the specified\r values.\r\r You can specify a list of values to match by providing comma-separated\r String, Number, or Date types as the `value` parameters. You can also\r specify a list of these values by including them in an array and providing\r the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has all filter to a query",
                  "body":
                    [ "let newQuery = query.hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"]);\r",
                      "\r",
                      "// or\r",
                      "\r",
                      "let newQuery = query.hasAll(\"colors\", \"red\", \"yellow\", \"blue\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  { "name": "Array",
                    "typeParams":
                      [ "*" ] } ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 408,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to\r only match items where the value of the specified property equals any of\r the specified values.\r\r Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\r\r If the value of the specified property is an array, `hasSome()` will match\r if any of the elements of that array match any of the specified values.\r\r If the specified property contains multiple references, pass item IDs in the\r `value` property. In such a case, `hasSome()` will match if any of the\r multiple references match any of the specified ID values.\r\r You can specify a list of values to match by providing comma-separated\r String, Number, or Date types as the `value` parameters. You can also\r specify a list of these values by including them in an array and providing\r the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has some filter to a query",
                  "body":
                    [ "let newQuery = query.hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"]);\r",
                      "\r",
                      "// or\r",
                      "\r",
                      "let newQuery = query.hasSome(\"colors\", \"red\", \"yellow\", \"blue\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Add a has some filter on a multiple reference field to a query",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"movies\")\r",
                      "  .hasSome(\"actors\", [\"1357\", \"2468\"])\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example gets the items from the **movies** collection that have a\r reference in the **authors** field to an item with an ID that is either\r **1357** or **2468**." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isEmpty",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The the property in which to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 292,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property does not exist or does not have any value.",
            "description":
              [ "The `isEmpty()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only match items where the\r value of the specified property is `null` or `undefined` or the property does\r not exist.\r\r If the property contains any value at all for a given item, including the\r empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isEmpty(\"bio\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .isEmpty(\"bio\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .isEmpty(\"bio\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isNotEmpty",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property in which to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 260,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property has any value.",
            "description":
              [ "The `isNotEmpty()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only match items where the\r value of the specified property is not `null` or `undefined`.\r\r If the property contains any value at all for a given item, including the\r empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isNotEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isNotEmpty(\"bio\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .isNotEmpty(\"bio\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .isNotEmpty(\"bio\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 183,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only match\r items where the value of the specified property is less than or equal to the\r specified `value`.\r\r It only matches values of the same type. For example, a number value stored\r as a String type does not match the same number stored as a Number type.\r\r If a property contains a number as a String, that value will be compared\r alphabetically and not numerically. Items that do not have a value for the\r specified property are ranked lowest.\r\r The following types of properties can be compared:\r\r + Number: Compares numerically.\r + Date: Compares JavaScript Date objects.\r + String: Compares lexicographically,\r   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),\r   but `\"abc\"` is not less than or equal to `\"ABC\"`.\r + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.le(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .le(\"age\", 25)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .le(\"age\", 25)\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "lineno": 223,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only match\r items where the value of the specified property is less than the specified `value`.\r\r It only matches values of the same type. For example, a number value stored\r as a String type does not match the same number stored as a Number type.\r\r If a property contains a number as a String, that value will be compared\r alphabetically and not numerically. Items that do not have a value for the\r specified property are ranked lowest.\r\r The following types of properties can be compared:\r\r + Number: Compares numerically.\r + Date: Compares JavaScript Date objects.\r + String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`.\r + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a query",
                  "body":
                    [ "let newQuery = query.lt(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .lt(\"age\", 25)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .lt(\"age\", 25)\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 77,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to only\r match items where the value of the specified property does not equal the specified `value`.\r\r It only matches values of the same type. For example, a number value stored\r as a String type is considered not equal to the same number stored as a Number type.\r\r Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.\r\r If the value of the `propertyName` property is an Array, `ne()` includes items\r in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a query",
                  "body":
                    [ "let newQuery = query.ne(\"status\", \"active\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .ne(\"status\", \"active\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .ne(\"status\", \"active\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "not",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as a `not` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 593,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Adds a `not` condition to the query or filter.",
            "description":
              [ "The `not()` function adds a `not` condition to a `WixDataQuery` or `WixDataFilterBuilder`. A query or filter with a `not`\r returns all the items that match the query or filter as defined up to the `not`\r function, but don't match the query or filter passed to the `not` function.\r\r If the query or filter only contains a `not()` function, it returns all the items\r that don't match the query defined by the `not` method.\r\r The collections referenced by both the initial query and the query passed\r to the `not` function must be the same." ],
            "links": [],
            "examples":
              [ { "title": "Add a not to a query",
                  "body":
                    [ "let newQuery = query1.not(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .not(\r",
                      "    wixData.query(\"myCollection\")\r",
                      "      .eq(\"access_type\", \"restricted\")\r",
                      "  )\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as an `or` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 484,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Adds an `or` condition to the query or filter.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `WixDataQuery` or `WixDataFilterBuilder`. A query or filter\r with an `or` returns all the items that match the query or filter as defined up to\r the `or` function, the items that match the query or filter passed to the `or`\r function, and the items that match both.\r\r The collections used by both the initial query and the query passed\r to the `or` function must be the same.\r\r The 'or()' function is designed to work with 2 or more queries or filters. \r If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an or to a query",
                  "body":
                    [ "let newQuery = query1.or(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .lt(\"age\", 25)\r",
                      "  .or(\r",
                      "    wixData.query(\"myCollection\")\r",
                      "      .gt(\"age\", 65)\r",
                      "  )\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "  /*\r",
                      "   * For example, results contain items where age is:\r",
                      "   * 18\r",
                      "   * 21\r",
                      "   * 67\r",
                      "   * 90\r",
                      "   *\r",
                      "   * But not items where age is:\r",
                      "   * 25\r",
                      "   * 30\r",
                      "   * 40\r",
                      "   * 65\r",
                      "   */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 325,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `WixDataQuery` or `WixDataFilterBuilder` to\r only match items where the value of the specified property starts with the\r defined `string`. Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts\r with `\"tex\"`.\r\r You can only use `startsWith()` with a property whose value is a String or Reference.\r When using a Reference, `startsWith()` matches by the ID of the referenced item as Strings." ],
            "links": [],
            "examples":
              [ { "title": "Add a starts with filter to a query",
                  "body":
                    [ "let newQuery = query.startsWith(\"last_name\", \"M\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .startsWith(\"last_name\", \"M\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .startsWith(\"last_name\", \"M\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "notes":
        [ "The functions below are common to both queries and filters.\rThe examples given are for queries but also work for filters." ] } }