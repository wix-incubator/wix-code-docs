{ "name": "WixDataQueryReferencedResult",
  "memberOf": "wix-data",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 1,
      "filename": "multiref.es6" },
  "docs":
    { "summary": "The results of a data reference query, containing the retrieved items.",
      "description":
        [ "When you execute a reference query with the [`queryReferenced()`](wix-data.html#queryReferenced)",
          " function, it returns a Promise that resolves to a `WixDataQueryReferencedResult`",
          " object. This object contains the items that match the reference query and",
          " functions for paging through the query results." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "items",
        "labels": [],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Object" ] },
        "locations":
          [ { "lineno": 25,
              "filename": "multiref.es6" } ],
        "docs":
          { "summary": "Returns the items that match the reference query.",
            "description":
              [ "The current page of items retrieved by the reference query.",
                "",
                " The page size is 50 items. Navigate through pages of items with the",
                " [`prev()`](#prev) and [`next()`](#next) functions.",
                "",
                " When no items match the reference query, the `items` array is empty." ],
            "links": [],
            "examples":
              [ { "title": "Get the items of a reference query result",
                  "body":
                    [ "let items = results.items;",
                      "",
                      "/*",
                      " * [",
                      " *   {",
                      " *     \"_id\":          \"1234\",",
                      " *     \"_owner\":       \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *     \"_createdDate\": \"2017-05-29T08:35:52.344Z\",",
                      " *     \"_updatedDate\": \"2017-05-29T08:35:52.344Z\",",
                      " *     \"first_name\":   \"Jane\",",
                      " *     \"last_name\":    \"Doe\"",
                      " *   },",
                      " *   {",
                      " *     \"_id\":          \"5678\",",
                      " *     \"_owner\":       \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *     \"_createdDate\": \"2017-05-25T12:48:56.572Z\",",
                      " *     \"_updatedDate\": \"2017-05-29T07:30:15.869Z\",",
                      " *     \"first_name\":   \"John\",",
                      " *     \"last_name\":    \"Doe\"",
                      " *   }",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Perform a reference query and get the items of the result",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.queryReferenced(\"movies\", \"00001\", \"actors\")",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items; // see below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } ) ;",
                      "",
                      "/* items:",
                      " *",
                      " * [",
                      " *   {",
                      " *     \"_id\":          \"1234\",",
                      " *     \"_owner\":       \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *     \"_createdDate\": \"2017-05-29T08:35:52.344Z\",",
                      " *     \"_updatedDate\": \"2017-05-29T08:35:52.344Z\",",
                      " *     \"first_name\":   \"Jane\",",
                      " *     \"last_name\":    \"Doe\"",
                      " *   },",
                      " *   {",
                      " *     \"_id\":          \"5678\",",
                      " *     \"_owner\":       \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *     \"_createdDate\": \"2017-05-25T12:48:56.572Z\",",
                      " *     \"_updatedDate\": \"2017-05-29T07:30:15.869Z\",",
                      " *     \"first_name\":   \"John\",",
                      " *     \"last_name\":    \"Doe\"",
                      " *   }",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "totalCount",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 48,
              "filename": "multiref.es6" } ],
        "docs":
          { "summary": "Returns the total number of items that match the reference query.",
            "description":
              [ "The `totalCount` returns the total number of items that match the reference query,",
                " not just the number of items in the current page." ],
            "links": [],
            "examples":
              [ { "title": "Get the total number of items in a reference query result",
                  "body":
                    [ "let resultCount = results.totalCount; // 150" ],
                  "extra":
                    {  } },
                { "title": "Perform a reference query and get the total number of items in the result",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.queryReferenced(\"movies\", \"00001\", \"actors\")",
                      "  .then( (results) => {",
                      "    let resultCount = results.totalCount; // 150",
                      "  } ) ;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "hasNext",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "`true` if there are more results." },
        "locations":
          [ { "lineno": 67,
              "filename": "multiref.es6" } ],
        "docs":
          { "summary": "Indicates if the reference query has more results.",
            "links": [],
            "examples":
              [ { "title": "Get whether the reference query result object has more results",
                  "body":
                    [ "let hasNext = results.hasNext(); // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasPrev",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "`true` if there are previous results." },
        "locations":
          [ { "lineno": 81,
              "filename": "multiref.es6" } ],
        "docs":
          { "summary": "Indicates if the reference query has previous results.",
            "links": [],
            "examples":
              [ { "title": "Get whether the reference query result object has previous results",
                  "body":
                    [ "let hasPrev = results.hasPrev(); // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "next",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQueryReferencedResult" ] },
            "doc": "Fulfilled - A reference query result object with the next page of query results.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 95,
              "filename": "multiref.es6" } ],
        "docs":
          { "summary": "Retrieves the next page of reference query results.",
            "description":
              [ "The `next()` function retrieves the next page of reference query results.",
                "",
                " The page size is 50 items. Navigate through pages of items with the",
                " [`prev()`](#prev) and [`next()`](#next) functions.",
                "",
                " If items are added or removed between calls to `next()` the values returned",
                " may change." ],
            "links": [],
            "examples":
              [ { "title": "Get the next page of a query result",
                  "body":
                    [ "oldResults.next()",
                      "  .then( (results) => {",
                      "    let newResults = results;",
                      "    let items = newResults.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = newResults.totalCount;",
                      "    let hasNext = newResults.hasNext();",
                      "    let hasPrev = newResults.hasPrev();",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of reference query results",
                  "body":
                    [ "let results = await wixData.queryReferenced(\"movies\", \"00001\", \"actors\");",
                      "",
                      "console.log(results.items);",
                      "",
                      "while(results.hasNext()) {",
                      "  console.log(\"---▼ Next Page ▼---\");",
                      "  results = await results.next();",
                      "  console.log(results.items);",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "prev",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQueryReferencedResult" ] },
            "doc": "Fulfilled - A query result object with the previous page of query results.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 120,
              "filename": "multiref.es6" } ],
        "docs":
          { "summary": "Retrieves the previous page of reference query results.",
            "description":
              [ "The `prev()` function retrieves the previous page of reference query results.",
                "",
                " The page size is 50 items. Navigate through pages of items with the",
                " [`prev()`](#prev) and [`next()`](#next) functions.",
                "",
                " If items are added or removed between calls to `prev()` the values returned",
                " may change." ],
            "links": [],
            "examples":
              [ { "title": "Get the previous page of a query result",
                  "body":
                    [ "oldResults.next()",
                      "  .then( (results) => {",
                      "    let newResults = results;",
                      "    let items = newResults.items;",
                      "    let firstItem = items[0];",
                      "    let totalCount = newResults.totalCount;",
                      "    let hasNext = newResults.hasNext();",
                      "    let hasPrev = newResults.hasPrev();",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }