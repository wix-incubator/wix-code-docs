{ "name": "WixDataAggregate",
  "memberOf": "wix-data",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 9,
      "filename": "aggregate.es6" },
  "docs":
    { "summary": "Provides functionality for performing aggregations on collection data.",
      "description":
        [ "The aggregation functionality of the Data API allows you to perform calculations\r on your collection data, as whole or on groups of items that you define, to\r retrieve meaningful summaries. You can also add filtering and sorting to your\r aggregations to retrieve exactly what you need.\r\r The examples below use a sample collection, named PopulationData, with the following data:\r\r ```\r City,          Population, State,  Year\r Buffalo,       292000,     NY,     2000\r Buffalo,       261000,     NY,     2010\r Los Angeles,   3703000,    CA,     2000\r Los Angeles,   3796000,    CA,     2010\r Miami,         362000,     FL,     2000\r Miami,         401000,     FL,     2010\r New York,      8015000,    NY,     2000\r New York,      8192000,    NY,     2010\r Orlando,       195000,     FL,     2000\r Orlando,       240000,     FL,     2010\r San Diego      1228000,    CA,     2010\r San Diego      1306000,    CA,     2012\r San Francisco, 777000,     CA,     2000\r San Francisco, 805000,     CA,     2010\r ```\r\r For more information, see <a href=\"https://support.wix.com/en/article/working-with-aggregations-and-groupings-in-the-data-api\" target=\"_blank\">Working with Aggregations and Groupings in the Data API</a>." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 508,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Adds a sort to an aggregation, sorting by the items or groups by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `WixDataAggregate` to sort the resulting\r items or groups in ascending order. If you specify more than one property,\r `ascending()` sorts the results in ascending order by each property in the\r order they are listed.\r\r You can sort the following types:\r\r + Number: Sorts numerically.\r + Date: Sorts by date and time.\r + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.\r + Reference: Compares by the ID of the referenced item as a String.\r\r\r If a property contains a number as a String, that value will be sorted\r alphabetically and not numerically. Items that do not have a value for the\r specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to an aggregation",
                  "body":
                    [ "let newAggregate = aggregate.ascending(\"state\", \"city\");" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add an ascending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .avg(\"population\")\r",
                      "  .ascending(\"populationAvg\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    let items = results.items;        // see below\r",
                      "    let numItems = results.length;    // 6\r",
                      "    let hasNext = results.hasNext();  // false\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationAvg\": 4226500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 4153500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"populationAvg\": 1969000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 2240000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationAvg\": 320500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 278500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "avg",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property in which to find the average value." },
            { "name": "projectedName",
              "type": "string",
              "doc": "The name of the property in the aggregation results containing the average value.",
              "optional": true } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 416,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Refines a `WixDataAggregate` to only contain the average value from each aggregation group.",
            "description":
              [ "The `avg()` function refines a `WixDataAggregate` to contain the average\r value from the specified property for each aggregated group or from the\r whole collection if no group is defined.\r\r When the aggregation is [run](#run), the returned `WixDataAggregateResult`\r object contains an item for each group with the following key:value pairs:\r\r + If a value was passed for the optional `projectedName`, the key is named\r   using that value. Otherwise, the key is named using the following format:\r   `\"propertyNameAvg\"`, where `propertyName` is the name of the specified property.\r + The value is the average of the values found in the specified property.\r\r\r Averages can only be calculated on properties of type Number." ],
            "links": [],
            "examples":
              [ { "title": "Add an avg aggregation",
                  "body":
                    [ "let newAggregate = aggregate.avg(\"population\");" ],
                  "extra":
                    {  } },
                { "title": "Add an avg aggregation with a projected name for the results",
                  "body":
                    [ "let newAggregate = aggregate.max(\"population\", \"avgPopulation\");" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add an avg aggregation, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .avg(\"population\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    let items = results.items;        // see below\r",
                      "    let numItems = results.length;    // 6\r",
                      "    let hasNext = results.hasNext();  // false\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 4153500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000},\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 278500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 2240000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationAvg\": 320500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"populationAvg\": 2300500,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationAvg\": 4226500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add an avg aggregation with a projected name for the results, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .avg(\"population\", \"averagePopulation\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    let items = results.items;        // see below\r",
                      "    let numItems = results.length;    // 6\r",
                      "    let hasNext = results.hasNext();  // false\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"averagePopulation\": 4153500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000},\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"averagePopulation\": 278500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"averagePopulation\": 2240000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"averagePopulation\": 320500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"averagePopulation\": 2300500,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"averagePopulation\": 4226500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "count",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 484,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Refines a `WixDataAggregate` to contain the item count of each group in the aggregation.",
            "description":
              [ "The `count()` function refines a `WixDataAggregate` to contain the item\r count in each of the aggregate's groups.\r\r When the aggregation is [run](#run), the returned `WixDataAggregateResult`\r object contains items with the following additional key:value pair:\r\r + The key is named `\"count\"`.\r + The value is the count of items aggregated in the group." ],
            "links": [],
            "examples":
              [ { "title": "Add a sum aggregation",
                  "body":
                    [ "let newAggregate = aggregate.count();" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a sum aggregation, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .count()\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"count\": 2,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"count\": 2,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"count\": 2,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"count\": 2,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"count\": 2,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"count\": 2,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "descending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 541,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Adds a sort to an aggregation, sorting by the items or groups by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `WixDataAggregate` to sort the resulting\r items or groups in descending order. If you specify more than one property,\r `descending()` sorts the results in descending order by each property in the\r order they are listed.\r\r You can sort the following types:\r\r + Number: Sorts numerically.\r + Date: Sorts by date and time.\r + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.\r + Reference: Compares by the ID of the referenced item as a String.\r\r\r If a property contains a number as a String, that value will be sorted\r alphabetically and not numerically. Items that do not have a value for the\r specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add a descending sort to an aggregation",
                  "body":
                    [ "let newAggregate = aggregate.descending(\"state\", \"city\");" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a descending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .avg(\"population\")\r",
                      "  .descending(\"populationAvg\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\",\"year\": 2010},\r",
                      " *     \"populationAvg\": 4226500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"NY\",\"year\": 2000},\r",
                      " *     \"populationAvg\": 4153500,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"CA\",\"year\": 2010},\r",
                      " *     \"populationAvg\": 1969000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 2240000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationAvg\": 320500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationAvg\": 278500,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "filter",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "filter",
              "type": "wix-data.WixDataFilter",
              "doc": "The filter to use to filter out items from being used in the aggregation." } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 56,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Filters out items from being used in an aggregation.",
            "description":
              [ "The `filter()` function refines a `WixDataAggregate` so that it only\r includes items from the aggregate's collection which match the specified\r filter criteria.\r\r To create a filter, use the wix-data [`filter()`](wix-data.html#filter) function.\r\r Filtering using `filter()` takes place before grouping is performed on the\r aggregation. To filter grouped results, use the [`having()`](#having) function." ],
            "links": [],
            "examples":
              [ { "title": "Filter out items in an aggregation",
                  "body":
                    [ "let filter = wixData.filter().eq(\"year\", 2010);\r",
                      "\r",
                      "let newAggregate = aggregate.filter(filter);" ],
                  "extra":
                    {  } },
                { "title": "Filter out items in an aggregation and run the aggregation",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "let filter = wixData.filter().eq(\"year\", 2010);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .filter(filter)\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 1\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "// items is: [{\"_id\":\"0\",\"maxPopulation\":8192000}]" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation with filtering and grouping and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "const filter = wixData.filter().eq(\"year\", 2010);\r",
                      "const having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .filter(filter)\r",
                      "  .group(\"state\")\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .having(having)\r",
                      "  .descending(\"maxPopulation\")\r",
                      "  .skip(5)\r",
                      "  .limit(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let numItems = results.length;\r",
                      "      let hasNext = results.hasNext();\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "group",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property or properties to group on.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 101,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Groups items together in an aggregation.",
            "description":
              [ "The `group()` function refines a `WixDataAggregate` so that its items are\r grouped by the specified property or properties.\r\r You can perform aggregations on the groups using the following functions:\r\r + [`avg()`](#avg)\r + [`count()`](#count)\r + [`max()`](#max)\r + [`min()`](#min)\r + [`sum()`](#sum)\r\r\r To filter grouped results, use the [`having()`](#having) function." ],
            "links": [],
            "examples":
              [ { "title": "Group items in an aggregation",
                  "body":
                    [ "let newAggregate = aggregate.group(\"state\");" ],
                  "extra":
                    {  } },
                { "title": "Group items by multiple fields in an aggregation",
                  "body":
                    [ "let newAggregate = aggregate.group(\"state\", \"year\");" ],
                  "extra":
                    {  } },
                { "title": "Group items in an aggregation and run the aggregation",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\")\r",
                      "  .max(\"population\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 3\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\"_id\": \"FL\", \"populationMax\": 401000},\r",
                      " *   {\"_id\": \"CA\", \"populationMax\": 3796000},\r",
                      " *   {\"_id\": \"NY\", \"populationMax\": 8192000}\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Group items in an aggregation and run the aggregation",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .max(\"population\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"populationMax\": 8015000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationMax\": 362000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationMax\": 8192000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"populationMax\": 3796000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"populationMax\": 3703000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationMax\": 401000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation with filtering and grouping and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "const filter = wixData.filter().eq(\"year\", 2010);\r",
                      "const having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .filter(filter)\r",
                      "  .group(\"state\")\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .having(having)\r",
                      "  .descending(\"maxPopulation\")\r",
                      "  .skip(5)\r",
                      "  .limit(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let numItems = results.length;\r",
                      "      let hasNext = results.hasNext();\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "having",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "filter",
              "type": "wix-data.WixDataFilter",
              "doc": "The filter to use to filter out groups from being returned from the aggregation." } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 159,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Filters out groups from being returned from an aggregation.",
            "description":
              [ "The `having()` function refines a `WixDataAggregate` so that it only\r includes groups from the aggregate's grouping which match the specified\r filter criteria.\r\r To create a filter, use the wix-data [`filter()`](wix-data.html#filter) function.\r\r Filtering using `having()` takes place after grouping is performed on the\r aggregation. To filter items before grouping, use the [`filter()`](#filter) function." ],
            "links": [],
            "examples":
              [ { "title": "Filter out groups in an aggregation",
                  "body":
                    [ "let having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "let newAggregate = aggregate.having(having);" ],
                  "extra":
                    {  } },
                { "title": "Filter out groups in an aggregation and run the aggregation",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "let having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"city\", \"state\")\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .having(having)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 3\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"city\": \"San Diego\", \"state\": \"CA\"},\r",
                      " *     \"maxPopulation\": 1306000,\r",
                      " *     \"city\": \"San Diego\",\r",
                      " *     \"state\": \"CA\"\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"city\": \"New York\", \"state\": \"NY\"},\r",
                      " *     \"maxPopulation\": 8192000,\r",
                      " *     \"city\": \"New York\",\r",
                      " *     \"state\": \"NY\"\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"city\": \"Los Angeles\", \"state\": \"CA\"},\r",
                      " *     \"maxPopulation\": 3796000,\r",
                      " *     \"city\": \"Los Angeles\",\r",
                      " *     \"state\": \"CA\"\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation with filtering and grouping and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "const filter = wixData.filter().eq(\"year\", 2010);\r",
                      "const having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .filter(filter)\r",
                      "  .group(\"state\")\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .having(having)\r",
                      "  .descending(\"maxPopulation\")\r",
                      "  .skip(5)\r",
                      "  .limit(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let numItems = results.length;\r",
                      "      let hasNext = results.hasNext();\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "limit",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "The number of items or groups to return." } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 249,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Limits the number of items or groups the aggregation returns.",
            "description":
              [ "The `limit()` function defines the number of results an aggregation returns in each\r page. Only one page of results is retreived at a time. The [`next()`](wix-data.WixDataQueryResult.html)\r function is used to navigate the pages of a query result.\r\r By default, `limit` is set to `50`.\r\r The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to an aggregation",
                  "body":
                    [ "let newAggregate = aggregate.limit(3);" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregate, add a limit, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .max(\"population\")\r",
                      "  .limit(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 3\r",
                      "      let hasNext = results.hasNext();  // true\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"populationMax\":8015000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationMax\":362000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationMax\":3703000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation with filtering and grouping and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "const filter = wixData.filter().eq(\"year\", 2010);\r",
                      "const having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .filter(filter)\r",
                      "  .group(\"state\")\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .having(having)\r",
                      "  .descending(\"maxPopulation\")\r",
                      "  .skip(5)\r",
                      "  .limit(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let numItems = results.length;\r",
                      "      let hasNext = results.hasNext();\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "max",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property in which to find the maximum value." },
            { "name": "projectedName",
              "type": "string",
              "doc": "The name of the property in the aggregation results containing the maximum value.",
              "optional": true } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 328,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Refines a `WixDataAggregate` to only contain the maximum value from each aggregation group.",
            "description":
              [ "The `max()` function refines a `WixDataAggregate` to contain the maximum\r value from the specified property for each aggregated group or from the\r whole collection if no group is defined.\r\r When the aggregation is [run](#run), the returned `WixDataAggregateResult`\r object contains an item for each group with the following key:value pairs:\r\r + If a value was passed for the optional `projectedName`, the key is named\r   using that value. Otherwise, the key is named using the following format:\r   `\"propertyNameMax\"`, where `propertyName` is the name of the specified property.\r + The value is the maximum value found in the specified property.\r\r\r The following types of properties can be compared to determine a maximum value:\r\r + Number: Compares numerically.\r + Date and Time: Compares JavaScript Date objects.\r + Text: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.\r + Rich Text: Compares HTML source as text.\r + URL: Compares as text.\r + Image: Compares image source as text.\r + Video: Compares video source as text.\r + Document: Compares document source as text.\r + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a max aggregation",
                  "body":
                    [ "let newAggregate = aggregate.max(\"population\");" ],
                  "extra":
                    {  } },
                { "title": "Add a max aggregation with a projected name for the results",
                  "body":
                    [ "let newAggregate = aggregate.max(\"population\", \"maxPopulation\");" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a max aggregation, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .max(\"population\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"populationMax\": 8015000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationMax\": 362000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"populationMax\": 3703000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationMax\": 401000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"populationMax\": 3796000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationMax\": 8192000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a max aggregation with a projected name for the results, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .max(\"population\", \"maximumPopulation\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"maximumPopulation\": 8015000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"maximumPopulation\": 362000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"maximumPopulation\": 3703000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"maximumPopulation\": 401000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"maximumPopulation\": 3796000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"maximumPopulation\": 8192000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "min",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property in which to find the minimum value." },
            { "name": "projectedName",
              "type": "string",
              "doc": "The name of the property in the aggregation results containing the minimum value.",
              "optional": true } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 372,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Refines a `WixDataAggregate` to only contain the minimum value from each aggregation group.",
            "description":
              [ "The `min()` function refines a `WixDataAggregate` to contain the minimum\r value from the specified property for each aggregated group or from the\r whole collection if no group is defined.\r\r When the aggregation is [run](#run), the returned `WixDataAggregateResult`\r object contains an item for each group with the following key:value pairs:\r\r + If a value was passed for the optional `projectedName`, the key is named\r   using that value. Otherwise, the key is named using the following format:\r   `\"propertyNameMin\"`, where `propertyName` is the name of the specified property.\r + The value is the minimum value found in the specified property.\r\r\r The following types of properties can be compared to determine a minimum value:\r\r + Number: Compares numerically.\r + Date and Time: Compares JavaScript Date objects.\r + Text: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.\r + Rich Text: Compares HTML source as text.\r + URL: Compares as text.\r + Image: Compares image source as text.\r + Video: Compares video source as text.\r + Document: Compares document source as text.\r + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a min aggregation",
                  "body":
                    [ "let newAggregate = aggregate.min(\"population\");" ],
                  "extra":
                    {  } },
                { "title": "Add a min aggregation with a projected name for the results",
                  "body":
                    [ "let newAggregate = aggregate.min(\"population\", \"minPopulation\");" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a max aggregation, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .min(\"population\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"populationMin\": 292000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\":2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationMin\": 195000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\":2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationMin\": 261000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\":2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"populationMin\": 805000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\":2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"populationMin\": 777000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\":2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationMin\": 240000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\":2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a min aggregation with a projected name for the results, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .min(\"population\", \"minimumPopulation\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"minimumPopulation\": 292000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\":2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"minimumPopulation\": 195000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\":2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"minimumPopulation\": 261000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\":2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"minimumPopulation\": 805000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\":2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"minimumPopulation\": 777000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\":2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"minimumPopulation\": 240000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\":2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "run",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataAggregateResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the aggregation.\nRejected - Error that caused the aggregation to fail." },
        "locations":
          [ { "lineno": 293,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Runs the aggregation and returns the results.",
            "description":
              [ "The `run()` function returns a Promise that resolves to the results found\r by the aggregation and some information about the results." ],
            "links": [],
            "examples":
              [ { "title": "Perform an aggregation",
                  "body":
                    [ "aggregate.run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let numItems = results.length;\r",
                      "      let hasNext = results.hasNext();  \r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation with filtering and grouping and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "const filter = wixData.filter().eq(\"year\", 2010);\r",
                      "const having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .filter(filter)\r",
                      "  .group(\"state\")\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .having(having)\r",
                      "  .descending(\"maxPopulation\")\r",
                      "  .skip(5)\r",
                      "  .limit(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let numItems = results.length;\r",
                      "      let hasNext = results.hasNext();\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "skip",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "The number of items or groups to skip in the aggregation results before returning the results." } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 204,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Sets the number of items or groups to skip before returning aggregation results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the aggregation\r results before returning new aggregation results.\r\r For example, if you perform an aggregation on a collection and 10 groups match\r your aggregation, but you set `skip` to 3, the results returned will skip\r the first 3 groups that match and return the 4th through 10th items.\r\r By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to an aggregation",
                  "body":
                    [ "let newAggregate = aggregate.skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregate, add a skip, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .max(\"population\")\r",
                      "  .skip(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 3\r",
                      "      let hasNext = results.hasNext();\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationMax\":401000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"populationMax\":3796000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   }, {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationMax\":8192000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation with filtering and grouping and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "const filter = wixData.filter().eq(\"year\", 2010);\r",
                      "const having = wixData.filter().gt(\"maxPopulation\", 1000000);\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .filter(filter)\r",
                      "  .group(\"state\")\r",
                      "  .max(\"population\", \"maxPopulation\")\r",
                      "  .having(having)\r",
                      "  .descending(\"maxPopulation\")\r",
                      "  .skip(5)\r",
                      "  .limit(3)\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let numItems = results.length;\r",
                      "      let hasNext = results.hasNext();\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } },
      { "name": "sum",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property in which to find the sum." },
            { "name": "projectedName",
              "type": "string",
              "doc": "The name of the property in the aggregation results containing the sum.",
              "optional": true } ],
        "ret":
          { "type": "wix-data.WixDataAggregate",
            "doc": "A `WixDataAggregate` object representing the refined aggregation." },
        "locations":
          [ { "lineno": 450,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Refines a `WixDataAggregate` to contain the sum from each aggregation group.",
            "description":
              [ "The `sum()` function refines a `WixDataAggregate` to contain the sum of the\r values from the specified property for each aggregated group or from the\r whole collection if no group is defined.\r\r When the aggregation is [run](#run), the returned `WixDataAggregateResult`\r object contains an item for each group with the following key:value pairs:\r\r + If a value was passed for the optional `projectedName`, the key is named\r   using that value. Otherwise, the key is named using the following format:\r   `\"propertyNameSum\"`, where `propertyName` is the name of the specified property.\r + The value is the sum of the values found in the specified property.\r\r\r Sums can only be calculated on properties of type Number." ],
            "links": [],
            "examples":
              [ { "title": "Add a sum aggregation",
                  "body":
                    [ "let newAggregate = aggregate.sum(\"population\");" ],
                  "extra":
                    {  } },
                { "title": "Add a sum aggregation with a projected name for the results",
                  "body":
                    [ "let newAggregate = aggregate.sum(\"population\", \"sumPopulation\");" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a sum aggregation, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .sum(\"population\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"populationSum\": 8307000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"populationSum\": 557000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"populationSum\": 8453000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"populationSum\": 4601000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"populationSum\": 4480000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"populationSum\": 641000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Create an aggregation, add a sum aggregation with a projected name for the results, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.aggregate(\"PopulationData\")\r",
                      "  .group(\"state\", \"year\")\r",
                      "  .sum(\"population\", \"totalPopulation\")\r",
                      "  .run()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;        // see below\r",
                      "      let numItems = results.length;    // 6\r",
                      "      let hasNext = results.hasNext();  // false\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "\r",
                      "/* Given the sample data above, items is:\r",
                      " * [\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2000},\r",
                      " *     \"totalPopulation\": 8307000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2000},\r",
                      " *     \"totalPopulation\": 557000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"NY\", \"year\": 2010},\r",
                      " *     \"totalPopulation\": 8453000,\r",
                      " *     \"state\": \"NY\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2010},\r",
                      " *     \"totalPopulation\": 4601000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2010\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"CA\", \"year\": 2000},\r",
                      " *     \"totalPopulation\": 4480000,\r",
                      " *     \"state\": \"CA\",\r",
                      " *     \"year\": 2000\r",
                      " *   },\r",
                      " *   {\r",
                      " *     \"_id\": {\"state\": \"FL\", \"year\": 2010},\r",
                      " *     \"totalPopulation\": 641000,\r",
                      " *     \"state\": \"FL\",\r",
                      " *     \"year\": 2010\r",
                      " *   }\r",
                      " * ]\r",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "notes":
        [ "Aggregations can only be used on collections you have created. They cannot be\r used on <a href=\"https://support.wix.com/en/article/working-with-wix-app-collections\" target=\"_blank\">Wix App Collections</a>." ] } }