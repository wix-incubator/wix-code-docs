{ "name": "WixDataAggregateResult",
  "memberOf": "wix-data",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 624,
      "filename": "aggregate.es6" },
  "docs":
    { "summary": "The results of an aggregation, containing the aggregated values.",
      "description":
        [ "When you execute an aggregation with the [`run()`](#run) function, it returns",
          " a Promise that resolves to a `WixDataAggregateResult` object, which contains",
          " the aggregated values." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "items",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Object" ] },
        "locations":
          [ { "lineno": 643,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Gets the aggregated values.",
            "description":
              [ "The current page of items retrieved by the aggregation.",
                "",
                " The page size is defined by the [`limit()`](#limit) function and",
                " navigating through pages is done with the [`next()`](#next) function.",
                "",
                " When no items match the aggregation, the `items` array is empty." ],
            "links": [],
            "examples":
              [ { "title": "Get the aggregate values",
                  "body":
                    [ "let items = results.items;" ],
                  "extra":
                    {  } },
                { "title": "Run an aggregation and get the aggregate values",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "wixData.aggregate(\"PopulationData\")",
                      "  .group(\"state\")",
                      "  .max(\"population\")",
                      "  .run()",
                      "  .then( (results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;        // see below",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } );",
                      "",
                      "/* Given the sample data above, items is:",
                      " * [",
                      " *   {\"_id\": \"NY\", \"populationMax\": 8192000},",
                      " *   {\"_id\": \"CA\", \"populationMax\": 3796000},",
                      " *   {\"_id\": \"FL\", \"populationMax\": 401000}",
                      " * ]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "length",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "lineno": 682,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Returns the number of values in the aggregate results.",
            "links": [],
            "examples":
              [ { "title": "Get the number of values in the aggregate results",
                  "body":
                    [ "let length = results.length; // 4" ],
                  "extra":
                    {  } },
                { "title": "Run an aggregation and get the number of values in the aggregate results",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "wixData.aggregate(\"PopulationData\")",
                      "  .group(\"state\")",
                      "  .max(\"population\")",
                      "  .run()",
                      "  .then( (results) => {",
                      "    let length = results.length;  // 3",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "hasNext",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "boolean",
            "doc": "`true` if there are more results." },
        "locations":
          [ { "lineno": 666,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Indicates if the aggregation has more results.",
            "links": [],
            "examples":
              [ { "title": "Get whether the aggregate result object has more results",
                  "body":
                    [ "let hasNext = results.hasNext(); // true" ],
                  "extra":
                    {  } },
                { "title": "Run an aggregation and get whether the aggregate result object has more results",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "wixData.aggregate(\"PopulationData\")",
                      "  .group(\"state\")",
                      "  .max(\"population\")",
                      "  .run()",
                      "  .then( (results) => {",
                      "    let hasNext = results.hasNext();  // false",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of aggregate results",
                  "body":
                    [ "let results = await wixData.aggregate(\"Cities\")",
                      "  .group(\"city\")",
                      "  .limit(3)",
                      "  .run();",
                      "",
                      "console.log(results.items);",
                      "",
                      "while(results.hasNext()) {",
                      "  console.log(\"---▼ Next Page ▼---\");",
                      "  results = await results.next();",
                      "  console.log(results.items);",
                      "}",
                      "",
                      "/* Logs:",
                      " * [{\"_id\":\"San Diego\"},{\"_id\":\"Orlando\"},{\"_id\":\"San Francisco\"}]",
                      " * ---▼ Next Page ▼---",
                      " * [{\"_id\":\"Buffalo\"},{\"_id\":\"Miami\"},{\"_id\":\"Los Angeles\"}]",
                      " * ---▼ Next Page ▼---",
                      " * [{\"_id\":\"Miami\"}]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "next",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataAggregateResult" ] },
            "doc": "Fulfilled - An aggregate object with the next page of aggregate results.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 697,
              "filename": "aggregate.es6" } ],
        "docs":
          { "summary": "Retrieves the next page of aggregate results.",
            "description":
              [ "The `next()` function retrieves the next page of aggregate results.",
                "",
                " The page size is defined by the [`limit()`](#limit) function.",
                "",
                " If items are added or removed between calls to `next()` the values returned",
                " by `WixDataAggregateResult` may change." ],
            "links": [],
            "examples":
              [ { "title": "Get the next page of an aggregate result",
                  "body":
                    [ "oldResults.next()",
                      "  .then( (newResults) => {",
                      "    let items = newResults.items;",
                      "    let numItems = newResults.length;",
                      "    let hasNext = newResults.hasNext();",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of aggregate results",
                  "body":
                    [ "let results = await wixData.aggregate(\"Cities\")",
                      "  .group(\"city\")",
                      "  .limit(3)",
                      "  .run();",
                      "",
                      "console.log(results.items);",
                      "",
                      "while(results.hasNext()) {",
                      "  console.log(\"---▼ Next Page ▼---\");",
                      "  results = await results.next();",
                      "  console.log(results.items);",
                      "}",
                      "",
                      "/* Logs:",
                      " * [{\"_id\":\"San Diego\"},{\"_id\":\"Orlando\"},{\"_id\":\"San Francisco\"}]",
                      " * ---▼ Next Page ▼---",
                      " * [{\"_id\":\"Buffalo\"},{\"_id\":\"Miami\"},{\"_id\":\"Los Angeles\"}]",
                      " * ---▼ Next Page ▼---",
                      " * [{\"_id\":\"Miami\"}]",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }