{ "name": "Hooks",
  "memberOf": "wix-data",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 14,
      "filename": "hooks.es6" },
  "docs":
    { "summary": "Hooks that can be added to wix-data operations.",
      "description":
        [ "Data hooks run code before or after certain interactions with your site's",
          " collections. A data hook allows you to intercept the interaction immediately",
          " before or immediately after it occurs. The hook's code can even be used to",
          " affect the interaction itself. For example, you may want to intercept an",
          " item before it is added to your collection to perform a final validation or",
          " tweak the data that actually makes it into the collection.",
          "",
          " In general, hooks are run whether the interaction with your collection is",
          " initiated by a page element, programmatically, or when using the Data Manager.",
          " However, a Data API call from the backend code of your site may pass the",
          " optional [`WixDataOptions`](wix-data.html#WixDataOptions) object and use it",
          " to suppress hooks from being called on that particular operation.",
          "",
          " To add a hook to a collection, in the Data Manager click on the **Hooks**",
          " button and choose which hooks to add. Code for the hooks is written in",
          " the **data.js** file which resides in **Backend** section of your site.",
          " Hook functions are defined using the following pattern:",
          "",
          " ``` javascript",
          " export function <collectionName>_<hookName>(<parameters>) { }",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "afterCount",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "count",
              "type": "number",
              "doc": "The number of items the count operation has found." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "number" ] },
                "number" ],
            "doc": "The count to return to [`count()`](wix-data.WixDataQuery.html#count) instead of the original count.\n Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 42,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered after a `count()` operation.",
            "description":
              [ "The `afterCount()` hook runs when:",
                "",
                " + The [`count()`](wix-data.WixDataQuery.html#count) function is called.",
                " + The collection is viewed in the Data Manager.",
                "",
                "",
                " Return a number or a Promise that resolves to number from the `afterCount()`",
                " function. The returned number will be used as the result of the call to",
                " [`count()`](wix-data.WixDataQuery.html#count) instead of the actual count of",
                " items found in the collection. If returning a Promise, the number is used as",
                " the result, whether the Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterCount(count, context) {",
                      "  let originalCount = count;  // 5",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received count",
                      "",
                      "  return newCount;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterCount(count, context) {",
                      "  let originalCount = count;  // 5",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received count",
                      "  let newCount = originalCount + 1;",
                      "",
                      "  return newCount;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "afterGet",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The item that was retrieved from the collection." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "Object" ] },
                "Object" ],
            "doc": "The item to return to [`get()`](wix-data.html#get) instead of the retrieved item.\n Returning a rejected promise will not block the operation, but will return a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 73,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered after a `get()` operation.",
            "description":
              [ "The `afterGet()` hook runs when the [`get()`](wix-data.html#get)",
                " function is called.",
                "",
                " The hook does not run when the [`find`](wix-data.WixDataQuery.html#find)",
                " function is called or when a dataset retrieves items from the collection it",
                " is connected to.",
                "",
                " Return an object or a Promise that resolves to an object from the `afterGet()`",
                " function. The returned object will be used as the result of the call to the",
                " [`get()`](wix-data.html#get) function instead of the actual item found in the",
                " collection. If returning a Promise, the object is used as the result, whether",
                " the Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterGet(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterGet(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "  item.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "afterInsert",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The item that was inserted." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "Object" ] },
                "Object" ],
            "doc": "The item to return to [`insert()`](wix-data.html#insert) instead of the inserted item.\n Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 105,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered after an `insert()` operation.",
            "description":
              [ "The `afterInsert()` hook runs when:",
                "",
                " + The [`insert()`](wix-data.html#insert) function is called.",
                " + An action is performed on a dataset that inserts a new item into the collection.",
                " + An item is inserted using the Data Manager.",
                " + An item is imported into the collection. (Sandbox only.)",
                "",
                "",
                " Return an object or a Promise that resolves to an object from the `afterInsert()`",
                " function. The returned object will be used as the result of the call to the",
                " [`insert()`](wix-data.html#insert) function instead of the actual item inserted",
                " into the collection. If returning a Promise, the object is used as the result,",
                " whether the Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterInsert` hook is called after the [`insert()`](wix-data.html#insert)",
                " is executed, it cannot affect the item that is inserted into the collection.",
                " It can only affect the item returned by [`insert()`](wix-data.html#insert)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after an insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "  item.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "afterQuery",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "One of the items of the query result. The hook is called for each item in the results." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "Object" ] },
                "Object" ],
            "doc": "The item to return to [`find`](wix-data.WixDataQuery.html#find) instead of the item retrieved from the database.\n Returning a rejected promise will not block the operation, but will return a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 142,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered after a `find` operation, for each of the items in the query results.",
            "description":
              [ "The `afterQuery()` hook runs when:",
                "",
                " + The [`find`](wix-data.WixDataQuery.html#find) function is called.",
                " + An action is performed on a dataset that retrieves items from the collection.",
                " + The collection is viewed in the Data Manager.",
                " + An item is imported into the collection. (Sandbox only.)",
                " + An item is exported from the collection. (Sandbox only.)",
                "",
                "",
                " The hook runs once for each item in the collection.",
                "",
                " Return an object or a Promise that resolves to an object from the `afterQuery()`",
                " function. The returned object will be used as the result of the call to the",
                " [`find`](wix-data.WixDataQuery.html#find) function instead of the actual item",
                " found in the collection. If returning a Promise, the object is used as the",
                " result, whether the Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a find",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterQuery(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterQuery(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "  item.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "afterRemove",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The item that was removed." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "Object" ] },
                "Object" ],
            "doc": "The item to return to [`remove()`](wix-data.html#remove) instead of the deleted item.\n Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 179,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered after a `remove()` operation.",
            "description":
              [ "The `afterRemove()` hook runs when:",
                "",
                " + The [`remove()`](wix-data.html#remove) function is called.",
                " + An action is performed on a dataset that removes an item from the collection.",
                " + An item is deleted using the Data Manager.",
                "",
                "",
                " Return an object or a Promise that resolves to an object. The returned object",
                " will be used as the result of the call to the [`remove()`](wix-data.html#remove)",
                " function instead of the actual item removed from the collection. If returning a",
                " Promise, the object is used as the result, whether the Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterRemove()` hook is called after the [`remove()`](wix-data.html#remove)",
                " is executed, it cannot prevent the item from being removed from the collection.",
                " It can only affect the item returned by [`remove()`](wix-data.html#remove)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after a remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterRemove(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the removed item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the removed item",
                      "  item.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "afterUpdate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The updated item." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "Object" ] },
                "Object" ],
            "doc": "The item to return to [`update()`](wix-data.html#update) instead of the updated item.\n Returning a rejected promise will not block the operation, but will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 214,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered after an `update()` operation.",
            "description":
              [ "The `afterUpdate()` hook runs when:",
                "",
                " + The [`update()`](wix-data.html#update) function is called.",
                " + An action is performed on a dataset that updates an item from the collection.",
                " + An item is updated using the Data Manager.",
                "",
                "",
                " Return an object or a Promise that resolves to an object from the `afterUpdate()`",
                " function. The returned object will be used as the result of the call to the",
                " [`update()`](wix-data.html#update) function instead of the actual item updated",
                " in the collection. If returning a Promise, the object is used as the result,",
                " whether the Promise is fulfilled or rejected.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise also calls the [`onFailure()`](#onFailure) hook if it has",
                " been registered.",
                "",
                " Because the `afterUpdate` hook is called after the [`update()`](wix-data.html#update)",
                " is executed, it cannot affect the item that is being updated in the collection.",
                " It can only affect the item returned by [`update()`](wix-data.html#update)." ],
            "links": [],
            "examples":
              [ { "title": "A hook after an update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the retrieved item",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_afterUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some changes to the received item",
                      "  item.full_name = item.first_name + \" \" + item.last_name;",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "beforeCount",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "The original query as defined by [`count()`](wix-data.WixDataQuery.html#count)." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "wix-data.WixDataQuery" ] },
                "wix-data.WixDataQuery" ],
            "doc": "The `query` to be used for the [`count()`](wix-data.WixDataQuery.html#count) operation instead of the original query.\n Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 250,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered before a `count()` operation.",
            "description":
              [ "The `beforeCount()` hook runs when:",
                "",
                " + The [`count()`](wix-data.WixDataQuery.html#count) function is called.",
                " + The collection is viewed in the Data Manager.",
                "",
                "",
                " Return a query or a Promise that resolves to a query from the `beforeCount()`",
                " function. The returned query will be used as the query for the",
                " [`count()`](wix-data.WixDataQuery.html#count) operation.",
                "",
                " Often, you will modify the query that is received in the `query` parameter",
                " by calling one or more [`WixDataQuery`](wix-data.WixDataQuery.html) functions.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`count()`](wix-data.WixDataQuery.html#count)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeCount()` hook is called before [`count()`](wix-data.WixDataQuery.html#count)",
                " is executed, it can affect how items are counted or block the [`count()`](wix-data.WixDataQuery.html#count)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeCount(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the count",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeCount(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "  let newQuery = query.eq(\"status\", \"active\");",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "beforeGet",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemId",
              "type": "string",
              "doc": "The ID of the original item to be retrieved." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "string" ] },
                "string" ],
            "doc": "The ID to be used for the [`get()`](wix-data.html#get) operation instead of the original `itemId` specified by the caller.\n Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 285,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered before a `get()` operation.",
            "description":
              [ "The `beforeGet()` hook runs when the [`get()`](wix-data.html#get)",
                " function is called.",
                "",
                " The hook does not run when the [`find`](wix-data.WixDataQuery.html#find)",
                " function is called or when a dataset retrieves items from the collection it",
                " is connected to.",
                "",
                " Return a string or a Promise that resolves to a string from the `beforeGet()`",
                " function. The returned string will be used as the `itemId` parameter for the",
                " [`get()`](wix-data.html#get) operation. The item with the new `itemId` will",
                " be retrieved instead of the item with the original `itemId`.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`get()`](wix-data.html#get)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeGet()` hook is called before [`get()`](wix-data.html#get)",
                " is executed, it can affect which item is retrieved",
                " or block the [`get()`](wix-data.html#get)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeGet(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change the item to get",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the item to get",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeGet(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change the item to get",
                      "  let newItemId = \"1234\";",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "beforeInsert",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The original item to be inserted." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "Object" ] },
                "Object" ],
            "doc": "The item to be inserted instead of the original item specified by the caller.\n Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 320,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered before an `insert()` operation.",
            "description":
              [ "The `beforeInsert()` hook runs when:",
                "",
                " + The [`insert()`](wix-data.html#insert) function is called.",
                " + An action is performed on a dataset that inserts a new item into the collection.",
                " + An item is inserted using the Data Manager.",
                " + An item is imported into the collection. (Sandbox only.)",
                "",
                "",
                " The hook also runs when an action is performed on a dataset that inserts a",
                " new item into the collection that the dataset is connected to.",
                "",
                " Return an object or a Promise that resolves to an object from the `beforeInsert()`",
                " function. The returned object will be inserted into the collection instead of",
                " the original item passed to the [`insert()`](wix-data.html#insert) function.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`insert()`](wix-data.html#insert)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeInsert()` hook is called before [`insert()`](wix-data.html#insert)",
                " is executed, it can affect the item that is inserted into the collection",
                " or block the [`insert()`](wix-data.html#insert)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before an insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the item to insert",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeInsert(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "  item.title = toUpperFirst(item.title);",
                      "  item.first_name = toUpperFirst(item.first_name);",
                      "  item.last_name = toUpperFirst(item.last_name);",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "function toUpperFirst(s) {",
                      "  return s.charAt(0).toUpperCase() + s.slice(1);",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "beforeQuery",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "The original query as specified by the caller." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "wix-data.WixDataQuery" ] },
                "wix-data.WixDataQuery" ],
            "doc": "The query to use instead of the original query specified by the caller.\n Returning a rejected promise will block the operation and will return a rejected promise to the operation caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 358,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered before a `find()` operation.",
            "description":
              [ "The `beforeQuery()` hook runs when:",
                "",
                " + The [`find`](wix-data.WixDataQuery.html#find) function is called.",
                " + An action is performed on a dataset that retrieves items from the collection.",
                " + The collection is viewed in the Data Manager.",
                " + An item is imported into the collection. (Sandbox only.)",
                " + An item is exported from the collection. (Sandbox only.)",
                "",
                "",
                " The hook also runs when an action is performed on a dataset that retrieves",
                " items from the collection that the dataset is connected to.",
                "",
                " Return a query or a Promise that resolves to a query from the `beforeQuery()`",
                " function. The returned query will be used as the query for the",
                " [`find`](wix-data.WixDataQuery.html#find) operation.",
                "",
                " Often, you will modify the query that is received in the `query` parameter",
                " by calling one or more [`WixDataQuery`](wix-data.WixDataQuery.html) functions.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`find()`](wix-data.WixDataQuery.html#find)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeQuery()` hook is called before [`find()`](wix-data.WixDataQuery.html#find)",
                " is executed, it can affect the query that is used to retrieve items",
                " or block the [`find()`](wix-data.WixDataQuery.html#find)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a find",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeQuery(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the query",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeQuery(query, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received query",
                      "  let newQuery = query.eq(\"status\", \"active\");",
                      "",
                      "  return newQuery;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "beforeRemove",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemId",
              "type": "string",
              "doc": "The ID of the original item to be removed." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "string" ] },
                "string" ],
            "doc": "The ID to be used for the [`remove()`](wix-data.html#remove) instead of the original `itemId` specified by the caller.\n Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 400,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is called before a `remove()` operation.",
            "description":
              [ "The `beforeRemove()` hook runs when:",
                "",
                " + The [`remove()`](wix-data.html#remove) function is called.",
                " + An action is performed on a dataset that removes an item from the collection.",
                " + An item is deleted using the Data Manager.",
                "",
                "",
                " The hook also runs when an action is performed on a dataset that removes",
                " an item from the collection that the dataset is connected to.",
                "",
                " Return a string or a Promise that resolves to a string from the `beforeRemove()`",
                " function. The returned string will be used as the `itemId` parameter for the",
                " [`remove()`](wix-data.html#remove) operation. The item with the new `itemId`",
                " will be removed instead of the item with the original `itemId`.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`remove()`](wix-data.html#remove)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeRemove()` hook is called before [`remove()`](wix-data.html#remove)",
                " is executed, it can affect the item that is removed from the collection",
                " or block the [`remove()`](wix-data.html#remove)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before a remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeRemove(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change to the item to remove",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the item to remove",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeRemove(itemId, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // change to the item to remove",
                      "  let newItemId = \"1234\";",
                      "",
                      "  return newItemId;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "beforeUpdate",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "item",
              "type": "Object",
              "doc": "The original item to be updated." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              [ { "name": "Promise",
                  "typeParams":
                    [ "Object" ] },
                "Object" ],
            "doc": "The item to be updated instead of the original item specified by the caller.\n Returning a rejected promise will block the operation and will return a rejected promise to the caller as well as trigger the [`onFailure()`](#onFailure) hook." },
        "locations":
          [ { "lineno": 438,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered before an `update()` operation.",
            "description":
              [ "The `beforeUpdate()` hook runs when:",
                "",
                " + The [`update()`](wix-data.html#update) function is called.",
                " + An action is performed on a dataset that updates an item from the collection.",
                " + An item is updated using the Data Manager.",
                "",
                "",
                " The hook also runs when an action is performed on a dataset that updates",
                " an item from the collection that the dataset is connected to.",
                "",
                " Return an object or a Promise that resolves to an object from the `beforeUpdate()`",
                " function. The returned object will be updated in the collection instead of",
                " the original item passed to the [`update()`](wix-data.html#update) function.",
                "",
                " If the returned value is of the wrong type, the value is ignored.",
                "",
                " A rejected Promise blocks the call to [`update()`](wix-data.html#update)",
                " and also calls the [`onFailure()`](#onFailure) hook if it has been registered.",
                "",
                " Because the `beforeUpdate()` hook is called before the [`update()`](wix-data.html#update)",
                " is executed, it can affect the item that is updated in the collection",
                " or block the [`update()`](wix-data.html#update)." ],
            "links": [],
            "examples":
              [ { "title": "A hook before an update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Change the item to update",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_beforeUpdate(item, context) {",
                      "  let hookContext = context;  // see below",
                      "",
                      "  // some change to the received item",
                      "  item.title = toUpperFirst(item.title);",
                      "  item.first_name = toUpperFirst(item.first_name);",
                      "  item.last_name = toUpperFirst(item.last_name);",
                      "",
                      "  return item;",
                      "}",
                      "",
                      "function toUpperFirst(s) {",
                      "  return s.charAt(0).toUpperCase() + s.slice(1);",
                      "}",
                      "",
                      "/*",
                      " * hookContext:",
                      " *",
                      " * {",
                      " *   \"collectionName\": \"myCollection\",",
                      " *   \"userId\":         \"f45jf8d2-grkj-2opd-4ovk-9rfj4wo5tvj3\",",
                      " *   \"userRole\":       \"siteOwner\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onFailure",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "error",
              "type": "Error",
              "doc": "The error that caused the failure." },
            { "name": "context",
              "type": "wix-data.Hooks.HookContext",
              "doc": "Contextual information about the hook." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - Returning a fulfilled promise will result in a fulfilled data operation with the provided result.\nRejected - Returning a rejected promise will result in returning a rejected promise to the caller of the data operation." },
        "locations":
          [ { "lineno": 475,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "A hook that is triggered on any error or rejected Promise from any of the wix-data operations.",
            "description":
              [ "The `onFailure()` hook is triggered whenever a wix-data operation or hook returns a",
                "rejected Promise or an error." ],
            "links": [],
            "examples":
              [ { "title": "A hook when a failure occurs",
                  "body":
                    [ "// In data.js",
                      "",
                      "export function myCollection_onFailure(error, context) {",
                      "  let hookError = error;  // see below",
                      "",
                      "  // handle error",
                      "",
                      "  return ret;",
                      "}",
                      "",
                      "/*",
                      " * hookError:",
                      " *",
                      " * {",
                      " *   \"message\": \"An item with _id [1234] already exists.\",",
                      " *   \"code\":    -409",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "HookContext",
        "locations":
          [ { "lineno": 1,
              "filename": "hooks.es6" } ],
        "docs":
          { "summary": "An object that contains contextual information about the hook being called.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "collectionName",
              "type": "string",
              "doc": "The name of the collection the hook affects." },
            { "name": "userId",
              "type": "string",
              "doc": "The current site user id. If no user is logged in to the site it may be null." },
            { "name": "userRole",
              "type": "string",
              "doc": "The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`." },
            { "name": "currentItem",
              "type": "Object",
              "doc": "The item stored in the database before an `update` or `delete` operation.\nWill be `undefined` for all other operations." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  },
  "relatedContent":
    [ { "icon": "example",
        "text": "Prevent Database Duplicates",
        "url": "https://www.wix.com/code/home/forum/wix-tips-and-updates/example-no-database-duplicates" },
      { "icon": "article",
        "text": "About Data Hooks",
        "url": "https://support.wix.com/en/article/wix-code-about-data-hooks" },
      { "icon": "article",
        "text": "Using Data Hooks",
        "url": "https://support.wix.com/en/article/wix-code-how-to-use-data-hooks" },
      { "icon": "article",
        "text": "Processing User Input Before It's Stored in a Collection with Data Hooks",
        "url": "https://support.wix.com/en/article/wix-code-tutorial-processing-user-input-before-it-is-stored-in-a-collection-with-data-hooks" } ],
  "FAQs":
    [ { "title": "What is a hook?",
        "markdown": "Data hooks run code before or after certain interactions with your site's collections. A data hook allows you to intercept the interaction immediately before or immediately after it occurs.\n\nFor example, you may want to intercept an item before it is added to your collection to perform a final validation or tweak the data that actually makes it into the collection." },
      { "title": "How do I add a hook to a collection?",
        "markdown": "In the [Data Manager](https://support.wix.com/en/article/accessing-your-sandbox-and-live-data), click the **Hooks** button and choose which hooks to add. Code for the hooks is written in the **data.js** file which resides in **Backend** section of your site. Hook functions are defined using the following pattern:\n\n`export function <collectionName>_<hookName>(<parameters>) { }`\n\n[Learn more](https://support.wix.com/en/article/wix-code-using-data-hooks)." },
      { "title": "Can I use a hook to cancel a data operation?",
        "markdown": "Yes. You can return a rejected promise from a \"before\" hook to cancel the data operation." } ] }