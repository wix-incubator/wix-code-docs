{ "name": "WixDataFilter",
  "memberOf": "wix-data",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 6,
      "filename": "filterMixin.es6" },
  "docs":
    { "summary": "Provides functionality for refining a filter.",
      "description":
        [ "The `WixDataFilter` functions enable you to filter and control which results are returned by a dataset when the",
          "[`setFilter()`](wix-dataset.Dataset.html#setFilter)  function is applied. ",
          "",
          "A filter is used to control which data is contained in a dataset on your page.",
          "",
          "Typically, you  build a filter using the [`filter()`](wix-data.html#filter) function, refine the filter with `WixDataFilter` functions, and then apply the filter to the dataset using the [`setFilter()`](wix-dataset.Dataset.html#setFilter) function.",
          "",
          "For example, the following code shows a filter on a dataset that is connected to a collection containing customer data. The filter includes only customers over the age of 20:",
          "",
          "```javascript",
          " import wixData from 'wix-data';",
          "",
          " const customerFilter = wixData.filter()",
          "   .gt(\"age\", 20);",
          "",
          " $w(\"#myDataset\").setFilter(customerFilter);",
          "",
          "",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "and",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as an `and` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 518,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Adds an `and` condition to the query or filter.",
            "description":
              [ "The `and()` function adds an `and` condition to a `WixDataQuery` or `WixDataFilter`.",
                " A query or filter with an `and` returns all the items that match the query",
                " or filter as defined up to the `and` function and also match the query or",
                " filter passed to the `and` function.",
                "",
                " Note that when chaining multiple `WixDataFilter` functions to a query an `add` condition is assumed.",
                " In such cases, you do not need to add a call to the `and()` function.",
                " For example, this query returns results where status is active **and** age is",
                " greater than 25.",
                "",
                " ```javascript",
                " wixData.query(\"myCollection\")",
                "   .eq(\"status\", \"active\")",
                "   .gt(\"age\", 25);",
                " ```",
                "",
                " The `and()` function, is needed when perfoming compound queries. For",
                " example, the final query in this set of queries returns results where status",
                " is either pending or rejected **and** age is either less than 25 or greater than 65.",
                "",
                " ```javascript",
                " let statusQuery = wixData.query(\"myCollection\")",
                "   .eq(\"status\", \"pending\")",
                "   .or(",
                "     wixData.query(\"myCollection\")",
                "       .eq(\"status\", \"rejected\")",
                "   );",
                "",
                " let ageQuery = wixData.query(\"myCollection\")",
                "   .lt(\"age\", 25)",
                "   .or(",
                "     wixData.query(\"myCollection\")",
                "       .gt(\"age\", 65)",
                "   );",
                "",
                " let statusAndAgeQuery = statusQuery.and(ageQuery);",
                " ```",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `and` function must be the same.",
                "",
                " The 'and()' function is designed to work with 2 or more queries or filters. ",
                " If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an and to a query",
                  "body":
                    [ "let newQuery = query1.and(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let statusQuery = wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"pending\")",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .eq(\"status\", \"rejected\")",
                      "  );",
                      "",
                      "let ageQuery = wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .gt(\"age\", 65)",
                      "  );",
                      "",
                      "statusQuery.and(ageQuery)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "",
                      "  /*",
                      "   * For example, results contain items where age is:",
                      "   * 18",
                      "   * 21",
                      "   * 67",
                      "   * 90",
                      "   *",
                      "   * But not items where age is:",
                      "   * 25",
                      "   * 30",
                      "   * 40",
                      "   * 65",
                      "   */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "between",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `rangeStart` and `rangeEnd`." },
            { "name": "rangeStart",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The beginning value of the range to match against." },
            { "name": "rangeEnd",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The ending value of the range to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 631,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property is greater than or equal",
                " to `rangeStart` and less than `rangeEnd`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so",
                "   + `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.",
                "   + `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not." ],
            "links": [],
            "examples":
              [ { "title": "Add a between filter to a query",
                  "body":
                    [ "let newQuery = query.between(\"age\", 25, 65);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a between filter and other filters, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "contains",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for inside the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 375,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property contains the",
                " specified `string`. Matching with `contains()` is not case sensitive, so",
                " `\"text\"` does contain `\"Tex\"`.",
                "",
                " You can use `contains()` with a property whose value is a String or a Reference.",
                " For properties of type reference it is recommended that you use the [`eq()`](#eq)",
                " function instead of `contains()`. With properties that are References, `contains()`",
                " matches by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a contains filter to a query",
                  "body":
                    [ "let newQuery = query.contains(\"description\", \"some words\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "endsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 348,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property ends with the specified",
                "`string`. Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends",
                " with `\"ext\"`.",
                "",
                " You can only use `endsWith()` with a property whose value is a String or Reference.",
                " When using a Reference, `endsWith()` matches by the ID of the referenced item as Strings." ],
            "links": [],
            "examples":
              [ { "title": "Add an ends with filter to a query",
                  "body":
                    [ "let newQuery = query.endsWith(\"last_name\", \"z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 44,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property equals the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `eq()` includes items",
                " in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "let newQuery = query.eq(\"status\", \"active\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 102,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property is greater than or",
                " equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),",
                "   but `\"ABC\"` is not greater than or equal to `\"abc\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.ge(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "lineno": 142,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `WixDataQuery` or `WixDataFilter` to only match",
                " items where the value of the specified property is greater than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than filter to a query",
                  "body":
                    [ "let newQuery = query.gt(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasAll",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  { "name": "Array",
                    "typeParams":
                      [ "*" ] } ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 445,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.",
            "description":
              [ "The `hasAll()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals all of",
                " the specified values.",
                "",
                " Matching strings with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the specified property is an array, `hasAll()` will match",
                " if there is a match in the elements of that array for all of the specified",
                " values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has all filter to a query",
                  "body":
                    [ "let newQuery = query.hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasAll(\"colors\", \"red\", \"yellow\", \"blue\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  { "name": "Array",
                    "typeParams":
                      [ "*" ] } ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 404,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals any of",
                " the specified values.",
                "",
                " Matching strings with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the specified property is an array, `hasSome()` will match",
                " if any of the elements of that array match any of the specified values.",
                "",
                " If the specified property contains multiple references, pass item IDs in the",
                " `value` property. In such a case, `hasSome()` will match if any of the",
                " multiple references match any of the specified ID values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has some filter to a query",
                  "body":
                    [ "let newQuery = query.hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasSome(\"colors\", \"red\", \"yellow\", \"blue\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Add a has some filter on a multiple reference field to a query",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"movies\")",
                      "  .hasSome(\"actors\", [\"1357\", \"2468\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example gets the items from the **movies** collection that have a\n reference in the **authors** field to an item with an ID that is either\n **1357** or **2468**." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isEmpty",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The the property in which to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 288,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property does not exist or does not have any value.",
            "description":
              [ "The `isEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is `null` or `undefined` or the property does",
                " not exist.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isEmpty(\"bio\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isNotEmpty",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property in which to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 256,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property has any value.",
            "description":
              [ "The `isNotEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is not `null` or `undefined`.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isNotEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isNotEmpty(\"bio\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 179,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `WixDataQuery` or `WixDataFilter` to only match",
                " items where the value of the specified property is less than or equal to the",
                " specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),",
                "   but `\"abc\"` is not less than or equal to `\"ABC\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.le(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "lineno": 219,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `WixDataQuery` or `WixDataFilter` to only match",
                " items where the value of the specified property is less than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a query",
                  "body":
                    [ "let newQuery = query.lt(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 73,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property does not equal the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type is considered not equal to the same number stored as a Number type.",
                "",
                " Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `ne()` includes items",
                " in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a query",
                  "body":
                    [ "let newQuery = query.ne(\"status\", \"active\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "not",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as a `not` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 589,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Adds a `not` condition to the query or filter.",
            "description":
              [ "The `not()` function adds a `not` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter with a `not`",
                " returns all the items that match the query or filter as defined up to the `not`",
                " function, but don't match the query or filter passed to the `not` function.",
                "",
                " If the query or filter only contains a `not()` function, it returns all the items",
                " that don't match the query defined by the `not` method.",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `not` function must be the same." ],
            "links": [],
            "examples":
              [ { "title": "Add a not to a query",
                  "body":
                    [ "let newQuery = query1.not(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .not(",
                      "    wixData.query(\"myCollection\")",
                      "      .eq(\"access_type\", \"restricted\")",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as an `or` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 480,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Adds an `or` condition to the query or filter.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter",
                " with an `or` returns all the items that match the query or filter as defined up to",
                " the `or` function, the items that match the query or filter passed to the `or`",
                " function, and the items that match both.",
                "",
                " The collections used by both the initial query and the query passed",
                " to the `or` function must be the same.",
                "",
                " The 'or()' function is designed to work with 2 or more queries or filters. ",
                " If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an or to a query",
                  "body":
                    [ "let newQuery = query1.or(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .gt(\"age\", 65)",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "",
                      "  /*",
                      "   * For example, results contain items where age is:",
                      "   * 18",
                      "   * 21",
                      "   * 67",
                      "   * 90",
                      "   *",
                      "   * But not items where age is:",
                      "   * 25",
                      "   * 30",
                      "   * 40",
                      "   * 65",
                      "   */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 321,
              "filename": "filterMixin.es6" } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property starts with the",
                " defined `string`. Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts",
                " with `\"tex\"`.",
                "",
                " You can only use `startsWith()` with a property whose value is a String or Reference.",
                " When using a Reference, `startsWith()` matches by the ID of the referenced item as Strings." ],
            "links": [],
            "examples":
              [ { "title": "Add a starts with filter to a query",
                  "body":
                    [ "let newQuery = query.startsWith(\"last_name\", \"M\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "notes":
        [ "The functions below are common to both queries and filters.\nThe examples given are for queries but also work for filters." ] } }