{ "name": "EventsQueryBuilder",
  "memberOf": "wix-events-backend.WixEvents",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" },
  "docs":
    { "summary": "Contains functionality for refining a Wix events query.",
      "description":
        [ "The `EventsQueryBuilder` functions enable you to run, sort, filter, and control",
          "which results a query returns.",
          "",
          "Typically, you build a query using the `queryEvents() function,",
          "refine the query by chaining `EventsQueryBuilder` functions, and then execute the",
          "query by chaining the [`find()`](#find) function.",
          "",
          "For example, the following code returns the first 5 upcoming Wix events created by",
          "a given event manager, including scheduled events and events that ",
          "have started. The events are listed in ascending",
          "order by the event's start date.",
          "",
          "```javascript",
          "import wixEventsBackend from 'wix-events-backend';",
          "",
          "wixEventsBackend.queryEvents()",
          "  .eq(\"createdBy\", \"4c47c608-cfa8-4037-93ac-738f09560ed3\")",
          "  .hasSome(\"status\", [\"SCHEDULED\", \"STARTED\"])",
          "  .ascending(\"scheduling.startDate\")",
          "  .limit(5)",
          "  .find()",
          "  .then( (results) => {",
          "    console.log(results.items);",
          "  } );",
          "```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "and",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
              "doc": "Contains functionality for refining a Wix events query." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 356,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Adds an `and` condition to the query.",
            "description":
              [ "The `and()` function adds an `and` condition to an `EventsQueryBuilder`.",
                "A query with an `and` returns all the items that match the query",
                "as defined up to the `and` function and also match the query or",
                "filter passed to the `and` function.",
                "",
                "Note that when chaining multiple `EventsQueryBuilder` functions to a query an `add` condition is assumed.",
                "In such cases, you do not need to add a call to the `and()` function.",
                "For example, this query returns results where status is active **and** age is",
                "greater than 25.",
                "",
                "```javascript",
                "wixEventsBackend.queryEvents()",
                ".eq(\"status\", \"active\")",
                ".gt(\"age\", 25);",
                "```",
                "",
                "The `and()` function is needed when performing compound queries. For",
                "example, the final query in this set of queries returns results where status",
                "is either pending or rejected **and** age is either less than 25 or greater than 65.",
                "",
                "```javascript",
                "let statusQuery = wixEventsBackend.queryEvents()",
                ".eq(\"status\", \"pending\")",
                ".or(",
                "wixEventsBackend.queryEvents()",
                ".eq(\"status\", \"rejected\")",
                ");",
                "",
                "let ageQuery = wixEventsBackend.queryEvents()",
                ".lt(\"age\", 25)",
                ".or(",
                "wixEventsBackend.queryEvents()",
                ".gt(\"age\", 65)",
                ");",
                "",
                "let statusAndAgeQuery = statusQuery.and(ageQuery);",
                "```",
                "",
                "The `and()` function is designed to work with 2 or more queries or filters.",
                "If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an `and` filter to a query",
                  "body":
                    [ "const newQuery = query1.and(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a compound query, add an `and` filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "const now = new Date();",
                      "const date = new Date(\"2020-11-01\");",
                      "",
                      "const slugPlanQuery = ",
                      "  wixEventsBackend.queryEvents()",
                      "    .startsWith(\"slug\", \"silver\")",
                      "    .or(",
                      "      wixEventsBackend.queryEvents()",
                      "        .startsWith(\"slug\", \"gold\")",
                      "    );",
                      "",
                      "const datePlanQuery = ",
                      "  wixEventsBackend.queryEvents()",
                      "    .between(\"_createdDate\", date, now);",
                      "  ",
                      "const typeAndDateQuery = slugPlanQuery.and(datePlanQuery);",
                      "",
                      "return wixEventsBackend.queryEvents()",
                      "  .ne(\"primary\", true).and(typeAndDateQuery)",
                      "  .find()",
                      "  .then( (publicPlans) => {",
                      "    if(events.items.length > 0) {",
                      "      const items = events.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = events.totalCount;",
                      "      const pageSize = events.pageSize;",
                      "      const currentPage = events.currentPage;",
                      "      const totalPages = events.totalPages;",
                      "      const hasNext = events.hasNext();",
                      "      const hasPrev = events.hasPrev();",
                      "      const length = events.length;",
                      "      const query = events.query;",
                      "    } else {",
                      "      // handle case where no matching public plans found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    const queryError = error;",
                      "  } );",
                      "",
                      "/*",
                      " * The results contain public",
                      " * plans with slugs that start with ",
                      " * \"gold\" or \"silver\":",
                      " *",
                      " * gold-vip",
                      " * silver",
                      " * silver-vip",
                      " * ",
                      " * But not the primary public plan (slug = gold)",
                      " * ",
                      " * And no public plans created earlier than ",
                      " * November 11, 2020",
                      " */" ],
                  "extra":
                    { "description": "The final query, `typeAndDateQuery`, in this set of queries returns results where a plan\n is created after a certain date (November 11, 2020), **and** the plan is either \n a \"gold\" or a \"silver\" membership plan, as defined in the plan's slug. Also, \n when combined with the `ne` filter, the query also excludes the primary plan." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ascending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `title`\n+ `slug`\n+ `scheduling.startTime`\n+ `scheduling.endTime`\n+ `_createdDate`\n+ `_updatedDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 451,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines an `EventsQueryBuilder` to sort in ascending order of",
                "the specified properties. If you specify more than one property,",
                "`ascending()` sorts the results in ascending order by each property in the",
                "order they are listed.",
                "",
                "You can sort the following types:",
                "",
                "+ Date: Sorts by date and time.",
                "+ String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                "",
                "If a property contains a number as a String, that value will be sorted",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an `ascending` sort to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().ascending(\"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `ascending` sort, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .ascending(\"_createdDate\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "between",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "rangeStart",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." },
            { "name": "rangeEnd",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 186,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `EventsQueryBuilder` to only",
                "match items where the value of the specified property is greater than or equal",
                "to `rangeStart` and less than `rangeEnd`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically, so",
                "+ `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.",
                "+ `\"A\"`, `\"M\"`, `\"Z\"`, and `\"a\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "contains",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `title`\n+ `status`\n+ `slug`" },
            { "name": "value",
              "type": "string",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 284,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines an `EventsQueryBuilder` to only",
                "match items where the value of the specified property contains the specified string.",
                "Matching with `contains()` is not case sensitive, so `\"TEXT\"` does contain `\"text\"`.",
                "",
                "You can only use `contains()` with a property whose value is a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a 'contains' filter to a query",
                  "body":
                    [ "const newQuery = wixEventsBackend.queryEvents().contains(\"slug\", \"free\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a 'contains' filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .contains(\"slug\", \"free\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.\n\nSupported properties:\n+ `title`\n+ `slug`\n+ `scheduling.startTime`\n+ `scheduling.endTime`\n+ `_createdDate`\n+ `_updatedDate`",
              "spread": true } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 482,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Adds a sort to a query, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines an `EventsQueryBuilder` to sort in descending order of",
                "the specified properties. If you specify more than one property,",
                "`descending()` sorts the results in descending order by each property in the",
                "order they are listed.",
                "",
                "You can sort the following types:",
                "",
                "+ Date: Sorts by date and time.",
                "+ String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                "",
                "If a property contains a number as a String, that value will be sorted",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add a `descending` sort to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().descending(\"_createdDate\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `descending` sort, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .descending(\"_createdDate\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "endsWith",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "string",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 254,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `EventsQueryBuilder` to only",
                "match items where the value of the specified property ends with a specified string.",
                "Matching with `endsWith()` is not case sensitive, so `\"TEXT\"` ends with `\"text\"`.",
                "",
                "You can only use `endsWith()` with a property whose value is a String." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_id`\n+ `title`\n+ `createdBy`\n+ `status`\n+ `slug`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 32,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines an `EventsQueryBuilder` to only",
                "match items where the value of the specified property equals the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "Matching strings with `eq()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                "If the value of the `propertyName` property is an Array, `eq()` includes items",
                "in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an \"equals\" filter to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().eq(\"primary\", true);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an \"equals\" filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .eq(\"primary\", false)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-events-backend.WixEvents.QueryOptions",
              "doc": "The `options` parameter is an optional parameter that can be used when calling the query [`find()`](#find) function." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-events-backend.WixEvents.EventsQueryResult" ] },
            "doc": "Fulfilled - The results of a Wix events query, containing the retrieved items.\nWhen you execute a query with the [`find()`](wix-events-backend.EventsQueryBuilder.html#find)\nfunction, it returns a Promise that resolves to an `EventsQueryResult` object.\nThis object contains the items that match the query, information about the\nquery itself, and functions for paging through the query results.\nRejected - Error that caused the query to fail." },
        "locations":
          [ { "lineno": 549,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Returns the items that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                "by the query and some information about the results. The Promise is",
                "rejected if `find()` is called with incorrect permissions or if any of the",
                "functions used to refine the query are invalid." ],
            "links": [],
            "examples":
              [ { "title": "Perform a find on a query",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 114,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines an `EventsQueryBuilder` to only",
                "match items where the value of the specified property is greater than or equal to the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically,",
                "`\"abc\"` is greater than or equal to `\"ABC\"` (because of the greater than),",
                "but `\"ABC\"` is not greater than or equal to `\"abc\"`" ],
            "links": [],
            "examples":
              [ { "title": "Add a \"greater than or equals\" filter to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().ge(\"_updatedDate\", \"2020-04-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"greater than or equals\" filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .ge(\"_updatedDate\", \"2020-04-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 88,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines an `EventsQueryBuilder` to only",
                "match items where the value of the specified property is greater than the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"greater than\" filter to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().gt(\"_updatedDate\",\"2021-01-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"greater than\" filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .gt(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasAll",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 308,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains all of the specified values.",
            "description":
              [ "The `hasAll()` function refines a `EventsQueryBuilder` to only",
                "match items where the values of the array of the specified property equal all of",
                "the specified values.",
                "",
                "Matching with `hasAll()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_id`\n+ `title`\n+ `createdBy`\n+ `status`\n+ `slug`" },
            { "name": "values",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 305,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value contains any of the specified values.",
            "description":
              [ "The `hasSome()` function refines an `EventsQueryBuilder` to only",
                "match items where any of the values of the array of the specified property equal any of",
                "the specified values.",
                "",
                "Matching with `hasSome()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"has some\" filter to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents()",
                      "  .hasSome(\"_id\", [",
                      "    \"001c0674-d7c9-4c77-acb5-b492b427b201\", ",
                      "    \"003d0674-d7c9-4d88-acb5-b492b427b302\",",
                      "    \"011d0123-d7c9-5e44-acb5-d300a123b321\"",
                      "  ]",
                      ");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"has some\" filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .hasSome(\"_id\", [",
                      "    \"001c0674-d7c9-4c77-acb5-b492b427b201\", ",
                      "    \"003d0674-d7c9-4d88-acb5-b492b427b302\",",
                      "    \"011d0123-d7c9-5e44-acb5-d300a123b321\"",
                      "  ])",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "in",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ { "name": "Array",
                    "typeParams":
                      [ "string" ] },
                  { "name": "Array",
                    "typeParams":
                      [ "number" ] } ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 322,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value equals any of the specified values.",
            "description":
              [ "The `in()` function refines a `EventsQueryBuilder` to only",
                "match documents where the value of the specified field equals any of",
                "the specified values.",
                "",
                "Matching with `in()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isEmpty",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 214,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property does not exist or does not have any value.",
            "description":
              [ "The `isEmpty()` function refines a `EventsQueryBuilder` to only",
                "match items where the value of the specified property is `null` or `undefined` or the property does not exist.",
                "",
                "If the property contains any value at all for a given item, including the",
                "empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isNotEmpty",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 227,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property has any value.",
            "description":
              [ "The `isNotEmpty()` function refines a `EventsQueryBuilder` to only",
                "match items where the value of the specified property is not `null` or `undefined`.",
                "",
                "If the property contains any value at all for a given item, including the",
                "empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 168,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines an `EventsQueryBuilder` to only",
                "match items where the value of the specified property is less than or equal to the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically,",
                "so `\"ABC\"` is less than or equal to `\"abc\"` (because of the less than),",
                "but `\"abc\"` is not less than or equal to `\"ABC\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"less than or equals\" filter to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().le(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"less than or equals\" filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .le(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "string",
              "doc": "limit The number of items to return, which is also the [`pageSize`](wix-events-backend.EventsQueryResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 513,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                "page. Only one page of results is retrieved at a time. The [`next()`](wix-events-backend.EventsQueryResult.html#next)",
                "and [`prev()`](wix-events-backend.EventsQueryResult.html#prev) functions are used to",
                "navigate the pages of a query result.",
                "",
                "By default, `limit` is set to `50`.",
                "",
                "The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a limit, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .limit(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 142,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines an `EventsQueryBuilder` to only",
                "match items where the value of the specified property is less than the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "If a property contains a number as a String, that value will be compared",
                "alphabetically and not numerically. Items that do not have a value for the",
                "specified property are ranked lowest.",
                "",
                "The following types of properties can be compared:",
                "",
                "+ Number: Compares numerically.",
                "+ Date: Compares JavaScript Date objects.",
                "+ String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"less than\" filter to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().lt(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"less than\" filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .lt(\"_updatedDate\", \"2021-01-27T10:00:00.000Z\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`.\n\nSupported properties:\n+ `_id`\n+ `title`\n+ `createdBy`\n+ `status`\n+ `slug`" },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 60,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines an `EventsQueryBuilder` to only",
                "match items where the value of the specified property does not equal the specified `value`.",
                "",
                "It only matches values of the same type. For example, a number value stored",
                "as a String type does not match the same number stored as a Number type.",
                "",
                "Matching strings with `ne()` is case sensitive, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                "If the value of the `propertyName` property is an Array, `ne()` includes items",
                "in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a \"not equals\" filter to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().ne(\"primary\", false);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a \"not equals\" filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .ne(\"primary\", false)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "not",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
              "doc": "Contains functionality for refining a Wix events query." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 433,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Adds an `not` condition to the query.",
            "description":
              [ "The `not()` function adds a `not` condition to an `EventsQueryBuilder`. A query",
                "with a `not` returns all the items that match the query as defined up to",
                "the `not` function,  but don't match the query passed to the `not` function.",
                "",
                "If the query only contains a `not()` function, it returns all the items",
                "that don't match the query defined by the `not` method." ],
            "links": [],
            "examples":
              [ { "title": "Add a `not` filter to a query",
                  "body":
                    [ "const newQuery = query1.not(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a `not` filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .not(wixEventsBackend.queryEvents().startsWith(\"slug\", \"silver\"))",
                      "  .find()",
                      "  .then((publicPlans) => {",
                      "    if (events.items.length > 0) {",
                      "      const items = events.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = events.totalCount;",
                      "      const pageSize = events.pageSize;",
                      "      const currentPage = events.currentPage;",
                      "      const totalPages = events.totalPages;",
                      "      const hasNext = events.hasNext();",
                      "      const hasPrev = events.hasPrev();",
                      "      const length = events.length;",
                      "      const query = events.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    { "description": "The results for this query do not contain any Silver public plans. This is determined\n by looking for slugs that start with the string \"silver.\"" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
              "doc": "Contains functionality for refining a Wix events query." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 410,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Adds an `or` condition to the query.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to an `EventsQueryBuilder`. A query",
                "with an `or` returns all the items that match the query as defined up to",
                "the `or` function, the items that match the query passed to the `or`",
                "function, and the items that match both.",
                "",
                "The `or()` function is designed to work with 2 or more queries.",
                "If you use it on its own, it will return all the items in a collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an `or` filter to a query",
                  "body":
                    [ "const newQuery = query1.or(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an `or` filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "const date = new Date(\"2020-11-01\");",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .gt(\"_createdDate\", date)",
                      "  .or(wixEventsBackend.queryEvents().endsWith(\"slug\", \"vip\"))",
                      "  .find()",
                      "  .then((publicPlans) => {",
                      "    if (events.items.length > 0) {",
                      "      const items = events.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = events.totalCount;",
                      "      const pageSize = events.pageSize;",
                      "      const currentPage = events.currentPage;",
                      "      const totalPages = events.totalPages;",
                      "      const hasNext = events.hasNext();",
                      "      const hasPrev = events.hasPrev();",
                      "      const length = events.length;",
                      "      const query = events.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    { "description": "This query shows public VIP plans that were either created after a certain date. It is assumed that the slug of all VIP public plans ends with the characters \"vip\"." } },
                { "title": "Create a compound query, add an `or` filter, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "const now = new Date();",
                      "const date = new Date(\"2020-11-01\");",
                      "",
                      "const slugPlanQuery = ",
                      "  wixEventsBackend.queryEvents()",
                      "    .startsWith(\"slug\", \"silver\")",
                      "    .or(",
                      "      wixEventsBackend.queryEvents()",
                      "        .startsWith(\"slug\", \"gold\")",
                      "    );",
                      "",
                      "const datePlanQuery = ",
                      "  wixEventsBackend.queryEvents()",
                      "    .between(\"_createdDate\", date, now);",
                      "  ",
                      "const typeAndDateQuery = slugPlanQuery.and(datePlanQuery);",
                      "",
                      "return wixEventsBackend.queryEvents()",
                      "  .eq(\"primary\", true).or(typeAndDateQuery)",
                      "  .find()",
                      "  .then( (publicPlans) => {",
                      "    if(events.items.length > 0) {",
                      "      const items = events.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = events.totalCount;",
                      "      const pageSize = events.pageSize;",
                      "      const currentPage = events.currentPage;",
                      "      const totalPages = events.totalPages;",
                      "      const hasNext = events.hasNext();",
                      "      const hasPrev = events.hasPrev();",
                      "      const length = events.length;",
                      "      const query = events.query;",
                      "    } else {",
                      "      // handle case where no matching public plans found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    const queryError = error;",
                      "  } );",
                      "",
                      "/*",
                      " * The results contain public",
                      " * plans with slugs that start with ",
                      " * \"gold\" or \"silver\":",
                      " *",
                      " * gold      The primary public plan is included",
                      " * gold-vip",
                      " * silver",
                      " * silver-vip",
                      " * ",
                      " * And no public plans created earlier than ",
                      " * November 11, 2020",
                      " */" ],
                  "extra":
                    { "description": "The final query, `typeAndDateQuery`, in this set of queries returns results where a plan\n is created after a certain date (November 11, 2020), **and** the plan is either \n a \"gold\" or a \"silver\" membership plan, as defined in the plan's slug. Also, \n when combined with the `eq` filter, the query also includes the primary plan." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "string",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 531,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the query",
                "results before returning new query results.",
                "",
                "For example, if you query a collection and 50 items match your query, but",
                "you set `skip` to 10, the results returned will skip the first 10 items",
                "that match and return the 11th through 50th items.",
                "",
                "By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "const query = wixEventsBackend.queryEvents().skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import { wixEvents } from 'wix-events-backend';",
                      "",
                      "// ...",
                      "",
                      "wixEventsBackend.queryEvents()",
                      "  .skip(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if (results.items.length > 0) {",
                      "      const items = results.items;",
                      "      const firstItem = items[0];",
                      "      const totalCount = results.totalCount;",
                      "      const pageSize = results.pageSize;",
                      "      const currentPage = results.currentPage;",
                      "      const totalPages = results.totalPages;",
                      "      const hasNext = results.hasNext();",
                      "      const hasPrev = results.hasPrev();",
                      "      const length = results.length;",
                      "      const query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    const queryError = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "string",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-events-backend.WixEvents.EventsQueryBuilder",
            "doc": "Contains functionality for refining a Wix events query." },
        "locations":
          [ { "lineno": 240,
              "filename": "wix_events_EventManagement_QueryV2_queryEvents.js" } ],
        "docs":
          { "summary": "Refines a query to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `EventsQueryBuilder` to only",
                "match items where the value of the specified property starts with a specified string.",
                "Matching with `startsWith()` is not case sensitive, so `\"TEXT\"` starts with `\"text\"`.",
                "",
                "You can only use `startsWith()` with a property whose value is a String." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }